<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://blog.janestreet.com/feed.xml</id><title type="text">janestreet</title><updated>2023-05-02T14:42:52-00:00</updated><entry><link href="https://blog.janestreet.com/building-reproducible-python-environments-with-xars/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Our traders and researchers love Python for its agility and for its huge
open-source ecosystem, especially when it comes to machine learning. But
the heavy use of notebooks can make it difficult to support. Notebooks
have a very different lifecycle than regular code, and aren&amp;rsquo;t always
rigorously version controlled. And while most of our code (much of it
written in OCaml) lives in a monorepo, putting all notebooks there is
difficult; many notebooks end up being stored all over the place.&lt;/p&gt;

</content><id>https://blog.janestreet.com/building-reproducible-python-environments-with-xars/</id><title type="text">Building reproducible Python environments with XARs</title><updated>2023-04-14T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/the-joy-of-expect-tests/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street we use a pattern/library called &amp;ldquo;expect tests&amp;rdquo; that
makes test-writing feel like a REPL session, or like exploratory
programming in a Jupyter notebook&amp;mdash;with feedback cycles so fast and
joyful that it feels almost tactile. Having used them for some time now
this is the only way I&amp;rsquo;d ever want to write tests.&lt;/p&gt;

</content><id>https://blog.janestreet.com/the-joy-of-expect-tests/</id><title type="text">What if writing tests was a joyful experience?</title><updated>2023-01-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/zero-knowledge-fpgas-hardcaml/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In 2022 a consortium of companies ran an international competition,
called the &lt;a href=&quot;https://www.zprize.io/&quot;&gt;ZPrize&lt;/a&gt;, to advance the state of
the art in &amp;ldquo;zero-knowledge&amp;rdquo; cryptography. We decided to have a go in
our free time at submitting solutions to both the Multi-Scalar
Multiplication (MSM) and Number Theoretic Transform (NTT) tracks,
using the same open source &lt;a href=&quot;https://hardcaml.com/&quot;&gt;Hardcaml&lt;/a&gt; libraries
that Jane Street uses for our own FPGA development. We believe by
using Hardcaml we were able to more efficiently and robustly come up
with designs in the short competition period. These designs also
interact with the standard vendor RTL flow and so we hope they will be
useful to others.&lt;/p&gt;

</content><id>https://blog.janestreet.com/zero-knowledge-fpgas-hardcaml/</id><title type="text">Accelerating zk-SNARKs - MSM and NTT algorithms on FPGAs with Hardcaml</title><updated>2022-12-07T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/visualizing-information-propagation-in-markets-index/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;The Dojima rice market, established around 1716, is widely considered to
be the world&amp;rsquo;s first organized futures exchange. Instead of directly
exchanging money for rice on the spot, merchants would agree on a price
and future date at which rice and money would be exchanged. This allowed
farmers and consumers to hedge their risk. As a result, information
about the abundance or lack of rice would travel across the country as
fast as rice merchants carried it.&lt;/p&gt;

</content><id>https://blog.janestreet.com/visualizing-information-propagation-in-markets-index/</id><title type="text">Visualizing information propagation in markets</title><updated>2022-11-23T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/computations-that-differentiate-debug-and-document-themselves/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;One of the problems we wrestle with at Jane Street is how to
understand and manage the costs associated with the positions we hold:
things like margin, financing costs, market risk, regulatory capital
requirements, and so on.  To that end, we&amp;rsquo;ve built systems that
estimate these costs and propose ways to reduce them. Essentially,
this is a numerical optimization problem.&lt;/p&gt;

</content><id>https://blog.janestreet.com/computations-that-differentiate-debug-and-document-themselves/</id><title type="text">Computations that differentiate, debug, and document themselves</title><updated>2022-11-17T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/graduate-research-fellowship/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We are excited to announce the launch of the Jane Street Graduate Research Fellowship!&lt;/p&gt;

</content><id>https://blog.janestreet.com/graduate-research-fellowship/</id><title type="text">Introducing the Jane Street Graduate Research Fellowship</title><updated>2022-08-30T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2022/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We&amp;rsquo;re once again at the end of our internship season, and it&amp;rsquo;s my task
to provide a few highlights of what the interns accomplished while
they were here.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2022/</id><title type="text">What the interns have wrought, 2022 edition</title><updated>2022-08-25T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/research-internships-tnc/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We are excited to announce research internships in our Tools and
Compilers group.&lt;/p&gt;

</content><id>https://blog.janestreet.com/research-internships-tnc/</id><title type="text">Research internships in our Tools and Compilers group</title><updated>2022-03-04T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/project-pairing/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Software engineering intern candidates often ask how team placement
works and how much input incoming interns have over their teams and
projects. We know team placement is an important factor for many
students when deciding which internship to accept. We&amp;rsquo;ve spent
considerable time and thought on this process in recent years and hope
to demystify the experience with this post. &lt;sup&gt;&lt;a href=&quot;https://blog.janestreet.com/feed.xml#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;This process is used in New York and London.  Due to their smaller size Hong Kong&amp;rsquo;s process is slightly different&amp;nbsp;&lt;a href=&quot;https://blog.janestreet.com/feed.xml#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content><id>https://blog.janestreet.com/project-pairing/</id><title type="text">How Jane Street Pairs Interns to Projects and Teams During the Software Engineering Internship</title><updated>2022-01-14T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/magic-trace/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Intel Processor Trace is a hardware technology that can record all
program execution flow along with timing information accurate to
around 30ns. As far as I can tell &lt;a href=&quot;https://engineering.fb.com/2021/04/27/developer-tools/reverse-debugging/&quot;&gt;a&lt;/a&gt;&lt;a href=&quot;https://easyperf.net/blog/2019/08/23/Intel-Processor-Trace&quot;&gt;l&lt;/a&gt;&lt;a href=&quot;https://github.com/nyx-fuzz/libxdc&quot;&gt;m&lt;/a&gt;&lt;a href=&quot;https://blog.trailofbits.com/2021/03/19/un-bee-lievable-performance-fast-coverage-guided-fuzzing-with-honeybee-and-intel-processor-trace/&quot;&gt;o&lt;/a&gt;&lt;a href=&quot;http://halobates.de/blog/p/410&quot;&gt;s&lt;/a&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/3029806.3029830&quot;&gt;t&lt;/a&gt;
nobody uses it, seemingly because capturing the data is tricky and,
without any visualization tools, you&amp;rsquo;re forced to read enormous text
dumps.&lt;/p&gt;

</content><id>https://blog.janestreet.com/magic-trace/</id><title type="text">Magic-trace: Diagnosing tricky performance issues easily with Intel Processor Trace</title><updated>2022-01-11T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/hiring-a-developer-educator/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We spend a lot of time on education at Jane Street.  Like, really a
lot.&lt;/p&gt;

</content><id>https://blog.janestreet.com/hiring-a-developer-educator/</id><title type="text">Hiring a Developer Educator</title><updated>2021-10-21T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/goodbye-Core_kernel/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We recently restructured our standard libraries at Jane Street in a
way that eliminates the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;Core_kernel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Core&lt;/code&gt;
and we&amp;rsquo;re happy with the result. The new layout should reach the open
source world before the end of the year.&lt;/p&gt;

</content><id>https://blog.janestreet.com/goodbye-Core_kernel/</id><title type="text">Goodbye Core_kernel</title><updated>2021-08-26T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2021/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;It&amp;rsquo;s the end of another dev internship season, and this one marked
something of a transition, since halfway through the season, NY-based
interns were invited back to the recently reinvigorated office.  Which
means that many more of us got the chance to meet and hang out with
the interns in person than we did last year.  And hopefully the
interns were able to get a better sense of Jane Street and how it
operates.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2021/</id><title type="text">What the interns have wrought, 2021 edition</title><updated>2021-08-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/looking-for-a-developer-experience-engineer-index/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;This role has been filled&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</content><id>https://blog.janestreet.com/looking-for-a-developer-experience-engineer-index/</id><title type="text">Looking for a developer experience engineer</title><updated>2021-06-15T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/growing-the-hardcaml-toolset-index/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I am pleased to announce that we have recently released a slew of new
Hardcaml libraries!&lt;/p&gt;

</content><id>https://blog.janestreet.com/growing-the-hardcaml-toolset-index/</id><title type="text">Growing the Hardcaml toolset</title><updated>2020-12-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/announcing-our-market-prediction-kaggle-competition-index/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street is running a Kaggle contest based on a real problem with
real financial data. If you like ML projects, or think you might,
&lt;a href=&quot;https://www.kaggle.com/c/jane-street-market-prediction&quot; target=&quot;_blank&quot;&gt;head over and check it
out&lt;/a&gt;.
We think it&amp;rsquo;s a pretty fun one. The prizes are pretty good too, with a
total $100K being paid out.&lt;/p&gt;

</content><id>https://blog.janestreet.com/announcing-our-market-prediction-kaggle-competition-index/</id><title type="text">Announcing Our Market Prediction Kaggle Competition</title><updated>2020-11-24T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/finding-memory-leaks-with-memtrace/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Memory issues can be hard to track down. A function that only
allocates a few small objects can cause a space leak if it&amp;rsquo;s called
often enough and those objects are never collected. Even then, many
objects are &lt;em&gt;supposed&lt;/em&gt; to be long-lived. How can a tool, armed with data
on allocations and their lifetimes,
help sort out the expected from the suspicious?&lt;/p&gt;

</content><id>https://blog.janestreet.com/finding-memory-leaks-with-memtrace/</id><title type="text">Finding memory leaks with Memtrace</title><updated>2020-10-06T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/memory-allocator-showdown/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">Since version 4.10, OCaml offers a new best-fit memory allocator
alongside its existing default, the next-fit allocator. At Jane
Street, we've seen a big improvement after switching over to the new
allocator.

This post isn't about how the new allocator works. For that, the best
source is these notes from a talk by its
author.  Instead, this post is about just how tricky it is to compare two
allocators in a reasonable way, especially for a garbage-collected
system.
  
</content><id>https://blog.janestreet.com/memory-allocator-showdown/</id><title type="text">Memory allocator showdown</title><updated>2020-09-15T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/announcing-signals-and-threads-index/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m excited (and slightly terrified) to announce that Jane Street is
releasing a new podcast, called &lt;a href=&quot;https://signalsandthreads.com/&quot;&gt;Signals and
Threads&lt;/a&gt;, and I&amp;rsquo;m going to be the
host.&lt;/p&gt;

</content><id>https://blog.janestreet.com/announcing-signals-and-threads-index/</id><title type="text">Announcing Signals and Threads, a new podcast from Jane Street</title><updated>2020-08-31T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2020/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;It&amp;rsquo;s been an unusual internship season.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2020/</id><title type="text">What the interns have wrought, 2020 edition</title><updated>2020-08-17T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/jane-street-interview-process-2020/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We&amp;rsquo;re busy preparing for our software engineering &lt;a href=&quot;https://blog.janestreet.com/unraveling/&quot;&gt;fall hiring
season&lt;/a&gt;. Over the years we&amp;rsquo;ve
done our best to make our interview process more transparent to
candidates. While many candidates show up knowing something about what
our interviews look like, much of the information floating around on
the internet is outdated or wrong. These past few months have also
changed a lot about the process as we&amp;rsquo;ve adapted to working from home
and other effects of COVID-19.&lt;/p&gt;

</content><id>https://blog.janestreet.com/jane-street-interview-process-2020/</id><title type="text">The Jane Street Interview Process &amp;mdash; 2020 Edition</title><updated>2020-07-24T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/really-low-latency-multipliers-and-cryptographic-puzzles/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, we have some experience using FPGAs for low-latency
systems&amp;ndash;FPGAs are programmable hardware where you get the speed of an
application-specific integrated circuit (ASIC) but without being
committed to a design that&amp;rsquo;s burned into the chip. It wasn&amp;rsquo;t so long
ago that FPGAs were expensive and rare, but these days, you can rent a
$5,000 card on the Amazon AWS cloud for less than $3 an hour.&lt;/p&gt;

</content><id>https://blog.janestreet.com/really-low-latency-multipliers-and-cryptographic-puzzles/</id><title type="text">Really low latency multipliers and cryptographic puzzles</title><updated>2020-06-22T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/using-ascii-waveforms-to-test-hardware-designs/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, an &lt;a href=&quot;https://blog.janestreet.com/testing-with-expectations&quot;&gt;&amp;ldquo;expect
test&amp;rdquo;&lt;/a&gt; is a
test where you don&amp;rsquo;t manually write the output you&amp;rsquo;d like to check
your code against &amp;ndash; instead, this output is captured automatically
and inserted by a tool into the testing code itself. If further runs
produce different output, the test fails, and you&amp;rsquo;re presented with
the diff.&lt;/p&gt;

</content><id>https://blog.janestreet.com/using-ascii-waveforms-to-test-hardware-designs/</id><title type="text">Using ASCII waveforms to test hardware designs</title><updated>2020-06-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/chrome-extensions-finding-the-missing-proof/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Web browsers have supported custom
&lt;a href=&quot;https://en.wikipedia.org/wiki/NPAPI&quot;&gt;plug-ins&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Browser_extension&quot;&gt;extensions&lt;/a&gt; since
the 1990s, giving users the ability to add their own features and
tools for improving workflow or building closer integration with
applications or databases running on back-end servers.&lt;/p&gt;

</content><id>https://blog.janestreet.com/chrome-extensions-finding-the-missing-proof/</id><title type="text">Chrome extensions: Finding the missing proof</title><updated>2020-04-17T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/watch-all-of-jane-streets-tech-talks/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street has been posting tech talks from internal speakers and
invited guests for years&amp;mdash;and they&amp;rsquo;re all available on our YouTube
channel:&lt;/p&gt;

</content><id>https://blog.janestreet.com/watch-all-of-jane-streets-tech-talks/</id><title type="text">Watch all of Jane Street's tech talks</title><updated>2020-02-20T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/troubleshooting-systemd-with-systemtap/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;When we set up a schedule on a computer, such as a list of commands to
run every day at particular times via Linux &lt;a href=&quot;https://www.ostechnix.com/a-beginners-guide-to-cron-jobs&quot;&gt;cron
jobs&lt;/a&gt;, we
expect that schedule to execute reliably.  Of course we&amp;rsquo;ll check the
logs to see whether the job has failed, but we never question whether
the cron daemon itself will function.  We always assume that it will,
as it always has done; we are not expecting mutiny in the ranks of the
operating system.&lt;/p&gt;

</content><id>https://blog.janestreet.com/troubleshooting-systemd-with-systemtap/</id><title type="text">Troubleshooting systemd with SystemTap</title><updated>2020-02-03T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/using-python-and-ocaml-in-the-same-jupyter-notebook/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;div style=&quot;width: 75%; margin: auto; text-align: center; font-style: italic; font-size: 75%&quot;&gt;
The cover image is based on &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Jupiter_family.jpg&quot;&gt;Jupiter family&lt;/a&gt; by NASA/JPL.
&lt;/div&gt;

</content><id>https://blog.janestreet.com/using-python-and-ocaml-in-the-same-jupyter-notebook/</id><title type="text">Using Python and OCaml in the same Jupyter notebook</title><updated>2019-12-16T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/deep-learning-the-hardest-go-problem-in-the-world/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;h2&gt;Updates and a New Run&lt;/h2&gt;

</content><id>https://blog.janestreet.com/deep-learning-the-hardest-go-problem-in-the-world/</id><title type="text">Deep-Learning the Hardest Go Problem in the World</title><updated>2019-12-06T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/commas-in-big-numbers-everywhere/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;My job involves a lot of staring at large numbers, mostly latencies in
nanoseconds, and picking out magnitudes like microseconds. I noticed
myself constantly counting digits in my text editor, in my terminal,
and in &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebooks in my browser.&lt;/p&gt;

</content><id>https://blog.janestreet.com/commas-in-big-numbers-everywhere/</id><title type="text">Commas in big numbers everywhere: An OpenType adventure</title><updated>2019-10-14T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2019/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street&amp;rsquo;s intern program yet again is coming to an end, which is a
nice opportunity to look back over the summer and see what they&amp;rsquo;ve
accomplished.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2019/</id><title type="text">What the interns have wrought, 2019 edition</title><updated>2019-08-30T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/using-ocaml-to-drive-a-raspberry-pi-robot-car/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Back when the Raspberry Pi was first released in 2012 Michael Bacarella wrote
a &lt;a href=&quot;https://blog.janestreet.com/bootstrapping-ocamlasync-on-the-raspberry-pi/&quot;&gt;blog post&lt;/a&gt;
on using OCaml and Async on this little device.
Since then installing OCaml via opam has become a pretty smooth experience
and everything works out of the box when using Raspbian &amp;ndash; the default Raspberry Pi
distribution.&lt;/p&gt;

</content><id>https://blog.janestreet.com/using-ocaml-to-drive-a-raspberry-pi-robot-car/</id><title type="text">Using OCaml to drive a Raspberry Pi robot car</title><updated>2019-08-19T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/applied-PL-research/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;As our Tools &amp;amp; Compilers team has grown, the kinds of projects we work
on has become more ambitious. Here are some of the major things we&amp;rsquo;re
currently working on:&lt;/p&gt;

</content><id>https://blog.janestreet.com/applied-PL-research/</id><title type="text">Do applied programming languages research at Jane Street!</title><updated>2019-08-16T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/a-look-at-ocaml-4.08/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Now that OCaml 4.08 has been released, let&amp;rsquo;s have a look at what was
accomplished, with a particular focus on how &lt;a href=&quot;https://blog.janestreet.com/plans-for-ocaml-408/&quot;&gt;our plans for
4.08&lt;/a&gt; fared. I&amp;rsquo;ll mostly focus on work that we
in the Jane Street Tools &amp;amp; Compilers team were involved with, but we are
just some of the contributors to the OCaml compiler, and I&amp;rsquo;ll have a
quick look at the end of the post at some of the other work that went
into 4.08.&lt;/p&gt;

</content><id>https://blog.janestreet.com/a-look-at-ocaml-4.08/</id><title type="text">A look at OCaml 4.08</title><updated>2019-07-12T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/of-pythons-and-camels/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Welcome to another post in our series of how to use OCaml for machine learning.
In previous posts we&amp;rsquo;ve discussed &lt;a href=&quot;https://blog.janestreet.com/deep-learning-experiments-in-ocaml/&quot;&gt;artistic style-transfer&lt;/a&gt; and
&lt;a href=&quot;https://blog.janestreet.com/playing-atari-games-with-ocaml-and-deep-rl/&quot;&gt;reinforcement learning&lt;/a&gt;. If you haven&amp;rsquo;t read these feel
free to do so now, we&amp;rsquo;ll wait right here until you&amp;rsquo;re done. Ready? Ok, let&amp;rsquo;s
continue &amp;hellip;&lt;/p&gt;

</content><id>https://blog.janestreet.com/of-pythons-and-camels/</id><title type="text">Of Pythons and Camels</title><updated>2019-07-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/thoughts-from-aaai-19/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, for the last several years, we have been increasingly interested
in machine learning and its many use cases. This is why it was exciting when
earlier this year myself and a few of my colleagues had the opportunity to
attend the AAAI 2019 conference. We&amp;rsquo;d like to take this space to share with you
some of the interesting projects and themes we saw at the conference.&lt;/p&gt;

</content><id>https://blog.janestreet.com/thoughts-from-aaai-19/</id><title type="text">Thoughts from AAAI 2019</title><updated>2019-05-13T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/learning-ml-depth-first/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;If you haven&amp;rsquo;t heard of it, &lt;a href=&quot;https://www.depthfirstlearning.com/2018/DFL-Fellowship&quot;&gt;Depth First
Learning&lt;/a&gt; is a
wonderful resource for learning about machine learning.&lt;/p&gt;

</content><id>https://blog.janestreet.com/learning-ml-depth-first/</id><title type="text">Learning ML Depth-First</title><updated>2019-04-17T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/hackathon-keyboards/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street is sponsoring this year&amp;rsquo;s &lt;a href=&quot;https://makemit.org&quot;&gt;MakeMIT
hackathon&lt;/a&gt;, and we wanted to create a prize for
the winners that would do justice to the maker spirit of the
competition. As makers ourselves &amp;ndash; it&amp;rsquo;s not unusual to find a
&amp;ldquo;software&amp;rdquo; engineer here who hacks on FPGAs or who has a CNC machine
at home &amp;ndash; it felt natural to get our hands dirty.&lt;/p&gt;

</content><id>https://blog.janestreet.com/hackathon-keyboards/</id><title type="text">Machining the ultimate hackathon prize</title><updated>2019-02-28T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/accelerating-self-play-learning-in-go/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, over the last few years, we&amp;rsquo;ve been increasingly exploring machine learning to improve our models. Many of us are fascinated by the rapid improvement we see in a wide variety of applications due to developments in deep learning and reinforcement learning, both for its exciting potential for our own problems, and also on a personal level of pure interest and curiosity outside of work.&lt;/p&gt;

</content><id>https://blog.janestreet.com/accelerating-self-play-learning-in-go/</id><title type="text">Accelerating Self-Play Learning in Go</title><updated>2019-02-28T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/playing-atari-games-with-ocaml-and-deep-rl/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In a &lt;a href=&quot;https://blog.janestreet.com/deep-learning-experiments-in-ocaml/&quot;&gt;previous blog post&lt;/a&gt;
we detailed how we used OCaml to reproduce some classical deep-learning results
that would usually be implemented in Python. Here we will do the same with
some Reinforcement Learning (RL) experiments.&lt;/p&gt;

</content><id>https://blog.janestreet.com/playing-atari-games-with-ocaml-and-deep-rl/</id><title type="text">Playing Atari Games with OCaml and Deep Reinforcement Learning</title><updated>2019-02-02T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/l2-regularization-and-batch-norm/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;This blog post is about an interesting detail about machine learning
that I came across as a researcher at Jane Street - that of the 
interaction between L2 regularization, also known as
weight decay, and batch normalization.&lt;/p&gt;

</content><id>https://blog.janestreet.com/l2-regularization-and-batch-norm/</id><title type="text">L2 Regularization and Batch Norm</title><updated>2019-01-29T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/a-tutorial-for-building-web-applications-with-incrdom/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, our web UIs are built on top of an in-house framework
called &lt;a href=&quot;https://github.com/janestreet/incr_dom&quot;&gt;Incr_dom&lt;/a&gt;, modeled in
part on &lt;a href=&quot;https://reactjs.org/docs/faq-internals.html&quot;&gt;React&amp;rsquo;s virtual
DOM&lt;/a&gt;. Rendering different
views efficiently in response to changes made to a shared model is a
quintessentially incremental computation&amp;mdash;so it should be no surprise
that Incr_dom is built on top of
&lt;a href=&quot;https://blog.janestreet.com/introducing-incremental/&quot;&gt;Incremental&lt;/a&gt;.&lt;/p&gt;

</content><id>https://blog.janestreet.com/a-tutorial-for-building-web-applications-with-incrdom/</id><title type="text">A tutorial for building web applications with Incr_dom</title><updated>2019-01-15T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/how-to-shuffle-a-big-dataset/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, we often work with data that has a very low
signal-to-noise ratio, but fortunately we also have a &lt;em&gt;lot&lt;/em&gt; of data.
Where practitioners in many fields might be accustomed to
having tens or hundreds of thousands of correctly labeled
examples, some of our problems are more like having a billion training
examples whose labels have only a slight tendency to be correct.
These large datasets present a number of interesting engineering
challenges.  The one we address here: &lt;em&gt;How do you shuffle a really
large dataset?&lt;/em&gt;  (If you&amp;rsquo;re not familiar with why one might need this,
jump to the section &lt;a href=&quot;https://blog.janestreet.com/feed.xml#whyshuffle&quot;&gt;Why shuffle&lt;/a&gt; below.)&lt;/p&gt;

</content><id>https://blog.janestreet.com/how-to-shuffle-a-big-dataset/</id><title type="text">How to shuffle a big dataset</title><updated>2018-09-26T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/deep-learning-experiments-in-ocaml/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Last year we held a machine learning seminar in our London office,
which was an opportunity to reproduce some classical deep learning
results with a nice twist: we used OCaml as a programming language
rather than Python. This allowed us to train models defined in a
functional way in OCaml on a GPU using TensorFlow.&lt;/p&gt;

</content><id>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</id><title type="text">Deep learning experiments in OCaml</title><updated>2018-09-20T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2018/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Yet again, intern season is coming to a close, and so it&amp;rsquo;s time to
look back at what the interns have achieved in their short time with
us.  I&amp;rsquo;m always impressed by what our interns manage to squeeze into
the summer, and this year is no different.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2018/</id><title type="text">What the interns have wrought, 2018 edition</title><updated>2018-08-06T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/plans-for-ocaml-408/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;With the external release of OCaml 4.07.0 imminent, we in Jane Street&amp;rsquo;s
Tools &amp;amp; Compilers group have been planning what we want to work on for
inclusion in OCaml 4.08. These days OCaml uses (or at least attempts) a
time-based release process with releases scheduled every 6 months. We&amp;rsquo;re
trying to avoid rushing in changes at the last minute &amp;ndash; as we&amp;rsquo;ve been
prone to do in the past &amp;ndash; so this list is restricted to things we could
conceivably finish in the next 4-5 months.&lt;/p&gt;

</content><id>https://blog.janestreet.com/plans-for-ocaml-408/</id><title type="text">Plans for OCaml 4.08</title><updated>2018-06-29T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/repeatable-exploratory-programming/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Expect tests are a technique I&amp;rsquo;ve written about
&lt;a href=&quot;https://blog.janestreet.com/testing-with-expectations&quot;&gt;before&lt;/a&gt;, but until recently, it&amp;rsquo;s been a
little on the theoretical side. That&amp;rsquo;s because it&amp;rsquo;s been hard to take
these ideas out for a spin due to lack of tooling outside of Jane
Street&amp;rsquo;s walls.&lt;/p&gt;

</content><id>https://blog.janestreet.com/repeatable-exploratory-programming/</id><title type="text">Repeatable exploratory programming</title><updated>2018-04-22T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/ocaml-all-the-way-down/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;One of the joys of working at Jane Street for the last 15 or so years
has been seeing how our software stack has grown in scope. When I
started, I was building pretty narrowly focused systems for doing
statistical research on trading strategies, and then building systems
for executing those same strategies.&lt;/p&gt;

</content><id>https://blog.janestreet.com/ocaml-all-the-way-down/</id><title type="text">OCaml all the way down</title><updated>2018-04-04T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Imagine a system for editing and reviewing code where:&lt;/p&gt;

</content><id>https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/</id><title type="text">Putting the I back in IDE: Towards a Github Explorer</title><updated>2018-03-27T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/learn-ocaml-nyc/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Interested in learning OCaml? In the NYC area? Then this might
be for you!&lt;/p&gt;

</content><id>https://blog.janestreet.com/learn-ocaml-nyc/</id><title type="text">Learn OCaml in NYC</title><updated>2018-02-16T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/proofs-and-refutations-using-z3/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;People often think of formal methods and theorem provers as forbidding
tools, cool in theory but with a steep learning curve that makes them
hard to use in real life. In this post, we&amp;rsquo;re going to describe a case
we ran into recently where we were able to leverage theorem proving
technology, Z3 in particular, to validate some real world engineering
we were doing on the OCaml compiler. This post is aimed at readers
interested in compilers, but assumes no familiarity with actual
compiler development.&lt;/p&gt;

</content><id>https://blog.janestreet.com/proofs-and-refutations-using-z3/</id><title type="text">Proofs (and Refutations) using Z3</title><updated>2018-02-15T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/work-on-the-ocaml-compiler-at-jane-street/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;As Jane Street grows, the quality of the development tools we use
matters more and more.  We increasingly work on the OCaml compiler
itself: adding useful language features, fine-tuning the type system
and improving the performance of the generated code. Alongside this,
we also work on the surrounding toolchain, developing new tools for
profiling, debugging, documentation and build automation.&lt;/p&gt;

</content><id>https://blog.janestreet.com/work-on-the-ocaml-compiler-at-jane-street/</id><title type="text">Work on the OCaml compiler at Jane Street!</title><updated>2017-12-20T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/does-batch-size-matter/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;&lt;i&gt;This post is aimed at readers who are already familiar with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stochastic_gradient_descent&quot;&gt;stochastic gradient descent&lt;/a&gt;
(SGD) and terms like &amp;ldquo;batch size&amp;rdquo;.  For an introduction to these
ideas, I recommend Goodfellow et al.&amp;rsquo;s
&lt;a href=&quot;http://www.deeplearningbook.org/&quot;&gt;Deep Learning&lt;/a&gt;, in particular the
introduction and, for more about SGD, Chapter 8.  The relevance of SGD
is that it has made it feasible to work with much more complex models
than was formerly possible.&lt;/i&gt;&lt;/p&gt;

</content><id>https://blog.janestreet.com/does-batch-size-matter/</id><title type="text">Does batch size matter?</title><updated>2017-10-31T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/jane-street-tech-talk-how-jane-street-does-code-review/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;It&amp;rsquo;s time for our next
&lt;a href=&quot;https://www.janestreet.com/tech-talks/&quot;&gt;Jane Street Tech Talk&lt;/a&gt;. When
we&amp;rsquo;ve solicited suggestions for topics, one common request has been to
talk about our internal development process. Our next talk,
&lt;a href=&quot;https://www.janestreet.com/tech-talks/janestreet-code-review/&quot;&gt;How Jane Street Does Code Review&lt;/a&gt;,
should fit the bill. The talk is being given by our own Ian Henry, and
discusses how we approach code review, and in particular how Iron, the
code review system we&amp;rsquo;ve been using and improving for some years now,
fits in to that process.&lt;/p&gt;

</content><id>https://blog.janestreet.com/jane-street-tech-talk-how-jane-street-does-code-review/</id><title type="text">How Jane Street Does Code Review (Jane Street Tech Talk)</title><updated>2017-10-29T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/jane-street-tech-talk-verifying-network-data-planes/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;After a summer hiatus, the Jane Street Tech Talks series is back on
for the fall! Last we left it, our very own Dominick LoBraico
presented on the evolution of our internal configuration methodology
and the systems that support it. For anybody that missed it, you can
check out a recording of the talk &lt;a href=&quot;https://www.youtube.com/watch?v=0pX7-AG52BU&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;

</content><id>https://blog.janestreet.com/jane-street-tech-talk-verifying-network-data-planes/</id><title type="text">Jane Street Tech Talk, Verifying Network Data Planes</title><updated>2017-09-26T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/real-world-machine-learning-part-1/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Trading is a competitive business. You need great people and great
technology, of course, but also trading strategies that make money.
Where do those strategies come from? In this post we&amp;rsquo;ll discuss how
the interplay of data, math and technology informs how we develop and
run strategies.&lt;/p&gt;

</content><id>https://blog.janestreet.com/real-world-machine-learning-part-1/</id><title type="text">Real world machine learning (part 1)</title><updated>2017-08-28T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/how-to-design-a-tree-diffing-algorithm/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;For those of you interested in what
&lt;a href=&quot;https://blog.janestreet.com/what-the-interns-have-wrought-rpc_parallel-and-core_profiler&quot;&gt;what&lt;/a&gt;
&lt;a href=&quot;https://blog.janestreet.com/what-the-interns-have-wrought-2016&quot;&gt;interns&lt;/a&gt;
&lt;a href=&quot;https://blog.janestreet.com/what-the-interns-have-wrought-2017&quot;&gt;do&lt;/a&gt; at Jane Street, here&amp;rsquo;s a
&lt;a href=&quot;http://thume.ca/2017/06/17/tree-diffing/&quot;&gt;post&lt;/a&gt; from former intern
Tristan Hume, on his work developing tree-diffing algorithms last
summer at Jane Street. It&amp;rsquo;s a fun (and very detailed!) read.&lt;/p&gt;
</content><id>https://blog.janestreet.com/how-to-design-a-tree-diffing-algorithm/</id><title type="text">How to design a tree diffing algorithm</title><updated>2017-08-25T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/ironing-out-your-development-style/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;People seem to enjoy talking about programming methodologies. They
give them cute names, like
&lt;a href=&quot;http://www.extremeprogramming.org/&quot;&gt;eXtreme programming&lt;/a&gt;,
&lt;a href=&quot;https://www.agilealliance.org/&quot;&gt;Agile&lt;/a&gt;, and
&lt;a href=&quot;https://www.scrum.org/resources/what-is-scrum&quot;&gt;Scrum&lt;/a&gt;; run
&lt;a href=&quot;https://www.scrumalliance.org/sgcal&quot;&gt;conferences&lt;/a&gt; and build
&lt;a href=&quot;https://www.scrumalliance.org/community&quot;&gt;communities&lt;/a&gt; around them;
write
&lt;a href=&quot;https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;amp;qid=1503346126&amp;amp;sr=8-1&amp;amp;keywords=extreme%20programming&quot;&gt;books&lt;/a&gt;
that describe how to use them in excruciating detail; and
&lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;manifestos&lt;/a&gt; that lay out their
philosophy.&lt;/p&gt;

</content><id>https://blog.janestreet.com/ironing-out-your-development-style/</id><title type="text">Ironing out your development style</title><updated>2017-08-24T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/hiring-an-fpga-engineer/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street is looking to hire an engineer with experience in both
software and hardware design to work on FPGA-based applications, and
on tools for creating such applications.&lt;/p&gt;

</content><id>https://blog.janestreet.com/hiring-an-fpga-engineer/</id><title type="text">Hiring an FPGA engineer</title><updated>2017-08-16T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2017/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Intern season is coming to a close, and it&amp;rsquo;s a nice time to look back
(as I&amp;rsquo;ve done in
&lt;a href=&quot;https://blog.janestreet.com/what-the-interns-have-wrought-rpc_parallel-and-core_profiler&quot;&gt;previous&lt;/a&gt;
&lt;a href=&quot;https://blog.janestreet.com/what-the-interns-have-wrought-2016&quot;&gt;years&lt;/a&gt;) and review some of what
the interns did while they were here. The dev intern program has grown
considerably, with almost 40 dev interns between our NY, London, and
Hong Kong offices.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2017/</id><title type="text">What the interns have wrought, 2017 edition</title><updated>2017-08-14T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/when-bash-scripts-bite/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;There are abundant resources online trying to scare programmers away from using
shell scripts. Most of them, if anything, succeed in convincing the reader to
blindly put something that resembles&lt;/p&gt;

</content><id>https://blog.janestreet.com/when-bash-scripts-bite/</id><title type="text">When Bash Scripts Bite</title><updated>2017-05-11T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/looking-for-a-technical-writer/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;&lt;em&gt;Update: I&amp;rsquo;m excited to say that we&amp;rsquo;ve now hired a (great!) technical
writer, so the position is closed.&lt;/em&gt;&lt;/p&gt;

</content><id>https://blog.janestreet.com/looking-for-a-technical-writer/</id><title type="text">Looking for a technical writer</title><updated>2017-05-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/caveat-configurator-how-to-replace-configs-with-code-and-why-you-might-not-want-to/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We have a new &lt;a href=&quot;https://www.janestreet.com/tech-talks/&quot;&gt;tech talk&lt;/a&gt; coming up on
May 17th, from our very own Dominick LoBraico. This one is about how to
represent configurations with programs. In some sense, this is an obvious idea.
Lots of programmers have experienced the dysphoria that comes from watching your
elegant little configuration format metamorphize into a badly constructed
programming language with miserable tools. This happens because, as you try to
make your configs clearer and more concise, you often end up walking down the
primrose path of making your config format ever more language-like. But you
never really have the time to make it into a proper language.&lt;/p&gt;

</content><id>https://blog.janestreet.com/caveat-configurator-how-to-replace-configs-with-code-and-why-you-might-not-want-to/</id><title type="text">Caveat Configurator: how to replace configs with code, and why you might not want to</title><updated>2017-04-25T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/this-is-not-the-performance-you-were-looking-for-the-tricks-systems-play-on-us/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;It&amp;rsquo;s often surprising just how much software performance depends on how the
software is deployed. All the time and effort you&amp;rsquo;ve invested in optimization
can be erased by a few bad decisions in scheduler policy, affinity, or
background workload on a server.&lt;/p&gt;

</content><id>https://blog.janestreet.com/this-is-not-the-performance-you-were-looking-for-the-tricks-systems-play-on-us/</id><title type="text">This is not the performance you were looking for: the tricks systems play on us</title><updated>2017-04-20T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/trivial-meta-programming-with-cinaps/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;From now and then, I found myself having to write some mechanical and repetitive
code. The usual solution for this is to write a code generator; for instance in
the form of a ppx rewriter in the case of OCaml code. This however comes with a
cost: code generators are harder to review than plain code and it is a new
syntax to learn for other developers. So when the repetitive pattern is local to
a specific library or not widely used, it is often not worth the effort.
Especially if the code in question is meant to be reviewed and maintained by
several people.&lt;/p&gt;

</content><id>https://blog.janestreet.com/trivial-meta-programming-with-cinaps/</id><title type="text">Trivial meta-programming with cinaps</title><updated>2017-03-20T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/one-more-talk-two-more-videos/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m happy to announce our next &lt;a href=&quot;https://www.janestreet.com/tech-talks/&quot;&gt;public tech
talk&lt;/a&gt;, called &lt;strong&gt;Seven
Implementations of Incremental&lt;/strong&gt;, on Wednesday, April 5th, presented by yours
truly. You can register
&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSdtly4y-jYcLUVH8BJS-uKoiaKrQlRXSIWZeczw3tgwTx_6HA/viewform?c=0&amp;amp;w=1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</content><id>https://blog.janestreet.com/one-more-talk-two-more-videos/</id><title type="text">One more talk, two more videos</title><updated>2017-03-15T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-a-jane-street-dev-interview-is-like/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Are you thinking about
&lt;a href=&quot;https://www.janestreet.com/join-jane-street/apply/&quot;&gt;applying&lt;/a&gt; to Jane Street
for a software engineering role? Or already have a phone interview scheduled but unsure
what to expect? Read on as we walk through an example phone interview with you.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-a-jane-street-dev-interview-is-like/</id><title type="text">What a Jane Street software engineering interview is like</title><updated>2017-02-28T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/jane-street-tech-talks-verifying-puppet-configs/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Our first &lt;a href=&quot;https://blog.janestreet.com/how-to-build-an-exchange/&quot;&gt;Jane Street Tech Talk&lt;/a&gt; went really well!
Thanks to everyone who came and made it a fun event.&lt;/p&gt;

</content><id>https://blog.janestreet.com/jane-street-tech-talks-verifying-puppet-configs/</id><title type="text">Jane Street Tech Talks: Verifying Puppet Configs</title><updated>2017-02-16T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/how-to-build-an-exchange/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: &lt;em&gt;We are full up. Tons of people signed up for the talk, and we&amp;rsquo;re
now at the limit of what we feel like we can support in the space. Thanks for
all the interest, and if you didn&amp;rsquo;t get into this one, don&amp;rsquo;t worry, we have more
talks coming!&lt;/em&gt;&lt;/p&gt;

</content><id>https://blog.janestreet.com/how-to-build-an-exchange/</id><title type="text">How to Build an Exchange</title><updated>2017-01-11T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/a-brief-trip-through-spacetime/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Spacetime is a new memory profiling facility for OCaml to help find space leaks
and unwanted allocations. Whilst still a little rough around the edges, we&amp;rsquo;ve
found it to be a very useful tool. Since there&amp;rsquo;s not much documentation for
using spacetime beyond &lt;a href=&quot;https://github.com/lpw25/prof_spacetime/blob/master/Readme.md&quot;&gt;this
readme&lt;/a&gt;, I&amp;rsquo;ve
written a little intro to give people an idea of how to use it.&lt;/p&gt;

</content><id>https://blog.janestreet.com/a-brief-trip-through-spacetime/</id><title type="text">A brief trip through Spacetime</title><updated>2017-01-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/an-solution-to-the-ppx-versioning-problem/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Ppx is a preprocessing system for OCaml where one maps over the OCaml abstract
syntax tree (AST) to interpret some special syntax fragments to generate code.&lt;/p&gt;

</content><id>https://blog.janestreet.com/an-solution-to-the-ppx-versioning-problem/</id><title type="text">A solution to the ppx versioning problem</title><updated>2016-11-08T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/observations-of-a-functional-programmer/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I was recently invited to do the keynote at the &lt;a href=&quot;http://cufp.org/2016/&quot;&gt;Commercial Users of Functional
Programming&lt;/a&gt; workshop, a 15-year-old gathering which is
attached to ICFP, the primary academic functional programming conference.&lt;/p&gt;

</content><id>https://blog.janestreet.com/observations-of-a-functional-programmer/</id><title type="text">Observations of a functional programmer</title><updated>2016-10-27T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2016/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Now that the interns have mostly gone back to school, it&amp;rsquo;s a good time to look
back at what they did while they were here. We had a bumper crop &amp;ndash; more than 30
dev interns between our London, New York and Hong Kong offices &amp;ndash; and they
worked on just about every corner of our code-base.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2016/</id><title type="text">What the interns have wrought, 2016</title><updated>2016-09-13T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/unraveling/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Recruiting talented people has always been challenging.&lt;/p&gt;

</content><id>https://blog.janestreet.com/unraveling/</id><title type="text">Unraveling of the tech hiring market</title><updated>2016-08-31T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/do-you-love-dev-tools-come-work-at-jane-street/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In the last few years, we&amp;rsquo;ve spent more and more effort working on developer
tools, to the point where we now have a tools-and-compilers group devoted to the
area, for which we&amp;rsquo;re actively hiring.&lt;/p&gt;

</content><id>https://blog.janestreet.com/do-you-love-dev-tools-come-work-at-jane-street/</id><title type="text">Do you love dev tools? Come work at Jane Street.</title><updated>2016-08-30T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Earlier this year, we created
a &lt;a href=&quot;http://github.com/janestreet/ppx_let&quot;&gt;ppx_let&lt;/a&gt;, a PPX rewriter that
introduces a syntax for working with monadic and applicative libraries like
Command, Async, Result and Incremental. We&amp;rsquo;ve now amassed about six months of
experience with it, and we&amp;rsquo;ve now seen enough to recommend it to a wider
audience.&lt;/p&gt;

</content><id>https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/</id><title type="text">Let syntax, and why you should use it</title><updated>2016-06-21T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/ppx_core-context-free-rewriters-for-better-semantic-and-faster-compilation/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;At Jane Street, we have always been heavy users of pre-processors, first with
camlp4 and now ppx. Pre-processing makes the infrastructure a bit more complex,
but it save us a lot of time by taking care of a lot of tedious boilerplate code
and in some case makes the code a bit prettier.&lt;/p&gt;

</content><id>https://blog.janestreet.com/ppx_core-context-free-rewriters-for-better-semantic-and-faster-compilation/</id><title type="text">ppx_core: context-free rewriters for better semantics and faster compilation</title><updated>2016-05-23T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/seven-implementations-of-incremental/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We finally got a decent recording of one of my favorite talks. This one is about
our &lt;a href=&quot;https://github.com/janestreet/incremental&quot;&gt;Incremental&lt;/a&gt; library (which I
wrote about &lt;a href=&quot;https://blog.janestreet.com/introducing-incremental/&quot;&gt;here&lt;/a&gt;), and in particular about the
story of how we got to the present, quite performant, implementation.&lt;/p&gt;

</content><id>https://blog.janestreet.com/seven-implementations-of-incremental/</id><title type="text">Seven Implementations of Incremental</title><updated>2016-03-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/ocaml-4-03-everything-else/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In my &lt;a href=&quot;https://blog.janestreet.com/flambda&quot;&gt;previous post&lt;/a&gt; I wrote about Flambda, which is the single
biggest feature coming to OCaml in this release. In this post, I&amp;rsquo;ll review the
other features of 4.03 that caught my eye.&lt;/p&gt;

</content><id>https://blog.janestreet.com/ocaml-4-03-everything-else/</id><title type="text">OCaml 4.03: Everything else</title><updated>2016-03-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/flambda/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;OCaml 4.03 is branched and a first release candidate is imminent, so it seems
like a good time to take stock of what&amp;rsquo;s coming.&lt;/p&gt;

</content><id>https://blog.janestreet.com/flambda/</id><title type="text">A better inliner for OCaml, and why it matters</title><updated>2016-02-24T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/self-adjusting-dom-and-diffable-data/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In my last &lt;a href=&quot;https://blog.janestreet.com/self-adjusting-dom/&quot;&gt;post&lt;/a&gt;, I gave some simple examples showing how
you could use
&lt;a href=&quot;http://www.umut-acar.org/self-adjusting-computation&quot;&gt;self adjusting computations&lt;/a&gt;,
or SAC, as embodied by our &lt;a href=&quot;https://blog.janestreet.com/introducing-incremental/&quot;&gt;Incremental&lt;/a&gt; library, to
incrementalize the computation of virtual dom nodes. In this post, I&amp;rsquo;d like to
discuss how we can extend this approach to more realistic scales, and some of
the extensions to Incremental itself that are required to get there.&lt;/p&gt;

</content><id>https://blog.janestreet.com/self-adjusting-dom-and-diffable-data/</id><title type="text">Self Adjusting DOM and Diffable Data</title><updated>2016-02-10T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/self-adjusting-dom/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;ve been &lt;a href=&quot;https://blog.janestreet.com/incrementality-and-the-web/&quot;&gt;thinking recently&lt;/a&gt; about how to
structure dynamic web applications, and in particular about the role that
incremental computation should play.&lt;/p&gt;

</content><id>https://blog.janestreet.com/self-adjusting-dom/</id><title type="text">Self Adjusting DOM</title><updated>2016-02-06T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/incrementality-and-the-web/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;ve recently been thinking about the world of JavaScript and web applications.
That&amp;rsquo;s odd for me, since I know almost nothing about the web. Indeed, Jane
Street&amp;rsquo;s use of web technologies is quite minimal &amp;ndash; nearly all of our user
interfaces are text based, and all told we&amp;rsquo;ve been pretty happy with that.&lt;/p&gt;

</content><id>https://blog.janestreet.com/incrementality-and-the-web/</id><title type="text">Incremental computation and the web</title><updated>2016-01-30T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/why-ocaml/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;div class=&quot;video-container&quot;&gt;
  &lt;iframe src=&quot;https://youtube.com/embed/v1CmGbOGb2I?rel=0&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</content><id>https://blog.janestreet.com/why-ocaml/</id><title type="text">Why OCaml?</title><updated>2016-01-25T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/testing-with-expectations/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Testing is important, and it&amp;rsquo;s hard to get people to do as much of it as they
should. Testing tools matter because the smoother the process is, the more tests
people will write.&lt;/p&gt;

</content><id>https://blog.janestreet.com/testing-with-expectations/</id><title type="text">Testing with expectations</title><updated>2015-12-02T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/quickcheck-for-core/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Automated testing is a powerful tool for finding bugs and specifying correctness
properties of code. Haskell&amp;rsquo;s Quickcheck library is the most well-known
automated testing library, based on over 15 years of research into how to write
property-base tests, generate useful sources of inputs, and report manageable
counterexamples. Jane Street&amp;rsquo;s Core library has not had anything comparable up
until now; version 113.00 of Core finally has a version of Quickcheck,
integrating automated testing with our other facilities like s-expression
reporting for counterexample values, and support for asynchronous tests using
Async.&lt;/p&gt;

</content><id>https://blog.janestreet.com/quickcheck-for-core/</id><title type="text">Quickcheck for Core</title><updated>2015-10-26T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/rsync-rounds-timestamps-to-the-nearest-second/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m not sure how I&amp;rsquo;ve managed to use rsync for so many years without ever
noticing this, but hey, you learn something new every day!&lt;/p&gt;

</content><id>https://blog.janestreet.com/rsync-rounds-timestamps-to-the-nearest-second/</id><title type="text">rsync rounds timestamps to the nearest second</title><updated>2015-10-07T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/no-functional-experience-required/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Jane Street is a serious functional programming shop. We use OCaml, a statically
typed functional language for almost everything and have what is probably the
largest OCaml codebase anywhere.&lt;/p&gt;

</content><id>https://blog.janestreet.com/no-functional-experience-required/</id><title type="text">No (functional) experience required</title><updated>2015-08-19T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/introducing-incremental/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m pleased to announce the release of
&lt;a href=&quot;https://github.com/janestreet/incremental&quot;&gt;Incremental&lt;/a&gt; (well
commented mli
&lt;a href=&quot;https://github.com/janestreet/incremental/blob/master/src/incremental_intf.ml&quot;&gt;here&lt;/a&gt;),
a powerful library for building &lt;em&gt;self-adjusting computations&lt;/em&gt;, &lt;em&gt;i.e.&lt;/em&gt;,
computations that can be updated efficiently when their inputs change.&lt;/p&gt;

</content><id>https://blog.janestreet.com/introducing-incremental/</id><title type="text">Introducing Incremental</title><updated>2015-07-18T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/converting-a-code-base-from-camlp4-to-ppx/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;As with many projects in the OCaml world, at Jane Street we have been working on
migrating from camlp4 to ppx. After having developed equivalent ppx rewriters
for our camlp4 syntax extensions, the last step is to actually translate the
code source of all our libraries and applications from the camlp4 syntax to the
standard OCaml syntax with extension points and attributes.&lt;/p&gt;

</content><id>https://blog.janestreet.com/converting-a-code-base-from-camlp4-to-ppx/</id><title type="text">Converting a code base from camlp4 to ppx</title><updated>2015-07-08T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/cpu-registers-and-ocaml-2/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Even though registers are a low-level CPU concept, having some knowledge about
them can help write faster code. Simply put, a CPU register is a storage for a
single variable. CPU can keep data in memory or cache or in registers and
registers are often much faster. Furthermore, some operations are possible only
when the data is in registers. Hence, the OCaml compiler tries to keep as many
variables as it can in the registers.&lt;/p&gt;

</content><id>https://blog.janestreet.com/cpu-registers-and-ocaml-2/</id><title type="text">CPU Registers and OCaml</title><updated>2015-05-05T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/reverse-web-proxy-in-50-lines-of-bash/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;In the spirit of reinventing the wheel for fun, I hacked this together as a
quick challenge to myself last week. It&amp;rsquo;s a little rough around the edges, but I
thought it was too cute not to share. If you have any bug fixes, please post
them in the comments.&lt;/p&gt;

</content><id>https://blog.janestreet.com/reverse-web-proxy-in-50-lines-of-bash/</id><title type="text">Reverse web proxy in ~50 lines of BASH</title><updated>2015-05-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/building-a-lower-latency-gc/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We&amp;rsquo;ve been doing a bunch of work recently on improving the responsiveness of
OCaml&amp;rsquo;s garbage collector. I thought it would be worth discussing these
developments publicly to see if there was any useful feedback to be had on the
ideas that we&amp;rsquo;re investigating.&lt;/p&gt;

</content><id>https://blog.janestreet.com/building-a-lower-latency-gc/</id><title type="text">Building a lower-latency GC</title><updated>2015-04-10T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/faster-ocaml-to-c-calls/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;The official OCaml documentation &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/intfc.html&quot;&gt;&amp;ldquo;Interfacing C with
OCaml&amp;rdquo;&lt;/a&gt; doesn&amp;rsquo;t
document some interesting performance features.&lt;/p&gt;

</content><id>https://blog.janestreet.com/faster-ocaml-to-c-calls/</id><title type="text">Faster OCaml to C calls</title><updated>2015-04-09T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/why-gadts-matter-for-performance/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;When GADTs (&lt;a href=&quot;http://en.wikipedia.org/wiki/Generalized_algebraic_data_type&quot;&gt;Generalized Algebraic Data
Types&lt;/a&gt;) landed in
OCaml, I wasn&amp;rsquo;t particularly happy about it. I assumed that it was the kind of
nonsense you get when you let compiler writers design your programming language.&lt;/p&gt;

</content><id>https://blog.janestreet.com/why-gadts-matter-for-performance/</id><title type="text">Why GADTs matter for performance</title><updated>2015-03-30T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/a-lighter-core/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We recently released a version of our open source libraries with a much
anticipated
&lt;a href=&quot;https://github.com/janestreet/async_kernel/commit/bf11c4211595b2589b6517aefafceb2ad3bdc0fd&quot;&gt;change&lt;/a&gt;
&amp;ndash; Async_kernel, the heart of the Async concurrent programming library, now
depends only on Core_kernel rather than on Core.&lt;/p&gt;

</content><id>https://blog.janestreet.com/a-lighter-core/</id><title type="text">A lighter Core</title><updated>2015-03-21T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/centralizing-distributed-version-control-revisited/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;7 years ago, I wrote a &lt;a href=&quot;https://blog.janestreet.com/centralizing-distributed-version-control/&quot; title=&quot;Centralizing Distributed Version Control&quot;&gt;blog
post&lt;/a&gt;
about how we at Jane Street were using our distributed version control system
(&lt;code class=&quot;highlighter-rouge&quot;&gt;hg&lt;/code&gt;, though the story would be the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;) in a partially centralized
way. Essentially, we built a centralized repo and a continuous integration
system whose job was to merge in new changesets. The key responsibility of this
system was to make sure that a change was rejected unless it merged, compiled
and &lt;a href=&quot;http://graydon2.dreamwidth.org/1597.html&quot; title=&quot;The Not Rocket Science Rule&quot;&gt;tested
cleanly&lt;/a&gt;.&lt;/p&gt;

</content><id>https://blog.janestreet.com/centralizing-distributed-version-control-revisited/</id><title type="text">Centralizing distributed version control, revisited</title><updated>2015-03-04T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/making-making-better/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;We spend a lot of time and effort on training new people, and it never stops for
long. Right now our winter-intern class is ending; in five months we&amp;rsquo;ll have a
slew of new interns to get up to speed, and a few months after that we&amp;rsquo;ll have
an incoming class of new hires.&lt;/p&gt;

</content><id>https://blog.janestreet.com/making-making-better/</id><title type="text">Making making better</title><updated>2015-01-31T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/13-virtues/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Very early on in his life, while on lengthy voyage from London to Philadelphia,
Ben Franklin created a system of thirteen virtues to live his life by. He spent
the remainder of his days giving special focus to one virtue per week in a 13
week cycle, as well as noting the virtues he failed to live up to at the end of
each day.&lt;/p&gt;

</content><id>https://blog.janestreet.com/13-virtues/</id><title type="text">13 Virtues</title><updated>2015-01-02T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/inspecting-the-environment-of-a-running-process/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;Sometimes its useful to be able see the values of environment variables in
running processes. We can use the following test program to see how well we can
accomplish this:&lt;/p&gt;

</content><id>https://blog.janestreet.com/inspecting-the-environment-of-a-running-process/</id><title type="text">Inspecting the Environment of a Running Process</title><updated>2014-12-01T00:00:00-00:00</updated><author><name>janestreet</name></author></entry><entry><link href="https://blog.janestreet.com/how-to-choose-a-teaching-language/" rel="alternate"/><contributor><uri>https://blog.janestreet.com/feed.xml</uri><name>janestreet</name></contributor><content type="html">&lt;p&gt;If you were teaching a programming course, what language would you teach it in?&lt;/p&gt;

</content><id>https://blog.janestreet.com/how-to-choose-a-teaching-language/</id><title type="text">How to choose a teaching language</title><updated>2014-11-17T00:00:00-00:00</updated><author><name>janestreet</name></author></entry></feed>