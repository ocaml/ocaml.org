<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://www.blogger.com/feeds/2073503406800427577/posts/default</id><title type="text">opa</title><updated>2023-06-07T05:45:50-00:00</updated><entry><link href="http://blog.opalang.org/2013/09/a-new-open-source-app-in-opa-birdy.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">As many of you know, the main source to learn Opa is the O'Reilly book: &lt;a href=&quot;http://shop.oreilly.com/product/0636920025436.do&quot;&gt;Opa, Up and Running&lt;/a&gt;*.&lt;br/&gt;
&lt;br/&gt;
One of the highlight of the book is a walk-through the development of Birdy, a micro-blogging platform, aka. mini-Twitter.&lt;br/&gt;
&lt;br/&gt;
What was missing until now was the availability of the app as an open source project. Done! &lt;a href=&quot;https://github.com/MLstate/birdy&quot;&gt;Birdy&lt;/a&gt; is now an open source project released under the MIT license.&lt;br/&gt;
&lt;br/&gt;
You are welcome to fork the project and add features, as the expressiveness of Opa surely allows to develop a full-featured platform quickly.&lt;br/&gt;
&lt;br/&gt;
As a bonus, at a time where security of applications becomes increasingly important as organizations and governments spy on each other, Opa should provide a pretty good security level by default. As Opa is an official OWASP project, expect some related news in this domain next.&lt;br/&gt;
&lt;br/&gt;
* &amp;lt;ad&amp;gt;O'Reilly runs a back-to-school promotion, so grab the ebook at 50% off...&amp;lt;/ad&amp;gt;</content><id>http://blog.opalang.org/2013/09/a-new-open-source-app-in-opa-birdy.html</id><title type="text">A new open source app in Opa: Birdy</title><updated>2013-09-02T16:01:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2013/04/opa-111-is-coming-in-few-days.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">This is a short update to tell that the Opa 1.1.1 release is finally around the corner as we are building packages. Of course, if you're impatient, you can build from &lt;a href=&quot;https://github.com/MLstate/opalang/commits/master&quot;&gt;sources&lt;/a&gt;.&amp;nbsp;The release brings back the compatibility with the latest releases of NodeJS, now recommending the latest 0.10.3 version.&lt;br/&gt;
&lt;br/&gt;
Since our last blog posts detailed what's new in Opa, many things have changed and have been updated:&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;Foreign-function calls are easier than ever and Opa now supports npm.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Another major feature is the support of Postgres, our first supported SQL database. Switching your runtime from MongoDB to Postgres is extremely easy.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
We also will try to keep the blog updated a bit more often, expect at least a major post monthly. If you want to share with the Opa community what you are building, &lt;a href=&quot;mailto:contact@opalang.org&quot;&gt;contact us&lt;/a&gt; to submit a guest post.&lt;br/&gt;
&lt;br/&gt;
And as a reminder, you can order the Opa book from its publisher O'Reilly or Amazon, which is the best resource to learn the technology.&lt;br/&gt;
&lt;br/&gt;
See you soon!</content><id>http://blog.opalang.org/2013/04/opa-111-is-coming-in-few-days.html</id><title type="text">Opa 1.1.1 is coming in a few days</title><updated>2013-04-11T19:44:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2013/03/opa-111-is-coming-soon-book-is-here.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">Two short news:&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;The latest Node.js release breaks the code generated by Opa 1.1.0. The fix is already in &lt;a href=&quot;https://github.com/MLstate/opalang&quot;&gt;master&lt;/a&gt; -- packages will be available shortly.&lt;/li&gt;
&lt;li&gt;The O'Reilly book &lt;a href=&quot;http://bit.ly/Wvfbmd&quot;&gt;Opa: Up and Running&lt;/a&gt; is now available. This is the best source to learn Opa or improve your Opa skills.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
</content><id>http://blog.opalang.org/2013/03/opa-111-is-coming-soon-book-is-here.html</id><title type="text">Opa 1.1.1 is coming soon. The book is here.</title><updated>2013-03-06T21:14:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2013/02/some-great-news-on-opa.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;p&gt;It's been a while since our last post. Like many others, we mainly rely on Twitter to spread the news on Opa.&lt;/p&gt;&lt;p&gt;This very short post is just an exciting summary on new things that happened in the last couple of months.&lt;/p&gt;&lt;h1&gt;Release of Opa 1.1.0&lt;/h1&gt;&lt;p&gt;We released Opa 1.1.0 which as always brings bugfixes, performance enhancement and new feature.&lt;/p&gt;&lt;p&gt;With Opa 1.1.0, you now can include JavaScript code and Node.js packages easier than ever! We will write about it soon.&lt;/p&gt;&lt;p&gt;Sadly, we were hit by GitHub decision to halt its download feature. We relied on this and even built a service (in Opa!) that automatically pushed packages. We are still looking at nice hosting alternatives, as the GitHub files should disappear soon.&lt;/p&gt;&lt;p&gt;From this release, we also support a 32-bit Windows package.&lt;/p&gt;&lt;h1&gt;Ongoing support of Postgres&lt;/h1&gt;&lt;p&gt;For a important project that is being built with Opa, we are adding Postgres support.&lt;/p&gt;&lt;p&gt;Switching your Opa code from MongoDB to Postgres requires almost no code change, and again we will write about it soon.&lt;/p&gt;&lt;h1&gt;Big project in Opa&lt;/h1&gt;&lt;p&gt;As mentioned earlier, we are working on a pretty big project implemented with Opa. Stay tuned!&lt;/p&gt;</content><id>http://blog.opalang.org/2013/02/some-great-news-on-opa.html</id><title type="text">Some great news on Opa</title><updated>2013-02-12T17:06:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/11/dropbox-as-database-tutorial.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;p&gt;Yesterday, our &lt;a href=&quot;http://blog.opalang.org/2012/10/dropbox-as-database.html&quot;&gt;Dropbox-as-a-Database&lt;/a&gt; blog post raised a lot of positive comments, in particular on &lt;a href=&quot;http://news.ycombinator.com/item?id=4723087&quot;&gt;Hacker News&lt;/a&gt; and Twitter. To get an idea of the DaaD concept, I created a &lt;a href=&quot;http://servermonitor-cedric.dotcloud.com/&quot;&gt;demo application&lt;/a&gt; using this new database back-end. &lt;/p&gt;&lt;p&gt;The demo arousing much interest, we decided not stop here! Today, we are introducing a tutorial to cover all steps of the creation of this application. Not all aspects are covered yet, but the goal is to explain in detail how the one-day demo app was built.&lt;/p&gt;&lt;p&gt;TL; DR: look at the &lt;a href=&quot;https://github.com/cedricss/server-monitor/commits/master&quot;&gt;commits&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://server-monitor.herokuapp.com/resources/img/screenshot.png&quot;&gt;&lt;img src=&quot;https://a248.e.akamai.net/camo.github.com/25780b678024a19f152a85c207ee0a7242dbccfd/687474703a2f2f7365727665722d6d6f6e69746f722e6865726f6b756170702e636f6d2f7265736f75726365732f696d672f73637265656e73686f742e706e67&quot; style=&quot;max-width:100%;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The tutorial will walk you through:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;create the application View (with HTML templates),&lt;/li&gt;
&lt;li&gt;add event handlers (and play with client/server magic),&lt;/li&gt;
&lt;li&gt;configure the application (within the app),&lt;/li&gt;
&lt;li&gt;interact with the DOM (JavaScript on steroids),&lt;/li&gt;
&lt;li&gt;parse user inputs and urls,&lt;/li&gt;
&lt;li&gt;use modules, recursive functions, records, block notations, types and pattern matching,&lt;/li&gt;
&lt;li&gt;use the Opa path notation to handle data stored in a MongoDB database,&lt;/li&gt;
&lt;li&gt;switch from a MongoDB database to a Dropbox one.&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#view&quot; name=&quot;view&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;View&lt;/h1&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#initial-user-interface&quot; name=&quot;initial-user-interface&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Initial User Interface&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-npc3b7fES0k/UJKc--_ArdI/AAAAAAAAABU/MOAVB-ZAvO4/s1600/initial-view.png&quot; imageanchor=&quot;1&quot; style=&quot;&quot;&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-npc3b7fES0k/UJKc--_ArdI/AAAAAAAAABU/MOAVB-ZAvO4/s1600/initial-view.png&quot; class=&quot;no-border&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Let's start with the UI. We create a &lt;code&gt;View&lt;/code&gt; module with a &lt;code&gt;page&lt;/code&gt; function inside. It will serve the HTML page to users:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;module View {

    function page() {
        &amp;lt;div class=&amp;quot;navbar navbar-fixed-top&amp;quot;&amp;gt;
          ...
        &amp;lt;/div&amp;gt;
        &amp;lt;div style=&amp;quot;margin-top:50px&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;row-fluid&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;span6&amp;quot;&amp;gt;
            &amp;lt;h1&amp;gt;Monitor&amp;lt;/h1&amp;gt;
            &amp;lt;form class=&amp;quot;well&amp;quot;&amp;gt;
              ...
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;span6&amp;quot;&amp;gt;
            &amp;lt;h1&amp;gt;Logs&amp;lt;/h1&amp;gt;
              ...
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;row-fluid&amp;quot;&amp;gt;
          ...
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see, Opa allows to write HTML directly without quotes, which frees us from the troublesome single and double quotes in pure JavaScript. &lt;br/&gt;
Also, Opa checks the HTML structure automatically. Try removing a closing tag!&lt;/p&gt;&lt;p&gt;Get the &lt;a href=&quot;https://github.com/cedricss/server-monitor/blob/34985981fa40de13c5a9f371f32be2a172e70621/main.opa&quot;&gt;full view code on github.&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#http-server&quot; name=&quot;http-server&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Http Server&lt;/h2&gt;&lt;p&gt;We setup (outside of the &lt;code&gt;View&lt;/code&gt; module) a http server configured to serve the page we just created:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Server.start(
    Server.http,
    [ { register : { doctype : { html5 } } },
      { title : &amp;quot;hello&amp;quot;, page : View.page }
    ]
)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;With Opa, we can define the client views and events, the http server or even the database within the source code, without any extra directives for the compiler! Of course, code can be split between files, modules, directories...&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#compile&quot; name=&quot;compile&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Compile&lt;/h2&gt;&lt;p&gt;We can add a Makefile:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;main.js: main.opa
    opa main.opa

run: main.js
    ./main.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And run the app:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;make run
Http serving on http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;We can also type &lt;code&gt;opa main.opa --&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; meaning &amp;quot;compile and run&amp;quot;. You can add extra runtime options, for example &lt;code&gt;opa main.opa -- --port 9090&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#bootstrap-theme&quot; name=&quot;bootstrap-theme&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Bootstrap theme&lt;/h2&gt;&lt;p&gt;We want to use the famous default &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Bootstrap css theme&lt;/a&gt; Twitter gave us. We just have to import the theme at the beginning of our file. We also import the glyphicons and the responsive css so the application can work well on different display sizes:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import stdlib.themes.bootstrap.css
import stdlib.themes.bootstrap.icons
import stdlib.themes.bootstrap.responsive
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or shorter:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import stdlib.themes.bootstrap.{css, icons, responsive}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We restart the server to appreciate the style improvement.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Ctrl-C
make run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Get the &lt;a href=&quot;https://github.com/cedricss/server-monitor/blob/34985981fa40de13c5a9f371f32be2a172e70621/main.opa&quot;&gt;source code at this step on github&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#add-jobs-client-side&quot; name=&quot;add-jobs-client-side&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Add jobs (Client-side)&lt;/h1&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#update-the-dom&quot; name=&quot;update-the-dom&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Update the Dom&lt;/h2&gt;&lt;p&gt;We add a new &lt;code&gt;Action&lt;/code&gt; module that will be responsible of the user interface updates. Opa dispatches the code on the server side and the client side automatically, and automates the calls between client and server. To get more control and optimize your code, you can use &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;client&lt;/code&gt; directives to tweak the compiler default dispatch behavior.&lt;/p&gt;&lt;p&gt;For example, here we want all user interface related actions to be computed on the client side as much as possible. To do so, we just add a &lt;code&gt;client&lt;/code&gt; directive on the module to affect all functions inside it. Let's create two functions inside this module, one to add a job in the list of jobs, one to add a message in the logs:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;client module Action {

    function msg(url, class, msg) {
        // Add a log on top of the logs list
        #info += &amp;lt;div&amp;gt;
                  &amp;lt;span class=&amp;quot;label&amp;quot;&amp;gt;
                    {Date.to_string_time_only(Date.now())}
                  &amp;lt;/span&amp;gt;
                  &amp;lt;span class=&amp;quot;label {class}&amp;quot;&amp;gt;
                    {url} {msg}
                  &amp;lt;/span&amp;gt;
                 &amp;lt;/div&amp;gt;
    }

    function add_job(name, url, uri, freq) {
        // Add a new line on top of the job list
        #jobs += &amp;lt;tr id=#{name}&amp;gt;
                    &amp;lt;td&amp;gt;{url} each {freq} sec&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
                 &amp;lt;/tr&amp;gt;;

    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Dom Manipulation&lt;/strong&gt;: Opa provide many syntax and feature enhancements on top of JavaScript. There is native support of HTML, but also a special syntax to manipulate the Dom: &lt;code&gt;#dom_id = &amp;lt;div&amp;gt;Replace&amp;lt;/div&amp;gt;&lt;/code&gt;, &lt;code&gt;#dom_id += &amp;lt;div&amp;gt;Prepend&amp;lt;/div&amp;gt;&lt;/code&gt; and &lt;code&gt;#dom_id =+ &amp;lt;div&amp;gt;Append&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#parse-user-inputs&quot; name=&quot;parse-user-inputs&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Parse User Inputs&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-Ir8uJIQ-dsU/UJKdeOC6nBI/AAAAAAAAABg/9h-2zk1OzmE/s1600/user-inputs.png&quot; imageanchor=&quot;1&quot; style=&quot;&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/-Ir8uJIQ-dsU/UJKdeOC6nBI/AAAAAAAAABg/9h-2zk1OzmE/s1600/user-inputs.png&quot; class=&quot;no-border&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Inside the &lt;code&gt;Job&lt;/code&gt; module, we need to add functions to check the format of user inputs (is it a integer? is it an well formed url?). The following code is based on the default parsers defined in the &lt;a href=&quot;http://doc.opalang.org/module/stdlib.core.parser/Parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;&lt;p&gt;Those parsing functions return an &lt;code&gt;option&lt;/code&gt;, which is either &lt;code&gt;{none}&lt;/code&gt; (it failed to parse the value), or &lt;code&gt;{some:v}&lt;/code&gt; where &lt;code&gt;v&lt;/code&gt; is the constructed value after the parsing and with the expected type (int, url, etc).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    function submit_job(_) {

        function p(f, d, error){
            match (f(Dom.get_value(d))) {
            case {none}: 
              msg(&amp;quot;ERROR:&amp;quot;, &amp;quot;label-error&amp;quot;, error);
              none
            case r: r
            // case {some:v}: {some:v} is equivalent
            }
        }

        // Parse form inputs and add the job
        uri  = p(Uri.of_string, #url,  &amp;quot;the url is invalid&amp;quot;);
        name = p(Parser.ident,  #name, &amp;quot;the log name is not a valid ident name&amp;quot;);
        freq = p(Parser.int,    #freq, &amp;quot;the frequency is not an integer&amp;quot;);

        match ((uri, name, freq)) {
        case ({some:uri}, {some:name}, {some:freq}):
          add_job(name, Dom.get_value(#url), uri, freq)
        default: void // some invalid inputs, don't add the job
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Dom.get_value(#url)&lt;/code&gt; returns the value set in the input of id &lt;code&gt;url&lt;/code&gt;&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_&lt;/code&gt; argument in the &lt;code&gt;submit_job&lt;/code&gt; function means we don't care what is the name and the value of this argument. In this case, it is a value of type &lt;code&gt;Dom.event&lt;/code&gt; given by events like &lt;code&gt;onclick&lt;/code&gt; or &lt;code&gt;onready&lt;/code&gt; (see below).&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#dom-events&quot; name=&quot;dom-events&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;Dom events&lt;/h2&gt;&lt;p&gt;In the &lt;code&gt;View.page&lt;/code&gt; function, we update the &amp;quot;Add and run&amp;quot; html button so the &lt;code&gt;submit_job&lt;/code&gt; function is called when a user click on it. It's easy to deal with dom events with Opa: we just put the function to call inside curly brackets and attach it to the event:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;a class=&amp;quot;btn btn-primary&amp;quot; onclick={ Action.submit_job }&amp;gt;
  &amp;lt;i class=&amp;quot;icon-plus icon-white&amp;quot;/&amp;gt; Add and run
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cedricss/server-monitor/commit/cd66d95c5f72d12b32e9f74fe2c7d1b57526aa07&quot;&gt;See all the changes we made in this &amp;quot;Add Jobs&amp;quot; section&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Run your application, then open it in your browser and click &amp;quot;Add an run&amp;quot; button providing both valid and invalid input values: jobs are added in the list of jobs or error messages are printed in the logs.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Ctrl-C
make run
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#to-be-continued&quot; name=&quot;to-be-continued&quot; class=&quot;anchor&quot;&gt;&lt;span class=&quot;mini-icon mini-icon-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;To be continued&lt;/h2&gt;&lt;p&gt;This is probably enough for today!&lt;br/&gt;
In a next article, we'll discuss about how to monitor the servers behind the job urls and how to control those jobs (play, pause, edit and remove).&lt;/p&gt;</content><id>http://blog.opalang.org/2012/11/dropbox-as-database-tutorial.html</id><title type="text">Dropbox-as-a-Database, the tutorial</title><updated>2012-11-01T15:53:00-00:00</updated><author><name>Cédric Soulas</name></author></entry><entry><link href="http://blog.opalang.org/2012/10/dropbox-as-database.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">We live in the as-a era. IaaS, SaaS, PaaS. Even Database-as-a-Service where companies offer SQL and NoSQL database management systems hosted online.&lt;br/&gt;
&lt;br/&gt;
We played with the concept a bit, and, in an era which is also the one of cloud storage with Dropbox, Box, Google Drive, Skydrive and the like, we wondered why applications and services shouldn't just use &lt;i&gt;our&lt;/i&gt; cloud storage account to store &lt;i&gt;our&lt;/i&gt; data. Why everything should be centralized? Why all applications and services behave like Mega and not like BitTorrent?&lt;br/&gt;
&lt;br/&gt;
That's why we introduced in &lt;a href=&quot;http://opalang.org/&quot;&gt;Opa 1.0.7&lt;/a&gt; a new database back-end working on top of Dropbox. If you're new to &lt;a href=&quot;http://opalang.org/&quot;&gt;Opa&lt;/a&gt;, you can read this &lt;a href=&quot;https://github.com/MLstate/opalang/wiki/A-tour-of-Opa&quot;&gt;introduction&lt;/a&gt;, but as the syntax should look familiar, you should still understand the code without any prior knowledge of Opa.&lt;br/&gt;
&lt;br/&gt;
Try a &lt;a href=&quot;http://servermonitor-cedric.dotcloud.com/&quot;&gt;demo application&lt;/a&gt; (1) to get an idea of the concept (&lt;a href=&quot;https://github.com/cedricss/server-monitor&quot;&gt;source code&lt;/a&gt; on github). The data of this sample application is not stored on &lt;strike&gt;Heroku&lt;/strike&gt; dotCloud, neither on any centralized server. Instead, every user data is directly stored on every user Dropbox account.&lt;br/&gt;
&lt;br/&gt;
(1) &lt;b&gt;update&lt;/b&gt;: Heroku is &lt;a href=&quot;https://status.heroku.com/incidents/463&quot;&gt;down&lt;/a&gt;, we are moving the demo to another cloud provider.&lt;br/&gt;
&amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;b&gt;update&lt;/b&gt;: the demo is now on dotCloud.&lt;br/&gt;
&amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;b&gt;update&lt;/b&gt;: &lt;a href=&quot;http://blog.opalang.org/2012/11/dropbox-as-database-tutorial.html&quot;&gt;Dropbox-as-a-Database, the tutorial&lt;/a&gt; is available!&lt;br/&gt;
&lt;br/&gt;
Let's dig into details about this new (and experimental) back-end.&lt;br/&gt;
&lt;img src=&quot;http://4.bp.blogspot.com/-aCPIKt9z5Iw/UJFAkrSya5I/AAAAAAAAAA8/jAkb09uRzSc/s1600/dropbox-storage.png&quot;/&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;h2&gt;Introduction: Databases in Opa&lt;/h2&gt;Let's explain our &lt;a href=&quot;http://server-monitor.herokuapp.com/&quot;&gt;demo app&lt;/a&gt;. The central notion of the app is the &lt;code&gt;job&lt;/code&gt;, defined with an url to monitor and an execution frequency:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;type job = { string url, int freq }&lt;/code&gt;&lt;/pre&gt;A database storing those jobs is defined this way in Opa:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;database monitor {
  stringmap(job) /jobs
}&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; is the name of the database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/jobs&lt;/code&gt; is the name of the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringmap(job)&lt;/code&gt; is the type of the collection: a map where keys are strings and values are of type &lt;code&gt;job&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;A function to add a job in the database looks like:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;function add(name, url, freq) {
    /monitor/jobs[name] &amp;lt;- { url:url, freq:freq }
}&lt;/code&gt;&lt;/pre&gt;And to get all of them, we write:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;function get_all(){
    /monitor/jobs
}&lt;/code&gt;&lt;/pre&gt;The code above is the standard way to access and update data in Opa. Follow this &lt;a href=&quot;https://github.com/MLstate/opalang/wiki/Hello,-database&quot;&gt;tutorial&lt;/a&gt; to learn more about it or read the &lt;a href=&quot;https://github.com/MLstate/opalang/wiki/The-database&quot;&gt;database chapter&lt;/a&gt;. The default database back-end in Opa is &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;.&lt;br/&gt;
&lt;h2&gt;&lt;a href=&quot;http://www.blogger.com/blogger.g?blogID=2073503406800427577&quot; name=&quot;use-case&quot;&gt;&lt;/a&gt; Storing Application Data in Dropbox&lt;/h2&gt;To store the &lt;code&gt;job&lt;/code&gt; above in a Dropbox folder, we could use a classic Node.js Dropbox library:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;client.put(&amp;quot;path/to/directory/filename.json&amp;quot;, serialize(job), callback)
client.get(
    &amp;quot;path/to/directory/filename.json&amp;quot;,
    function(status, data, metadata) { job = unserialize(data); ... }
)&lt;/code&gt;&lt;/pre&gt;And rely on standard API calls each time we want to access data. It's probably how most Dropbox-enabled apps work today.&lt;br/&gt;
&lt;h2&gt;Switching from MongoDB to Dropbox&lt;/h2&gt;Using a classic Node.js Dropbox library is quite easy for little data. But what if your application gets bigger? The nice database automation concept of Opa is lost, and we are back to tedious programming tasks. A typo in an API call? A possibly-hard-to-iron-out bug.&lt;br/&gt;
We would love to reuse the same Opa syntax as above, especially as it would allow the same application code to either run on MongoDB centrally, or using Dropbox.&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;/path/to/directory[filename] &amp;lt;- &amp;quot;content&amp;quot;  // write 
content = /path/to/directory[filename]     // read&lt;/code&gt;&lt;/pre&gt;This is exactly what the new Opa Dropbox back-end offers. The only change required to switch from MongoDB to Dropbox is to add a &lt;code&gt;@dropbox&lt;/code&gt; annotation:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;database monitor @dropbox {
    stringmap(job) /jobs
}&lt;/code&gt;&lt;/pre&gt;That's all. All the other functions seen in the introduction remain unchanged! Quite easy, isn't it?&lt;br/&gt;
&lt;h2&gt;Behind the Scene&lt;/h2&gt;&lt;h3&gt;Path Notation and Automatic Json Serialization&lt;/h3&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-aCPIKt9z5Iw/UJFAkrSya5I/AAAAAAAAAA8/jAkb09uRzSc/s1600/dropbox-storage.png&quot;/&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
How does it work behind the scene? When we write:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;/monitor/jobs[name] &amp;lt;- { url:url, freq:freq }&lt;/code&gt;&lt;/pre&gt;It serializes the Opa record to json, for example:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;url&amp;quot;:&amp;quot;http://opalang.org&amp;quot;,&amp;quot;freq&amp;quot;:30}&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;b&gt;Note&lt;/b&gt;: the serialization works on more complex Opa structures like &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;option&lt;/code&gt;&amp;nbsp;and supports embedded records&lt;/blockquote&gt;After the serialization, content is sent to the Dropbox account, regarding the current user session, at this location:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;Apps/monitor/jobs/opalang.json&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Non-blocking by Default&lt;/h3&gt;To retrieve and display all jobs, we simply write:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;all_jobs = /monitor/jobs   // retrieve all the jobs
display(all_jobs)          // do something&lt;/code&gt;&lt;/pre&gt;This will retrieve the list of json file stored in the &lt;code&gt;Apps/monitor/jobs/&lt;/code&gt; folder, and request the content for all of them.&lt;br/&gt;
All those requests are sent in parallel to the Dropbox API. The final &lt;code&gt;all_jobs&lt;/code&gt; value is constructed progressively, as the responses arrive from Dropbox (they may arrive out of order).&lt;br/&gt;
What is really important here is that Opa is non-blocking by default:&lt;br/&gt;
&lt;blockquote&gt;Modern applications use a lot of asynchronous calls. Dealing with callbacks manually can be painful, and failing to do so properly blocks the application runtime. To make asynchronous programming easy without blocking the application, Opa-generated JavaScript code uses smart continuations. (http://opalang.org)&lt;/blockquote&gt;It means two things:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;in the previous example, we don't have to pass the &lt;code&gt;display&lt;/code&gt; function as a callback, Opa compiles it to the appropriate asynchronous and non-blocking JS code. In fact, we can even just write &lt;code&gt;display(/monitor/jobs)&lt;/code&gt; as if it were synchronous!&lt;/li&gt;
&lt;li&gt;our application server doesn't block during the treatment: all other computations and client requests are fairly handled, thanks to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt; generated code and the Opa scheduler. This is automatic and transparent in Opa.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Going Further&lt;/h2&gt;We are not limited to maps. Simple value storage is possible:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;database monitor @dropbox {
  int /counter
}&lt;/code&gt;&lt;/pre&gt;I didn't detail here the user authentication process with Dropbox, it's just two functions you can read in the &lt;a href=&quot;https://github.com/cedricss/server-monitor/blob/master/main.opa#L158&quot;&gt;source code&lt;/a&gt; of the &lt;a href=&quot;http://server-monitor.herokuapp.com/&quot;&gt;server-monitor demo&lt;/a&gt;.&lt;br/&gt;
By the way, here is how to specify your &lt;a href=&quot;https://www.dropbox.com/developers/apps&quot;&gt;Dropbox App keys&lt;/a&gt; in the command line:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;./app.js --db-remote:monitor appkey:appsecret&lt;/code&gt;&lt;/pre&gt;Welcome to the Dropbox-as-a-Service era!&lt;br/&gt;
&lt;h4&gt;Notes&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;This release is experimental. You can &lt;a href=&quot;https://github.com/MLstate/opalang/issues&quot;&gt;submit issues on github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This back-end is still limited compared to powerful MongoDB queries, but it can be very useful in many cases.&lt;/li&gt;
&lt;/ul&gt;</content><id>http://blog.opalang.org/2012/10/dropbox-as-database.html</id><title type="text">Dropbox-as-a-Database</title><updated>2012-10-31T14:51:00-00:00</updated><author><name>Cédric Soulas</name></author></entry><entry><link href="http://blog.opalang.org/2012/09/programming-tools-ux-when-statically.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;p&gt;The great debate Dynamic vs. Static is a classic one. And usually ends up with no clear winner. Dynamic programming languages offer developers an awesome &lt;a href=&quot;http://en.wikipedia.org/wiki/Workflow&quot;&gt;&lt;strong&gt;workflow&lt;/strong&gt;&lt;/a&gt;: &lt;em&gt;Edit, test, edit, test&lt;/em&gt;... Static typing and compilation usually breaks this simple workflow, but offers more guarantees.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Build &amp;amp; Run on save&lt;/strong&gt; functionality is not something new and exists in most IDEs. However, following the KISS philosophy, I recently worked on &lt;code&gt;opa-watch&lt;/code&gt;, a simple independent tool that brings this functionality to your &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; project.&lt;/p&gt;&lt;p&gt;&lt;code&gt;opa-watch&lt;/code&gt; automatically [re]compiles and [re]launches your project while you edit it. It simplifies your workflow and helps you to focus on editing and testing steps, just forgetting about the compilation step. All this is made possible by the speed of the &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; compiler.&lt;/p&gt;&lt;h3&gt;&lt;code&gt;opa-watch&lt;/code&gt;: A standard use case&lt;/h3&gt;&lt;p&gt;In a terminal, create a new &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; project (e.g. &lt;code&gt;opa create --name watchMe&lt;/code&gt;). And &lt;code&gt;opa-watch&lt;/code&gt; it &lt;strong&gt;once and for all&lt;/strong&gt; by indicating the path of the project:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;opa-watch --src-dir watchMe&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you are notified &lt;strong&gt;Launched : watchMe&lt;/strong&gt; and you can open your app in your browser (e.g. &lt;code&gt;firefox locahost:2001&lt;/code&gt;):&lt;/p&gt;&lt;img src=&quot;http://i.imgur.com/na3yY.png&quot;/&gt;&lt;br/&gt;
&lt;p&gt;Now, &lt;em&gt;edit&lt;/em&gt; and &lt;em&gt;save&lt;/em&gt;, for instance change the button label from &amp;quot;Save&amp;quot; to &amp;quot;Done&amp;quot; (e.g. &lt;code&gt;emacs watchMe/src/view.opa&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Wait for the &amp;quot;Launched&amp;quot; notification and refresh the page in you browser:&lt;/p&gt;&lt;img src=&quot;http://i.imgur.com/E8jX8.png&quot;/&gt;&lt;br/&gt;
&lt;p&gt;In case of an error (for instance when you have syntax or type errors in your code), you are notified as well:&lt;/p&gt;&lt;img src=&quot;http://i.imgur.com/KWUt9.png&quot;/&gt;&lt;br/&gt;
&lt;p&gt;This example works for any &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; project that defines either an &lt;code&gt;.opack&lt;/code&gt; and/or a &lt;code&gt;.conf&lt;/code&gt; file.&lt;/p&gt;&lt;h3&gt;Compiled vs Dynamic languages&lt;/h3&gt;&lt;h4&gt;Compiled languages&lt;/h4&gt;&lt;p&gt;Compilation enforces that some verification steps are performed before you can test your project. Theses verifications can be minimal, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Syntax_error&quot;&gt;syntactic correctness&lt;/a&gt; or &lt;a href=&quot;http://www.answers.com/topic/undefined-variable&quot;&gt;undefined variable&lt;/a&gt;. Or more high level like &lt;a href=&quot;http://en.wikipedia.org/wiki/Type_system#Static_typing&quot;&gt;type checking&lt;/a&gt;. Typically they also improve the speed of the application at runtime.&lt;/p&gt;&lt;p&gt;Type checking is probably the most important verification to be done, as it helps to verify that all piece of abstractions and API of your projects' modules fit together. Compilation error systematically detect a problem with a &lt;a href=&quot;http://blog.opalang.org/2012/07/programming-tools-ux-better-type-error.html&quot;&gt;&lt;strong&gt;handcrafted diagnosis&lt;/strong&gt;&lt;/a&gt; and usually &lt;a href=&quot;http://blog.opalang.org/2012/07/programming-tools-ux-better-type-error.html&quot;&gt;&lt;strong&gt;precise code positions&lt;/strong&gt;&lt;/a&gt;. Maintaining big projects is made much easier.&lt;/p&gt;&lt;p&gt;Ideally only &lt;a href=&quot;http://www.webopedia.com/TERM/R/runtime_error.html&quot;&gt;runtime&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Logic_error&quot;&gt;logic errors&lt;/a&gt; remains in your code after compilation succeed. The dark side is that a compilation step is needed and it can take some time.&lt;/p&gt;&lt;h4&gt;Dynamic languages&lt;/h4&gt;&lt;p&gt;Applications written with dynamic languages run and can be tested immediately. Even if the source code is a work in progress, possibly incomplete and incorrect, an application can still be tested. Hence theses languages appears &lt;a href=&quot;http://alexgaynor.net/2010/sep/29/dynamic-and-static-programming-languages-and-teaching/&quot;&gt;more accessible&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The disadvantage is that any problem in the code (syntax, incoherency, missing parts) will result in a runtime error, that will appear sooner or latter (think production), sometimes with high uncertainty.&lt;/p&gt;&lt;p&gt;Test errors can be difficult to reproduce and may only be &lt;strong&gt;symptoms&lt;/strong&gt;, loosely related to the real problem. And the bigger the application, the harder ironing out bugs can be.&lt;/p&gt;&lt;h4&gt;Typical workflow&lt;/h4&gt;&lt;p&gt;With compiled language, you usually repeat the following steps:&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal&quot;&gt;&lt;li&gt;Edit code&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Compile&lt;/em&gt; (goto 1 on error)&lt;/li&gt;
&lt;li&gt;Run server&lt;/li&gt;
&lt;li&gt;Refresh browser&lt;/li&gt;
&lt;li&gt;Test (goto 1 on error)&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;Achieving the highest productivity&lt;/h4&gt;&lt;p&gt;Step 2 in the above list, compilation, is usually perceived as a deal breaker because of &lt;strong&gt;3 speed bumps&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;invoking the compiler;&lt;/li&gt;
&lt;li&gt;compilation time;&lt;/li&gt;
&lt;li&gt;compilations errors.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The last item is not really a problem.&lt;/p&gt;&lt;p&gt;Compilation errors are just way to get fewer test errors. Both equally breaks the workflow, but it's much better to notice errors as early as possible and in that respect dealing with errors before runtime vs. during test is a much better practice. &lt;/p&gt;&lt;p&gt;It really seems there is no trivial winner in the ever-going debate between dynamic and static languages, otherwise most companies would be using only one of the two. &lt;/p&gt;&lt;p&gt;&lt;em&gt;IF&lt;/em&gt; the compilation step was automatic and fast, compiled languages would be definitely much more interesting. This is exactly the goal of &lt;code&gt;opa-watch&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;code&gt;opa-watch&lt;/code&gt;: In Details&lt;/h3&gt;&lt;p&gt;&lt;code&gt;opa-watch&lt;/code&gt;:&lt;/p&gt;&lt;ol style=&quot;list-style-type: decimal&quot;&gt;&lt;li&gt;detects any change in your project,&lt;/li&gt;
&lt;li&gt;(re)Compiles the project automatically, and&lt;/li&gt;
&lt;li&gt;(re)Runs the project server.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It eliminates most manual commands required to test the project. User Interaction is minimized to almost zero and usually only need to refresh the application in your browser.&lt;/p&gt;&lt;p&gt;Compilation even feels faster since the duration of the compilation is partialy covered by other developer interactions like switching to browser window, refresh, etc. If compilation is fast enough, like we strive to do with &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt;, it is almost unnoticeable.&lt;/p&gt;&lt;p&gt;The apple of the pie: &lt;code&gt;opa-watch&lt;/code&gt; is not restricted to an IDE or a particular language and can be used with any project using customized command-line options.&lt;/p&gt;&lt;h4&gt;Custom commands&lt;/h4&gt;&lt;p&gt;By default, &lt;code&gt;opa-watch&lt;/code&gt; has rules for standard &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; projects (which either have a .opack and/or a .conf file). You just need to invoke &lt;code&gt;opa-watch&lt;/code&gt; with your &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; project directory as a parameter.&lt;/p&gt;&lt;p&gt;&lt;code&gt;opa-watch&lt;/code&gt; on any project by giving the &lt;em&gt;Compile&lt;/em&gt; command and the &lt;em&gt;Run server&lt;/em&gt; command explicitly. In fact you can give a sequence of commands to be executed. For instance if your project has a Makefile with two build targets, &lt;code&gt;target1&lt;/code&gt; and &lt;code&gt;target2&lt;/code&gt; to build and a &lt;code&gt;test&lt;/code&gt; target:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;opa-watch --src-dir myProject --command &amp;quot;make build1&amp;quot; --command &amp;quot;make build2&amp;quot; --command &amp;quot;make test&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The last command is assume to be the &lt;em&gt;Run server&lt;/em&gt; command. The &lt;em&gt;Run server&lt;/em&gt; command should kill preexisting run, otherwise you can run several times your project in parallel. The &lt;em&gt;Launched&lt;/em&gt; notification does not wait for this command termination. You can change this behavior with &lt;code&gt;--no-launch&lt;/code&gt;. For instance, if you just need to auto-build (without running the server):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;opa-watch --src-dir myProject --command &amp;quot;make target1&amp;quot; --no-launch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More customization options are available in the &lt;a href=&quot;https://github.com/OpaOnWindowsNow/opa-watch/blob/master/README.md&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;Ignoring given files (or directories)&lt;/h4&gt;&lt;p&gt;The directory given as &lt;code&gt;--src-dir&lt;/code&gt; argument is folded to retrieve the whole directory hierarchy. Then any event appearing in any directory of the hierarchy is monitored.&lt;/p&gt;&lt;p&gt;There are however avoidance rule to ignore spurious file-system events. For instance, if your favorite editor creates temporary file with a particular extension &lt;code&gt;.bak&lt;/code&gt; for any file you edit. Events on theses temporary files must be be ignored:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;opa-watch --src-dir myProject --avoid-ext &amp;quot;.bak&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also use &lt;code&gt;--avoid-prefix&lt;/code&gt; pref to ignore file starting with pref and &lt;code&gt;--avoid-dir&lt;/code&gt; dir to ignore a subdirectory.Note that all files that are generated (or modified) during the build or test should be listed by an avoidance rule. Otherwise you will go in a auto-building loop.&lt;/p&gt;&lt;h4&gt;Remark on compilation times&lt;/h4&gt;&lt;p&gt;Depending on your build system, project recompilation can be slow. To enjoy &lt;code&gt;opa-watch&lt;/code&gt;, your build system should only rebuilds what is really necessary to do the Test step.&lt;/p&gt;&lt;p&gt;Recent versions of &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; supports dependency directed parallel (after v3395) recompilation (no Makefile involved) for structured project (i.e. modularized with package).&lt;/p&gt;&lt;h3&gt;Please contribute&lt;/h3&gt;&lt;p&gt;&lt;code&gt;opa-watch&lt;/code&gt; is very recent work, and is released under MIT license. We plan to ship it with the next &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; release. Future features will probably be on the notification side (for &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;emacs&lt;/a&gt; and &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;ST2&lt;/a&gt;), more complete rules for &lt;a href=&quot;http://opalang.org&quot;&gt;Opa&lt;/a&gt; projects and browser auto-refresh.&lt;/p&gt;&lt;p&gt;&lt;em&gt;External contributions are &lt;a href=&quot;https://github.com/OpaOnWindowsNow/opa-watch&quot;&gt;welcome&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Btw, this post was written in markdown and converted with pandoc. Left as an exercise to the reader: Adapt &lt;code&gt;opa-watch&lt;/code&gt; to pandoc! Select the answer just above to discover it.&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;white&quot;&gt; opa-watch --src-dir blog/opa-watch/ --command &amp;quot;pandoc blog.md -o blog.html&amp;quot; --no-launch --avoid-prefix &amp;quot;blog.html&amp;quot; &lt;/font&gt;&lt;/p&gt;</content><id>http://blog.opalang.org/2012/09/programming-tools-ux-when-statically.html</id><title type="text">Programming Tools UX: When Statically Compiled Feels Dynamic</title><updated>2012-09-18T10:08:00-00:00</updated><author><name>Rudy Sicard</name></author></entry><entry><link href="http://blog.opalang.org/2012/09/the-opa-framework-hits-major-milestone.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">When we released Opa 1.0 in June this year, we made a major move by supporting Node.js as the main backend for Opa.&lt;br/&gt;
Since then, as &lt;a href=&quot;http://blog.opalang.org/2012/06/announcing-opa-10.html&quot;&gt;we told our on blog&lt;/a&gt; at the time, we are focused optimizing the code generation and runtime of Node.js. We already did great improvements in the 5 minor releases up to the current 1.0.5.&lt;br/&gt;
And today, we are happy to inform you that 1.0.6 ships. But don't trust the minor revision number: 1.0.6 is a major release and improvement to Opa. The only reason we're keeping away from using the 1.1 tag is the forthcoming support of &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm packages&lt;/a&gt;.&lt;br/&gt;
This post tells where we are headed, what are the remaining goals and try to answer the questions that are frequently asked either online or in person for instance at &lt;a href=&quot;http://www.meetup.com/The-Opa-Hackathons-in-the-Bay-Area/events/73780032/&quot;&gt;our last hackathon&lt;/a&gt;.&lt;br/&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
As of today, our major focus becomes documentation. Opa already has a very rich set of features, but many parts lack proper documentation. Even our manual needs to be improved.&lt;br/&gt;
Therefore we moved our manual from our proprietary system to GitHub:&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/MLstate/opalang/wiki/A-tour-of-Opa&lt;/code&gt;&lt;/pre&gt;
and made it globally editable. &lt;em&gt;Please help us and contribute to improving it!&lt;/em&gt;&lt;br/&gt;
Our next goals are:&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;To simplify the presentation of the &lt;a href=&quot;http://doc.opalang.org/api&quot;&gt;API documentation&lt;/a&gt; and add new features, such as browse and query by type.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;To create a cookbook with small Opa recipes to take inspiration from in your applications. We will automatically ensure that recipes compile with the latest versions of Opa.&lt;/li&gt;
&lt;li&gt;Optimize the API browser to make it faster, and make it social by accepting user contributions. - And more generally create easily accessible documentation about Opa.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
Not to mention the forthcoming book on Opa which Adam and I have almost finished, to be published by O'Reilly. Stay tuned for the release!&lt;br/&gt;
&lt;h2&gt;
Optimization&lt;/h2&gt;
Our two perpetual goals are:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;To reduce size of the JavaScript code;&lt;/li&gt;
&lt;li&gt;To make JavaScript runtime faster.&lt;/li&gt;
&lt;/ul&gt;
But for the last 40 days, this was our main, if not unique, preoccupation.&lt;br/&gt;
And we're glad that we did not made improvements... We made huge ones!&lt;br/&gt;
&lt;ul&gt;&lt;img src=&quot;https://pbs.twimg.com/media/A2b14OiCcAAWS--.jpg:large&quot; width=&quot;50%&quot;/&gt;
&lt;li&gt;Between Opa 1.0.5 and 1.0.6, the size of the Opa-generated JavaScript shrunk an unbelievable 62%.&lt;/li&gt;
&lt;li&gt;Opa apps now use 29% less memory and start 38% faster!&lt;/li&gt;
&lt;img src=&quot;https://pbs.twimg.com/media/A2byK_ECAAAA0rY.jpg:large&quot; width=&quot;50%&quot;/&gt;
&lt;li&gt;Not to mention they run 46% faster (on a Fibonacci benchmark) and handle 49% more request/second on the same hardware.&lt;/li&gt;
&lt;/ul&gt;
Give it a try now, just in time for the &lt;a href=&quot;http://opalang.org/challenge/home.xmlt&quot;&gt;Opa Developer Challenge&lt;/a&gt;!&lt;br/&gt;
&lt;h2&gt;
JavaScript Support&lt;/h2&gt;
We are working hard to make the JavaScript code that Opa outputs as simple and as readable as possible. And the shorter JS code in 1.0.6 is clearly a step in that direction.&lt;br/&gt;
For 1.1, we plan to integrate with Node packages (npm), so that Opa-built packages are standard node packages, which means:&lt;br/&gt;
&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;Opa packages can hosted in the npmjs repository;&lt;/li&gt;
&lt;li&gt;Opa packages can be used by any Node.js application;&lt;/li&gt;
&lt;li&gt;Opa can use existing npmjs packages easily.&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
We will blog about this and the coming changes soon.&lt;br/&gt;
&lt;h2&gt;
Other changes&lt;/h2&gt;
As usual, please look at the &lt;a href=&quot;http://opalang.org/resources/changelog.xmlt&quot;&gt;changelog&lt;/a&gt;. In particular, please note the &lt;em&gt;new opa-bundle&lt;/em&gt; application. &lt;em&gt;opa-bundle&lt;/em&gt; is a CLI that bundles the JS, depends and stdlib of an app for an easy deployment on a clean server.&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;opa bundle TARGET&lt;/code&gt;&lt;/pre&gt;
will create a self contained TARGET.opa-bundle and tar-gzip it.&lt;br/&gt;
Note also that there is a new AMI for Opa on Amazon EC2. Read further on our &lt;a href=&quot;https://github.com/MLstate/opalang/wiki/Amazon-Image-for-Opa&quot;&gt;GitHub wiki&lt;/a&gt;.&lt;br/&gt;
&lt;h2&gt;
Frequent requests&lt;/h2&gt;
&lt;h3&gt;
Dynamic programming&lt;/h3&gt;
We are often asked for a &amp;quot;dynamic&amp;quot;-like programming workflow where Opa compiler is called automatically on code changes and the resulting app relaunched. The new &lt;a href=&quot;https://github.com/OpaOnWindowsNow/opa-dynamic&quot;&gt;opa-dynamic&lt;/a&gt; project on GitHub does just this. It is itself implemented in Opa and released under the MIT license. Please test it (and contribute by sending pull requests if you feel like it).&lt;br/&gt;
&lt;h3&gt;
Reactive front-end programming&lt;/h3&gt;
Another popular demand is support for automatic synchronization of values, generalizing the prototype discussed in our &lt;a href=&quot;http://forum.opalang.org/#213%26qid=-56681%26q=reactive&quot;&gt;forum&lt;/a&gt;. We are investigating to use an existing JavaScript framework for this, such as AngularJS. Please share your thoughts with us, for instance by filing &lt;a href=&quot;https://github.com/MLstate/opalang/issues?direction=desc&amp;amp;sort=created&amp;amp;state=open&quot;&gt;issues&lt;/a&gt;.&lt;br/&gt;
&lt;h3&gt;
SQL support&lt;/h3&gt;
Our main backend is now Node.js and MongoDB but we keep getting legitimate feedback asking for support of other backends and databases. We can tell you that:&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;Support of SQL databases, starting with MySQL is high on that list.&lt;/li&gt;
&lt;li&gt;Support of Java and the JVM is a possible long-term goal.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
For all these projects, community contributions are more than welcome. Opa is a highly innovative framework -- we need &lt;em&gt;your help&lt;/em&gt; to make it happen.</content><id>http://blog.opalang.org/2012/09/the-opa-framework-hits-major-milestone.html</id><title type="text">The Opa Framework Hits a Major Milestone</title><updated>2012-09-10T14:31:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/08/opa-105-released-improvements-on-nodejs.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">Last month we introduced the Node.js backend for Opa. We received lots of feedback, thank you all!&amp;nbsp;We worked hard to take everything into consideration: the new Opa 1.0.5 release is a big one which comes with a lot of bug fixes, improvements and new features.&lt;br/&gt;
&lt;br/&gt;
Here is a quick summary of the changelog:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;the generated JavaScript for&amp;nbsp;Node.js&amp;nbsp;is even smaller, once again, and really faster to compute (x3.75 to compute Fibonacci, &amp;nbsp;x1.7 to serve hello pages under siege, compared to Opa 1.0.4).&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;we introduced two new modules, &lt;a href=&quot;http://doc.opalang.org/module/stdlib.core/Binary&quot;&gt;Binary&lt;/a&gt; and &lt;a href=&quot;http://doc.opalang.org/module/stdlib.core/Pack&quot;&gt;Pack&lt;/a&gt;, for a better and easier support of binary data and buffers, exposed by various&amp;nbsp;Node.js&amp;nbsp;modules. For an example, have a look at&amp;nbsp;&lt;a href=&quot;https://github.com/MLstate/opalang/blob/master/lib/stdlib/core/web/server/client_code.opa&quot;&gt;client_code.opa&lt;/a&gt;&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;we improved the compiler error messages by polishing messages formatting and adding more hints, especially for parsing errors and typing errors&amp;nbsp;(and we even further enhanced since this &lt;a href=&quot;http://blog.opalang.org/2012/07/programming-tools-ux-better-type-error.html&quot;&gt;blog post&lt;/a&gt;). We hope Opa will be even easier for web developers that are not familiar with typed and compiled languages. If you think some error messages you get from Opa 1.0.5 could be improved, please let us know in the &lt;a href=&quot;http://forum.opalang.org/&quot;&gt;forum&lt;/a&gt;.&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;your application now checks&amp;nbsp;Node.js&amp;nbsp;version and modules dependencies at startup, to avoid nasty errors at runtime, and is more stable thanks to numerous little bug fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;
Have a look at the complete changelog&amp;nbsp;&lt;a href=&quot;http://opalang.org/resources/changelog.xmlt&quot;&gt;here&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
We also reorganized the project &lt;a href=&quot;https://github.com/MLstate/opalang&quot;&gt;source code&lt;/a&gt;: it should help any contributors who start digging into the code. And as we promised, we changed the license: the&amp;nbsp;Node.js&amp;nbsp;backend and the standard library are now MIT. If you want to contribute, tell us and we will be pleased to help.&amp;nbsp;For example we are looking for contributors to add support of SQL databases and local storage.&lt;br/&gt;
&lt;br/&gt;
And don't forget the Opa developer challenge this summer! Find more details &lt;a href=&quot;http://opalang.org/challenge/home.xmlt&quot;&gt;here&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://opalang.org/get.xmlt&quot;&gt;Download Opa 1.0.5&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;</content><id>http://blog.opalang.org/2012/08/opa-105-released-improvements-on-nodejs.html</id><title type="text">Opa 1.0.5 released: great improvements in Node.js backend</title><updated>2012-08-02T10:43:00-00:00</updated><author><name>Cédric Soulas</name></author></entry><entry><link href="http://blog.opalang.org/2012/07/programming-tools-ux-better-type-error.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;sect1&quot;&gt;&lt;div class=&quot;sectionbody&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;I am an intern at the Opa team having a summer break from my PhD at UCSD.&amp;nbsp;The goal of my internship is to make strong static typing easier for web developers!&lt;br/&gt;
&lt;br/&gt;
This goal is highly motivated from interesting discussions in the Silicon Valley, in particular with Julien Verlaguet at Facebook, on how to make type error messages (much) more user-friendly.&lt;br/&gt;
&lt;br/&gt;
Developers want to write code faster. We all agree.&amp;nbsp;Opponents of static typing often state that:&lt;br/&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Compilation can be&lt;span style=&quot;color: red;&quot;&gt; &lt;/span&gt;too long and breaks the workflow.&lt;/li&gt;
&lt;li&gt;Figuring out type error messages can make you out of the zone.&lt;/li&gt;
&lt;/ul&gt;They are right. However, taking into account the time spent in testing and debugging plus a formal guarantee on non tested cases in production and more accurate documentation, the benefits of static typing cannot be ignored.&lt;br/&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br/&gt;
We aim at providing a more user-friendly static typing. This blog post describes an enhancement about the second point: better type errors messages which indicate what you need to change in the code.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br/&gt;
&lt;/div&gt;To begin with, let&amp;rsquo;s briefly explain why a &lt;em&gt;type error message&lt;/em&gt; is raised.&amp;nbsp;Language elements, such as keywords, constants, functions, records, etc., provide&amp;nbsp;type information about expressions.&amp;nbsp;Opa compiler uses this information to associate a type to each expression.&amp;nbsp;Whenever two conflicting types are detected for one expression, a type error&amp;nbsp;message is delivered. For example, the following code contains a type error, as &lt;i&gt;incr&lt;/i&gt;&amp;nbsp;expects an integer argument, but it is called with a float&amp;nbsp;(color is used to relate locations in code with their references in the error messages):&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;br/&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;color: #993399;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;.&lt;/span&gt;  &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;incr&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #993399;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;
       &lt;span style=&quot;color: #990000;&quot;&gt;...&lt;/span&gt;
&lt;span style=&quot;color: #993399;&quot;&gt;42&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: yellow;&quot;&gt;&lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;incr&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #993399;&quot;&gt;6.0&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;The expression &lt;em&gt;incr&lt;/em&gt;&amp;nbsp;at line 42 is associated with&amp;nbsp;two conflicting information about its type:&lt;/div&gt;&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;&lt;li&gt;line 1 indicates that &lt;em&gt;incr&lt;/em&gt;&amp;nbsp;is a function that&amp;nbsp;expects an integer argument and returns an integer.&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;line 42 indicates that&amp;nbsp;&lt;em&gt;incr&lt;/em&gt;&amp;nbsp;is a function that takes a float.&lt;br/&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;These two types conflict, as&amp;nbsp;the argument can not simultaneously be&amp;nbsp;a float and an integer. Thus, current Opa compiler&amp;nbsp;will deliver the following error message:&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;Error
File &amp;quot;foo.opa&amp;quot;,  &lt;span style=&quot;background-color: yellow;&quot;&gt;line 42, characters 15-25, (42:15-42:25 | 77-87)&lt;/span&gt;
&lt;tt&gt;Function was found of type &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;int -&amp;gt; int&lt;/span&gt; but application expects it to be
of type &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;float -&amp;gt; 'a&lt;/span&gt;.
Types &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;int&lt;/span&gt; and &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;float&lt;/span&gt; are not compatible&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;br/&gt;
In the above message, one can spot two flaws.&amp;nbsp;Firstly, it only draw programmer&amp;rsquo;s attention to line 42,&amp;nbsp;where &lt;em&gt;incr&amp;nbsp;&lt;/em&gt;is actually used.&amp;nbsp;But, the mistake could as well be made in &lt;em&gt;incr&lt;/em&gt;'s definition.&amp;nbsp;The programmer might have wanted to change the&amp;nbsp;&lt;i&gt;incr&lt;/i&gt;&amp;nbsp;to actually increment float numbers&amp;nbsp;and after 41 lines of code totally forgot about it.&amp;nbsp;Secondly, the message can be hard to understand.&amp;nbsp;Its comprehension requires basic knowledge of type theory,&amp;nbsp;while it could clearly state that there should be an integer instead of 6.0.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;br/&gt;
These two flaws can be addressed as follows:&amp;nbsp;Firstly, as mentioned earlier, the type error is created by the conflicting&amp;nbsp;information gathered from two program points,&amp;nbsp;hence, citing both conflicting points could help the programmer.&amp;nbsp;Secondly, to make messages more comprehensible, we traverse the original types, until we spot the conflicting sub-types and we describe in simple language the position of the conflicting types.&amp;nbsp;With the above two enhancements, the type error message is:&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color: #993399;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;.&lt;/span&gt;  &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;incr&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;background-color: white; color: #990000;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: #d5a6bd; color: #993399;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;
       &lt;span style=&quot;color: #990000;&quot;&gt;...&lt;/span&gt;
&lt;span style=&quot;color: #993399;&quot;&gt;42&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;.&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white;&quot;&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;background-color: yellow; color: red;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;background-color: yellow; font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;incr&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: yellow; color: #990000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: lime; color: #993399;&quot;&gt;6.0&lt;/span&gt;&lt;span style=&quot;background-color: yellow; color: #990000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;background-color: yellow; color: red;&quot;&gt;}
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;Error: &lt;tt&gt;File &amp;quot;foo.opa&amp;quot;,  &lt;span style=&quot;background-color: yellow;&quot;&gt;line 42, characters 15-25, (42:15-42:25 | 77-87)&lt;/span&gt;
Type conflict
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #d5a6bd;&quot;&gt;(1:20-1:20)  &lt;/span&gt;         int
  &lt;span style=&quot;background-color: lime;&quot;&gt;(42:21-42:23)&lt;/span&gt;         float
&lt;div&gt;&lt;/div&gt;The argument of function incr should be &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;int&lt;/span&gt; instead of &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;float&lt;/span&gt;
 &lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br/&gt;
&lt;div class=&quot;paragraph&quot;&gt;The first part of this message actually says that&amp;nbsp;the integer type was found at line 1 and the float type at line 42.&amp;nbsp;But these two types conflict, so the programmer should check these locations&amp;nbsp;to correct the error.&amp;nbsp;The second part of the message describes the original types&amp;nbsp;that produced the error; i.e. how &lt;tt&gt;incr&lt;/tt&gt;&amp;nbsp;was defined and how&amp;nbsp;the programmer tried to use it.&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;We applied the above enhancements to Opa&amp;rsquo;s type error messages:&amp;nbsp;in every message we cite the position of the conflicting information and&amp;nbsp;whenever possible, the error is explained in simple language. These changes will be available in the next Opa&amp;rsquo;s version.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><id>http://blog.opalang.org/2012/07/programming-tools-ux-better-type-error.html</id><title type="text">Programming tools UX: Better Type Error Messages</title><updated>2012-07-20T14:33:00-00:00</updated><author><name>Unknown</name></author></entry><entry><link href="http://blog.opalang.org/2012/07/opa-104-released.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;p&gt;Short news: Opa 1.0.4 has just been released.&lt;/p&gt;&lt;pre&gt;Tokyo:opa henri$ wc -l hack1.opa 
      22 hack1.opa

Tokyo:opa henri$ time opa hack1.opa     
real 0m1.491s
user 0m1.278s
sys 0m0.177s

Tokyo:opa henri$ wc -l hack1.js 
     112 hack1.js
&lt;/pre&gt;&lt;br/&gt;
&lt;p&gt;In case of type errors, it's much faster not to break your workflow:&lt;/p&gt;&lt;pre&gt;Tokyo:opa henri$ time opa hack1.opa 
Error
File &amp;quot;hack1.opa&amp;quot;, line 6, characters 10-15, (6:10-6:15 | 85-90)
Expression has type string but is coerced into int.


real 0m0.248s
user 0m0.186s
sys 0m0.050s
&lt;/pre&gt;&lt;br/&gt;
&lt;p&gt;And speaking about workflow, stay tuned for a next blog post.&lt;/p&gt;</content><id>http://blog.opalang.org/2012/07/opa-104-released.html</id><title type="text">Opa 1.0.4 Released</title><updated>2012-07-04T17:48:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/06/opa-post-10-status-update.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">Last week, we launched 1.0. That's a milestone for a project. In our case, it meant that all the features that we wanted for 1.0 were in... and that of course meant the support of Node.js. Thank you for all nice messages telling it was a perfect move. When we read things like &amp;quot;Now, I want to use Opa&amp;quot;, that goes straight to the heart. And of course, turns out there was another major reason for releasing 1.0: team was thirsty!&lt;br/&gt;
&lt;br/&gt;
Launching 1.0 provided us with a great amount of feedback. And bug reports. As a result, we are hard at work solving all reported issues, hence the Opa version number is growing quickly:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;1.0.1 reinstated scaffolding, SSL support along with MongoDB bugfixes, just one day after launch;&lt;/li&gt;
&lt;li&gt;1.0.2 fixed the debian and Ubuntu packages and introduced new packages that were left over with Node.js support;&lt;/li&gt;
&lt;li&gt; 1.0.3 reduces greatly the size of the package download (and that matters, since Opa is much downloaded). Downloads are now 66% lighter!&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
The updated source code should also be available soon -- we are cleaning the tree and updating the license on all source files. As &lt;a href=&quot;http://blog.opalang.org/2012/05/opa-license-change-not-just-agpl.html&quot;&gt;promised earlier&lt;/a&gt;, Opa 1.0 is released under a much more permissive license that allows anyone to release applications written with Opa under any license.&lt;br/&gt;
&lt;br/&gt;
As promised, the whole team is now high-boiling making Opa leaner, better, nicer. &lt;br/&gt;
&lt;br/&gt;
Let's dig into what we are building right now:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;First, the size of the generated JavaScript is today way too big. It's not cleaned, nor minimized as we wanted to be sure not to introduce bugs. But we are now focused on reducing the line count by 99%. That should impact favorably compilation time, launch time, and of course the size of Opa programs. Best news: We are expecting to release this &lt;strong&gt;this week&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;Second, better error messages. Many new developers look at Opa, and some get a hard time understanding the error messages. Over the next months, we will release major innovations in displaying type errors.&lt;/li&gt;
&lt;li&gt;Third, easy deployment on clouds. We are now working on basic tools and collaborating with major cloud providers to bring you very easy deployments soon.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
Oh, and when we're not doing all this, we keep doing little improvements, bugfixes to about everything to make sure Opa rocks!&lt;br/&gt;
If you have any suggestion, please tell on &lt;a href=&quot;http://forum.opalang.org&quot;&gt;the forum&lt;/a&gt; or on &lt;a href=&quot;https://github.com/mlstate/opalang/issues?direction=desc&amp;amp;sort=created&amp;amp;state=open&quot;&gt;github&lt;/a&gt;.&lt;br/&gt;
If you want to join the fame of &lt;a href=&quot;http://opalang.org/contributors.xmlt&quot;&gt;contributors&lt;/a&gt;, it's also a perfect time to do so: Come on in and say &amp;quot;Hi&amp;quot;!</content><id>http://blog.opalang.org/2012/06/opa-post-10-status-update.html</id><title type="text">Opa: Post 1.0 Status Update</title><updated>2012-06-27T17:36:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/06/announcing-opa-10.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">Today, just 365 days since the first open source release of Opa, we announce the release of Opa 1.0.&lt;br/&gt;
&lt;br/&gt;
Opa 1.0 introduces the last major feature we wanted for Opa: The complete support for the JavaScript stack, including Node.js and MongoDB.&lt;br/&gt;
&lt;br/&gt;
We originally released Opa supporting only its own, native backend. While we still love this platform, much of the feedback we received asked us to support existing runtime technologies. We chose the JavaScript stack as our target, since we already had support for JavaScript on the client, we already had support for MongoDB, and we already had JavaScript-inspired syntax. Not to mention the support for Node.js was the platform the most asked for (together with the JVM, which represents a greater work).&lt;br/&gt;
&lt;br/&gt;
So starting today, Opa generates standard JavaScript applications and becomes the most advanced framework ever built for JavaScript. The workflow is super easy. Developers just write applications in Opa, which checks automatically the quality of the application and then generates a standard JavaScript application. In a matter of seconds.&lt;br/&gt;
&lt;br/&gt;
Let me detail the Top 3 features we have built in:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;Automatic client/server/database distribution,&lt;/li&gt;
&lt;li&gt;Automatic code rewriting to ensure that the Node.js application code does not hang, by automating the use of fibers,&lt;/li&gt;
&lt;li&gt;Strong static typing from the client to the database, bringing you the equivalent of bazillions of automated tests. We worked hard to make typing easy thanks to type inference -- which means most types are never written in your Opa code.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
No other framework has built so many advanced algorithms to make developing high-quality Node.js and MongoDB applications faster and easier. And let me insist: The unique strong static typing of Opa is a key differentiator in a world of fragile frameworks.&lt;br/&gt;
&lt;br/&gt;
Opa 1.0 is not the end of road, of course. It's just the beginning. We will try to keep our road-map public from now on. Let's do it right now! Our next three next goals for 1.1, due at the end of this summer, are to:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;Improve the standard library and APIs,&lt;/li&gt;
&lt;li&gt;Improve error messages that the compiler outputs,&lt;/li&gt;
&lt;li&gt;Improve the performance of the Node.js backend.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
Nothing extraordinary but the polish we all love from a mature technology.&lt;br/&gt;
&lt;br/&gt;
Just a last word: We would be nothing without our community. Contributions, discussions on the mailing list have had a strong impact on Opa. Thank you all, and let's make Opa the de-facto framework for JavaScript applications.&lt;br/&gt;</content><id>http://blog.opalang.org/2012/06/announcing-opa-10.html</id><title type="text">Announcing Opa 1.0</title><updated>2012-06-21T14:04:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/06/programming-tools-ux-how-we-simplified.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;h3&gt;

 Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
In a &lt;a href=&quot;http://blog.opalang.org/2012/03/programming-tools-ux-experience-how-we.html&quot;&gt;previous post&lt;/a&gt; we demonstrated how just a little work can drastically improve the UX of Opa.&amp;nbsp;Here is another example: automatic project creation. Again, it just took us just a few hours to add this feature and we think it greatly improved the UX of the compiler. Let's take an example.&lt;br/&gt;
&lt;br/&gt;
To compile and run a single file all you just need to type is:&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;$ opa hello_world.opa --&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
But when your application becomes bigger you will probably additionally  need to:&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt; add a &lt;tt&gt;resources&lt;/tt&gt; directory with images and css files,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; split your project into several files,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; group those files into different packages,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; and create a Makefile.&lt;br/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;

 Generate a full Opa project&lt;/h3&gt;
&lt;div style=&quot;clear: left;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
Now Opa is able to generate all the required architecture from a single command line:&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;$ opa create myapp&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
It will create a new &lt;tt&gt;myapp&lt;/tt&gt; directory and generate all those files:&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;Makefile
Makefile.common
opa.conf
resources/css/style.css
src/controller.opa
src/model.opa
src/view.opa&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
The source code comes charged with everything you need to get started, in particular:&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt; a database declaration,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; a static include of the &lt;tt&gt;resources&lt;/tt&gt; directory,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; the appropriate URL parsers,&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt; two bootstraped pages as an example: a wiki and a statistics panel.&lt;br/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;strong&gt;&lt;br/&gt;
Configuration file&lt;/strong&gt;&lt;br/&gt;
&lt;div style=&quot;clear: left;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
Let&amp;rsquo;s take the opportunity to have a closer look at the generated configuration file&amp;nbsp;&lt;span style=&quot;font-family: monospace;&quot;&gt;opa.conf&lt;/span&gt;:&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;myapp.controller:
        import myapp.view
        src/controller.opa

myapp.view:
        import myapp.model
        import stdlib.themes.bootstrap
        src/view.opa

myapp.model:
        src/model.opa&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
When you use such a configuration file, you don&amp;rsquo;t need to write package declarations (such as &lt;tt&gt;package myapp.controller&lt;/tt&gt; and &lt;tt&gt;import myapp.view&lt;/tt&gt;) at the beginning of your &lt;tt&gt;.opa&lt;/tt&gt; files.&lt;br/&gt;
Everything is centralized into a single configure file; just add the &lt;tt&gt;--conf&lt;/tt&gt; option when invoking &lt;tt&gt;opa&lt;/tt&gt; compiler to use it.&lt;/div&gt;
&lt;h3&gt;

 Compile and run&lt;/h3&gt;
&lt;div style=&quot;clear: left;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
If you generated the application with &lt;tt&gt;opa create&lt;/tt&gt;, it can be compiled and executed very easily:&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;$ cd myapp
$ make run&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
It will automatically download and start mongoDB on first startup. If you already have mongoDB installed and running, edit the Makefile and use &lt;tt&gt;--db-remote host:port&lt;/tt&gt; option.&lt;/div&gt;
&lt;h3&gt;

 Try and contribute!&lt;/h3&gt;
&lt;div style=&quot;clear: left;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
You can find the sources of the tool in the &lt;a href=&quot;https://github.com/MLstate/opalang&quot;&gt;opalang repository&lt;/a&gt; on github, more specifically in the &lt;a href=&quot;https://github.com/MLstate/opalang/tree/master/tools/opa-create&quot;&gt;&lt;tt&gt;tools/opa-create&lt;/tt&gt;&lt;/a&gt; folder.&lt;br/&gt;
You can already try it with the &lt;a href=&quot;http://opalang.org/get.xmlt&quot;&gt;latest stable package&lt;/a&gt;.&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
In the future we can imagine adding new templates and new options like &lt;tt&gt;--author myname&lt;/tt&gt;, &lt;tt&gt;--no-mvc&lt;/tt&gt;, &lt;tt&gt;--example chat&lt;/tt&gt;, etc.&lt;br/&gt;
All suggestions and contributions are welcome! The tool itself is written in Opa, so you can even brush up your Opa skills while contributing!&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/06/programming-tools-ux-how-we-simplified.html</id><title type="text">Programming tools UX: How we simplified the creation of Opa projects</title><updated>2012-06-13T14:58:00-00:00</updated><author><name>Cédric Soulas</name></author></entry><entry><link href="http://blog.opalang.org/2012/06/new-release-opa-093.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;em&gt;(New to Opa? Read &lt;a href=&quot;http://blog.opalang.org/2011/06/hello-opa-what-is-opa-to-quote-manual.html&quot;&gt;this&lt;/a&gt; to learn what it's all about&lt;/em&gt;)&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;A new version of Opa has just been released, Opa 0.9.3. Since in the rush we missed the announcement for Opa 0.9.2 let me summarize major changes since 0.9.1:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;New platforms: &lt;a href=&quot;https://opalang.org/get.xmlt&quot;&gt;Windows&lt;/a&gt;&lt;/strong&gt; (thanks &lt;a href=&quot;https://github.com/shadinger&quot;&gt;shadinger&lt;/a&gt;) and &lt;a href=&quot;http://www.freshports.org/lang/opa/&quot;&gt;FreeBSD&lt;/a&gt; (thanks Jeremy Messenger),
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;MongoDB&lt;/strong&gt; officially becomes the &lt;strong&gt;default database&lt;/strong&gt; backend in Opa,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Lots of improvements to &lt;strong&gt;HTML5-compliance&lt;/strong&gt;,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Initial Opa plugin for &lt;a href=&quot;https://github.com/OpaOnWindowsNow/OpaSublimeText/downloads&quot;&gt;Sublime Text 2&lt;/a&gt;,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Sub-paths, projections, &lt;tt&gt;ifexists&lt;/tt&gt;, &lt;tt&gt;exists&lt;/tt&gt; and more extensions in database queries,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Bootstrap and &lt;a href=&quot;http://doc.opalang.org/package/stdlib.widgets.bootstrap&quot;&gt;Bootstrap widgets&lt;/a&gt; updated to 2.0.3,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
5 first chapters of the manual translated to Chinese (thanks Li Wenbo)&amp;nbsp;&amp;mdash;&amp;nbsp;you should see them automatically if your browser is configured for the Chinese language,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Convenience syntax for inline event handler functions: &lt;tt&gt;onready={ function(_) code }&lt;/tt&gt;, instead of the more verbose &lt;tt&gt;onready={ function(_) { code } }&lt;/tt&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
PUT/DELETE methods handled by the HTTP server,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
IMAP/SMTP clients,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
New package &lt;a href=&quot;http://doc.opalang.org/package/stdlib.core.concurrency&quot;&gt;stdlib.core.concurrency&lt;/a&gt; providing server-side concurrency primitives,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Scheduling policy updated to improve level of concurrency,
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
and numerous bug fixes.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Lots of stuff happening! And that was just a rough summary; you're welcome to consult the &lt;a href=&quot;http://opalang.org/resources/changelog.xmlt&quot;&gt;CHANGELOG&lt;/a&gt; for a more complete list of changes. Also, as usual, you can &lt;a href=&quot;http://opalang.org/get.xmlt&quot;&gt;download Opa&lt;/a&gt;, &lt;a href=&quot;http://forum.opalang.org/&quot;&gt;discuss it with us&lt;/a&gt;, &lt;a href=&quot;https://github.com/MLstate/opalang/issues&quot;&gt;report problems&lt;/a&gt; and &lt;a href=&quot;https://github.com/MLstate/opalang/pulls&quot;&gt;provide contributions&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/06/new-release-opa-093.html</id><title type="text">New release: Opa 0.9.3</title><updated>2012-06-06T08:40:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/05/opa-license-change-not-just-agpl.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;h2&gt;The problem&lt;/h2&gt;&lt;br/&gt;
Since we launched Opa almost a year ago, we received countless feedback. To date, the main criticism about Opa is not about the technology itself, but its licensing.&lt;br/&gt;
&lt;br/&gt;
We chose initially to release Opa under the Affero GPL (AGPL) license. We made this choice to ensure that all improvements to Opa benefit the whole community -- and also provide more programs written in Opa.&lt;br/&gt;
&lt;br/&gt;
There are two components in Opa, both released under the AGPL:&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;The compiler,&lt;/li&gt;
&lt;li&gt;The runtime environment.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
And because of the latter, every program written in Opa, that links to the runtime, must itself be released under the AGPL or the GPL.&lt;br/&gt;
&lt;br/&gt;
On paper,&lt;br/&gt;
&lt;ul&gt;&lt;li&gt;The license convinces (as in enforces) developers to release the source code of the applications written in Opa. Which means more code to look at, great for a new language.&lt;/li&gt;
&lt;li&gt;The license entices business users to buy a license from us and fund us to continue the development of Opa. That&amp;rsquo;s a cool business model for a company with only engineers.&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;
But in reality, it turns out the license is barred from being used at many companies, so we end up repelling developers. Even worse, we don't get the main expected benefit as most developers won&amp;rsquo;t release the source anyway while they develop for many possible reasons: It&amp;rsquo;s not working yet, they are not proud of their code yet, they don&amp;rsquo;t know what to do with it yet, etc.&lt;br/&gt;
&lt;br/&gt;
And customers struggle to find the value in the &amp;ldquo;same thing&amp;rdquo; that others get for free. It was better to sell support as such.&lt;br/&gt;
&lt;br/&gt;
&lt;h2&gt;The solution&lt;/h2&gt;&lt;br/&gt;
As promised earlier and now mentioned in our FAQ, we are changing the license of Opa. The new licensing scheme will take effect &lt;strong&gt;June 20th&lt;/strong&gt;.&lt;br/&gt;
&lt;br/&gt;
Let me share with you in advance the details of the licensing and the reasoning behind it.&lt;br/&gt;
&lt;br/&gt;
&lt;ol&gt;&lt;li&gt;The Opa compiler will remain an AGPL project.&lt;/li&gt;
&lt;li&gt;The standard library and the native backend will be licensed under the GPL license with the so-called ClassPath exception, like Java. The exception means you can link the GPL code with any code, opening the door to license your application under any license.&lt;/li&gt;
&lt;li&gt;The forthcoming Node.js backend will be licensed under the MIT license.&lt;/li&gt;
&lt;/ol&gt;&lt;br/&gt;
&lt;h2&gt;The rationale&lt;/h2&gt;&lt;br/&gt;
For Opa developers, the license change will allow the community to write applications in Opa and license them at will -- and we are happy to address this much requested issue.&lt;br/&gt;
&lt;br/&gt;
But we are just a start-up. We worked hard to build Opa and we believe our approach to type-safe, easy web app development is unmatched. We don't want (major) corporations and/or cloud platforms to be able to take parts or fork the Opa &lt;emph&gt;compiler&lt;/emph&gt; without either release the changes and related projects or work with us.</content><id>http://blog.opalang.org/2012/05/opa-license-change-not-just-agpl.html</id><title type="text">Opa License Change: Not just AGPL anymore</title><updated>2012-05-29T14:51:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/04/one-web-app-one-language.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;When I started the Opa project five years ago, my goal was to clean up the mess and build a clean technology for writing web applications.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;At the time, Web 2.0 applications based on AJAX were increasingly popular and most technology stacks were growing in complexity, surpassing 5 technologies: A web server, a programming language for the server, another for the client, a database and at least one framework. Not counting an ORM layer, caching mechanism, etc., etc. There was room for improvement!&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;The design was based on two principles:&lt;/div&gt;&lt;div class=&quot;olist arabic&quot;&gt;&lt;ol class=&quot;arabic&quot;&gt;&lt;li&gt;There should be a single, unique language for writing web applications.&lt;/li&gt;
&lt;li&gt;There should be a single, clean, runtime on the servers.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;This month, two new technologies launched that rely on this first principle. And both chose JavaScript as the single language:&lt;/div&gt;&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;&lt;li&gt;Yahoo's Mojito framework features dynamic code migration, with the ability to shift computation at runtime from the client to the server for mobile devices, in order to reduce the amount of data transferred to the device.&lt;/li&gt;
&lt;li&gt;Another framework, Meteor, automates the communication between the server and the client part of the web application.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Both use Node.js, the increasingly popular &amp;ldquo;application server&amp;rdquo; for JavaScript.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;We are really happy to witness this move that makes web application development easier. Since 2008, we have learned a lot by using a single programming language for writing web applications. Especially when growing from prototypes to real-world applications. It turns out that one of the most needed features was the ability to automatically determine where the code should run, on the client or on the server. We named that feature the Opa &amp;ldquo;slicer&amp;rdquo;.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;You can classically enforce a given side using &amp;ldquo;client&amp;rdquo; and &amp;ldquo;server&amp;rdquo; directives:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt; &lt;span style=&quot;font-style: italic&quot;&gt;&lt;span style=&quot;color: #9A1900&quot;&gt;// Client-side&lt;/span&gt;&lt;/span&gt;
client &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;client_function&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;value&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;...&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
 &lt;span style=&quot;font-style: italic&quot;&gt;&lt;span style=&quot;color: #9A1900&quot;&gt;// Server-side&lt;/span&gt;&lt;/span&gt;
server &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;server_function&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;value&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;...&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Most of the time, you want to omit the hint and let Opa guess. Imagine you have a DOM element of id &amp;quot;counter&amp;quot;, and a database named &amp;quot;mydb&amp;quot;:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;font-style: italic&quot;&gt;&lt;span style=&quot;color: #9A1900&quot;&gt;// Will be on server side:&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;db_update&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;value&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #FF6600&quot;&gt;/mydb/&lt;/span&gt;counter &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;-&lt;/span&gt; value
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;font-style: italic&quot;&gt;&lt;span style=&quot;color: #9A1900&quot;&gt;// Will be on client-side:&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;dom_update&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;value&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    #counter &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; value
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Even better! Both calls (and the automated communication) can be written with a single function:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;value&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #FF6600&quot;&gt;/mydb/&lt;/span&gt;counter &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;-&lt;/span&gt; value&lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt;
    #counter &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; value
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;And even with a single LOC:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;font-style: italic&quot;&gt;&lt;span style=&quot;color: #9A1900&quot;&gt;// Just write _what_ you want to do, without worrying about _how_ to do that&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;init&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    #counter &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #FF6600&quot;&gt;/mydb/&lt;/span&gt;counter
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;As you may imagine, automatic code repartition is a very complex problem that requires deep code analysis to make it work. In Opa, we tackle this problem by relying on an advanced static typing system. And let's be honest, the type system of Opa is the feature we are most proud of.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Every function in the Opa code gets a type (which is usually inferred). When the developer writes:&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;function &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;s&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;
   &lt;span style=&quot;color: #990000;&quot;&gt;String.&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;length&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;s&lt;span style=&quot;color: #990000;&quot;&gt;);&lt;/span&gt;
&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;
function &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;bar&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;,&lt;/span&gt; y&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;
   &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #990000;&quot;&gt;+&lt;/span&gt; y&lt;span style=&quot;color: #990000;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;The Opa compiler infers:&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;color: #009900;&quot;&gt;int&lt;/span&gt; function &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;string&lt;/span&gt; s&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;
   &lt;span style=&quot;color: #990000;&quot;&gt;String.&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;length&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;s&lt;span style=&quot;color: #990000;&quot;&gt;);&lt;/span&gt;
&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #009900;&quot;&gt;int&lt;/span&gt; function &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;bar&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;string&lt;/span&gt; x&lt;span style=&quot;color: #990000;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;int&lt;/span&gt; y&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: red;&quot;&gt;{&lt;/span&gt;
   &lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;span style=&quot;color: black;&quot;&gt;foo&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #990000;&quot;&gt;+&lt;/span&gt; y&lt;span style=&quot;color: #990000;&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: red;&quot;&gt;}&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Similarly, the slicer infers wether a given function may run on the client, the server, both. Over the years, we developed and refined the approach to make it usable past the prototypes. We introduced hints to quickly precise if the client-server should be asynchronous, or synchronous. Wether, the function may, or may not be, callable. And use the rich typing information to make it work.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;The compiler may warn you that:&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre&gt;&lt;tt&gt;File &lt;span style=&quot;color: red;&quot;&gt;&amp;quot;errorslicer.opa&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;,&lt;/span&gt; line &lt;span style=&quot;color: #993399;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;,&lt;/span&gt; characters &lt;span style=&quot;color: #993399;&quot;&gt;17&lt;/span&gt;-&lt;span style=&quot;color: #993399;&quot;&gt;19&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #990000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #993399;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #993399;&quot;&gt;17&lt;/span&gt;-&lt;span style=&quot;color: #993399;&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #993399;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #990000;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #993399;&quot;&gt;73&lt;/span&gt;-&lt;span style=&quot;color: #993399;&quot;&gt;75&lt;/span&gt;&lt;span style=&quot;color: #990000;&quot;&gt;)&lt;/span&gt;
A&amp;sbquo; &lt;span style=&quot;color: red;&quot;&gt;'malicious'&lt;/span&gt; is tagged as &lt;span style=&quot;color: red;&quot;&gt;'client'&lt;/span&gt; but it uses &lt;span style=&quot;color: red;&quot;&gt;'protected'&lt;/span&gt; values&lt;span style=&quot;color: #990000;&quot;&gt;:&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;to prevent you from doing evil things. If you're curious, the sample &lt;a href=&quot;http://pastebin.com/LkJLwfqV&quot;&gt;code is here&lt;/a&gt;.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Opa has also built advanced support for MongoDb. And again, we make use of the rich typing information to make things simpler for the developer while automatically ensuring that the code is well written. You can &lt;a href=&quot;http://blog.opalang.org/2012/03/programming-tools-ux-experience-how-we.html&quot;&gt;read this post&lt;/a&gt; by Adam on this subject.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Opa has become a mature technology and now brings together incredibly clean and concise code, but also security and high-quality to web applications. The feedback we received hinted that Opa's biggest drawback is that it relies on its own application server.&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;Opa already and naturally uses JavaScript, as the Opa compiler translates the client-side Opa code to JavaScript. The popularity of the Node.js platform and the good set of tools and technologies now available, convinced us that we should also support Node.js as a new server backend. After all, we already know how to translate from Opa to JavaScript!&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;We have the feeling Opa could become the killer framework for writing Node.js applications. Do you also think that would be great?&lt;/div&gt;&lt;/div&gt;</content><id>http://blog.opalang.org/2012/04/one-web-app-one-language.html</id><title type="text">One Web App = One Language</title><updated>2012-04-18T16:32:00-00:00</updated><author><name>HB</name></author></entry><entry><link href="http://blog.opalang.org/2012/03/programming-tools-ux-experience-how-we.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Most developers nowadays rave about &amp;ldquo;User Experience&amp;rdquo; or UX, i.e. designing software that pleases the users. Most of the time, UX involves GUI concepts and design, but not always. When we added support for the MongoDB database to the Opa programming language, we tried to make things as easy as possible for the developers. But a second look at the actual programming workflow showed room for improvement&amp;nbsp;&amp;mdash;&amp;nbsp;and improvement we did.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Little background first. Opa is a web programming platform. It unifies the approach to web development by providing a single, uniform programming language for both front- and back-end coding. Under the hood the program gets automatically divided into the server and the client part, with the former compiled to native code and the latter to JavaScript and all the communication between the two taken care of by the compiler. Opa also nicely integrates database functionality, including extensive support for MongoDB, parts of which I&amp;rsquo;ll talk more about in this article. If interested in the language &lt;a href=&quot;http://opalang.org&quot;&gt;Opa's website&lt;/a&gt; is a great place to start.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;A typical support for a database in any programming language consists of a driver for that particular database that provides connectivity with the DB and an API that allows the program to communicate with it. Opa goes few steps further. From the start the database was very tightly integrated into the language allowing one to very easily persist and query arbitrary data in one&amp;rsquo;s program. Opa was using its own DBMS to accomplish that.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;That worked perfectly but our users wanted to have more freedom and to be able to use existing DBMSs. We quickly provided a driver&amp;nbsp;&amp;mdash;&amp;nbsp;in the usual sense of this word&amp;nbsp;&amp;mdash;&amp;nbsp;for MongoDB. But then we realized that a traditional driver comes with traditional problems: communication between the program and the database, going mostly via uninterpreted strings, is essentially untyped and unsafe. This flew in the face Opa&amp;rsquo;s principles, as it aims to provide a single, uniform language that is safe and secure to use and where type-safety is a given.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Our response to that was to provide an intelligent interface layer between Opa and MongoDB that ensures type-safety for all DB operations. On top of that we made the interface consistent with Opa&amp;rsquo;s internal database so that now one can very easily switch back and forth between those two different backends. The usage scenario for Mongo was to first start its instance (after installing it on the given machine) and then, once it was running, the Opa application using it, so it went something like this (output slightly simplified for brevity):&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;koper@thistle:~/test$ mkdir -p ~/mongodata/opa
koper@thistle:~/test$ ${INSTALL_DIR}/mongod --noprealloc --dbpath ~/mongodata/opa &amp;gt; ~/mongodata/opa/log.txt 2&amp;gt;&amp;amp;1
koper@thistle:~/test$ ./test.exe --db-local ~/mongodata/opa
Opening database at ~/mongodata/opa
Test (OPA/1488) serving on http://thistle:8080&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;this first creates directory &lt;tt&gt;~/mongodata/opa&lt;/tt&gt; for database data, then runs MongoDB server storing logs at &lt;tt&gt;\~/mongodata/opa/log.txt&lt;/tt&gt; and finally launches the Opa application which will use that database server instance.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;At the same time we also improved the query language in Opa. Just to give you an idea of how it works think how would you retrieve &lt;em&gt;all American or French movies with rating between 7 and 10, released after year 2000, sorted by the number of ratings they received and limited to the first 50 results?&lt;/em&gt;. In Opa the query is actually shorter than this sentence:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;color: #008080&quot;&gt;movies&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&lt;/span&gt;movies&lt;span style=&quot;color: #990000&quot;&gt;/&lt;/span&gt;all&lt;span style=&quot;color: #990000&quot;&gt;[&lt;/span&gt;rating &lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #993399&quot;&gt;7&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;and&lt;/span&gt;&lt;/span&gt; rating &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&quot;color: #993399&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;country&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;France&amp;quot;&lt;/span&gt; or &lt;span style=&quot;color: #008080&quot;&gt;country&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; release_year &lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #993399&quot;&gt;2000&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt; order &lt;span style=&quot;color: #990000&quot;&gt;+&lt;/span&gt;ratings_no&lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt; limit &lt;span style=&quot;color: #993399&quot;&gt;50&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;]&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;If you want to learn more about this cool, concise syntax check the &lt;a href=&quot;http://doc.opalang.org/manual/Hello%E2%80%94database&quot;&gt;relevant chapter&lt;/a&gt; in Opa manual.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;That was cool. And we were quite pleased. Until one day we realized one fact: Opa&amp;rsquo;s approach tightly integrating persistence in the language, essentially meant that our users didn&amp;rsquo;t have to know first thing about MongoDB to be able to take advantage of this great, state-of-the-art database! They could just take a previous Opa program and now switch the database backend to Mongo. Except, for one thing. They of course had to be able to install and run it separately from the application itself, as illustrated above.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We could improve this by providing some installation hints&amp;hellip; But why not going one step further and actually performing the installation and run an instance of MongoDB for the user? With this improvement in place the above scenario became this (again output slightly simplified):&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;koper@thistle:~/test$ ./test.exe
Opening database at ~/.opa/test.exe/db
MongoDB does not seem to be installed in &amp;lsquo;~/.opa/test.exe/db&amp;rsquo;; sit back, relax (or grab a cup of coffee) and I'll install it for you
Launching MongoDB...
Test (OPA/1488) serving on http://thistle:8080&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The change just meant one day of work of one of the Opa developers (thanks Quentin) but the results is lots of love from our users. Thank you for your support, we love to make you happy!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/03/programming-tools-ux-experience-how-we.html</id><title type="text">Programming tools UX: How we made MongoDB even easier to use with Opa</title><updated>2012-03-29T12:42:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/03/opahowtos.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Hey Opa coders! I do realize the blog was a bit low on tutorials lately. The problem is: writing them is very time-consuming and with so much stuff happening around Opa lately (just last week: very successful Opa DevCamp in Paris plus presence at &lt;a href=&quot;http://www.gdconf.com/&quot;&gt;GDC 2012&lt;/a&gt;, biggest gaming conference, in San Francisco, CA) it's sometimes difficult to keep up.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;However, we get a continuous stream of interesting questions, via the &lt;a href=&quot;https://lists.owasp.org/mailman/listinfo/opa&quot;&gt;mailing list&lt;/a&gt;, &lt;a href=&quot;http://forum.opalang.org&quot;&gt;forum&lt;/a&gt; and otherwise. Many of those questions are of general interest and some of them are nicely self-contained. Such as today's question from Nathan Frund (private communication) who was wondering how best to map HTML's SELECT component to Opa. Perfect subject for a short HOWTO!&amp;hellip; so that's how &lt;a href=&quot;https://github.com/akoprow/OpaHOWTOs&quot;&gt;OpaHOWTOs&lt;/a&gt; were born :).&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The idea is to take certain tasks/problems and to illustrate how to address them properly in Opa. Instead of writing a full-blown tutorial I just write a simple demo program: heavily commented, with HINTs and EXERCISEs. The nice thing about this is that even if you're not interested in the subject itself of a particular HOWTO, they should often contain techniques and solutions that are of general interest, so you can still learn!&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/akoprow/OpaHOWTOs&quot;&gt;Check out&lt;/a&gt; the freshly created repo. I may occasionally post some updates about it on the blog, but the best way to stay updated and hear about them is to follow us on Twitter:&lt;/p&gt;&lt;/div&gt;
&lt;iframe allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;http://platform.twitter.com/widgets/follow_button.html?screen_name=opalang&amp;amp;show_count=false&quot; style=&quot;width:300px; height:20px; border: 0px transparent;&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Oh, one more thing: if you have good HOWTOs ideas don't hesitate to share them with me! (for instance in the comments to this post).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/03/opahowtos.html</id><title type="text">OpaHOWTOs</title><updated>2012-03-12T17:07:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/03/new-release-opa-091.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;em&gt;(New to Opa? Read &lt;a href=&quot;http://blog.opalang.org/2011/06/hello-opa-what-is-opa-to-quote-manual.html&quot;&gt;this&lt;/a&gt; to learn what it's all about&lt;/em&gt;)&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Today we just published a new release: Opa 0.9.1. You're welcome to consult the &lt;a href=&quot;http://opalang.org/resources/changelog.xmlt&quot;&gt;CHANGELOG&lt;/a&gt; for a complete list of changes but the highlights include:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Improved &lt;tt&gt;opa-translate&lt;/tt&gt; tool for conversion between old &amp;amp; new syntax.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Ability to mix db3 and mongo backends in a single Opa program.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Feature to automatically download, install and launch a MongoDB instance (&lt;tt&gt;--db-local&lt;/tt&gt;).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Experimental feature: remote logging (logs send to a remote server).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Unification of runtime types (and fixed &lt;em&gt;magic&lt;/em&gt; functions).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Better handling of Twitter's Bootstrap CSS (included in the app instead of referencing external resource) and updating it to 2.0.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Added hooks to register favicons (much the same as custom CSS and JS).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Numerous bug fixes.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;As usual you can &lt;a href=&quot;http://opalang.org/get.xmlt&quot;&gt;download it&lt;/a&gt;, &lt;a href=&quot;http://forum.opalang.org/&quot;&gt;discuss with us&lt;/a&gt;, &lt;a href=&quot;https://github.com/MLstate/opalang/issues&quot;&gt;report problems&lt;/a&gt; and &lt;a href=&quot;https://github.com/MLstate/opalang/pulls&quot;&gt;provide contributions&lt;/a&gt;. Happy Opa hacking!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/03/new-release-opa-091.html</id><title type="text">New release: Opa 0.9.1</title><updated>2012-03-09T11:56:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/02/nodejs-vs-opa-web-framework-showdown.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Don't miss out on this new article on developer.com: &lt;a href=&quot;http://www.developer.com/open/node.js-opa-javascript-framework.html&quot;&gt;&amp;ldquo;Node.js vs. Opa: Web Framework Showdown&amp;rdquo;&lt;/a&gt;. Happy reading!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/02/nodejs-vs-opa-web-framework-showdown.html</id><title type="text">Node.js vs. Opa: Web Framework Showdown</title><updated>2012-02-28T21:29:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/02/opa-090-new-syntax.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;When we &lt;a href=&quot;http://blog.opalang.org/2012/02/new-release-opa-090-s4.html&quot;&gt;released Opa 0.9.0&lt;/a&gt; (codenamed &lt;tt&gt;S4&lt;/tt&gt;) we promised to follow-up with posts presenting its two main new features: new syntax and MongoDB support. In this post we'll shortly introduce the former.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The main motivation behind introducing the new syntax was to make it more accessible and familiar to users of other programming languages. It is largely inspired by JavaScript and hence current web developers trying Opa should feel more at home with it. However, we still believe that our original syntax has a lot to offer (for one thing: it's very concise) and will continue supporting it. The choice between the two variants is done via a commend line option:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;opa --parser js-like &lt;span style=&quot;color: #990000&quot;&gt;...&lt;/span&gt;
opa --parser classic &lt;span style=&quot;color: #990000&quot;&gt;...&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;choosing new/old syntax respectively. Starting with Opa 0.9.0 new syntax becomes the default (so to use it one does not need to include any of the above arguments). It will also be used exclusively in the &lt;a href=&quot;http://doc.opalang.org/!/manual&quot;&gt;manual&lt;/a&gt; and the &lt;a href=&quot;http://doc.opalang.org/!/api&quot;&gt;API&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Instead of introducing the new syntax here, I'd like to refer you to a newly introduced section in our manual: &lt;a href=&quot;http://doc.opalang.org/#!/refcard&quot;&gt;Reference card&lt;/a&gt;, which succintly summarizes Opa's syntax, important libraries and everything to get you started with the language. It's a new material, so don't hesitate to give us your feedback on it.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I'll wrap up this post with our immortal &lt;a href=&quot;https://github.com/MLstate/hello_chat&quot;&gt;Chat example&lt;/a&gt;; both in old &amp;amp; new syntax, stripped from comments for brevity (consult the original repo for a fully commented version).&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;ftabs&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#new_syntax&quot;&gt;chat-new-syntax.opa&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.blogger.com/feeds/2073503406800427577/posts/default#old_syntax&quot;&gt;chat-old-syntax.opa&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;import&lt;/span&gt;&lt;/span&gt; stdlib&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;themes&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;bootstrap

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;type&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;message&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;string&lt;/span&gt; author
               &lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;string&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;text&lt;/span&gt;
               &lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

exposed &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000080&quot;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;room&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;network&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;message&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;(Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;cloud&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;room&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;))&lt;/span&gt;

function &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;user_update&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;message x&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008080&quot;&gt;line&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;row line&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span1 columns userpic&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span2 columns user&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;author&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;:&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span13 columns message&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #009900&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=+&lt;/span&gt; line&lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;scroll_to_bottom&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

function &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008080&quot;&gt;text&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;get_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #008080&quot;&gt;message&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;~&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;message&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; room&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;clear_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

function &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;start&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #008080&quot;&gt;author&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Random.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #993399&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;topbar&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#logo&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;
      &lt;span style=&quot;color: #008080&quot;&gt;onready&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;_&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;add_callback&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;user_update&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; room&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;}}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#footer&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;input &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;xlarge&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;onnewline&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;_&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;}}&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;btn primary&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;onclick&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;_&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;}}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;Post&lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #990000&quot;&gt;Server.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;start&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;Server.&lt;/span&gt;http&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;[&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;resources&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000080&quot;&gt;@static_resource_directory&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;resources&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;register&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;resources/css.css&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;title&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;Chat&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; page&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt;start &lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color: #990000&quot;&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;import&lt;/span&gt;&lt;/span&gt; stdlib&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;themes&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;bootstrap

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;type&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;message&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt; author&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;string&lt;/span&gt;
               &lt;span style=&quot;color: #990000&quot;&gt;;&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009900&quot;&gt;string&lt;/span&gt;
               &lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000080&quot;&gt;@publish&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;room&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;cloud&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;room&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;):&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;network&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;message&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;user_update&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;x&lt;span style=&quot;color: #990000&quot;&gt;:&lt;/span&gt; message&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008080&quot;&gt;line&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;row line&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span1 columns userpic&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span2 columns user&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;author&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;:&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;span13 columns message&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;x&lt;span style=&quot;color: #990000&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #009900&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
            &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;do&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;transform&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;+&amp;lt;-&lt;/span&gt; line &lt;span style=&quot;color: #990000&quot;&gt;])&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;scroll_to_bottom&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008080&quot;&gt;text&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;get_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #008080&quot;&gt;message&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;~author&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;~text&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;do&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;message&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; room&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;Dom.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;clear_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;start&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;
  &lt;span style=&quot;color: #008080&quot;&gt;author&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Random.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #993399&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;topbar&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#logo&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#conversation&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;onready&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;_ &lt;span style=&quot;color: #990000&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Network.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;add_callback&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;user_update&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt; room&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#footer&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;input &lt;span style=&quot;color: #008080&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF6600&quot;&gt;#entry&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;xlarge&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;onnewline&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;_ &lt;span style=&quot;color: #990000&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span style=&quot;color: #008080&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;btn primary&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008080&quot;&gt;onclick&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;{&lt;/span&gt;_ &lt;span style=&quot;color: #990000&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;broadcast&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;author&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;Post&lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #990000&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;div&lt;span style=&quot;color: #990000&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;server&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #990000&quot;&gt;Server.&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000000&quot;&gt;one_page_bundle&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;Chat&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;,&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;font-weight: bold&quot;&gt;&lt;span style=&quot;color: #000080&quot;&gt;@static_resource_directory&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;resources&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;)],&lt;/span&gt;
        &lt;span style=&quot;color: #990000&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #FF0000&quot;&gt;&amp;quot;resources/css.css&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #990000&quot;&gt;],&lt;/span&gt; start&lt;span style=&quot;color: #990000&quot;&gt;)&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;span class=&quot;run&quot;&gt;&lt;a href=&quot;http://hello_chat.tutorials.opalang.org&quot; target=&quot;_blank&quot;&gt;Run&lt;/a&gt;&lt;/span&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/02/opa-090-new-syntax.html</id><title type="text">Opa 0.9.0: New syntax</title><updated>2012-02-27T20:37:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/02/spotlight-on-opa-app-opado-by-tristan.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We &lt;a href=&quot;http://blog.opalang.org/2012/02/spotlight-on-opa-app-opachess-by-mads.html&quot;&gt;continue&lt;/a&gt; our presentation of the winning apps of the &lt;a href=&quot;http://blog.opalang.org/2011/11/opa-developer-challenge-results.html&quot;&gt;Opa Developer Challenge&lt;/a&gt;. Today is time for OpaDo, the 2nd place winning entry by Tristan Sloughter. OpaDo is a TODO list, that started as a clone of &lt;a href=&quot;http://addyosmani.github.com/todomvc&quot;&gt;TodoMVC&lt;/a&gt;, but then Tristan added some cool features, such as user accounts and even Facebook authentication. We really liked this app as it does what it's supposed to do and does it well. We also appreciated the fact that Tristan wrote a &lt;a href=&quot;http://blog.erlware.org/author/kungfooguru/&quot;&gt;series of blog posts&lt;/a&gt; on developing OpaDo - be sure to check it out. We're also, together with the author, working on some extensions&amp;nbsp;&amp;mdash;&amp;nbsp;stay tuned for details!&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;Try OpaDo!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;For your convenience we've embedded the OpaDo application in this post, but for best results we suggest you go to &lt;a href=&quot;http://opado.org&quot;&gt;http://opado.org&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;iframe height=&quot;480&quot; width=&quot;700&quot; src=&quot;http://opado.org&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;Interview with the author: Tristan Sloughter&lt;/h3&gt;
&lt;a href=&quot;http://blog.erlware.org/author/kungfooguru&quot;&gt;&lt;img src=&quot;http://opalang.org/blog/author_tristan_sloughter.jpg&quot; style=&quot;float:left; margin-right: 15px&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;me&lt;/strong&gt;: &lt;em&gt;Can you tell us a bit about yourself? What's your experience with web programming? Favorite languages? Web frameworks?&lt;/em&gt;&lt;br/&gt;
&lt;strong&gt;Tristan Sloughter&lt;/strong&gt;: I'm Tristan Sloughter, and I am a professional working full-time for a startup in Chicago (eCDMarket) and on the side on a startup of my own (ClaimsTrade). Both are fully implemented in Erlang, my favorite language. I've been an Erlang programmer since college and have been obsessed with it ever since. For web frameworks there are a number in Erlang, but none have suited my needs or been based on OTP standards enough, so I started Maru, which is still very much a work in progress and is developed in parallel with my development of real world sites in Erlang.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;me&lt;/strong&gt;: &lt;em&gt;Can you tell us a bit about your submission for the contest? How did you come up with the idea? What are your future plans with respect to the application?&lt;/em&gt;&lt;br/&gt;
&lt;strong&gt;TS&lt;/strong&gt;: My submission started as a simple port of the TodoMVC project to Opa, called OpaDo. TodoMVC is an app that many have ported between different Javascript MVC frameworks to show their strengths and to learn. I thought it would be a good project to use to learn Opa and hopefully help others while I did so by blogging about my progress. After implementing the features of TodoMVC, I extended the project to include user accounts and personal todo lists. I intend to continue extending OpaDo. First, I'll be moving the database to CouchDB, not because the Opa database can not handle the app but more as a learning experience. A few other features I'd like to play with to learn Opa better is creating a RESTful interface for users to interact with their todo items and to add some sort of real time collaboration between users and their items, possibly through the PubNub Opa binding I've written.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;me&lt;/strong&gt;: &lt;em&gt;How did you like programming in Opa? Was it different than other technologies you know? Anything that you particularly liked? Anything that could be improved?&lt;/em&gt;&lt;br/&gt;
&lt;strong&gt;TS&lt;/strong&gt;: I really enjoyed working with Opa. While my language of choice has been Erlang and it is an amazing language, working with dynamically typed Erlang and Javascript has been prone to cause great frustration. Opa's type checking that covers both the client and server code is simply amazing and a great time saver. Like those who have worked with OCaml, Haskell or another strongly typed language know, if it compiles there is a good chance it works as well :). Continually I had the compiler catch mistakes that I commonly find and know that if I was using another backend language or Javascript on the frontend it would have taken till I was testing the page and had Firebug open to find the mistake.&lt;br/&gt;
So, I think my favorite features of Opa start small, before even thinking about its advanced architecture for easy network communication and scaling. The fact that it is a strong typed, functional language is its greatest feature. This combined with the ability to embed HTML (I don't know why this bothers others when it is so clean, I think it is perfect) and not having to use Javascript&amp;nbsp;&amp;mdash;&amp;nbsp;and the more advanced features for creating large scale commercial apps&amp;nbsp;&amp;mdash;&amp;nbsp;make Opa something that I think will greatly change the future of web development.&lt;br/&gt;
The main area for improvement, which the Opa team is already tackling head on, is database backends. Working with the embedded Opa database was very productive and much better than dealing with serializing/deserializing to an external relational database and writing complicated queries&amp;nbsp;&amp;mdash;&amp;nbsp;similar to the ease and usefulness of Erlang's embedded database Mnesia. Having the same ease of use as the embedded database extended to CouchDB and MongoDB will be a huge feature.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/02/spotlight-on-opa-app-opado-by-tristan.html</id><title type="text">Spotlight on Opa app: OpaDo by Tristan Sloughter</title><updated>2012-02-20T13:02:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/02/new-release-opa-090-s4.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We are happy to announce the new release of Opa, version 0.9.0, codenamed &lt;em&gt;Opa S4&lt;/em&gt; (with this realease we are switching to &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_versioning#Sequence-based_identifiers&quot;&gt;sequential-based version identifiers&lt;/a&gt;). You can get it &lt;a href=&quot;http://opalang.org/get.xmlt&quot;&gt;here&lt;/a&gt;, see the CHANGELOG &lt;a href=&quot;https://github.com/MLstate/opalang/blob/v1309/CHANGELOG&quot;&gt;here&lt;/a&gt; and the press release &lt;a href=&quot;http://www.marketwire.com/press-release/Opa-S4-the-New-Version-of-Opa-Is-Now-Available-1619622.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;In this article I'll first sketch to the new users, why Opa could be interesting for them and then I will highlight the main changes introduced in this release. Also in the coming weeks expect some technical posts elaborating on those newly introduced features.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4&gt;New users: why should you choose Opa?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(1) Correctness&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Are you a fan of debugging? Well, neither are we. Ever dreamt of web programming where things will &amp;ldquo;just work&amp;rdquo;? Stop dreaming&amp;nbsp;&amp;mdash;&amp;nbsp;use Opa.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;How is that possible?&lt;/strong&gt; In Opa, a large spectrum of programming errors will be detected by the compiler, which may even suggest a hint on how to solve them. This is possible thanks to strong static typing of the language; with Opa you benefit from its power without having to explicitly write any type annotations. Sounds too good to be true? It is time you had this chat with your fellow Haskell programmer.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;Static typing [of Opa] helps catch most bugs at compile time rather than a stack trace at run time&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Vimalkumar Jeyakumar, PhD in Computer Science at Stanford University&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;Opa's type checking is simply amazing. [&amp;hellip;] I think Opa will greatly change the future of web development&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Tristan Sloughter, Co-Owner of Erlware, Erlang consulting organization&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;Oh, just another web programming&amp;nbsp;&amp;mdash;&amp;nbsp;WAIT, STATIC TYPING? I&amp;rsquo;m in love!&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Tweet by @1x&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(2) Productivity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;What if you could achieve twice as much, while writing only half of the code? Opa is well known for its conciseness. Have you ever seen a &lt;a href=&quot;https://github.com/MLstate/hello_chat/blob/master/hello_chat.opa&quot;&gt;distributed web chat&lt;/a&gt; in &amp;lt;50 LOC?&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;How is that possible?&lt;/strong&gt; Opa&amp;rsquo;s functional and high-level nature make for a very expressive language. Also its focus on web applications means that typical things needed in such development you will have at your fingertips.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;I'm coding in Opa at the moment. This thing rocks! It can't be repeated enough!&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Julien Verlaguet, Software Engineer at Facebook&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;[Opa] has great abstractions to make an impressive start!&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Vimalkumar Jeyakumar, PhD in Computer Science at Stanford University&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(3) Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Concerned about security? Opa&amp;rsquo;s unique design protects your applications against most common web attacks, including XSS attacks and all forms of code injection, with no additional effort from the programmers.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;How is that possible?&lt;/strong&gt; Opa is a statically, strongly typed language with built-in constructions for web programming. In Opa, web objects such as URL, HTML, CSS are not manipulated as raw characters by the servers but represented by structured data with a specific semantics and secured output methods. Opa&amp;rsquo;s runtime also benefits from a dedicated web stack that complements the compile-time security protections.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;Opa is [&amp;hellip;] extremely secure, much more so than just about any other programming language.&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;WebAppers, a popular blog dedicated to share top quality open source resources for web developers&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;`&amp;lsquo;We chose the Opa technology because the features built in the language make it very easy to code secure and scalable systems.&amp;rsquo;'&lt;/em&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;mdash;&amp;nbsp;Ludovic Wacheux, IT manager at Plug-up.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4&gt;Existing users: what has changed in Opa S4?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(1) New syntax available&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;For better readability and familiarity of the source code, we have designed a brand new syntax close to JavaScript and other C-like languages.&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;With this new S4 release we let &lt;strong&gt;you decide&lt;/strong&gt;: you can continue using the previous syntax&amp;nbsp;&amp;mdash;&amp;nbsp;quite concise is it not?&amp;nbsp;&amp;mdash;&amp;nbsp;or you can try the new one, which should be easier on the eye for C/JS/&amp;hellip; programmers.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(2) High-quality support for MongoDB&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Opa&amp;rsquo;s database had one big advantage: good integration with the language and absolute ease of use. However, our power users were asking us for things like distribution, data replication and powerful querying capabilities. Admittedly those are aspects where we cannot compete with state-of-the-art DBMSs. Therefore starting with this S4 release we will be improving support for external DBMSs. In S4 you will find extensive support for MongoDB.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3&gt;(3) More to come&amp;hellip;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We had one more awesome news but unfortunately it didn't make it to this release (by a hair) and we'll need to postpone it. So: expect some exciting announcements in the weeks to come!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/02/new-release-opa-090-s4.html</id><title type="text">New release: Opa 0.9.0 (S4)</title><updated>2012-02-14T17:07:00-00:00</updated><author><name>Adam Koprowski</name></author></entry><entry><link href="http://blog.opalang.org/2012/02/opa-presentation-at-game-development.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/2073503406800427577/posts/default</uri><name>opa</name></contributor><content type="html">&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Our founder, Henri, presented Opa recently at a &lt;a href=&quot;http://www.meetup.com/gamesjs&quot;&gt;Game meetup in San Francisco&lt;/a&gt;. This was a great opportunity for Opa to be presented to a new audience. The on-line gaming world is faced with the challenge of the demise of Flash and there is a need to find a new programming language and platform to deliver the best on-line gaming experience in HTML5.&lt;/p&gt;&lt;/div&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/-fH6W67luYB8/TzUkG3Oe4qI/AAAAAAAAaqo/CZwCx05KNiw/s350/gamesjs1.jpg&quot; style=&quot;float:right; margin-left: 15px&quot;/&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Why would you want to use Opa for writing games? Well, for a number of reasons:&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Opa is high-level and very concise. That means that, once you're fluent in it, you can make things happen &lt;em&gt;real&lt;/em&gt; fast. This increased productivity is very important for games, where you often need to experiment, prototype and evaluate many different approaches.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Real-time communication with the server and between the players is a must in interactive, multi-player games. Opa's sessions make it as easy as it gets to set-up this kind of communication (I'll try to talk more about that in one of the upcoming technical posts).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Games are not the easiest type of software to write: highly interactive, distributed among multiple-players, often involving intricate logic&amp;hellip; Things are complex enough as it is, so why not get a boost of a strongly-typed language that will detect big part of programming mistakes already at compilation time?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/-bPEILUbuy94/TzUkGyntdvI/AAAAAAAAaqs/e4rzPlun0d8/s350/gamesjs2.jpg&quot; style=&quot;float:left; margin-right: 25px&quot;/&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;There are already a number of great HTML5 games written in Opa and available open source: (entries below link to the sources on GitHub)&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/mattgu74/OpaTetris&quot;&gt;Tetris&lt;/a&gt;, roughly 600 lines of code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/HenJi/=Opacman&quot;&gt;Pac Man&lt;/a&gt;, roughly 1,100 lines of code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/mads379/opa-chess&quot;&gt;Chess&lt;/a&gt;, roughly 1,100 lines of code.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Do you want to add yours to &lt;a href=&quot;http://opalang.org/see.xmlt&quot;&gt;the list&lt;/a&gt;? :)&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Below you can see the meetup video (Henri's presentation starts at minute 56).&lt;/p&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;iframe src=&quot;http://www.ustream.tv/embed/recorded/20318025&quot; width=&quot;608&quot; height=&quot;368&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border: 0px none transparent;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</content><id>http://blog.opalang.org/2012/02/opa-presentation-at-game-development.html</id><title type="text">Opa presentation at a game development meetup, GameJS</title><updated>2012-02-10T21:18:00-00:00</updated><author><name>Adam Koprowski</name></author></entry></feed>