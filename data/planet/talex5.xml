<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</id><title type="text">talex5</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="https://roscidus.com/blog/blog/2023/04/26/lambda-capabilities/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</uri><name>talex5</name></contributor><content type="html">&lt;p&gt;&amp;quot;Is this software safe?&amp;quot; is a question software engineers should be able to answer,
but doing so can be difficult.
Capabilities offer an elegant solution, but seem to be little known among functional programmers.
This post is an introduction to capabilities in the context of ordinary programming
(using plain functions, in the style of the lambda calculus).&lt;/p&gt;

&lt;p&gt;Even if you're not interested in security,
capabilities provide a useful way to understand programs;
when trying to track down buggy behaviour,
it's very useful to know that some component &lt;em&gt;couldn't&lt;/em&gt; have been the problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-problem&quot;&gt;The Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#option-1-security-as-a-separate-concern&quot;&gt;Option 1: Security as a separate concern&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#option-2-purity&quot;&gt;Option 2: Purity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#option-3-capabilities&quot;&gt;Option 3: Capabilities&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#attenuation&quot;&gt;Attenuation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#web-server-example&quot;&gt;Web-server example&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#use-at-different-scales&quot;&gt;Use at different scales&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#key-points&quot;&gt;Key points&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#practical-considerations&quot;&gt;Practical considerations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#plumbing-capabilities-everywhere&quot;&gt;Plumbing capabilities everywhere&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#levels-of-support&quot;&gt;Levels of support&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#running-on-a-traditional-os&quot;&gt;Running on a traditional OS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#use-with-existing-security-mechanisms&quot;&gt;Use with existing security mechanisms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#thread-local-storage&quot;&gt;Thread-local storage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#symlinks&quot;&gt;Symlinks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#time-and-randomness&quot;&gt;Time and randomness&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#power-boxes&quot;&gt;Power boxes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#conclusions&quot;&gt;Conclusions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://www.reddit.com/r/ProgrammingLanguages/comments/130an3z/lambda_capabilities/&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=35723557&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://lobste.rs/s/uyj3vj/lambda_capabilities&quot;&gt;Lobsters&lt;/a&gt; )&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;We have some application (for example, a web-server) that we want to run.
The application is many thousands of lines long and depends on dozens of third-party libraries,
which get updated on a regular basis.
I would like to be able to check, quickly and easily, that the application cannot do any of these things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete my files.
&lt;/li&gt;
&lt;li&gt;Append a line to my &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file.
&lt;/li&gt;
&lt;li&gt;Act as a relay, allowing remote machines to attack other computers on my local network.
&lt;/li&gt;
&lt;li&gt;Send telemetry to a third-party.
&lt;/li&gt;
&lt;li&gt;Anything else bad that I forget to think about.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, here are some of the OCaml packages I use just to generate this blog:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roscidus.com/blog/images/lambda-caps/blog-deps.svg&quot;&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/lambda-caps/blog-deps.svg&quot; title=&quot;Dependency graph for this blog&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Dependency graph for this blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Having to read every line of every version of each of these packages in order to decide whether it's safe
to generate the blog clearly isn't practical.&lt;/p&gt;
&lt;p&gt;I'll start by looking at traditional solutions to this problem, using e.g. containers or VMs,
and then show how to do better using capabilities.&lt;/p&gt;
&lt;h2&gt;Option 1: Security as a separate concern&lt;/h2&gt;
&lt;p&gt;A common approach to access control treats securing software as a separate activity to writing it.
Programmers write (insecure) software, and a security team writes a policy saying what it can do.
Examples include firewalls, containers, virtual machines, seccomp policies, SELinux and AppArmor.&lt;/p&gt;
&lt;p&gt;The great advantage of these schemes is that security can be applied after the software is written, treating it as a black box.
However, it comes with many problems:&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;Confused deputy problem&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Some actions are OK for one use but not for another.&lt;/p&gt;
&lt;p&gt;For example, if the client of a web-server requests &lt;code&gt;https://example.com/../../etc/httpd/server-key.pem&lt;/code&gt;
then we don't want the server to read this file and send it to them.
But the server does need to read this file for other reasons, so the policy must allow it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Coarse-grained controls&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;All the modules making up the program are treated the same way,
even though you probably trust some more than others.&lt;/p&gt;
&lt;p&gt;For example, we might trust the TLS implementation with the server's private key, but not the templating engine,
and I know the modules I wrote myself are not malicious.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Even well-typed programs go wrong&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Programming in a language with static types is supposed to ensure that if the program compiles then it won't crash.
But the security policy can cause the program to fail even though it passed the compiler's checks.&lt;/p&gt;
&lt;p&gt;For example, the server might sometimes need to send an email notification.
If it didn't do that while the security policy was being written, then that will be blocked.
Or perhaps the web-server didn't even have a notification system when the policy was written,
but has since been updated.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Policy language limitations&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The security configuration is written in a new language, which must be learned.
It's usually not worth learning this just for one program,
so the people who write the program struggle to write the policy.
Also, the policy language often cannot express the desired policy,
since it may depend on concepts unique to the program
(e.g. controlling access based on a web-app user's ID, rather than local Unix user ID).&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;All of the above problems stem from trying to separate security from the code.
If the code were fully correct, we wouldn't need the security layer.
Checking that code is fully correct is hard,
but maybe there are easy ways to check automatically that it does at least satisfy our security requirements...&lt;/p&gt;
&lt;h2&gt;Option 2: Purity&lt;/h2&gt;
&lt;p&gt;One way to prevent programs from performing unwanted actions is to prevent &lt;em&gt;all&lt;/em&gt; actions.
In pure functional languages, such as Haskell, the only way to interact with the outside world is to return the action you want to perform from &lt;code&gt;main&lt;/code&gt;. For example:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Even if we don't look at the code of &lt;code&gt;f&lt;/code&gt;, we can be sure it only returns a &lt;code&gt;String&lt;/code&gt; and performs no other actions
(assuming &lt;a href=&quot;https://downloads.haskell.org/ghc/latest/docs/users_guide/exts/safe_haskell.html&quot;&gt;Safe Haskell&lt;/a&gt; is being used).
Assuming we trust &lt;code&gt;putStr&lt;/code&gt;, we can be sure this program will only output a string to stdout and not perform any other actions.&lt;/p&gt;
&lt;p&gt;However, writing only pure code is quite limiting. Also, we still need to audit all IO code.&lt;/p&gt;
&lt;h2&gt;Option 3: Capabilities&lt;/h2&gt;
&lt;p&gt;Consider this code (written in a small OCaml-like functional language, where &lt;code&gt;ref n&lt;/code&gt; allocates a new memory location
initially containing &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;!x&lt;/code&gt; reads the current value of &lt;code&gt;x&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Can we be sure that the assert won't fail, without knowing the definition of &lt;code&gt;f&lt;/code&gt;?
Assuming the language doesn't provide unsafe backdoors (such as OCaml's &lt;code&gt;Obj.magic&lt;/code&gt;), we can.
&lt;code&gt;f x&lt;/code&gt; cannot change &lt;code&gt;y&lt;/code&gt;, because &lt;code&gt;f x&lt;/code&gt; does not have access to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So here is an access control system, built in to the lambda calculus itself!
At first glance this might not look very promising.
For example, while &lt;code&gt;f&lt;/code&gt; doesn't have access to &lt;code&gt;y&lt;/code&gt;, it does have access to any global variables defined before &lt;code&gt;f&lt;/code&gt;.
It also, typically, has access to the file-system and network,
which are effectively globals too.&lt;/p&gt;
&lt;p&gt;To make this useful, we ban global variables.
Then any top-level function like &lt;code&gt;f&lt;/code&gt; can only access things passed to it explicitly as arguments.
Avoiding global variables is usually considered good practise, and some systems ban them for other reasons anyway
(for example, Rust doesn't allow global mutable state as it wouldn't be able to prevent races accessing it from multiple threads).&lt;/p&gt;
&lt;p&gt;Returning to the Haskell example above (but now in OCaml syntax),
it looks like this in our capability system:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Since &lt;code&gt;f&lt;/code&gt; is a top-level function, we know it does not close over any mutable state, and our &lt;code&gt;42&lt;/code&gt; argument is pure data.
Therefore, the call &lt;code&gt;f 42&lt;/code&gt; does not have access to, and therefore cannot affect,
any pre-existing state (including the filesystem).
Internally, it can use mutation (creating arrays, etc),
but it has nowhere to store any mutable values and so they will get GC'd after it returns.
&lt;code&gt;f&lt;/code&gt; therefore appears as a pure function, and calling it multiple times will always give the same result,
just as in the Haskell version.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;output_string&lt;/code&gt; is also a top-level function, closing over no mutable state.
However, the function resulting from evaluating &lt;code&gt;output_string ch&lt;/code&gt; is not top-level,
and without knowing anything more about it we should assume it has full access to the output channel &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;main&lt;/code&gt; is invoked with standard output as its argument, it may output a message to it,
but cannot affect other pre-existing state.&lt;/p&gt;
&lt;p&gt;In this way, we can reason about the pure parts of our code as easily as with Haskell,
but we can also reason about the parts with side-effects.
Haskell's purity is just a special case of a more general rule:
the effects of a (top-level) function are bounded by its arguments.&lt;/p&gt;
&lt;h3&gt;Attenuation&lt;/h3&gt;
&lt;p&gt;So far, we've been thinking about what values are reachable through other values.
For example, the set of ref-cells that can be modified by &lt;code&gt;f x&lt;/code&gt; is bounded by
the union of the set of ref cells reachable from the closure &lt;code&gt;f&lt;/code&gt;
with the set of ref cells reachable from &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One powerful aspect of capabilities is that we can use functions to implement whatever access controls we want.
For example, let's say we only want &lt;code&gt;f&lt;/code&gt; to be able to set the ref-cell, but not read it.
We can just pass it a suitable function:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Or perhaps we only want to allow inserting positive integers:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid_arg&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Positive values only!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Or we can allow access to be revoked:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid_arg&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Access revoked!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;(* Revoke *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Or we could limit the number of times it can be used:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid_arg&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Quota exceeded&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Or log each time it is used, tagged with a label that's meaningful to us
(e.g. the function to which we granted access):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%S set it to %d&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Or all of the above.&lt;/p&gt;
&lt;p&gt;In these examples, our function &lt;code&gt;f&lt;/code&gt; never got direct access (permission) to &lt;code&gt;x&lt;/code&gt;, yet was still able to affect it.
Therefore, in capability systems people often talk about &amp;quot;authority&amp;quot; rather than permission.
Roughly speaking, the &lt;em&gt;authority&lt;/em&gt; of a subject is the set of actions that the subject could cause to happen,
now or in the future, on currently-existing resources.
Since it's only things that &lt;em&gt;might&lt;/em&gt; happen, and we don't want to read all the code to find out exactly what
it might do, we're usually only interested in getting an upper-bound on a subject's authority,
to show that it &lt;em&gt;can't&lt;/em&gt; do something.&lt;/p&gt;
&lt;p&gt;The examples here all used a single function.
We may want to allow multiple operations on a single value (e.g. getting and setting a ref-cell),
and the usual techniques are available for doing that (e.g. having the function take the operation as its first argument,
or collecting separate functions together in a record, module or object).&lt;/p&gt;
&lt;h3&gt;Web-server example&lt;/h3&gt;
&lt;p&gt;Let's look at a more realistic example.
Here's a simple web-server (we are defining the &lt;code&gt;main&lt;/code&gt; function, which takes two arguments):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;To use it, we pass it access to some network (&lt;code&gt;net&lt;/code&gt;) and a directory tree with the content (&lt;code&gt;htdocs&lt;/code&gt;).
Immediately we can see that this server does not access any part of the file-system outside of &lt;code&gt;htdocs&lt;/code&gt;,
but that it may use the network. Here's a picture of the situation:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/lambda-caps/web1.svg&quot; title=&quot;Initial reference graph&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Initial reference graph&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Notes on reading the diagram:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The diagram shows a model of the reference graph, where each node represents some value (function, record, tuple, etc)
or aggregated group of values.
&lt;/li&gt;
&lt;li&gt;An arrow from A to B indicates the possibility that some value in the group A holds a reference to
some value in the group B.
&lt;/li&gt;
&lt;li&gt;The model is typically an &lt;em&gt;over-approximation&lt;/em&gt;, so the lack of an arrow from A to B means that no such reference
exists, while the presence of an arrow just means we haven't ruled it out.
&lt;/li&gt;
&lt;li&gt;Orange nodes here represent OCaml values.
&lt;/li&gt;
&lt;li&gt;White boxes are directories.
They include all contained files and subdirectories, except those shown separately.
I've pulled out &lt;code&gt;htdocs&lt;/code&gt; so we can see that &lt;code&gt;app&lt;/code&gt; doesn't have access to the rest of &lt;code&gt;home&lt;/code&gt;.
Just for emphasis, I also show &lt;code&gt;.ssh&lt;/code&gt; separately.
I'm assuming here that a directory doesn't give access to its parent,
so &lt;code&gt;htdocs&lt;/code&gt; can only be used to read files within that sub-tree.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net&lt;/code&gt; represents the network and everything else connected to it.
&lt;/li&gt;
&lt;li&gt;In most operating systems, directories exist in the kernel's address space,
and so you cannot have a direct reference to them.
That's not a problem, but for now you may find it easier to imagine a system where the kernel and applications
are all a single program, in a single programming language.
&lt;/li&gt;
&lt;li&gt;This diagram represents the state at a particular moment in time (when starting the application).
We could also calculate and show all the references that might ever come to exist,
given what we know about the behaviour of &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;net&lt;/code&gt;.
Since we don't yet know anything about either,
we would have to assume that &lt;code&gt;app&lt;/code&gt; might give &lt;code&gt;net&lt;/code&gt; access to &lt;code&gt;htdocs&lt;/code&gt; and to itself.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the diagram above shows the application &lt;code&gt;app&lt;/code&gt; has been given references to &lt;code&gt;net&lt;/code&gt; and to &lt;code&gt;htdocs&lt;/code&gt; as arguments.&lt;/p&gt;
&lt;p&gt;Looking at our checklist from the start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can't delete all my files, but it might delete the ones in &lt;code&gt;htdocs&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;It can't edit &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;It might act as a relay, allowing remote machines to attack other computers on my local network.
&lt;/li&gt;
&lt;li&gt;It might send telemetry to a third-party.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can read the body of the function to learn more:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tcp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Note: &lt;code&gt;Net.listen net&lt;/code&gt; is typical OCaml style for performing the &lt;code&gt;listen&lt;/code&gt; operation on &lt;code&gt;net&lt;/code&gt;.
We could also have used a record and written &lt;code&gt;net.listen&lt;/code&gt; instead, which may look more familiar to some readers.&lt;/p&gt;
&lt;p&gt;Here's an updated diagram, showing the moment when &lt;code&gt;Http.serve&lt;/code&gt; is called.
The &lt;code&gt;app&lt;/code&gt; group has been opened to show &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;handler&lt;/code&gt; separately:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/lambda-caps/web2.svg&quot; title=&quot;After reading the code of main&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;After reading the code of main&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can see that the code in the HTTP library can only access the network via &lt;code&gt;socket&lt;/code&gt;,
and can only access &lt;code&gt;htdocs&lt;/code&gt; by using &lt;code&gt;handler&lt;/code&gt;.
Assuming &lt;code&gt;Net.listen&lt;/code&gt; is trust-worthy (we'll normally trust the platform's networking layer),
it's clear that the application doesn't make out-bound connections,
since &lt;code&gt;net&lt;/code&gt; is used only to create a listening socket.&lt;/p&gt;
&lt;p&gt;To know what the application might do to &lt;code&gt;htdocs&lt;/code&gt;, we only have to read the definition of &lt;code&gt;static_files&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Now we can see that the application doesn't change any files; it only uses &lt;code&gt;htdocs&lt;/code&gt; to read them.&lt;/p&gt;
&lt;p&gt;Finally, expanding &lt;code&gt;Http.serve&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;handle_connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_request&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We see that &lt;code&gt;handle_connection&lt;/code&gt; has no way to share telemetry information between connections,
given that &lt;code&gt;handle_request&lt;/code&gt; never stores anything.&lt;/p&gt;
&lt;p&gt;We can tell these things after only looking at the code for a few seconds, even though dozens of libraries are being used.
In particular, we didn't have to read &lt;code&gt;handle_connection&lt;/code&gt; or any of the HTTP parsing logic.&lt;/p&gt;
&lt;p&gt;Now let's enable TLS. For this, we will require a configuration directory containing the server's key:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tcp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8443&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls_socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls_socket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;OCaml syntax note: I used &lt;code&gt;~&lt;/code&gt; to make &lt;code&gt;tls_config&lt;/code&gt; a named argument; we wouldn't want to get this directory confused with &lt;code&gt;htdocs&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;We can see that only the TLS library gets access to the key.
The HTTP library interacts only with the TLS socket, which presumably does not reveal it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/lambda-caps/web3.svg&quot; title=&quot;Updated graph showing TLS&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Updated graph showing TLS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Notice too how this fixes the problem we had with our original policy enforcement system.
There, an attacker could request &lt;code&gt;https://example.com/../tls_config/server.key&lt;/code&gt; and the HTTP server might send the key.
But here, the handler cannot do that even if it wants to.
When &lt;code&gt;handler&lt;/code&gt; loads a file, it does so via &lt;code&gt;htdocs&lt;/code&gt;, which does not have access to &lt;code&gt;tls_config&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The above server has pretty good security properties,
even though we didn't make any special effort to write secure code.
Security-conscious programmers will try to wrap powerful capabilities (like &lt;code&gt;net&lt;/code&gt;)
with less powerful ones (like &lt;code&gt;socket&lt;/code&gt;) as early as possible, making the code easier to understand.
A programmer uninterested in readability is likely to mix in more irrelevant code you have to skip through,
but even so it shouldn't take too long to track down where things like &lt;code&gt;net&lt;/code&gt; and &lt;code&gt;htdocs&lt;/code&gt; end up.
And even if they spread them throughout their entire application,
at least you avoid having to read all the libraries too!&lt;/p&gt;
&lt;p&gt;By contrast, consider a more traditional (non-capability) style.
We start with:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Here, &lt;code&gt;htdocs&lt;/code&gt; would be a plain string rather than a reference to a directory,
and the network would be reached through a global.
We can't tell anything about what this server could do from looking at this one line,
and even if we expand it, we won't be able to tell what all the functions it calls do, either.
We will end up having to follow every function call recursively through all of the server's
dependencies, and our analysis will be out of date as soon as any of them changes.&lt;/p&gt;
&lt;h3&gt;Use at different scales&lt;/h3&gt;
&lt;p&gt;We've seen that we can create an over-approximation of the reference graph by looking at just a small part of the code,
and then get a closer bound on the possible effects as needed
by expanding groups of values until we can prove the desired property.
For example, to prove that the application didn't modify &lt;code&gt;htdocs&lt;/code&gt;, we followed &lt;code&gt;htdocs&lt;/code&gt; by expanding &lt;code&gt;main&lt;/code&gt; and then &lt;code&gt;static_files&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Within a single process, a capability is a reference (pointer) to another value in the process's memory.
However, the diagrams also included arrows (capabilities) to things outside of the process, such as directories.
We can regard these as references to privileged proxy functions in the process that make calls to the OS kernel,
or (at a higher level of abstraction) we can consider them to be capabilities to the external resources themselves.&lt;/p&gt;
&lt;p&gt;It is possible to build capability operating systems (in fact, this was the first use of capabilities).
Just as we needed to ban global variables to make a safe programming language,
we need to ban global namespaces to make a capability operating system.
For example, on FreeBSD this is done (on a per-process basis) by invoking the &lt;a href=&quot;https://man.freebsd.org/cgi/man.cgi?query=cap_enter&quot;&gt;cap_enter&lt;/a&gt; system call.&lt;/p&gt;
&lt;p&gt;We can zoom out even further, and consider a network of computers.
Here, an arrow between machines represents some kind of (unforgeable) network address or connection.
At the IP level, any process can connect to any address, but a capability system can be implemented on top.
&lt;a href=&quot;http://www.erights.org/elib/distrib/captp/index.html&quot;&gt;CapTP&lt;/a&gt; (the Capability Transport Protocol) was an early system for this, but
&lt;a href=&quot;https://capnproto.org/rpc.html&quot;&gt;Cap'n Proto&lt;/a&gt; (Capabilities and Protocols) is the modern way to do it.&lt;/p&gt;
&lt;p&gt;So, thinking in terms of capabilities, we can zoom out to look at the security properties of the whole network,
yet still be able to expand groups as needed right down to the level of individual closures in a process.&lt;/p&gt;
&lt;h3&gt;Key points&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Library code can be imported and called without it getting access to any pre-existing state,
except that given to it explicitly. There is no &amp;quot;ambient authority&amp;quot; available to the library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function's side-effects are bounded by its arguments.
We can understand (get a bound on) the behaviour of a function call just by looking at it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;a&lt;/code&gt; has access to &lt;code&gt;b&lt;/code&gt; and to &lt;code&gt;c&lt;/code&gt;, then &lt;code&gt;a&lt;/code&gt; can introduce them (e.g. by performing the function call &lt;code&gt;b c&lt;/code&gt;).
Note that there is no capability equivalent to making something &amp;quot;world readable&amp;quot;;
to perform an introduction,
you need access to both the resource being granted and to the recipient (&amp;quot;only connectivity begets connectivity&amp;quot;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of passing the &lt;em&gt;name&lt;/em&gt; of a resource, we pass a capability reference (pointer) to it,
thereby proving that we have access to it and sharing that access (&amp;quot;no designation without authority&amp;quot;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The caller of a function decides what it should access, and can provide restricted access by wrapping
another capability, or substituting something else entirely.&lt;/p&gt;
&lt;p&gt;I am sometimes unable to install a messaging app on my phone because it requires me to grant it
access to my address book.
A capability system should never say &amp;quot;This application requires access to the address book. Continue?&amp;quot;;
it should say &amp;quot;This application requires access to &lt;em&gt;an&lt;/em&gt; address book; which would you like to use?&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A capability must behave the same way regardless of who uses it.
When we do &lt;code&gt;f x&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt; can perform exactly the same operations on &lt;code&gt;x&lt;/code&gt; that we can.&lt;/p&gt;
&lt;p&gt;It is tempting to add a traditional policy language alongside capabilities for &amp;quot;extra security&amp;quot;,
saying e.g. &amp;quot;&lt;code&gt;f&lt;/code&gt; cannot write to &lt;code&gt;x&lt;/code&gt;, even if it has a reference to it&amp;quot;.
However, apart from being complicated and annoying,
this creates an incentive for &lt;code&gt;f&lt;/code&gt; to smuggle &lt;code&gt;x&lt;/code&gt; to another context with more powers.
This is the root cause of many real-world attacks, such as click-jacking or cross-site request forgery,
where a URL permits an attack if a victim visits it, but not if the attacker does.
One of the great benefits of capability systems is that you don't need to worry that someone is trying to trick you
into doing something that you can do but they can't,
because your ability to access the resource they give you comes entirely from them in the first place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above follow naturally from using functions in the usual way, while avoiding global variables.&lt;/p&gt;
&lt;h2&gt;Practical considerations&lt;/h2&gt;
&lt;p&gt;The above discussion argues that capabilities would have been a good way to build systems in an ideal world.
But given that most current operating systems and programming languages have not been designed this way,
how useful is this approach?
I'm currently working on &lt;a href=&quot;https://github.com/ocaml-multicore/eio&quot;&gt;Eio&lt;/a&gt;, an IO library for OCaml, and using these principles to guide the design.
Here are a few thoughts about applying capabilities to a real system.&lt;/p&gt;
&lt;h3&gt;Plumbing capabilities everywhere&lt;/h3&gt;
&lt;p&gt;A lot of people worry about cluttering up their code by having to pass things explicitly everywhere.
This is actually not much of a problem, for a couple of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We already do this with most things anyway.
If your program uses a database, you probably establish a connection to it at the start and pass the connection around as needed.
You probably also pass around open file handles, configuration settings, HTTP connection pools, arrays, queues, ref-cells, etc.
Handling &amp;quot;the file-system&amp;quot; and &amp;quot;the network&amp;quot; the same way as everything else isn't a big deal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can often bundle up a capability with something else.
For example, a web-server will likely let the user decide which directory to serve,
so you're already passing around a pathname argument.
Passing a path capability instead is no extra work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Consider a request handler that takes the address of a Redis server:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It might seem that by using capabilities we'd need to pass the network in here too:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This is both messy and unnecessary.
Instead, &lt;code&gt;handle_request&lt;/code&gt; can take a function for connecting to Redis:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Then there is only one argument to pass around again.
Instead of writing the connection logic in &lt;code&gt;handle_request&lt;/code&gt;, we write the same logic outside and just pass in the function.
And now someone looking at the code can see &amp;quot;the handler can connect to Redis&amp;quot;,
rather than the less precise &amp;quot;the handler accesses the network&amp;quot;.
Of course, if Redis required more than one configuration setting then you'd probably already be doing it this way.&lt;/p&gt;
&lt;p&gt;The main problematic case is providing &lt;em&gt;defaults&lt;/em&gt;.
For example, a TLS library might allow us to specify the location of the system's certificate store,
but it would like to provide a default (e.g. &lt;code&gt;/etc/ssl/certs/&lt;/code&gt;).
This is particularly important if the default location varies by platform.
If the TLS library decides the location, then we must give it (read-only at least) access to the whole system!
We may just decide to trust the library, or we might separate out the default paths into a trusted package.&lt;/p&gt;
&lt;h3&gt;Levels of support&lt;/h3&gt;
&lt;p&gt;Ideally, our programming language would provide a secure implementation of capabilities that we could depend on.
That would allow running untrusted code safely and protect us from compromised packages.
However, converting a non-capability language to a capability-secure one isn't easy,
and isn't likely to happen any time soon for OCaml
(but see &lt;a href=&quot;https://www.hpl.hp.com/techreports/2006/HPL-2006-116.pdf&quot;&gt;Emily&lt;/a&gt; for an old proof-of-concept).&lt;/p&gt;
&lt;p&gt;Even without that, though, capabilities help to protect non-malicious code from malicious inputs.
For example, the request handler above forgot to sanitise the URL path from the remote client,
but it still can't access anything outside of &lt;code&gt;htdocs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And even if we don't care about security at all, capabilities make it easy to see what a program does;
they make it easy to test programs by replacing OS resources with mocks;
and preventing access to globals helps to avoid race conditions,
since two functions that access the same resource must be explicitly introduced.&lt;/p&gt;
&lt;h3&gt;Running on a traditional OS&lt;/h3&gt;
&lt;p&gt;A capability OS would let us run a program's &lt;code&gt;main&lt;/code&gt; function and provide the capabilities it wanted directly,
but most systems don't work like that.
Instead, each program requires a small trusted entrypoint that has the full privileges of the process.
In Eio, an application will typically start something like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Eio_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Eio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stdenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Eio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stdenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Eio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_open_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/srv/www&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Eio_main.run&lt;/code&gt; starts the Eio event loop and then runs the callback.
The &lt;code&gt;env&lt;/code&gt; argument gives full access to the process's environment.
Here, the callback extracts network and filesystem access from this,
gets access to just &amp;quot;/srv/www&amp;quot; from &lt;code&gt;fs&lt;/code&gt;,
and then calls the &lt;code&gt;main&lt;/code&gt; function as before.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;Eio_main.run&lt;/code&gt; itself is not a capability-safe function (it magics up &lt;code&gt;env&lt;/code&gt; from nothing).
A capability-enforcing compiler would flag this bit up as needing to be audited manually.&lt;/p&gt;
&lt;h3&gt;Use with existing security mechanisms&lt;/h3&gt;
&lt;p&gt;Maybe you're not convinced by all this capability stuff.
Traditional security systems are more widely available, better tested, and approved by your employer,
and you want to use that instead.
Still, to write the policy, you're going to need a list of resources the program might access.
Looking at the above code, we can immediately see that the policy need allow access only to the &amp;quot;/srv/www&amp;quot; directory,
and so we could call e.g. &lt;a href=&quot;https://man.openbsd.org/unveil&quot;&gt;unveil&lt;/a&gt; here.
And if &lt;code&gt;main&lt;/code&gt; later changes to use TLS,
the type-checker will let us know to update this code to provide the TLS configuration
and we'll know to update the policy at the same time.&lt;/p&gt;
&lt;p&gt;If you want to drop privileges, such a program also makes it easy to see when it's safe to do that.
For example, looking at &lt;code&gt;main&lt;/code&gt; we can see that &lt;code&gt;net&lt;/code&gt; is never used after creating the socket,
so we don't need the &lt;code&gt;bind&lt;/code&gt; system call after that,
and we never need &lt;code&gt;connect&lt;/code&gt;.
We know, for instance, that this program isn't hiding an XML parser that needs to download schema files to validate documents.&lt;/p&gt;
&lt;h3&gt;Thread-local storage&lt;/h3&gt;
&lt;p&gt;In addition to global and local variables, systems often allow us to attach data to threads as a sort of middle ground.
This could allow unexpected interactions. For example:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Here, we'd expect that &lt;code&gt;g&lt;/code&gt; doesn't have access to &lt;code&gt;x&lt;/code&gt;, but &lt;code&gt;f&lt;/code&gt; could pass it using thread-local storage.
To prevent that, Eio instead provides &lt;a href=&quot;https://ocaml-multicore.github.io/eio/eio/Eio/Fiber/index.html#val-with_binding&quot;&gt;Fiber.with_binding&lt;/a&gt;,
which runs a function with a binding but then puts things back how they were before returning,
so &lt;code&gt;f&lt;/code&gt; can't make changes that are still active when &lt;code&gt;g&lt;/code&gt; runs.&lt;/p&gt;
&lt;p&gt;This also allows people who don't want capabilities to disable the whole system easily:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_key&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It looks like &lt;code&gt;f ()&lt;/code&gt; doesn't have access to anything, but in fact it can recover &lt;code&gt;env&lt;/code&gt; and get access to everything!
However, anyone trying to understand the code will start following &lt;code&gt;env&lt;/code&gt; from the main entrypoint
and will then see that it got put in fiber-local storage.
They then at least know that they must read all the code to understand anything about what it can do.&lt;/p&gt;
&lt;p&gt;More usefully, this mechanism allows us to make just a few things ambiently available.
For example, we don't want to have to plumb stderr through to a function every time we want to do some &lt;code&gt;printf&lt;/code&gt; debugging,
so it makes sense to provide a tracing function this way (and Eio does this by default).
Tracing allows all components to write debug messages, but it doesn't let them read them.
Therefore, it doesn't provide a way for components to communicate with each other.&lt;/p&gt;
&lt;p&gt;It might be tempting to use &lt;code&gt;Fiber.with_binding&lt;/code&gt; to restrict access to part of a program
(e.g. giving an HTTP server network access this way),
but note that this is a non-capability way to do things,
and suffers the same problems as traditional security systems,
separating designation from authority.
In particular, supposedly sandboxed code in other parts of the application
can try to escape by tricking the HTTP server part into running a callback function for them.
But fiber local storage is fine for things to which you don't care to restrict access.&lt;/p&gt;
&lt;h3&gt;Symlinks&lt;/h3&gt;
&lt;p&gt;Symlinks are a bit of a pain! If I have a capability reference to a directory, it's useful to know that I can only access things beneath that directory. But the directory may contain a symlink that points elsewhere.&lt;/p&gt;
&lt;p&gt;One option would be to say that a symlink is a capability itself, but this means that you could only create symlinks to things you can access yourself, and this is quite a restriction. For example, you might be forbidden from extracting a tarball because &lt;code&gt;tar&lt;/code&gt; didn't have permission to the target of a symlink it wanted to create.&lt;/p&gt;
&lt;p&gt;The other option is to say that symlinks are just strings, and it's up to the user to interpret them.
This is the approach FreeBSD uses. When you use a system call like &lt;code&gt;openat&lt;/code&gt;,
you pass a capability to a base directory and a string path relative to that.
In the case of our web-server, we'd use a capability for &lt;code&gt;htdocs&lt;/code&gt;, but use strings to reference things inside it, allowing the server to follow symlinks within that sub-tree, but not outside.&lt;/p&gt;
&lt;p&gt;The main problem is that it makes the API a bit confusing. Consider:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;save_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htdocs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;uploads&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It might look like &lt;code&gt;save_to&lt;/code&gt; is only getting access to the &amp;quot;uploads&amp;quot; directory,
but in Eio it actually gets access to the whole of &lt;code&gt;htdocs&lt;/code&gt;.
If you want to restrict access, you have to do that explicitly
(as we did when creating &lt;code&gt;htdocs&lt;/code&gt; from &lt;code&gt;fs&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The advantage, however, is that we don't break software that relies on symlinks.
Also, restricting access is quite expensive on some systems (FreeBSD has the handy &lt;code&gt;O_BENEATH&lt;/code&gt; open flag,
and Linux has &lt;code&gt;RESOLVE_BENEATH&lt;/code&gt;, but not all systems provide this), so might not be a good default.
I'm not completely satisfied with the current API, though.&lt;/p&gt;
&lt;h3&gt;Time and randomness&lt;/h3&gt;
&lt;p&gt;It is also possible to use capabilities to restrict access to time and randomness.
The security benefits here are less clear.
Tracking access to time can be useful in preventing side-channel attacks that depend on measuring time accurately,
but controlling access to randomness makes it difficult to e.g. randomise hash functions to
help prevent denial-of-service-attacks.&lt;/p&gt;
&lt;p&gt;However, controlling access to these does have the advantage of making code deterministic by default,
which is a great benefit, especially for expect-style testing.
Your top level test function is called with no arguments, and therefore has no access to non-determinism,
instead creating deterministic mocks to use with the code under test.
You can then just record a good trace of a test's operations and check that it doesn't change.&lt;/p&gt;
&lt;h3&gt;Power boxes&lt;/h3&gt;
&lt;p&gt;Interactive applications that load and save files present a small problem:
since the user might load or save anywhere, it seems they need access to the whole file-system.
The solution is a &amp;quot;powerbox&amp;quot;.
The powerbox has access to the file-system and the rest of the application only has access to the powerbox.
When the application wants to save a file, it asks the powerbox, which pops up a GUI asking the user to choose the location.
Then it opens the file and passes that back to the application.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Currently-popular security mechanisms are complex and have many shortcomings.
Yet, the lambda calculus already contains an excellent security mechanism,
and making use of it requires little more than avoiding global variables.&lt;/p&gt;
&lt;p&gt;This is known as &amp;quot;capability-based security&amp;quot;.
The word &amp;quot;capabilities&amp;quot; has also been used for several unrelated concepts (such as &amp;quot;POSIX capabilities&amp;quot;),
and for clarity much of the community rebranded a while back as &amp;quot;Object Capabilities&amp;quot;,
but this can make it seem irrelevant to functional programmers.
In fact, I wrote this blog post because several OCaml programmers have asked me what the point of capabilities is.
I was expecting it to be quite short (basically: applying functions to arguments good, global variables bad),
but it's got quite long; it seems there is a fair bit that follows from this simple idea!&lt;/p&gt;
&lt;p&gt;Instead of seeing security as an extra layer that runs separately from the code and tries to guess what it meant to do,
capabilities fit naturally into the language.
The key difference with traditional security is that
the ability to do something depends on the reference used to do it, not on the identity of the caller.
This way of thinking about security works not only for controlling access to resources within a single program,
but also for controlling interactions between processes running on a machine, and between machines on a network.
We can group together resources and zoom out to see the overall picture, or expand groups to zoom in and get a closer
bound on the behaviour.&lt;/p&gt;
&lt;p&gt;Even ignoring security, a key question is: what can a function do?
Should a function call be able to do anything at all that the process can do,
or should its behaviour be bounded in some way that is obvious just by looking at it?
If we say that you must read the source code of a function to see what it does, then this applies recursively:
we must also read all the functions that it calls, and so on.
To understand the &lt;code&gt;main&lt;/code&gt; function, we end up having to read the code of every library it uses!&lt;/p&gt;
&lt;p&gt;If you want to read more,
the &lt;a href=&quot;http://habitatchronicles.com/2017/05/what-are-capabilities/&quot;&gt;What Are Capabilities?&lt;/a&gt; blog post provides a good overview;
Part II of &lt;a href=&quot;https://papers.agoric.com/papers/robust-composition/abstract/&quot;&gt;Robust Composition&lt;/a&gt; contains a longer explanation;
&lt;a href=&quot;https://srl.cs.jhu.edu/pubs/SRL2003-02.pdf&quot;&gt;Capability Myths Demolished&lt;/a&gt; does a good job of enumerating security properties provided by capabilities;
my own &lt;a href=&quot;https://roscidus.com/blog/about/#the-serscis-access-modeller&quot;&gt;SERSCIS Access Modeller&lt;/a&gt; paper shows how to analyse systems
where some components have unknown behaviour; and, for historical interest, see
Dennis and Van Horn's 1966 &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/365230.365252&quot;&gt;Programming Semantics for Multiprogrammed Computations&lt;/a&gt;, which introduced the idea.&lt;/p&gt;
</content><id>https://roscidus.com/blog/blog/2023/04/26/lambda-capabilities/</id><title type="text">Lambda Capabilities</title><updated>2023-04-26T10:00:00-00:00</updated><author><name>Thomas Leonard</name></author></entry><entry><link href="https://roscidus.com/blog/blog/2021/10/30/xwayland/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</uri><name>talex5</name></contributor><content type="html">&lt;p&gt;In my last post, &lt;a href=&quot;https://roscidus.com/blog/blog/2021/03/07/qubes-lite-with-kvm-and-wayland/&quot;&gt;Qubes-lite with KVM and Wayland&lt;/a&gt;, I described setting up a Qubes-inspired Linux system that runs applications in virtual machines. A Wayland proxy running in each VM connects its applications to the host Wayland compositor over virtwl, allowing them to appear on the desktop alongside normal host applications. In this post, I extend this to support X11 applications using Xwayland.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#overview&quot;&gt;Overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#introduction-to-x11&quot;&gt;Introduction to X11&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#running-xwayland&quot;&gt;Running Xwayland&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-x11-protocol&quot;&gt;The X11 protocol&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#initialising-the-window-manager&quot;&gt;Initialising the window manager&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#windows&quot;&gt;Windows&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#performance&quot;&gt;Performance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#pointer-events&quot;&gt;Pointer events&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#keyboard-events&quot;&gt;Keyboard events&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#pointer-cursor&quot;&gt;Pointer cursor&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#selections&quot;&gt;Selections&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#drag-and-drop&quot;&gt;Drag-and-drop&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#bonus-features&quot;&gt;Bonus features&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#hidpi-works&quot;&gt;HiDPI works&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#ring-buffer-logging&quot;&gt;Ring-buffer logging&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#vim-windows-open-correctly&quot;&gt;Vim windows open correctly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#copy-and-paste-without-m-characters&quot;&gt;Copy-and-paste without ^M characters&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#conclusions&quot;&gt;Conclusions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=29645743&quot;&gt;Hacker News&lt;/a&gt; )&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A graphical desktop typically allows running multiple applications on a single display
(e.g. by showing each application in a separate window).
Client applications connect to a server process (usually on the same machine) and ask it to display their windows.&lt;/p&gt;
&lt;p&gt;Until recently, this service was an &lt;em&gt;X server&lt;/em&gt;, and applications would communicate with it using the X11 protocol.
However, on newer systems the display is managed by a &lt;em&gt;Wayland compositor&lt;/em&gt;, using the Wayland protocol.&lt;/p&gt;
&lt;p&gt;Many older applications haven't been updated yet.
&lt;a href=&quot;https://wayland.freedesktop.org/docs/html/ch05.html&quot;&gt;Xwayland&lt;/a&gt; can be used to allow unmodified X11 applications to run in a Wayland desktop environment.
However, setting this up wasn't as easy as I'd hoped.
Ideally, Xwayland would completely isolate the Wayland compositor from needing to know anything about X11:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/xwayland/fantasy-xwayland.png&quot; title=&quot;Fantasy Xwayland architecture&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Fantasy Xwayland architecture&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;However, it doesn't work like this.
Xwayland handles X11 drawing operations, but it doesn't handle lots of other details, including window management (e.g. telling the Wayland compositor what the window title should be), copy-and-paste, and selections.
Instead, the Wayland compositor is supposed to connect back to Xwayland over the X11 protocol and act as an X11 window manager to provide the missing features:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/xwayland/real-xwayland.png&quot; title=&quot;Actual Xwayland architecture&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Actual Xwayland architecture&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a problem for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It means that every Wayland compositor has to implement not only the new Wayland protocol, but also the old X11 protocol.
&lt;/li&gt;
&lt;li&gt;The compositor is part of the trusted computing base (it sees all your keystrokes and window contents)
and this adds a whole load of legacy code that you'd need to audit to have confidence in it.
&lt;/li&gt;
&lt;li&gt;It doesn't work when running applications in VMs,
because each VM needs its own Xwayland service and existing compositors can only manage one.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because Wayland (unlike X11) doesn't allow applications to mess with other applications' windows,
we can't have a third-party application act as the X11 window manager.
It wouldn't have any way to ask the compositor to put Xwayland's surfaces into a window frame, because Xwayland is a separate application.&lt;/p&gt;
&lt;p&gt;There is another way to do it, however.
As I mentioned in the last post,
I already had to write a Wayland proxy (&lt;a href=&quot;https://github.com/talex5/wayland-proxy-virtwl&quot;&gt;wayland-proxy-virtwl&lt;/a&gt;) to run in each VM
and relay Wayland messages over virtwl, so I decided to extend it to handle Xwayland too.
As a bonus, the proxy can also be used even without VMs, avoiding the need for any X11 support in Wayland compositors at all.
In fact, I found that doing this avoided several bugs in Sway's built-in Xwayland support.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromiumos/platform2/+/refs/heads/main/vm_tools/sommelier/&quot;&gt;Sommelier&lt;/a&gt; already has support for this, but it doesn't work for the applications I want to use.
For example, popup menus appear in the center of the screen, text selections don't work, and it generally crashes after a few seconds (often with the error &lt;code&gt;xdg_surface has never been configured&lt;/code&gt;).
So instead I'd been using &lt;code&gt;ssh -Y vm&lt;/code&gt; from the host to forward X11 connections to the host's Xwayland,
managed by Sway.
That works, but it's not at all secure.&lt;/p&gt;
&lt;h2&gt;Introduction to X11&lt;/h2&gt;
&lt;p&gt;Unlike Wayland, where applications are mostly unaware of each other, X is much more collaborative.
The X server maintains a tree of windows (rectangles) and the applications manipulate it.
The root of the tree is called the &lt;em&gt;root window&lt;/em&gt; and fills the screen.
You can see the tree using the &lt;code&gt;xwininfo&lt;/code&gt; command, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xwininfo -tree -root

xwininfo: Window id: 0x47 (the root window) (has no name)

  Root window id: 0x47 (the root window) (has no name)
  Parent window id: 0x0 (none)
     9 children:
     0x800112 &amp;quot;~/Projects/wayland/wayland-proxy-virtwl&amp;quot;: (&amp;quot;ROX-Filer&amp;quot; &amp;quot;ROX-Filer&amp;quot;)  2184x2076+0+0  +0+0
        1 child:
        0x800113 (has no name): ()  1x1+-1+-1  +-1+-1
     0x800123 (has no name): ()  1x1+-1+-1  +-1+-1
     0x800003 &amp;quot;ROX-Filer&amp;quot;: ()  10x10+-100+-100  +-100+-100
     0x800001 &amp;quot;ROX-Filer&amp;quot;: (&amp;quot;ROX-Filer&amp;quot; &amp;quot;ROX-Filer&amp;quot;)  10x10+10+10  +10+10
        1 child:
        0x800002 (has no name): ()  1x1+-1+-1  +9+9
     0x600002 &amp;quot;main.ml (~/Projects/wayland/wayland-proxy-virtwl) - GVIM1&amp;quot;: (&amp;quot;gvim&amp;quot; &amp;quot;Gvim&amp;quot;)  1648x1012+0+0  +0+0
        1 child:
        0x600003 (has no name): ()  1x1+-1+-1  +-1+-1
     0x600007 (has no name): ()  1x1+-1+-1  +-1+-1
     0x600001 &amp;quot;Vim&amp;quot;: (&amp;quot;gvim&amp;quot; &amp;quot;Gvim&amp;quot;)  10x10+10+10  +10+10
     0x200002 (has no name): ()  1x1+0+0  +0+0
     0x200001 (has no name): ()  1x1+0+0  +0+0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tree shows the windows of two X11 applications, ROX-Filer and GVim,
as well as various invisible utility windows (mostly 1x1 or 10x10 pixels in size).&lt;/p&gt;
&lt;p&gt;Applications can create, move, resize and destroy windows, draw into them, and request events from them.
The X server also allows arbitrary data to be attached to windows in &lt;em&gt;properties&lt;/em&gt;.
You can see a window's properties with &lt;code&gt;xprop&lt;/code&gt;. Here are some of the properties on the GVim window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xprop -id 0x600002
WM_HINTS(WM_HINTS):
		Client accepts input or input focus: True
		Initial state is Normal State.
		window id # of group leader: 0x600001
_NET_WM_WINDOW_TYPE(ATOM) = _NET_WM_WINDOW_TYPE_NORMAL
WM_NORMAL_HINTS(WM_SIZE_HINTS):
		program specified minimum size: 188 by 59
		program specified base size: 188 by 59
		window gravity: NorthWest
WM_CLASS(STRING) = &amp;quot;gvim&amp;quot;, &amp;quot;Gvim&amp;quot;
WM_NAME(STRING) = &amp;quot;main.ml (~/Projects/wayland/wayland-proxy-virtwl) - GVIM1&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The X server itself doesn't know anything about e.g. window title bars.
Instead, a &lt;em&gt;window manager&lt;/em&gt; process connects and handles that.
A window manager is just another X11 application.
It asks to be notified when an application tries to show (&amp;quot;map&amp;quot;) a window inside the root,
and when that happens it typically creates a slightly larger window (with room for the title bar, etc)
and moves the other application's window inside that.&lt;/p&gt;
&lt;p&gt;This design gives X a lot of flexibility.
All kinds of window managers have been implemented, without needing to change the X server itself.
However, it is very bad for security. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open an xterm.
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;xwininfo&lt;/code&gt; to find its window ID (you need the nested child window, not the top-level one).
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;xev -id 0x80001b -event keyboard&lt;/code&gt; in another window (using the ID you got above).
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;sudo&lt;/code&gt; or similar inside &lt;code&gt;xterm&lt;/code&gt; and enter a password.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you type the password into &lt;code&gt;xterm&lt;/code&gt;, you should see the characters being captured by &lt;code&gt;xev&lt;/code&gt;.
An X application can easily spy on another application, send it synthetic events, etc.&lt;/p&gt;
&lt;h2&gt;Running Xwayland&lt;/h2&gt;
&lt;p&gt;Xwayland is a version of the &lt;a href=&quot;https://www.x.org/wiki/&quot;&gt;xorg&lt;/a&gt; X server that treats Wayland as its display hardware.
If you run it as e.g. &lt;code&gt;Xwayland :1&lt;/code&gt; then it opens a single Wayland window corresponding to the X root window,
and you can use it as a nested desktop.
This isn't very useful, because these windows don't fit in with the rest of your desktop.
Instead, it is normally used in &lt;em&gt;rootless&lt;/em&gt; mode, where each child of the X root window may have its own Wayland window.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DEBUG=1 Xwayland :1 -rootless
[3991465.523]  -&amp;gt; wl_display@1.get_registry(new id wl_registry@2)
[3991465.531]  -&amp;gt; wl_display@1.sync(new id wl_callback@3)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When run this way, however, no windows actually appear.
If we run &lt;code&gt;DISPLAY=:1 xterm&lt;/code&gt; then we see Xwayland creating some buffers, but no surfaces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[4076460.506]  -&amp;gt; wl_shm@4.create_pool(new id wl_shm_pool@15, fd 9, 540)
[4076460.520]  -&amp;gt; wl_shm_pool@15.create_buffer(new id wl_buffer@24, 0, 9, 15, 36, 0)
[4076460.526]  -&amp;gt; wl_shm_pool@15.destroy()
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to run Xwayland as &lt;code&gt;Xwayland :1 -rootless -wm FD&lt;/code&gt;, where FD is a socket we will use to speak the X11 protocol and act as a window manager.&lt;/p&gt;
&lt;p&gt;It's a little hard to find information about Xwayland's rootless mode, because &amp;quot;rootless&amp;quot; has two separate common meanings in xorg:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Running xorg without root privileges.
&lt;/li&gt;
&lt;li&gt;Using xorg's miext/rootless extension to display application windows on some other desktop.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After a while, it became clear that Xwayland's rootless mode isn't either of these, but a third xorg feature also called &amp;quot;rootless&amp;quot;.&lt;/p&gt;
&lt;h2&gt;The X11 protocol&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://xcb.freedesktop.org/&quot;&gt;libxcb&lt;/a&gt; provides C bindings to the X11 protocol, but I wanted to program in OCaml.
Luckily, the &lt;a href=&quot;https://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html&quot;&gt;X11 protocol&lt;/a&gt; is well documented, and generating the messages directly didn't look any harder than binding libxcb,
so I wrote a little OCaml library to do this (&lt;a href=&quot;https://github.com/talex5/wayland-proxy-virtwl/blob/master/x11/x11.mli&quot;&gt;ocaml-x11&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;At first, I hard-coded the messages. For example, here's the code to delete a property on a window:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cstruct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;little_endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;set_req_window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;set_req_property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;I'm using the &lt;a href=&quot;https://github.com/mirage/ocaml-cstruct&quot;&gt;cstruct&lt;/a&gt; syntax extension to let me define the exact layout of the message body.
Here, it generates &lt;code&gt;sizeof_req&lt;/code&gt;, &lt;code&gt;set_req_window&lt;/code&gt; and &lt;code&gt;set_req_property&lt;/code&gt; automatically.&lt;/p&gt;
&lt;p&gt;After a bit, I discovered that there are XML files in &lt;a href=&quot;https://gitlab.freedesktop.org/xorg/proto/xcbproto&quot;&gt;xcbproto&lt;/a&gt; describing the X11 protocol.
This provides a Python library for parsing the XML,
which you can use by writing a Python script for your language of choice.
For example, this &lt;a href=&quot;https://gitlab.freedesktop.org/xorg/lib/libxcb/-/blob/master/src/c_client.py&quot;&gt;glorious 3394 line Python script&lt;/a&gt;
generates the C bindings.
After studying this script carefully, I decided that hard-coding everything wasn't so bad after all.&lt;/p&gt;
&lt;p&gt;I ended up having to implement more messages than I expected,
including some surprising ones like &lt;code&gt;OpenFont&lt;/code&gt; (see &lt;a href=&quot;https://github.com/talex5/wayland-proxy-virtwl/blob/master/x11/x11.mli&quot;&gt;x11.mli&lt;/a&gt; for the final list).
My implementation came to 1754 lines of OCaml,
which is quite a bit shorter than the Python generator script,
so I guess I still came out ahead!&lt;/p&gt;
&lt;p&gt;In the X11 protocol, client applications send &lt;em&gt;requests&lt;/em&gt; and the server sends &lt;em&gt;replies&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt;.
Most requests don't produce replies, but can produce errors.
Replies and errors are returned immediately, so if you see a response to a later request, you know all previous ones succeeded.
If you care about whether a request succeeded, you may need to send a dummy message that generates a reply after it.
Since message sequence numbers are 16-bit, after sending 0xffff consecutive requests without replies,
you should send a dummy one with a reply to resynchronise
(but window management involves lots of round-trips, so this isn't likely to be a problem for us).
Events can be sent by the server at any time.&lt;/p&gt;
&lt;p&gt;Unlike Wayland, which is very regular, X11 has various quirks.
For example, every event has a sequence number at offset 2, except for &lt;code&gt;KeymapNotify&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Initialising the window manager&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;Xwayland -wm FD&lt;/code&gt; actually prevents any client applications from connecting at all at first,
because Xwayland then waits for the window manager to be ready before accepting any client connections.&lt;/p&gt;
&lt;p&gt;To fix that, we need to claim ownership of the &lt;code&gt;WM_S0&lt;/code&gt; &lt;em&gt;selection&lt;/em&gt;.
A &amp;quot;selection&amp;quot; is something that can be owned by only one application at a time.
Selections were originally used to track ownership of the currently-selected text, and later also used for the clipboard.
&lt;code&gt;WM_S0&lt;/code&gt; means &amp;quot;Window Manager for Screen 0&amp;quot; (Xwayland only has one screen).&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Become the window manager. This allows other clients to connect. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_sn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only_if_exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;WM_S&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_owner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CurrentTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_sn&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Instead of passing things like &lt;code&gt;WM_S0&lt;/code&gt; as strings in each request, X11 requires us to first &lt;em&gt;intern&lt;/em&gt; the string.
This returns a unique 32-bit ID for it, which we use in future messages.
Because &lt;code&gt;intern&lt;/code&gt; may require a round-trip to the server, it returns a promise,
and so we use &lt;code&gt;let*&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt; to wait for that to resolve before continuing.
&lt;code&gt;let*&lt;/code&gt; is defined in the &lt;code&gt;Lwt.Syntax&lt;/code&gt; module, as an alternative to the more traditional &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;This lets our clients connect. However, Xwayland still isn't creating any Wayland surfaces.
By reading the Sommelier code and stepping through Xwayland with a debugger, I found that I needed to enable the &lt;a href=&quot;https://www.x.org/wiki/guide/extensions/&quot;&gt;Composite&lt;/a&gt; extension.&lt;/p&gt;
&lt;p&gt;Composite was originally intended to speed up redraw operations, by having the server keep a copy of every top-level window's pixels
(even when obscured), so that when you move a window it can draw it right away without asking the application for help.
The application's drawing operations go to the window's buffer, and then the buffer is copied to the screen, either automatically by the X server
or manually by the window manager.
Xwayland reuses this mechanism, by turning each window buffer into a Wayland surface.
We just need to turn that on:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;composite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Composite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Composite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect_subwindows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;composite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Manual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This says that every child of the root window should use this system.
Finally, we see Xwayland creating Wayland surfaces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_compositor@5.create_surface id:+28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we just need to make them appear on the screen!&lt;/p&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;As usual for Wayland, we need to create a role object and attach it to the surface.
This tells Wayland whether the surface is a window or a dialog, for example, and lets us set the title, etc.&lt;/p&gt;
&lt;p&gt;But first we have a problem: we need to know which X11 window corresponds to each Wayland surface.
For example, we need the title, which is stored in a property on the X11 window.
Xwayland does this by sending the new window a &lt;em&gt;ClientMessage&lt;/em&gt; event of type &lt;code&gt;WL_SURFACE_ID&lt;/code&gt; containing the Wayland ID.
We don't get this message by default, but it seems that selecting &lt;code&gt;SubstructureRedirect&lt;/code&gt; on the root does the trick.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SubstructureRedirect&lt;/code&gt; is used by window managers to intercept attempts by other applications to change the children of the root window.
When an application asks the server to e.g. map a window, the server just forwards the request to the window manager.
Operations performed by the window manager itself do not get redirected, so it can just perform the same request the client wanted, or
make any changes it requires.&lt;/p&gt;
&lt;p&gt;In our case, we don't actually need to modify the request, so we just re-perform the original &lt;code&gt;map&lt;/code&gt; operation:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl_surface_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;LE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;X window %a corresponds to Wayland surface %ld&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;pair_when_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Having two separate connections to Xwayland is quite annoying, because messages can arrive in any order.
We might get the X11 &lt;code&gt;ClientMessage&lt;/code&gt; first and need to wait for the Wayland &lt;code&gt;create_surface&lt;/code&gt;, or we might get the &lt;code&gt;create_surface&lt;/code&gt; first
and need to wait for the &lt;code&gt;ClientMessage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An added complication is that not all Wayland surfaces correspond to X11 windows.
For example, Xwayland also creates surfaces representing cursor shapes, and these don't have X11 windows.
However, when we get the &lt;code&gt;ClientMessage&lt;/code&gt; we &lt;em&gt;can&lt;/em&gt; be sure that a Wayland message is on the way,
so I just pause the X11 event handling until that has arrived:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* We got an X11 message saying X11 [window] corresponds to Wayland surface [wayland_id].&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;   Turn [wayland_id] into an xdg_surface. If we haven't seen that surface yet, wait until it appears&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;   on the Wayland socket. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair_when_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpaired&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unknown Wayland object %ld; waiting for surface to be created...&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpaired_added&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;pair_when_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_surface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_surface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_configured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Setting up Wayland surface %ld using X11 window %a&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Xid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpaired&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wayland_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_configured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_surface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_unit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Another complication is that Wayland doesn't allow you to attach a buffer to a surface until the window has been &amp;quot;configured&amp;quot;.
Doing so is a protocol error, and Sway will disconnect us if we try!
But Xwayland likes to attach the buffer immediately after creating the surface.&lt;/p&gt;
&lt;p&gt;To avoid this, I use a queue:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Xwayland asks to create a surface.
&lt;/li&gt;
&lt;li&gt;We forward this to Sway, add its ID to the &lt;code&gt;unpaired&lt;/code&gt; map, and create a queue for further events.
&lt;/li&gt;
&lt;li&gt;Xwayland asks us to attach a buffer, etc. We just queue these up.
&lt;/li&gt;
&lt;li&gt;We get the &lt;code&gt;ClientMessage&lt;/code&gt; over the X11 connection and create a role for the new surface.
&lt;/li&gt;
&lt;li&gt;Sway sends us a &lt;code&gt;configure&lt;/code&gt; event, confirming it's ready for the buffer.
&lt;/li&gt;
&lt;li&gt;We forward the queued events.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, this creates a new problem: if the surface isn't a window then the events will be queued forever.
To fix that, when we get a &lt;code&gt;create_surface&lt;/code&gt; we also do a round-trip on the X11 connection.
If the window is still unpaired when that returns then we know that no &lt;code&gt;ClientMessage&lt;/code&gt; is coming, and we flush the queue.&lt;/p&gt;
&lt;p&gt;X applications like to create dummy windows for various purposes (e.g. receiving clipboard data),
and we need to avoid showing those.
They're normally set as &lt;code&gt;override_redirect&lt;/code&gt; so the window manager doesn't handle them,
but Xwayland redirects them anyway (it needs to because otherwise e.g. tooltips wouldn't appear at all).
I'm trying various heuristics to detect this, e.g. that override redirect windows with a size of 1x1 shouldn't be shown.&lt;/p&gt;
&lt;p&gt;If Sway asks us to close a window, we need to relay that to the X application using the &lt;code&gt;WM_DELETE_WINDOW&lt;/code&gt; protocol,
if it supports that:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toplevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xdg_surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_toplevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdg_surface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[_]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xdg_toplevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_protocols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;WM_PROTOCOLS&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_delete_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;WM_DELETE_WINDOW&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_atoms&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_protocols&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_delete_window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocols&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;LE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wm_delete_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;LE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_client_message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wm_protocols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Wayland defaults to using client-side decorations (where the application draws its own window decorations).
X doesn't do that, so we need to turn it off (if the Wayland compositor supports the decoration manager extension):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decor_mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decor_mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xdg_decor_mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_toplevel_decoration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decor_mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toplevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[_]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xdg_decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_configure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Xdg_decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Xdg_decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Server_side&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Dialog boxes are more of a problem.
Wayland requires every dialog box to have a parent window, but X11 doesn't.
To handle that, the proxy tracks the last window the user interacted with and uses that as a fallback parent
if an X11 window with type &lt;code&gt;_NET_WM_WINDOW_TYPE_DIALOG&lt;/code&gt; is created without setting &lt;code&gt;WM_TRANSIENT_FOR&lt;/code&gt;.
That could be a problem if the application closes that window, but it seems to work.&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;I noticed a strange problem: scrolling around in GVim had long pauses once a second or so,
corresponding to OCaml GC runs.
This was surprising, as OCaml has a fast incremental garbage collector, and is normally not a problem for interactive programs.
Besides, I'd been using the proxy with the (Wayland) Firefox and xfce4-terminal applications for 6 months without any similar problem.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;perf&lt;/code&gt; showed that Linux was spending a huge amount of time in &lt;code&gt;release_pages&lt;/code&gt;.
The problem is that Xwayland was sharing lots of short-lived memory pools with the proxy.
Each time it shares a pool, we have to ask the VM host for a chunk of memory of the same size.
We map both pools into our address space and then copy each frame across
(this is needed because we can't export guest memory to the host).&lt;/p&gt;
&lt;p&gt;Normally, an application shares a single pool and just refers to regions within it, so we just map once at startup and unmap at exit.
But Xwayland was creating, sharing and discarding around 100 pools per second while scrolling in GVim!
Because these pools take up a lot of RAM, OCaml was (correctly) running the GC very fast, freeing them in batches of 100 or so each second.&lt;/p&gt;
&lt;p&gt;First, I tried adding a cache of host memory, but that only solved half the problem: freeing the client pool was still slow.&lt;/p&gt;
&lt;p&gt;Another option is to unmap the pools as soon as we get the destroy message, to spread the work out.
Annoyingly, OCaml's standard library doesn't let you free memory-mapped memory explicitly
(see the &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/389&quot;&gt;Add BigArray.Genarray.free&lt;/a&gt; PR for the current status),
but adding this myself with a bit of C code would have been easy enough.
We only touch the memory in one place (for the copy), so manually checking it hadn't been freed would have been pretty safe.&lt;/p&gt;
&lt;p&gt;Then I noticed something interesting about the repeated log entries, which mostly looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_shm@4.create_pool id:+26 fd:(fd) size:8368360
-&amp;gt; wl_shm_pool@26.create_buffer id:+28 offset:0 width:2090 height:1001 stride:8360 format:1
-&amp;gt; wl_shm_pool@26.destroy 
&amp;lt;- wl_display@1.delete_id id:26
-&amp;gt; wl_buffer@28.destroy 
&amp;lt;- wl_display@1.delete_id id:28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Xwayland creates a pool, allocates a buffer within it, destroys the pool (so it can't create more buffers), and then deletes the buffer.
But &lt;em&gt;it never uses the buffer for anything&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;So the solution was simple: I just made the host buffer allocation and the mapping operations lazy.
We force the mapping if a pool's buffer is ever attached to a surface, but if not we just close the FD and forget about it.
Would be more efficient if Xwayland only shared the pools when needed, though.&lt;/p&gt;
&lt;h2&gt;Pointer events&lt;/h2&gt;
&lt;p&gt;Wayland delivers pointer events relative to a surface, so we simply forward these on to Xwayland unmodified and everything just works.&lt;/p&gt;
&lt;p&gt;I'm kidding - this was the hardest bit! When Xwayland gets a pointer event on a window, it doesn't send it directly to that window.
Instead, it converts the location to screen coordinates and then pushes the event through the old X event handling mechanism, which looks at the X11 window stack to decide where to send it.&lt;/p&gt;
&lt;p&gt;However, the X11 window stack (which we saw earlier with &lt;code&gt;xwininfo -tree -root&lt;/code&gt;) doesn't correspond to the Wayland window layout at all.
In fact, Wayland doesn't provide us any way to know where our windows are, or how they are stacked.&lt;/p&gt;
&lt;p&gt;Sway seems to handle this via a backdoor: X11 applications do get access to location information even though native Wayland clients don't.
This is one of the reasons I want to get X11 support out of the compositor - I want to make sure X11 apps don't have any special access.
Sommelier has a solution though: when the pointer enters a window we raise it to the top of the X11 stack. Since it's the topmost window, it will get the events.&lt;/p&gt;
&lt;p&gt;Unfortunately, the raise request goes over the X11 connection while the pointer events go over the Wayland one.
We need to make sure that they arrive in the right order.
If the computer is running normally, this isn't much of a problem,
but if it's swapping or otherwise struggling it could result in events going to the wrong place
(I temporarily added a 2-second delay to test this).
This is what I ended up with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a wayland pointer enter event from Sway.
&lt;/li&gt;
&lt;li&gt;Pause event delivery from Sway.
&lt;/li&gt;
&lt;li&gt;Flush any pending Wayland events we previously sent to Xwayland by doing a round-trip on the Wayland connection.
&lt;/li&gt;
&lt;li&gt;Send a raise on the X11 connection.
&lt;/li&gt;
&lt;li&gt;Do a round-trip on the X11 connection to ensure the raise has completed.
&lt;/li&gt;
&lt;li&gt;Forward the enter event on the Wayland connection.
&lt;/li&gt;
&lt;li&gt;Unpause the event stream from Sway.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At first I tried queuing up just the pointer events,
but that doesn't work because e.g. keyboard events need to be synchronised with pointer events.
Otherwise, if you e.g. Shift-click on something then the click gets delayed but the Shift doesn't and it can do the wrong thing.
Also, Xwayland might ask Sway to destroy the window while we're entering it, and Sway might confirm the deletion.
Pausing the whole event stream from Sway fixes all these problems.&lt;/p&gt;
&lt;p&gt;The next problem was how to do the two round-trips.
For X11 we just send an &lt;code&gt;Intern&lt;/code&gt; request after the raise and wait to get a reply to that.
Wayland provides the &lt;code&gt;wl_display.sync&lt;/code&gt; method to clients, but we're acting as a Wayland server to Xwayland,
not a client.
I remembered that Wayland's xdg-shell extension provides a ping from the server to the client
(the compositor can use this to detect when an application is not responding).
Unfortunately, Xwayland has no reason to use this extension because it doesn't deal with window roles.
Luckily, it uses it anyway (it does need it for non-rootless mode and doesn't bother to check).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wl_display.sync&lt;/code&gt; works by creating a fresh callback object, but xdg-shell's &lt;code&gt;ping&lt;/code&gt; just sends a &lt;code&gt;pong&lt;/code&gt; event to a fixed object,
so we also need a queue to keep track of pings in flight so we don't get confused between our pings and any pings we're relaying for Sway.
Also, xdg-shell's ping requires a serial number and we don't have one.
But since Xwayland is the only app this needs to support, and it doesn't look at that, I cheat and just send zero.&lt;/p&gt;
&lt;p&gt;And that's how to get pointer events to go to the right window with Xwayland.&lt;/p&gt;
&lt;h2&gt;Keyboard events&lt;/h2&gt;
&lt;p&gt;A very similar problem exists with the keyboard.
When Wayland says the focus has entered a window
we need to send a &lt;code&gt;SetInputFocus&lt;/code&gt; over the X11 connection
and then send the keyboard events over the Wayland one,
requiring another two round-trips to synchronise the two connections.&lt;/p&gt;
&lt;h2&gt;Pointer cursor&lt;/h2&gt;
&lt;p&gt;Some applications set their own pointer shape, which works fine.
But others rely on the default and for some reason you get no cursor at all in that case.
To fix it, you need to set a cursor on the root window, which applications will then inherit by default.
Unlike Wayland, where every application provides its own cursor bitmaps,
X very sensibly provides a standard set of cursors, in a font called &lt;code&gt;cursor&lt;/code&gt;
(this is why I had to implement &lt;code&gt;OpenFont&lt;/code&gt;).
As cursors have two colours and a mask, each cursor is two glyphs: even numbered glyphs are the image and the following glyph is its mask:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Load the default cursor image *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor_font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_font&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cursor&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_glyph_cursor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor_font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask_font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor_font&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask_char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_cursor&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change_attributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;h2&gt;Selections&lt;/h2&gt;
&lt;p&gt;The next job was to get copying text between X and Wayland working.&lt;/p&gt;
&lt;p&gt;In X11:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you select something, the application takes ownership of the &lt;code&gt;PRIMARY&lt;/code&gt; selection.
&lt;/li&gt;
&lt;li&gt;When you click the middle button or press Shift-Insert, the application requests &lt;code&gt;PRIMARY&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;When you press Ctrl-C, the application takes ownership of the &lt;code&gt;CLIPBOARD&lt;/code&gt; selection.
&lt;/li&gt;
&lt;li&gt;When you press Ctrl-V it requests &lt;code&gt;CLIPBOARD&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's quite neat that adding support for a Windows-style clipboard didn't require changing the X server at all.
Good forward-thinking design there.&lt;/p&gt;
&lt;p&gt;In Wayland, things are not so simple.
I have so far found no less than four separate Wayland protocols for copying text:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gtk_primary_selection&lt;/code&gt; supports copying the primary selection, but not the clipboard.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wp_primary_selection_unstable_v1&lt;/code&gt; is identical to &lt;code&gt;gtk_primary_selection&lt;/code&gt; except that it renames everything.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wl_data_device_manager&lt;/code&gt; supports clipboard transfers but not the primary selection.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zwlr_data_control_manager_v1&lt;/code&gt; supports both, but it's for a &amp;quot;privileged client&amp;quot; to be a clipboard manager.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gtk_primary_selection&lt;/code&gt; and &lt;code&gt;wl_data_device_manager&lt;/code&gt; both say they're stable, while the other two are unstable.
However, Sway dropped support for &lt;code&gt;gtk_primary_selection&lt;/code&gt; a while ago, breaking many applications
(luckily, I had a handy Wayland proxy and was able to add some adaptor code
to route &lt;code&gt;gtk_primary_selection&lt;/code&gt; messages to the new &amp;quot;unstable&amp;quot; protocol).&lt;/p&gt;
&lt;p&gt;For this project, I went with &lt;code&gt;wp_primary_selection_unstable_v1&lt;/code&gt; and &lt;code&gt;wl_data_device_manager&lt;/code&gt;.
On the Wayland side, everything has to be written twice for the two protocols, which are almost-but-not-quite the same.
In particular, &lt;code&gt;wl_data_device_manager&lt;/code&gt; also has a load of drag-and-drop stuff you need to ignore.&lt;/p&gt;
&lt;p&gt;For each selection (&lt;code&gt;PRIMARY&lt;/code&gt; or &lt;code&gt;CLIPBOARD&lt;/code&gt;), we can be in one of two states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An X11 client owns the selection (and we own the Wayland selection).
&lt;/li&gt;
&lt;li&gt;A Wayland client owns the selection (and we own the X11 selection).
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we own a selection we proxy requests for it to the matching selection on the other protocol.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At startup, we take ownership of the X11 selection, since there are no X11 apps running yet.
&lt;/li&gt;
&lt;li&gt;When we lose the X11 selection it means that an X11 client now owns it and we take the Wayland selection.
&lt;/li&gt;
&lt;li&gt;When we lose the Wayland selection it means that a Wayland client now owns it and we take the X11 selection.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One good thing about the Wayland protocols is that you send the data by writing it to a normal Unix pipe.
For X11, we need to write the data to a property on the requesting application's window and then notify it about the data.
And we may need to split it into multiple chunks if there's a lot of data to transfer.&lt;/p&gt;
&lt;p&gt;A strange problem I had was that, while pasting into GVim worked fine, xterm would segfault shortly after trying to paste into it.
This turned out to be a bug in the way I was sending the notifications.
If an X11 application requests the special &lt;code&gt;TEXT&lt;/code&gt; target, it means that the sender should choose the exact format.
You write the property with the chosen type (e.g. &lt;code&gt;UTF8_STRING&lt;/code&gt;),
but you must still send the notification with the target &lt;code&gt;TEXT&lt;/code&gt;.
xterm is a C application (thankfully no longer set-uid!) and seems to have a use-after-free bug in the timeout code.&lt;/p&gt;
&lt;h2&gt;Drag-and-drop&lt;/h2&gt;
&lt;p&gt;Sadly, I wasn't able to get this working at all.
X itself doesn't know anything about drag-and-drop and instead applications look at the window tree to decide where the user dropped things.
This doesn't work with the proxy, because Wayland doesn't tell us where the windows really are on the screen.&lt;/p&gt;
&lt;p&gt;Even without any VMs or proxies, drag-and-drop from X applications to Wayland ones doesn't work,
because the X app can't see the Wayland window and the drop lands on the X window below (if any).&lt;/p&gt;
&lt;h2&gt;Bonus features&lt;/h2&gt;
&lt;p&gt;In the last post, I mentioned several other problems, which have also now been solved by the proxy:&lt;/p&gt;
&lt;h3&gt;HiDPI works&lt;/h3&gt;
&lt;p&gt;Wayland's support for high resolution screens is a bit strange.
I would have thought that applications really only need to know two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The size in pixels of the window.
&lt;/li&gt;
&lt;li&gt;The size in pixels you want some standard thing (e.g. a normal-sized letter M).
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some systems instead provide the size of the window and the DPI (dots-per-inch),
but this doesn't work well.
For example, a mobile phone might be high DPI but still want small text because you hold it close to your face,
while a display board will have very low DPI but want large text.&lt;/p&gt;
&lt;p&gt;Wayland instead redefines the idea of pixel to be a group of pixels corresponding to a single pixel on a typical 1990's display.
So if you set your scale factor to 2 then 1 Wayland pixel is a 2x2 grid of physical pixels.
If you have a 1000x1000 pixel window, Wayland will tell the application it is 500x500 but suggest a scale factor of 2.
If the application supports HiDPI mode, it will double all the numbers and render a 1000x1000 image and things work correctly.
If not, it will render a 500x500 pixel image and the compositor will scale it up.&lt;/p&gt;
&lt;p&gt;Since Xwayland doesn't support this, it just draws everything too small and Sway scales it up,
creating a blurry and unusable mess.
This might be made worse by &lt;a href=&quot;https://en.wikipedia.org/wiki/Subpixel_rendering&quot;&gt;subpixel rendering&lt;/a&gt;, which doesn't cope well with being scaled.&lt;/p&gt;
&lt;p&gt;With the proxy, the solution is simple enough: when talking to Xwayland we just scale everything back up to the real dimensions,
scaling all coordinates as we relay them:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_to_client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xunscale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xunscale&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_configure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_to_client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;nn&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x11&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This will tend to make things sharp but too small, but X applications already have their own ways to handle high resolution screens.
For example, you can set &lt;code&gt;Xft.dpi&lt;/code&gt; to make all the fonts bigger. I run this proxy like this, which works for me:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wayland-proxy-virtwl --x-display=0 --xrdb Xft.dpi:150 --x-unscale=2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there is a problem.
The Wayland specification says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new size of the surface is calculated based on the buffer
size transformed by the inverse buffer_transform and the
inverse buffer_scale. This means that at commit time the supplied
buffer size must be an integer multiple of the buffer_scale. If
that's not the case, an invalid_size error is sent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's say we have an X11 image viewer that wants to show a 1001-pixel-high image in a 1001-pixel-high window.
This isn't allowed by the spec, which can only handle even-sized windows when the scale factor is 2.
Regular Wayland applications already have to deal with that somehow, but for X11 applications it becomes our problem.&lt;/p&gt;
&lt;p&gt;I tried rounding down, but that has a bad side-effect: if GTK asks for a 1001-pixel high menu and gets a 1000 pixel allocation,
it switches to squashed mode and draws two big bumper arrows at the top and bottom of the menu which you must use to scroll it.
It looks very silly.&lt;/p&gt;
&lt;p&gt;I also tried rounding up, but tooltips look bad with any rounding. Either one border is missing, or it's double thickness.
Luckily, it seems that Sway doesn't actually enforce the rule about surfaces being a multiple of the scale factor.
So, I just let the application attach a buffer of whatever size it likes to the surface and it seems to work!&lt;/p&gt;
&lt;p&gt;The only problem I had was that when using unscaling, the mouse pointer in GVim would get lost.
Vim hides it when you start typing, but it's supposed to come back when you move the mouse.
The problem seems to be that it hides it by creating a 1x1 pixel cursor.
Sway decides this isn't worth showing (maybe because it's 0x0 in Wayland-pixels?),
and sends Xwayland a leave event saying the cursor is no longer on the screen.
Then when Vim sets the cursor back, Xwayland doesn't bother updating it, since it's not on screen!&lt;/p&gt;
&lt;p&gt;The solution was to stop applying unscaling to cursors.
They look better doubled in size, anyway.
True, this does mean that the sharpness of the cursor changes as you move between windows,
but you're unlikely to notice this
due to the far more jarring effect of Wayland cursors also changing size and shape at the same time.&lt;/p&gt;
&lt;h3&gt;Ring-buffer logging&lt;/h3&gt;
&lt;p&gt;Even without a proxy to complicate things, Wayland applications often have problems.
To make investigating this easier, I added a ring-buffer log feature.
When on, the proxy keeps the last 512K or so of log messages in memory, and will dump them out on demand.&lt;/p&gt;
&lt;p&gt;To use it, you run the proxy with e.g. &lt;code&gt;-v --log-ring-path ~/wayland.log&lt;/code&gt;.
When something odd happens (e.g. an application crashes, or opens its menus in the wrong place) you can
dump out the ring buffer and see what just happened with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo dump-log &amp;gt; /run/user/1000/wayland-1-ctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also added some filtering options (e.g. &lt;code&gt;--log-suppress motion,shm&lt;/code&gt;) to suppress certain classes of noisy messages.&lt;/p&gt;
&lt;h3&gt;Vim windows open correctly&lt;/h3&gt;
&lt;p&gt;One annoyance with Sway is that Vim's window always appears blank (even when running on the host, without any proxy).
You have to resize it before you can see the text.&lt;/p&gt;
&lt;p&gt;My proxy initially suffered from the same problem, although only intermittently.
It turned out to be because Vim sends a &lt;code&gt;ConfigureRequest&lt;/code&gt; with its desired size and then waits for the confirmation message.
Since Sway is a tiling window manager, it ignores the new size and no event is generated.
In this case, an X11 window manager is supposed to send a synthetic &lt;code&gt;ConfigureNotify&lt;/code&gt;,
so I just got the proxy to do that and the problem disappeared
(I confirmed this by adding a sleep to Vim's &lt;code&gt;gui_mch_update&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By the way, the GVim start-up code is quite interesting.
The code path to opening the window goes though three separate functions which each define a
&lt;code&gt;static int recursive = 0&lt;/code&gt; and then proceed to behave differently depending on how many times they've
been reentered - see &lt;a href=&quot;https://github.com/vim/vim/blob/9cd063e3195a4c250c8016fa340922ab21fda252/src/gui.c#L489&quot;&gt;gui_init&lt;/a&gt; for an example!&lt;/p&gt;
&lt;h3&gt;Copy-and-paste without ^M characters&lt;/h3&gt;
&lt;p&gt;The other major annoyance with Sway is that copy-and-paste doesn't work correctly (&lt;a href=&quot;https://github.com/swaywm/wlroots/issues/1839&quot;&gt;Sway bug #1839&lt;/a&gt;).
Using the proxy avoids that problem completely.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I'm not sure how I feel about this project.
It ended up taking a lot longer than I expected, and I could probably have ported several X11 applications to Wayland in the same time.
On the other hand, I now have working X support in the VMs with no need for &lt;code&gt;ssh -Y&lt;/code&gt; from the host, plus support for HiDPI in Wayland, mouse cursors that are large enough to see easily, windows that open reliably, text pasting that works, and I can get logs whenever something misbehaves.&lt;/p&gt;
&lt;p&gt;In fact, I'm now also running an instance of the proxy directly on the host to get the same benefits for host X11 applications.
Setting this up is actually a bit tricky:
you want to start Sway with &lt;code&gt;DISPLAY=:0&lt;/code&gt; so that every application it spawns knows it has an X11 display,
but if you set that then Sway thinks you want it to run nested inside an X window provided by the proxy,
which doesn't end well (or, indeed, at all).&lt;/p&gt;
&lt;p&gt;Having all the legacy X11 support in a separate binary should make it much easier to write new Wayland compositors,
which might be handy if I ever get some time to try that.
It also avoids having many thousands of lines of legacy C code in the highly-trusted compositor code.&lt;/p&gt;
&lt;p&gt;If Wayland had an official protocol for letting applications know the window layout then I could make drag-and-drop between X11 applications within the same VM work, but it still wouldn't work between VMs or to Wayland applications, so it's probably not worth it.&lt;/p&gt;
&lt;p&gt;Having two separate connections to Xwayland creates a lot of unnecessary race conditions.
A simple solution might be a Wayland extension that allows the Wayland server to say &amp;quot;please read N bytes from the X11 socket now&amp;quot;,
and likewise in the other direction.
Then messages would always arrive in the order in which they were sent.&lt;/p&gt;
&lt;p&gt;The code is all available at &lt;a href=&quot;https://github.com/talex5/wayland-proxy-virtwl&quot;&gt;https://github.com/talex5/wayland-proxy-virtwl&lt;/a&gt; if you want to try it.
It works with the applications I use when running under Sway,
but will probably require some tweaking for other programs or compositors.
Here's a screenshot of my desktop using it:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roscidus.com/blog/images/xwayland/desktop.png&quot;&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/xwayland/desktop.png&quot; title=&quot;Screenshot of my desktop&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Screenshot of my desktop&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The windows with &lt;code&gt;[dev]&lt;/code&gt; in the title are from my Debian VM, while &lt;code&gt;[com]&lt;/code&gt; is a SpectrumOS VM I use for email, etc.
Gitk, GVim and ROX-Filer are X11 applications using Xwayland,
while Firefox and xfce4-terminal are using plain Wayland proxying.&lt;/p&gt;
</content><id>https://roscidus.com/blog/blog/2021/10/30/xwayland/</id><title type="text">Isolating Xwayland in a VM</title><updated>2021-10-30T10:00:00-00:00</updated><author><name>Thomas Leonard</name></author></entry><entry><link href="https://roscidus.com/blog/blog/2021/03/07/qubes-lite-with-kvm-and-wayland/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</uri><name>talex5</name></contributor><content type="html">&lt;p&gt;I've been running QubesOS as my main desktop since 2015.
It provides good security, by running applications in different Xen VMs.
However, it is also quite slow and has some hardware problems.
I've recently been trying out NixOS, KVM, Wayland and SpectrumOS,
and attempting to create something similar with more modern/compatible/faster technology.&lt;/p&gt;
&lt;p&gt;This post gives my initial impressions of these tools and describes my current setup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#qubesos&quot;&gt;QubesOS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nixos&quot;&gt;NixOS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nix-store&quot;&gt;nix-store&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nix-instantiate&quot;&gt;nix-instantiate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nix-pkgs&quot;&gt;nix-pkgs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nix-env&quot;&gt;nix-env&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#nixos-1&quot;&gt;NixOS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#installing-nixos&quot;&gt;Installing NixOS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#thoughts-on-nixos&quot;&gt;Thoughts on NixOS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#why-use-virtual-machines&quot;&gt;Why use virtual machines?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#spectrumos&quot;&gt;SpectrumOS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#wayland&quot;&gt;Wayland&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#protocol&quot;&gt;Protocol&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#copying-text&quot;&gt;Copying text&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#security&quot;&gt;Security&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#future-work&quot;&gt;Future work&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=26378854&quot;&gt;Hacker News&lt;/a&gt; and
&lt;a href=&quot;https://lobste.rs/s/cisgn2/qubes_lite_with_kvm_wayland&quot;&gt;Lobsters&lt;/a&gt; )&lt;/p&gt;
&lt;h2&gt;QubesOS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.qubes-os.org/&quot;&gt;QubesOS&lt;/a&gt; aims to provide &amp;quot;a reasonably secure operating system&amp;quot;.
It does this by running multiple virtual machines under the Xen hypervisor.
Each VM's windows have a different colour and tag, but they appear together as a single desktop.
The VMs I run include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com&lt;/code&gt; for email and similar (the only VM that sees my email password).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt; for software development.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shopping&lt;/code&gt; (the only VM that sees my card number).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;personal&lt;/code&gt; (with no Internet access)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;untrusted&lt;/code&gt; (general browsing)
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The desktop environment itself is another Linux VM (&lt;code&gt;dom0&lt;/code&gt;), used for managing the other VMs.
Most of the VMs are running Fedora (the default for Qubes), although I run Debian in &lt;code&gt;dev&lt;/code&gt;.
There are also a couple of system VMs; one for dealing with the network hardware,
and one providing a firewall between the VMs.&lt;/p&gt;
&lt;p&gt;You can run &lt;code&gt;qvm-copy&lt;/code&gt; in a VM to copy a file to another VM.
&lt;code&gt;dom0&lt;/code&gt; pops up a dialog box asking which VM should receive the file, and it arrives there
as &lt;code&gt;~/QubesIncoming/$source_vm/$file&lt;/code&gt;.
You can also press Ctrl-Shift-C to copy a VM's clipboard to the global clipboard, and then
press Ctrl-Shift-V in a window of the target VM to copy to that VM's clipboard,
ready for pasting into an application.&lt;/p&gt;
&lt;p&gt;I think Qubes does a very good job at providing a secure environment.&lt;/p&gt;
&lt;p&gt;However, it has poor hardware compatibility and it feels sluggish, even on a powerful machine.
I bought a new machine a while ago and found that the motherboard only provided a single video output, limited to 30Hz.
This meant I had to buy a discrete graphics card. With the card enabled, the machine &lt;a href=&quot;https://github.com/QubesOS/qubes-issues/issues/5459&quot;&gt;fails to resume from suspend&lt;/a&gt;,
and locks up from time to time (it's completely stable with the card removed or disabled).
I spent some time trying to understand the driver code, but I didn't know enough about graphics, the Linux kernel, PCI suspend, or Xen to fix it.&lt;/p&gt;
&lt;p&gt;I was also having some other problems with QubesOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graphics performance is terrible (especially on a 4k monitor).
Qubes disables graphics acceleration in VMs for security reasons, but it was slow even for software rendering.
&lt;/li&gt;
&lt;li&gt;It recently started freezing for a couple of seconds from time to time - annoying when you're trying to type.
&lt;/li&gt;
&lt;li&gt;It uses LVM thin-pools for VM storage, which I don't understand, and which sometimes need repairing (haven't lost any data, though).
&lt;/li&gt;
&lt;li&gt;dom0 is out-of-date and generally not usable.
This is intentional (you should be using VMs),
but my security needs aren't that high and it would be nice to be able to do video conferencing these days.
Also, being able to print over USB and use bluetooth would be handy.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I decided it was time to try something new.
Linux now has its own built-in hypervisor (KVM), and I thought that would probably work better with my hardware.
I was also keen to try out Wayland, which is built around shared-memory and I thought it might therefore work better with VMs.
How easy would it be to recreate a Qubes-like environment directly on Linux?&lt;/p&gt;
&lt;h2&gt;NixOS&lt;/h2&gt;
&lt;p&gt;I've been meaning to try &lt;a href=&quot;https://nixos.org/&quot;&gt;NixOS&lt;/a&gt; properly for some time. Ever since I started using Linux, its package management has struck me as absurd. On Debian, Fedora, etc, installing a package means letting it put files wherever it likes; which effectively gives the package author root on your system. Not a good base for sandboxing!&lt;/p&gt;
&lt;p&gt;Also, they make it difficult to try out 3rd-party software, or to test newer versions of just some packages.&lt;/p&gt;
&lt;p&gt;In 2003 I created &lt;a href=&quot;https://0install.net/&quot;&gt;0install&lt;/a&gt; to address these problems, and Nix has very similar goals. I thought Nix was a few years younger, but looking at its Git history the first commit was on Mar 12, 2003. I announced the first preview of 0install just two days later, so both projects must have started writing code within a few days of each other!&lt;/p&gt;
&lt;p&gt;NixOS is made up of quite a few components. Here is what I've learned so far:&lt;/p&gt;
&lt;h3&gt;nix-store&lt;/h3&gt;
&lt;p&gt;The store holds the files of all the programs, and is the central component of the system.
Each version of a package goes in its own directory (or file), at &lt;code&gt;/nix/store/$HASH&lt;/code&gt;.
You can add data to the store directly, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo hello &amp;gt; file

$ nix-store --add-fixed sha256 file
/nix/store/1vap48aqggkk52ijn2prxzxv7cnzvs0w-file

$ cat /nix/store/1vap48aqggkk52ijn2prxzxv7cnzvs0w-file
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the store location is calculated from the hash of the contents of the file we added (as with &lt;code&gt;0install store add&lt;/code&gt; or &lt;code&gt;git hash-object&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;However, you can also add things to the store by asking Nix to run a build script.
For example, to compile some source code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You add the source code and some build instructions (a &amp;quot;derivation&amp;quot; file) to the store.
&lt;/li&gt;
&lt;li&gt;You ask the store to build the derivation. It runs your build script in a container sandbox.
&lt;/li&gt;
&lt;li&gt;The results are added to the store, using the hash of the build instructions (not the hash of the result) as the directory name.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If a package in the store depends on another one (at build time or run time), it just refers to it by its full path.
For example, a bash script in the store will start something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /nix/store/vnyfysaya7sblgdyvqjkrjbrb0cy11jf-bash-4.4-p23/bin/bash
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If two users want to use the same build instructions, the second one will see that the hash already exists and can just reuse that.
This allows users to compile software from source and share the resulting binaries, without having to trust each other.&lt;/p&gt;
&lt;p&gt;Ideally, builds should be reproducible.
To encourage this, builds which use the hash of the build instructions for the result path are built in a sandbox without network access.
So, you can't submit a build job like &amp;quot;Download and compile whatever is the latest version of Vim&amp;quot;.
But you can discover the latest version yourself and then submit two separate jobs to the store:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;quot;Download Vim 8.2, with hash XXX&amp;quot; (a fixed-output job, which therefore has network access)
&lt;/li&gt;
&lt;li&gt;&amp;quot;Build Vim from hash XXX&amp;quot;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can run &lt;code&gt;nix-collect-garbage&lt;/code&gt; to delete everything from the store that isn't reachable via the symlinks under &lt;code&gt;/nix/var/nix/gcroots/&lt;/code&gt;.
Users can put symlinks to things they care about keeping in &lt;code&gt;/nix/var/nix/gcroots/per-user/$USER/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, the store is also configured with a trusted binary cache service,
and will try to download build results from there instead of compiling locally when possible.&lt;/p&gt;
&lt;h3&gt;nix-instantiate&lt;/h3&gt;
&lt;p&gt;Writing derivation files by hand is tedious, so Nix provides a templating language to create them easily.
The Nix language is dynamically typed and based around maps/dictionaries (which it confusingly refers to as &amp;quot;sets&amp;quot;).
&lt;code&gt;nix-instantiate file.nix&lt;/code&gt; will generate a derivation from &lt;code&gt;file.nix&lt;/code&gt; and add it to the store.&lt;/p&gt;
&lt;p&gt;An Nix file looks like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nix&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nb&quot;&gt;derivation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;system =&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;builder =&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;/myfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name =&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Running &lt;code&gt;nix-instantiate&lt;/code&gt; on this will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;myfile&lt;/code&gt; to the store.
&lt;/li&gt;
&lt;li&gt;Add the generated &lt;code&gt;foo.drv&lt;/code&gt; to the store, including the full store path of &lt;code&gt;myfile&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;nix-pkgs&lt;/h3&gt;
&lt;p&gt;Writing Nix expressions for every package you want would also be tedious.
The &lt;a href=&quot;https://github.com/NixOS/nixpkgs&quot;&gt;nixpkgs&lt;/a&gt; Git repository contains a Nix expression that evaluates to a set of derivations,
one for each package in the distribution.
It also contains a library of useful helper functions for packages
(e.g. it knows how to handle GNU autoconf packages automatically).&lt;/p&gt;
&lt;p&gt;Rather than evaluating the whole lot, you use &lt;code&gt;-A&lt;/code&gt; to ask for a single package.
For example, you can use &lt;code&gt;nix-instantiate ./nixpkgs/default.nix -A firefox&lt;/code&gt; to generate a derivation for Firefox.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nix-build&lt;/code&gt; is a quick way to create a derivation with &lt;code&gt;nix-instantiate&lt;/code&gt; and build it with &lt;code&gt;nix-store&lt;/code&gt;.
It will also create a &lt;code&gt;./result&lt;/code&gt; symlink pointing to its path in the store,
as well as registering &lt;code&gt;./result&lt;/code&gt; with the garbage collector under &lt;code&gt;/nix/var/nix/gcroots/auto/&lt;/code&gt;.
For example, to build and run Firefox:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nix-build ./nixpkgs/default.nix -A firefox
./result/bin/firefox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use nixpkgs without making any changes, it will be able to download a pre-built binary from the cache service.&lt;/p&gt;
&lt;h3&gt;nix-env&lt;/h3&gt;
&lt;p&gt;Keeping track of all these symlinks would be tedious too,
but you can collect them all together by making a package that depends on every application you want.
Its build script will produce a &lt;code&gt;bin&lt;/code&gt; directory full of symlinks to the applications.
Then you could just point your &lt;code&gt;$PATH&lt;/code&gt; variable at that &lt;code&gt;bin&lt;/code&gt; directory in the store.&lt;/p&gt;
&lt;p&gt;To make updating easier, you will actually add &lt;code&gt;~/.nix-profile/bin/&lt;/code&gt; to &lt;code&gt;$PATH&lt;/code&gt; and
update &lt;code&gt;.nix-profile&lt;/code&gt; to point at the latest build of your environment package.&lt;/p&gt;
&lt;p&gt;This is essentially what &lt;code&gt;nix-env&lt;/code&gt; does, except with yet more symlinks to allow for
switching between multiple profiles, and to allow rolling back to previous environments
if something goes wrong.&lt;/p&gt;
&lt;p&gt;For example, to install Firefox so you can run it via &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nix-env -i firefox
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;NixOS&lt;/h3&gt;
&lt;p&gt;Finally, just as &lt;code&gt;nix-env&lt;/code&gt; can create a user environment with &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;man&lt;/code&gt;, etc,
a similar process can create a root filesystem for a Linux distribution.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nixos-rebuild&lt;/code&gt; reads the &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt; configuration file,
generates a system environment,
and then updates grub and the &lt;code&gt;/run/current-system&lt;/code&gt; symlink to point to it.&lt;/p&gt;
&lt;p&gt;In fact, it also lists previous versions of the system environment in the grub file, so
if you mess up the configuration you can just choose an earlier one from the boot
menu to return to that version.&lt;/p&gt;
&lt;h3&gt;Installing NixOS&lt;/h3&gt;
&lt;p&gt;To install NixOS you boot one of the live images at &lt;a href=&quot;https://nixos.org&quot;&gt;https://nixos.org&lt;/a&gt;.
Which you use only affects the installation UI, not the system you end up with.&lt;/p&gt;
&lt;p&gt;The manual walks you through the installation process, showing how to partition
the disk, format and mount the partitions, and how to edit the configuration file.
I like this style of installation, where it teaches you things instead of just doing it for you.
Most of the effort in switching to a new system is learning about it, so I'd rather
spend 3 hours learning stuff following an installation guide than use a 15-minute
single-click installer that teaches me nothing.&lt;/p&gt;
&lt;p&gt;The configuration file (&lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;) is just another Nix expression.
Most things are set to off by default (I approve), but can be changed easily.
For example, if you want sound support you change that setting to &lt;code&gt;sound.enable = true&lt;/code&gt;,
and if you also want to use PulseAudio then you set &lt;code&gt;hardware.pulseaudio.enable = true&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Every system service supported by NixOS is controlled from here,
with all kinds of options, from &lt;code&gt;programs.vim.defaultEditor = true&lt;/code&gt; (so you don't get trapped in &lt;code&gt;nano&lt;/code&gt;)
to &lt;code&gt;services.factorio.autosave-interval&lt;/code&gt;.
Use &lt;code&gt;man configuration.nix&lt;/code&gt; to see the available settings.&lt;/p&gt;
&lt;p&gt;NixOS defaults to an X11 desktop, but I wanted to try Wayland (and &lt;a href=&quot;https://github.com/swaywm/sway&quot;&gt;Sway&lt;/a&gt;).
Based on the &lt;a href=&quot;https://nixos.wiki/wiki/Sway&quot;&gt;NixOS wiki&lt;/a&gt; instructions, I used this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nix&quot;&gt;&lt;span class=&quot;line&quot;&gt;  programs&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sway =&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;enable =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    wrapperFeatures&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;gtk =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# so that gtk works properly&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;extraSessionCommands =&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export MOZ_ENABLE_WAYLAND=1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;extraPackages =&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; pkgs&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      swaylock
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      swayidle
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      xwayland
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      wl-clipboard
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      mako
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      alacritty
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      dmenu
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The &lt;code&gt;xwayland&lt;/code&gt; bit is important; without that you can't run any X11 applications.&lt;/p&gt;
&lt;p&gt;My only complaint with the NixOS installation instructions is that following them will leave you with an unencrypted system,
which isn't very useful.
When partitioning, you have to skip ahead to the LUKS section of the manual, which just gives some options but no firm advice.
I created two primary partitions: a 1G unencrypted &lt;code&gt;/boot&lt;/code&gt;, and a LUKS partition for the rest of the disk.
Then I created an LVM volume group from the &lt;code&gt;/dev/mapper/crypted&lt;/code&gt; device and added the other partitions in that.&lt;/p&gt;
&lt;p&gt;Once the partitions are mounted and the configuration file is complete,
&lt;code&gt;nixos-install&lt;/code&gt; downloads everything and configures grub.
Then you reboot into the new system.&lt;/p&gt;
&lt;p&gt;Once running the new system you can made further edits to the configuration file there in the same way,
and use &lt;code&gt;nixos-rebuild switch&lt;/code&gt; to generate a new system.
It seems to be pretty good at updating the running system to the new settings, so you don't normally need to reboot
after making changes.&lt;/p&gt;
&lt;p&gt;The big mistake I made was forgetting to add &lt;code&gt;/boot&lt;/code&gt; to fstab.
When I ran &lt;code&gt;nixos-rebuild&lt;/code&gt; it put all the grub configuration on the encrypted partition, rendering the system unbootable.
I fixed that with &lt;code&gt;chattr +i /boot&lt;/code&gt; on the unmounted partition.
That way, trying to rebuild with &lt;code&gt;/boot&lt;/code&gt; unmounted will just give an error message.&lt;/p&gt;
&lt;h3&gt;Thoughts on NixOS&lt;/h3&gt;
&lt;p&gt;I've been using the system for a few weeks now and I've had no problems with Nix so far.
Nix has been fast and reliable and there were fairly up-to-date packages for everything I wanted
(I'm using the stable release).
There is a lot to learn, but plenty of documentation.&lt;/p&gt;
&lt;p&gt;When I wanted a newer package (&lt;code&gt;socat&lt;/code&gt; with vsock support, only just released) I just told Nix to install it from the latest Git checkout of nixpkgs.
Unlike on Debian and similar systems, doing this doesn't interfere with any other packages (such as forcing a system-wide upgrade of libc).&lt;/p&gt;
&lt;p&gt;I think Nix does download more data than most other systems, but networks are fast enough now that it doesn't seem to matter.
For example, let's say you're running Python 3.9.0 and you want to update to 3.9.1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With &lt;strong&gt;Debian&lt;/strong&gt;: &lt;code&gt;apt-get upgrade&lt;/code&gt; downloads the new version, which gets unpacked over the old one.
As the files are unpacked, the system moves through an exciting series of intermediate states no-one has thought about.
Running programs may crash as they find their library versions changing under them (though it's usually OK).
Only root can update software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;strong&gt;0install&lt;/strong&gt;: &lt;code&gt;0install update&lt;/code&gt; downloads the new version, unpacking it to a new directory.
Running programs continue to use the old version.
When a new program is started, 0install notices the update and runs the solver again.
If the program is compatible with the new Python then it uses that. If not, it continues with the old one.
You can run any previous version if there is a problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;strong&gt;Nix&lt;/strong&gt;: &lt;code&gt;nix-env -u&lt;/code&gt; downloads the new version, unpacking it to a new directory.
It also downloads (or rebuilds) every package depending on Python, creating new directories for each of them.
It then creates a new environment with symlinks to the latest version of everything.
Running programs continue to use the old version.
Starting a new program will use the new version.
You can revert the whole environment back to the previous version if there is a problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With &lt;strong&gt;Docker&lt;/strong&gt;: &lt;code&gt;docker pull&lt;/code&gt; downloads the new version of a single application,
downloading most or all of the application's packages, whether Python related or not.
Existing containers continue running with the old version.
New containers will default to using the new version.
You can specify which version to use when starting a program.
Other applications continue using the old version of Python until their authors update them
(you must update each application individually, rather than just updating Python itself).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main problem with NixOS is that it's quite different to other Linux systems, so there's a lot to relearn.
Also, existing knowledge about how to edit &lt;code&gt;fstab&lt;/code&gt;, &lt;code&gt;sudoers&lt;/code&gt;, etc, isn't so useful, as you have to provide all configuration in Nix syntax.
However, having a single (fairly sane) syntax for everything is a nice bonus, and being able to generate things using the templating language is useful.
For example, for my network setup I use a bunch of tap devices (one for each of my VMs).
It was easy to write a little Nix function (&lt;code&gt;mktap&lt;/code&gt;) to generate them all from a simple list.
Here's that section of my &lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nix&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ss&quot;&gt;networking =&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;useDHCP =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;interfaces =&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mktap =&lt;/span&gt; ip&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;ss&quot;&gt;virtual =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;ss&quot;&gt;virtualOwner =&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          ipv4&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;addresses =&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address =&lt;/span&gt; ip&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;prefixLength =&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        eno2&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;useDHCP =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        wlo1&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;useDHCP =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;ss&quot;&gt;tapdev =&lt;/span&gt; mktap &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;ss&quot;&gt;tapcom =&lt;/span&gt; mktap &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;ss&quot;&gt;tapshopping =&lt;/span&gt; mktap &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;ss&quot;&gt;tapbanking =&lt;/span&gt; mktap &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;ss&quot;&gt;tapuntrusted =&lt;/span&gt; mktap &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.10&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;nat =&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ss&quot;&gt;enable =&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ss&quot;&gt;externalInterface =&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;eno2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ss&quot;&gt;internalIPs =&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;10.0.0.0/8&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Overall, I'm very happy with NixOS so far.&lt;/p&gt;
&lt;h2&gt;Why use virtual machines?&lt;/h2&gt;
&lt;p&gt;With NixOS I had a nice host environment, but after using Qubes I wanted to run my applications in VMs.&lt;/p&gt;
&lt;p&gt;The basic problem is that Linux is the only thing that knows how to drive all the hardware,
but Linux security is not ideal. There are several problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux is written in C.
This makes security bugs rather common and, more importantly, means that a bug in one part of the code
can impact any other part of the code. Nothing is secure unless everything is secure.
&lt;/li&gt;
&lt;li&gt;Linux has a rather large API (hundreds of syscalls).
&lt;/li&gt;
&lt;li&gt;The Linux (Unix) design predates the Internet, and security has been somewhat bolted on afterwards.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, imagine that we want to run a program with access to the network, but not to the graphical display.
We can create a new Linux container for it using &lt;a href=&quot;https://github.com/containers/bubblewrap&quot;&gt;bubblewrap&lt;/a&gt;, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l /run/user/1000/wayland-0 /tmp/.X11-unix/X0
srwxr-xr-x 1 tal users 0 Feb 18 16:41 /run/user/1000/wayland-0
srwxr-xr-x 1 tal users 0 Feb 18 16:41 /tmp/.X11-unix/X0

$ bwrap \
    --ro-bind / / \
    --dev /dev \
    --tmpfs /home/tal \
    --tmpfs /run/user \
    --tmpfs /tmp \
    --unshare-all --share-net \
    bash

$ ls -l /run/user/1000/wayland-0 /tmp/.X11-unix/X0
ls: cannot access '/run/user/1000/wayland-0': No such file or directory
ls: cannot access '/tmp/.X11-unix/X0': No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The container has an empty home directory, empty &lt;code&gt;/tmp&lt;/code&gt;, and no access to the display sockets.
If we run Firefox in this environment then... it opens its window just fine!
How? &lt;code&gt;strace&lt;/code&gt; shows what happened:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;connect(4, {sa_family=AF_UNIX, sun_path=&amp;quot;/run/user/1000/wayland-0&amp;quot;}, 27) = -1 ENOENT (No such file or directory)
socket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0) = 4
connect(4, {sa_family=AF_UNIX, sun_path=@&amp;quot;/tmp/.X11-unix/X0&amp;quot;}, 20) = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After failing to connect to Wayland, it then tried using X11 (via Xwayland) instead. Why did that work?
If the first byte of the socket pathname is &lt;code&gt;\0&lt;/code&gt; then Linux instead interprets it as an &amp;quot;abstract&amp;quot; socket address,
not subject to the usual filesystem permission rules.&lt;/p&gt;
&lt;p&gt;Trying to anticipate these kinds of special cases is just too much work.
Linux really wants everything on by default, and you have to find and disable every feature individually.
By contrast, virtual machines tend to have integrations with the host off by default.
The also tend to have much smaller APIs (e.g. just reading and writing disk blocks or network frames),
with the rich Unix API entirely inside the VM, provided by a separate instance of Linux.&lt;/p&gt;
&lt;h2&gt;SpectrumOS&lt;/h2&gt;
&lt;p&gt;I was able to set up a qemu guest and restore my &lt;code&gt;dev&lt;/code&gt; Qubes VM in that, but it didn't integrate nicely with the rest of the desktop.
Installing ssh allowed me to connect in with &lt;code&gt;ssh -Y dev&lt;/code&gt;, allowing apps in the VM to open an X connection to Xwayland on the host.
That was somewhat usable, but still a bit slower than Qubes had been (which was already a bit too slow).&lt;/p&gt;
&lt;p&gt;Searching for a way to forward the Wayland connection directly, I came across the &lt;a href=&quot;https://spectrum-os.org/&quot;&gt;SpectrumOS&lt;/a&gt; project.
SpectrumOS aims to use one virtual machine per application, using shared directories so that VM files are stored on the host,
simplifying management.
It uses &lt;a href=&quot;https://chromium.googlesource.com/chromiumos/platform/crosvm/&quot;&gt;crosvm&lt;/a&gt; from the ChromiumOS project instead of qemu, because it has a driver that allows forwarding Wayland connections
(and also because it's written in Rust rather than C).
The project's single developer is currently taking a break from the project, and says &amp;quot;I'm currently working towards a proof of concept&amp;quot;.&lt;/p&gt;
&lt;p&gt;However, there is some useful stuff in the &lt;a href=&quot;https://spectrum-os.org/git/nixpkgs/&quot;&gt;SpectrumOS repository&lt;/a&gt; (which is a fork of nixpkgs).
In particular, it contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A version of Linux with the &lt;code&gt;virtwl&lt;/code&gt; kernel module, which connects to crosvm's Wayland driver.
&lt;/li&gt;
&lt;li&gt;A package for &lt;a href=&quot;https://chromium.googlesource.com/chromiumos/platform2/+/refs/heads/main/vm_tools/sommelier/&quot;&gt;sommelier&lt;/a&gt;, which connects applications to &lt;code&gt;virtwl&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;A Nix expression to build a root filesystem for the VM.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building that, I was able to run the project's demo, which runs the Wayfire compositor inside the VM, appearing in a window on the host.
Dragging the nested window around, the pixels flowed smoothly across my screen in exactly the way that pixels on QubesOS don't.&lt;/p&gt;
&lt;p&gt;This was encouraging, but I didn't want to run a nested window manager.
I tried running Firefox directly (without Wayfire),
but it complained that sommelier didn't provide a new enough version of something, and
running weston-terminal immediately segfaulted sommelier.&lt;/p&gt;
&lt;p&gt;Why do we need the sommelier process anyway?
The problem is that, while &lt;code&gt;virtwl&lt;/code&gt; mostly proxies Wayland messages directly, it can't send arbitrary FDs to the host.
For example, if you want to forward a writable stream from an application to &lt;code&gt;virtwl&lt;/code&gt;
you must first create a pipe from the host using a special &lt;code&gt;virtwl&lt;/code&gt; ioctl,
then read from that and copy the data to the application's regular Linux pipe.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://spectrum-os.org/lists/hyperkitty/list/discuss@spectrum-os.org/thread/VP3KJV3JYWSLJTUKDT3MAKIABZGDCSPN/&quot;&gt;help from the mailing list&lt;/a&gt;, I managed to get it somewhat usable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I enabled &lt;code&gt;VIRTIO_FS&lt;/code&gt;, allowing me to mount a host directory into the VM (for sharing files).
&lt;/li&gt;
&lt;li&gt;I created some tap devices (as mentioned above) to get guest networking going.
&lt;/li&gt;
&lt;li&gt;Adding ext4 to the kernel image allowed me to mount the VM's LVM partition.
&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;FONTCONFIG_FILE&lt;/code&gt; got some usable fonts (otherwise, there was no monospace font for the terminal).
&lt;/li&gt;
&lt;li&gt;I hacked sommelier to claim it supported the latest protocols, which got Firefox running.
&lt;/li&gt;
&lt;li&gt;Configuring sommelier for Xwayland let X applications run.
&lt;/li&gt;
&lt;li&gt;I replaced the non-interactive &lt;code&gt;bash&lt;/code&gt; shell with &lt;code&gt;fish&lt;/code&gt; so I could edit commands.
&lt;/li&gt;
&lt;li&gt;I ran &lt;code&gt;(while true; do socat vsock-listen:5000 exec:dash; done)&lt;/code&gt; at the end of the VM's boot script.
Then I could start e.g. the VM's Firefox with &lt;code&gt;echo 'firefox&amp;amp;' | socat stdin vsock-connect:7:5000&lt;/code&gt;
on the host, allowing me to add launchers for guest applications.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Making changes to the root filesystem was fairly easy once I'd read the Nix manuals.
To add an application (e.g. &lt;code&gt;libreoffice&lt;/code&gt;), you import it at the start of &lt;a href=&quot;https://spectrum-os.org/git/nixpkgs/tree/pkgs/os-specific/linux/spectrum/rootfs/default.nix&quot;&gt;rootfs/default.nix&lt;/a&gt; and add it to the &lt;code&gt;path&lt;/code&gt; variable.
The Nix expression gets the transitive dependencies of &lt;code&gt;path&lt;/code&gt; from the Nix store and packs them into a squashfs image.&lt;/p&gt;
&lt;p&gt;True, my squashfs image is getting a bit big.
Maybe I should instead make a minimal squashfs boot image, plus a shared directory of hard links to the required files.
That would allow sharing the data with the host.
I could also just share the whole &lt;code&gt;/nix/store&lt;/code&gt; directory, if I wanted to make all host software available to guests.&lt;/p&gt;
&lt;p&gt;I made another Nix script to add various VM boot commands to my host environment.
For example, running &lt;code&gt;qvm-start-shopping&lt;/code&gt; boots my shopping VM using crosvm,
with the appropriate LVM data partition, network settings, and shared host directory.&lt;/p&gt;
&lt;p&gt;I think, ideally, this would be a systemd socket-activated user service rather than a shell script.
Then attempting to run Firefox by sending a command to the VM socket would cause systemd to boot the VM
(if not already running).
For now, I boot each VM manually in a terminal and then press Win-Shift-2 to banish it to workspace 2,
with all the other VM root consoles.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;virlwl&lt;/code&gt; Wayland forwarding feels pretty fast (much faster than Qubes' X graphics).&lt;/p&gt;
&lt;h2&gt;Wayland&lt;/h2&gt;
&lt;p&gt;I now had a mostly functional Qubes-like environment, running most of my applications in VMs,
with their windows appearing on the host desktop like any other application.
However, I also had some problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A stated goal of Wayland is &amp;quot;every frame is perfect&amp;quot;. However, applications generally seemed to open at the wrong size and then jump to their correct size, which was a bit jarring.
&lt;/li&gt;
&lt;li&gt;Vim opened its window with the scrollbar at the far left of the window, making the text invisible until you resized the window.
&lt;/li&gt;
&lt;li&gt;Wayland is supposed to have better support for high-DPI displays.
However, this doesn't work with Xwayland, which turns everything blurry,
and the &lt;a href=&quot;https://news.ycombinator.com/item?id=19360176&quot;&gt;recommended work-around&lt;/a&gt; is to use a scale-factor of 1
and configure each application to use bigger fonts.
This is easy enough with X applications (e.g. set &lt;code&gt;ft.dpi: 150&lt;/code&gt; with &lt;code&gt;xrdb&lt;/code&gt;), but Wayland apps must be configured individually.
&lt;/li&gt;
&lt;li&gt;Wayland doesn't have cursor themes and you have to configure every application individually to use a larger cursor too.
&lt;/li&gt;
&lt;li&gt;Copying text didn't seem to work reliably. Sometimes there would be a long delay, after which the text might or might not appear. More often, it would just paste something completely different and unexpected. Even when it did paste the right text, it would often have ^M characters inserted into it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided it was time to learn more about Wayland.
I discovered &lt;a href=&quot;https://wayland-book.com/&quot;&gt;wayland-book.com&lt;/a&gt;, which does a good job of introducing it
(though the book is only half finished at the moment).&lt;/p&gt;
&lt;h3&gt;Protocol&lt;/h3&gt;
&lt;p&gt;One very nice feature of Wayland is that you can run any Wayland application with &lt;code&gt;WAYLAND_DEBUG=1&lt;/code&gt;
and it will display a fairly readable trace of all the Wayland messages it sends and receives.
Let's look at a simple application that just connects to the server (compositor) and opens a window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ WAYLAND_DEBUG=1 test.exe
-&amp;gt; wl_display@1.get_registry registry:+2
-&amp;gt; wl_display@1.sync callback:+3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The client connects to the server's socket at &lt;code&gt;/run/user/1000/wayland-0&lt;/code&gt; and sends two messages
to object 1 (of type &lt;code&gt;wl_display&lt;/code&gt;), which is the only object available in a new connection.
The &lt;code&gt;get_registry&lt;/code&gt; request asks the server to add the registry to the conversation and call it object 2.
The &lt;code&gt;sync&lt;/code&gt; request just asks the server to confirm it got it, using a new callback object (with ID 3).&lt;/p&gt;
&lt;p&gt;Both clients and servers can add objects to the conversation.
To avoid numbering conflicts, clients assign low numbers and servers pick high ones.&lt;/p&gt;
&lt;p&gt;On the wire, each message gives the object ID, the operation ID, the length in bytes, and then the arguments.
Objects are thought of as being at the server, so the client sends request messages &lt;em&gt;to&lt;/em&gt; objects,
while the server emits event messages &lt;em&gt;from&lt;/em&gt; objects.
At the wire level there's no difference though.&lt;/p&gt;
&lt;p&gt;When the server gets the &lt;code&gt;get_registry&lt;/code&gt; request it adds the registry,
which immediately emits one event for each available service, giving the maximum supported version.
The client receives these messages, followed by the callback notification from the &lt;code&gt;sync&lt;/code&gt; message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;- wl_registry@2.global name:0 interface:&amp;quot;wl_compositor&amp;quot; version:4
&amp;lt;- wl_registry@2.global name:1 interface:&amp;quot;wl_subcompositor&amp;quot; version:1
&amp;lt;- wl_registry@2.global name:2 interface:&amp;quot;wl_shm&amp;quot; version:1
&amp;lt;- wl_registry@2.global name:3 interface:&amp;quot;xdg_wm_base&amp;quot; version:1
&amp;lt;- wl_registry@2.global name:4 interface:&amp;quot;wl_output&amp;quot; version:2
&amp;lt;- wl_registry@2.global name:5 interface:&amp;quot;wl_data_device_manager&amp;quot; version:3
&amp;lt;- wl_registry@2.global name:6 interface:&amp;quot;zxdg_output_manager_v1&amp;quot; version:3
&amp;lt;- wl_registry@2.global name:7 interface:&amp;quot;gtk_primary_selection_device_manager&amp;quot; version:1
&amp;lt;- wl_registry@2.global name:8 interface:&amp;quot;wl_seat&amp;quot; version:5
&amp;lt;- wl_callback@3.done callback_data:1129040
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The callback tells the client it has seen all the available services, and so it now picks the ones it wants.
It has to choose a version no higher than the one offered by the server.
Protocols starting with &lt;code&gt;wl_&lt;/code&gt; are from the core Wayland protocol; the others are extensions.
The leading &lt;code&gt;z&lt;/code&gt; in &lt;code&gt;zxdg_output_manager_v1&lt;/code&gt; indicates that the protocol is &amp;quot;unstable&amp;quot; (under development).&lt;/p&gt;
&lt;p&gt;The protocols are defined in various XML files, which are scattered over the web.
The core protocol is defined in &lt;a href=&quot;https://github.com/wayland-project/wayland/blob/master/protocol/wayland.xml&quot;&gt;wayland.xml&lt;/a&gt;.
These XML files can be used to generate typed bindings for your programming language of choice.&lt;/p&gt;
&lt;p&gt;Here, the application picks &lt;code&gt;wl_compositor&lt;/code&gt; (for managing drawing surfaces), &lt;code&gt;wl_shm&lt;/code&gt; (for sharing memory with the server),
and &lt;code&gt;xdg_wm_base&lt;/code&gt; (for desktop windows).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_registry@2.bind name:0 id:+4(wl_compositor:v4)
-&amp;gt; wl_registry@2.bind name:2 id:+5(wl_shm:v1)
-&amp;gt; wl_registry@2.bind name:3 id:+6(xdg_wm_base:v1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bind message is unusual in that the client gives the interface and version of the object it is creating.
For other messages, both sides know the type from the schema, and the version is always the same as the parent object.
Because the client chose the new IDs, it doesn't need to wait for the server;
it continues by using the new objects to create a top-level window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_compositor@4.create_surface id:+7
-&amp;gt; xdg_wm_base@6.get_xdg_surface id:+8 surface:7
-&amp;gt; xdg_surface@8.get_toplevel id:+9
-&amp;gt; xdg_toplevel@9.set_title title:&amp;quot;example app&amp;quot;
-&amp;gt; wl_surface@7.commit 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This API is pretty strange.
The core Wayland protocol says how to make generic drawing surfaces, but not how to make windows,
so the application is using the &lt;code&gt;xdg_wm_base&lt;/code&gt; extension to do that.
Logically, there's only one object here (a toplevel window),
but it ends up making three separate Wayland objects representing the different aspects of it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; tells the server that the client has finished setting up the window and the server should
now do something with it.&lt;/p&gt;
&lt;p&gt;The above was all in response to the callback firing.
The client now processes the last message in that batch, which is the server destroying the callback:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;- wl_display@1.delete_id id:3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Object destruction is a bit strange in Wayland.
Normally, clients ask for things to be destroyed (by sending a &amp;quot;destructor&amp;quot; message)
and the server confirms by sending &lt;code&gt;delete_id&lt;/code&gt; from object 1.
But this isn't symmetrical: there is no standard way for a client to confirm deletion when the server calls
a destructor (such as the callback's &lt;code&gt;done&lt;/code&gt;), so these have to be handled on a case-by-case basis.
Since callbacks don't accept any messages, there is no need for the client to confirm that it got the &lt;code&gt;done&lt;/code&gt;
message and the server just sends a delete message immediately.&lt;/p&gt;
&lt;p&gt;The client now waits for the server to respond to all the messages it sent about the new window,
and gets a bunch of replies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;- wl_shm@5.format format:0
&amp;lt;- wl_shm@5.format format:1
&amp;lt;- wl_shm@5.format format:875709016
&amp;lt;- wl_shm@5.format format:875708993
&amp;lt;- xdg_wm_base@6.ping serial:1129043
-&amp;gt; xdg_wm_base@6.pong serial:1129043
&amp;lt;- xdg_toplevel@9.configure width:0 height:0 states:&amp;quot;&amp;quot;
&amp;lt;- xdg_surface@8.configure serial:1129042
-&amp;gt; xdg_surface@8.ack_configure serial:1129042
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It gets some messages telling it what pixel formats are supported, a ping message (which the server sends from time to time to check the client is still alive),
and a configure message giving the size for the new window.
Oddly, Sway has set the size to 0x0, which means the client should choose whatever size it likes.&lt;/p&gt;
&lt;p&gt;The client picks a suitable default size, allocates some shared memory (by opening a tmpfs file and immediately unlinking it),
shares the file descriptor with the server (&lt;code&gt;create_pool&lt;/code&gt;), and then carves out a portion of the memory to use as a buffer for the pixel data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_shm@5.create_pool id:+3 fd:(fd) size:1228800
-&amp;gt; wl_shm_pool@3.create_buffer id:+10 offset:0 width:640 height:480 stride:2560 format:1
-&amp;gt; wl_shm_pool@3.destroy 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case it used the whole memory region. It could also have allocated two buffers for double-buffering.
The client then draws whatever it wants into the buffer (mapping the file into its memory and writing to it directly),
attaches the buffer to the window's surface, marks the whole area as &amp;quot;damaged&amp;quot; (in need of being redrawn) and calls &lt;code&gt;commit&lt;/code&gt;,
telling the server the surface is ready for display:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; wl_surface@7.attach buffer:10 x:0 y:0
-&amp;gt; wl_surface@7.damage x:0 y:0 width:2147483647 height:2147483647
-&amp;gt; wl_surface@7.commit 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point the window appears on the screen!
The server lets the client know it has finished with the buffer and the client destroys it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;- wl_display@1.delete_id id:3
&amp;lt;- wl_buffer@10.release 
-&amp;gt; wl_buffer@10.destroy 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the window is visible, the content is the wrong size.
Sway now suddenly remembers that it's a tiling window manager.
It sends another &lt;code&gt;configure&lt;/code&gt; event with the correct size, causing the client to allocate a fresh memory pool of the correct size,
allocate a fresh buffer from it, redraw everything at the new size, and tell the server to draw it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;- xdg_toplevel@9.configure width:1534 height:1029 states:&amp;quot;&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This process of telling the client to pick a size and then overruling it explains why Firefox draws itself incorrectly at first and then flickers into position a moment later. It probably also explains why Vim tries to open a 0x0 window.&lt;/p&gt;
&lt;h3&gt;Copying text&lt;/h3&gt;
&lt;p&gt;A bit of searching revealed that the &lt;code&gt;^M&lt;/code&gt; problem is a known &lt;a href=&quot;https://github.com/swaywm/wlroots/issues/1839&quot;&gt;Sway bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the main reason copying text wasn't working turned out to be a limitation in the design of the core &lt;code&gt;wl_data_device_manager&lt;/code&gt; protocol.
The normal way to copy text on X11 is to select the text you want to copy,
then click the middle mouse button where you want it (or press Shift-Insert).&lt;/p&gt;
&lt;p&gt;X also supports a clipboard mechanism, where you select text, then press Ctrl-C, then click at the destination, then press Ctrl-V.
The original Wayland protocol only supports the clipboard system, not the selection, and so Wayland compositors have added selection support through extensions.
Sommelier didn't proxy these extensions, leading to failure when copying in or out of VMs.&lt;/p&gt;
&lt;p&gt;I also found that the reason weston-terminal wouldn't start was because I didn't have anything in my clipboard,
and sommelier was trying to dereference a null pointer.&lt;/p&gt;
&lt;p&gt;One problem with the Wayland protocol is that it's very hard to proxy.
Although the wire protocol gives the length in bytes of each message, it doesn't say how many file descriptors it has.
This means that you can't just pass through messages you don't understand, because you don't know which FDs go with which message.
Also, the wire protocol doesn't give types for FDs (nor does the schema),
which is a problem for anything that needs to proxy across a VM boundary or over a network.&lt;/p&gt;
&lt;p&gt;This all meant that VMs could only use protocols explicitly supported by sommelier, and sommelier limited the version too.
Which means that supporting extra extensions or new versions means writing (and debugging) loads of C++ code.&lt;/p&gt;
&lt;p&gt;I didn't have time to write and debug C++ code for every missing Wayland protocol, so I took a short-cut:
I wrote my own Wayland library, &lt;a href=&quot;https://github.com/talex5/ocaml-wayland&quot;&gt;ocaml-wayland&lt;/a&gt;, and then used that to write my own version of sommelier.
With that, adding support for copying text was fairly easy.&lt;/p&gt;
&lt;p&gt;For each Wayland interface we need to handle each incoming message from the client and forward it to the host,
and also forward each message from the host to the client.
Here's &lt;a href=&quot;https://github.com/talex5/wayland-virtwl-proxy/blob/29333ac7e6071a1c08ece77b513f4b0ee3ee8f8e/relay.ml#L587&quot;&gt;the code&lt;/a&gt; to handle the &amp;quot;selection&amp;quot; event in OCaml,
which we receive from the host and send to the client (&lt;code&gt;c&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_selection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Wl_data_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The host passes us an &amp;quot;offer&amp;quot; argument, which is a previously-created host offer object.
We look up the corresponding client object with &lt;code&gt;to_client&lt;/code&gt; and pass that as the argument
to the client.&lt;/p&gt;
&lt;p&gt;For comparison, here's &lt;a href=&quot;https://chromium.googlesource.com/chromiumos/platform2/+/7ea49bbabed436e608a0b8974ec90366a787d841/vm_tools/sommelier/sommelier-data-device-manager.cc#492&quot;&gt;sommelier's equivalent&lt;/a&gt; to this line of code, in C++:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sl_data_device_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;wl_data_device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;wl_data_offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sl_host_data_device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sl_host_data_device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;wl_data_device_get_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sl_host_data_offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_data_offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sl_host_data_offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl_data_offer_get_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;wl_data_device_send_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_data_offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;I think this is a great demonstration of the difference between &amp;quot;type safety&amp;quot; and &amp;quot;type ceremony&amp;quot;.
The C++ code is covered in types, making the code very hard to read, yet it crashes at runtime because it
fails to consider that &lt;code&gt;data_offer&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By contract, the OCaml version has no type annotations, but the compiler would reject if I forgot to handle this (with &lt;code&gt;Option.map&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;p&gt;According to &lt;a href=&quot;https://wiki.gnome.org/Initiatives/Wayland/PrimarySelection&quot;&gt;the GNOME wiki&lt;/a&gt;, the original justification for not supporting selection copies was
&amp;quot;security concerns with unexpected data stealing if the mere act of selecting a text fragment makes it available to all running applications&amp;quot;.
The implication is that applications stealing data instead from the clipboard is OK,
and that you should therefore never put anything confidential on the clipboard.&lt;/p&gt;
&lt;p&gt;This seemed a bit odd, so I read the &lt;a href=&quot;https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-Security-and-Authentication&quot;&gt;security section&lt;/a&gt; of the Wayland specification to learn more about its security model.
That section of the specification is fairly short, so I'll reproduce it here in full:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Security and Authentication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mostly about access to underlying buffers, need new drm auth mechanism (the grant-to ioctl idea), need to check the cmd stream?
&lt;/li&gt;
&lt;li&gt;getting the server socket depends on the compositor type, could be a system wide name, through fd passing on the session dbus. or the client is forked by the compositor and the fd is already opened.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;It looks like implementations have to figure things out for themselves.&lt;/p&gt;
&lt;p&gt;The main advantage of Wayland over X11 here is that Wayland mostly isolates applications from each other.
In X11 applications collaborate together to manage a tree of windows, and any application can access any window.
In the Wayland protocol, each application's connection only includes that application's objects.
Applications only get events relevant to their own windows
(for example, you only get pointer motion events while the pointer is over your window).
Communication between applications (e.g. copy-and-paste or drag-and-drop) is all handled though the compositor.&lt;/p&gt;
&lt;p&gt;Also, to request the contents of the clipboard you need to quote the serial number of the mouse click or key press that triggered it.
If it's too far in the past, the compositor can ignore the request.&lt;/p&gt;
&lt;p&gt;I've also heard people say that security is the reason you can't take screenshots with Wayland.
However, Sway lets you take screenshots, and this worked even from inside a VM through virtwl.
I didn't add screenshot support to the proxy, because I don't want VMs to be able to take screenshots,
but the proxy isn't a security tool (it runs inside the VM, which isn't trusted).&lt;/p&gt;
&lt;p&gt;Clearly, the way to fix this was with a new compositor.
One that would offer a different Wayland socket to each VM, tag the windows with the VM name, colour the frames,
confirm copies across VM boundaries, and work with Vim.
Luckily, I already had a handy pure-OCaml Wayland protocol library available.
Unluckily, at this point I ran out of holiday.&lt;/p&gt;
&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;There are quite a few things left to do here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One problem with &lt;code&gt;virtwl&lt;/code&gt; is that, while we can receive shared memory FDs &lt;em&gt;from&lt;/em&gt; the host, we can't export guest memory &lt;em&gt;to&lt;/em&gt; the host.
This is unfortunate, because in Wayland the shared memory for window contents is allocated by the application from guest memory,
and the proxy therefore has to copy each frame. If the host provided the memory to the guest, this wouldn't be needed.
There is a &lt;code&gt;wl_drm&lt;/code&gt; protocol for allocating video memory, which might help here, but I don't know how that works and,
like many Wayland specifications, it seems to be in the process of being replaced by something else.
Also, if we're going to copy the memory, we should at least only copy the damaged region, not the whole thing.
I only got this code working just far enough to run the Wayland applications I use (mainly Firefox and Evince).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm still using ssh to proxy X11 connections (mainly for Vim and gitk).
I'd prefer to run Xwayland in the VM, but it seems you need to provide a bit of &lt;a href=&quot;https://wayland.freedesktop.org/docs/html/ch05.html&quot;&gt;extra support&lt;/a&gt; for that,
which I haven't implemented yet.
Sommelier can do this, but then copying doesn't work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The host Wayland compositor needs to be aware of VMs, so it can colour the titles appropriately and
limit access to privileged operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the full Qubes experience, the network card should be handled by a VM, with another VM managing the firewall.
Perhaps the &lt;a href=&quot;https://github.com/mirage/qubes-mirage-firewall/&quot;&gt;Mirage unikernel firewall&lt;/a&gt; could be made to work on KVM too.
I'm not sure how guest-to-guest communication works with KVM.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, because the host NixOS environment is a fully-working Linux system,
I can always trade off some security to get things working
(e.g. by doing video conferencing directly on the host).&lt;/p&gt;
&lt;p&gt;I hope the SpectrumOS project will resume at some point,
or that Qubes will find a solution to its hardware compatibility and performance problems.&lt;/p&gt;
</content><id>https://roscidus.com/blog/blog/2021/03/07/qubes-lite-with-kvm-and-wayland/</id><title type="text">Qubes-lite with KVM and Wayland</title><updated>2021-03-07T15:00:00-00:00</updated><author><name>Thomas Leonard</name></author></entry><entry><link href="https://roscidus.com/blog/blog/2019/11/14/cicd-pipelines/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</uri><name>talex5</name></contributor><content type="html">&lt;p&gt;In this post I describe three approaches to building a language for writing CI/CD pipelines. My first attempt used a &lt;i&gt;monad&lt;/i&gt;, but this prevented static analysis of the pipelines. I then tried using an &lt;i&gt;arrow&lt;/i&gt;, but found the syntax very difficult to use. Finally, I ended up using a light-weight alternative to arrows that I will refer to here as a &lt;i&gt;dart&lt;/i&gt; (I don't know if this has a name already). This allows for static analysis like an arrow, but has a syntax even simpler than a monad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#introduction&quot;&gt;Introduction&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#attempt-one-a-monad&quot;&gt;Attempt one: a monad&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#attempt-two-an-arrow&quot;&gt;Attempt two: an arrow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#attempt-three-a-dart&quot;&gt;Attempt three: a dart&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#comparison-with-arrows&quot;&gt;Comparison with arrows&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#larger-examples&quot;&gt;Larger examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#ocaml-docker-base-image-builder&quot;&gt;OCaml Docker base image builder&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#ocaml-ci&quot;&gt;OCaml CI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#conclusions&quot;&gt;Conclusions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://www.reddit.com/r/ocaml/comments/dwpxdj/cicd_pipelines_monad_arrow_or_dart/&quot;&gt;Reddit&lt;/a&gt;
and &lt;a href=&quot;https://lobste.rs/s/u5i2t0/ci_cd_pipelines_monad_arrow_dart&quot;&gt;Lobsters&lt;/a&gt; )&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was asked to build a system for creating CI/CD pipelines.
The initial use for it was to build a CI for testing OCaml projects on GitHub (testing each commit against multiple versions of the OCaml compiler and on multiple operating systems).
Here's a simple pipeline that gets the Git commit at the head of a branch, builds it,
and then runs the tests:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/example1.svg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The colour-scheme here is that green boxes are completed, orange ones are in progress and grey means the step can't be started yet.&lt;/p&gt;
&lt;p&gt;Here's a slightly more complex example, which also downloads a Docker base image, builds the commit in parallel using two different versions of the OCaml compiler, and then tests the resulting images. Here the red box indicates that this step failed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/example2.svg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A more complex example is testing the project itself and then searching for other projects that depend on it and testing those against the new version too:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/example3.svg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here, the circle means that we should wait for the tests to pass before checking the reverse dependencies.&lt;/p&gt;
&lt;p&gt;We could describe these pipelines using YAML or similar, but that would be very limiting.
Instead, I decided to use an Embedded Domain Specific Language, so that we can use the host
language's features for free (e.g. string manipulation, variables, functions, imports,
type-checking, etc).&lt;/p&gt;
&lt;p&gt;The most obvious approach is making each box a regular function.
Then the first example above could be (here, using OCaml syntax):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The second could be:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker_pull&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ocaml/opam2&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.07&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;And the third might look something like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revdeps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_revdeps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revdeps&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;However, we'd like to add some extras to the language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pipeline steps should run in parallel when possible.
The &lt;code&gt;example2&lt;/code&gt; function above would do the builds one at a time.
&lt;/li&gt;
&lt;li&gt;Pipeline steps should be recalculated whenever their input changes.
e.g. when a new commit is made we need to rebuild.
&lt;/li&gt;
&lt;li&gt;The user should be able to view the progress of each step.
&lt;/li&gt;
&lt;li&gt;The user should be able to trigger a rebuild for any step.
&lt;/li&gt;
&lt;li&gt;We should be able to generate the diagrams automatically from the code,
so we can see what the pipeline will do before running it.
&lt;/li&gt;
&lt;li&gt;The failure of one step shouldn't stop the whole pipeline.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The exact extras don't matter too much to this blog post,
so for simplicity I'll focus on just running steps concurrently.&lt;/p&gt;
&lt;h2&gt;Attempt one: a monad&lt;/h2&gt;
&lt;p&gt;Without the extra features, we have functions like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;You can read this as &amp;quot;&lt;code&gt;build&lt;/code&gt; is a function that takes a &lt;code&gt;source&lt;/code&gt; value and returns a (Docker) &lt;code&gt;image&lt;/code&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;These functions compose together easily to make a larger function that will fetch a
commit and build it:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fab&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/fetch_and_build.svg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We could also shorten this to &lt;code&gt;build (fetch c)&lt;/code&gt; or to &lt;code&gt;fetch c |&amp;gt; build&lt;/code&gt;.
The &lt;code&gt;|&amp;gt;&lt;/code&gt; (pipe) operator in OCaml just calls the function on its right with the argument on its left.&lt;/p&gt;
&lt;p&gt;To extend these functions to be concurrent, we can make them return promises, e.g.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;But now we can't compose them easily using &lt;code&gt;let&lt;/code&gt; (or &lt;code&gt;|&amp;gt;&lt;/code&gt;), because the output type of &lt;code&gt;fetch&lt;/code&gt; doesn't match the input of &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, we can define a similar operation, &lt;code&gt;let*&lt;/code&gt; (or &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;) that works with promises. It immediately returns a promise for the final
result, and calls the body of the &lt;code&gt;let*&lt;/code&gt; later, when the first promise is fulfilled. Then we have:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fab&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;In order words, by sprinkling a few &lt;code&gt;*&lt;/code&gt; characters around we can turn our plain old pipeline into a new concurrent one!
The rules for when you can compose promise-returning functions using &lt;code&gt;let*&lt;/code&gt; are exactly the same as the rules about when
you can compose regular functions using &lt;code&gt;let&lt;/code&gt;, so writing programs using promises is just as easy as writing regular programs.&lt;/p&gt;
&lt;p&gt;Just using &lt;code&gt;let*&lt;/code&gt; doesn't add any concurrency within our pipeline
(it just allows it to execute concurrently with other code).
But we can define extra functions for that, such as &lt;code&gt;all&lt;/code&gt; to evaluate every promise in a list at once,
or an &lt;code&gt;and*&lt;/code&gt; operator to indicate that two things should run in parallel:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Fetch the source code and Docker base image in parallel: *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker_pull&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ocaml/opam2&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Build and test against each compiler version in parallel: *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.07&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;As well as handling promises,
we could also define a &lt;code&gt;let*&lt;/code&gt; for functions that might return errors (the body of the let is called only if the first value
is successful), or for live updates (the body is called each time the input changes), or for all of these things together.
This is the basic idea of a monad.&lt;/p&gt;
&lt;p&gt;This actually works pretty well.
In 2016, I used this approach to make &lt;a href=&quot;https://github.com/moby/datakit/tree/master/ci&quot;&gt;DataKitCI&lt;/a&gt;, which was used initially as the CI system for Docker-for-Mac.
Later, Anil Madhavapeddy used it to create &lt;a href=&quot;https://github.com/avsm/mirage-ci&quot;&gt;opam-repo-ci&lt;/a&gt;, which is the CI system for &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;opam-repository&lt;/a&gt;, OCaml's main package repository.
This checks each new PR to see what packages it adds or modifies,
tests each one against multiple OCaml compiler versions and Linux distributions (Debian, Ubuntu, Alpine, CentOS, Fedora and OpenSUSE),
and then finds all versions of all packages depending on the changed packages and tests those too.&lt;/p&gt;
&lt;p&gt;The main problem with using a monad is that we can't statically analyse the pipeline.
Consider the &lt;code&gt;example2&lt;/code&gt; function above. Until we have queried GitHub to get a commit to
test, we cannot run the function and therefore have no idea what it will do.
Once we have &lt;code&gt;commit&lt;/code&gt; we can call &lt;code&gt;example2 commit&lt;/code&gt;,
but until the &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;docker_pull&lt;/code&gt; operations complete we cannot evaluate the body of the &lt;code&gt;let*&lt;/code&gt; to find out what the pipeline will do next.&lt;/p&gt;
&lt;p&gt;In other words, we can only draw diagrams showing the bits of the pipeline that have already
executed or are currently executing, and we must indicate opportunities for concurrency
manually using &lt;code&gt;and*&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Attempt two: an arrow&lt;/h2&gt;
&lt;p&gt;An &lt;a href=&quot;https://en.wikipedia.org/wiki/Arrow_(computer_science)&quot;&gt;arrow&lt;/a&gt; makes it possible to analyse pipelines statically.
Instead of our monadic functions:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;we can define an arrow type:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;An &lt;code&gt;('a, 'b) arrow&lt;/code&gt; is a pipeline that takes an input of type &lt;code&gt;'a&lt;/code&gt; and produces a result of type &lt;code&gt;'b&lt;/code&gt;.
If we define &lt;code&gt;type ('a, 'b) arrow = 'a -&amp;gt; 'b promise&lt;/code&gt; then this is the same as the monadic version.
However, we can instead make the &lt;code&gt;arrow&lt;/code&gt; type abstract and extend it to store whatever static information we require.
For example, we could label the arrows:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Here, &lt;code&gt;arrow&lt;/code&gt; is a record. &lt;code&gt;f&lt;/code&gt; is the old monadic function and &lt;code&gt;label&lt;/code&gt; is the &amp;quot;static analysis&amp;quot;.&lt;/p&gt;
&lt;p&gt;Users can't see the internals of the &lt;code&gt;arrow&lt;/code&gt; type, and must build up pipelines using functions provided by the arrow implementation.
There are three basic functions available:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;arr&lt;/code&gt; takes a pure function and gives the equivalent arrow.
For our promise example, that means the arrow returns a promise that is already fulfilled.
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; joins two arrows together.
&lt;code&gt;first&lt;/code&gt; takes an arrow from &lt;code&gt;'a&lt;/code&gt; to &lt;code&gt;'b&lt;/code&gt; and makes it work on pairs instead.
The first element of the pair will be processed by the given arrow and
the second component is returned unchanged.&lt;/p&gt;
&lt;p&gt;We can have these operations automatically create new arrows with appropriate &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; fields.
For example, in &lt;code&gt;a &amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;, the resulting label field could be the string &lt;code&gt;{a.label} &amp;gt;&amp;gt;&amp;gt; {b.label}&lt;/code&gt;.
This means that we can display the pipeline without having to run it first,
and we could easily replace &lt;code&gt;label&lt;/code&gt; with something more structured if needed.&lt;/p&gt;
&lt;p&gt;With this our first example changes from:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;to&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That seems quite pleasant, although we did have to give up our variable names.
But things start to get complicated with larger examples. For &lt;code&gt;example2&lt;/code&gt;, we
need to define a few standard combinators:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** Process the second component of a tuple, leaving the first unchanged. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** [f *** g] processes the first component of a pair with [f] and the second&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;    with [g]. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** [f &amp;amp;&amp;amp;&amp;amp; g] processes a single value with [f] and [g] in parallel and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;    returns a pair with the results. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Then, &lt;code&gt;example2&lt;/code&gt; changes from:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker_pull&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ocaml/opam2&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.07&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;to:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_with_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker_pull&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ocaml/opam2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.07&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We've lost most of the variable names and instead have to use tuples, remembering where our values are.
It's not &lt;em&gt;too&lt;/em&gt; bad here with two values,
but it gets very difficult very quickly as more are added and we start nesting tuples.
We also lost the ability to use an optional labelled argument in &lt;code&gt;build ~dockerfile src&lt;/code&gt;
and instead need to use a new operation that takes a tuple of the dockerfile and the source.&lt;/p&gt;
&lt;p&gt;Imagine that running the tests now requires getting the test cases from the source code.
In the original code, we'd just change &lt;code&gt;test image&lt;/code&gt; to &lt;code&gt;test image ~using:src&lt;/code&gt;.
In the arrow version, we need to duplicate the source before the build step,
run the build with &lt;code&gt;first build_with_dockerfile&lt;/code&gt;,
and make sure the arguments are the right way around for a new &lt;code&gt;test_using&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Attempt three: a dart&lt;/h2&gt;
&lt;p&gt;I started wondering whether there might be an easier way to achieve the same static analysis that you get with arrows,
but without the point-free syntax, and it seems that there is. Consider the monadic version of &lt;code&gt;example1&lt;/code&gt;.
We had:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;If you didn't know about monads, there is another way you might try to do this.
Instead of using &lt;code&gt;let*&lt;/code&gt; to wait for the &lt;code&gt;fetch&lt;/code&gt; to complete and then calling &lt;code&gt;build&lt;/code&gt; with
the source, you might define &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; to take promises as inputs:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;After all, fetching gives you a &lt;code&gt;source promise&lt;/code&gt; and you want an &lt;code&gt;image promise&lt;/code&gt;, so this seems very natural.
We could even have &lt;code&gt;example1&lt;/code&gt; take a promise of the commit.
Then it looks like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That's good, because it's identical to the simple version we started with.
The problem is that it is inefficient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We call &lt;code&gt;example1&lt;/code&gt; with the promise of the commit (we don't know what it is yet).
&lt;/li&gt;
&lt;li&gt;Without waiting to find out which commit we're testing, we call &lt;code&gt;fetch&lt;/code&gt;, getting back a promise of some source.
&lt;/li&gt;
&lt;li&gt;Without waiting to get the source, we call &lt;code&gt;build&lt;/code&gt;, getting a promise of an image.
&lt;/li&gt;
&lt;li&gt;Without waiting for the build, we call &lt;code&gt;test&lt;/code&gt;, getting a promise of the results.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We return the final promise of the test results immediately, but we haven't done any real work yet.
Instead, we've built up a long chain of promises, wasting memory.&lt;/p&gt;
&lt;p&gt;However, in this situation what we want is to perform a static analysis.
i.e. we want to build up in memory some data structure representing the pipeline...
and this is exactly what our &amp;quot;inefficient&amp;quot; use of the monad produces!&lt;/p&gt;
&lt;p&gt;To make this useful, we need the primitive operations (such as &lt;code&gt;fetch&lt;/code&gt;)
to provide some information (e.g. labels) for the static analysis.
OCaml's &lt;code&gt;let&lt;/code&gt; syntax doesn't provide an obvious place for a label,
but I was able to define an operator (&lt;code&gt;let**&lt;/code&gt;) that returns a function taking a label argument.
It can be used to build primitive operations like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* (standard monadic implementation of fetch goes here) *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;So, &lt;code&gt;fetch&lt;/code&gt; takes a promise of a commit, does a monadic bind on it to wait for the actual commit and then proceeds as before,
but it labels the bind as a &lt;code&gt;fetch&lt;/code&gt; operation.
If &lt;code&gt;fetch&lt;/code&gt; took multiple arguments, it could use &lt;code&gt;and*&lt;/code&gt; to wait for all of them in parallel.&lt;/p&gt;
&lt;p&gt;In theory, the body of the &lt;code&gt;let**&lt;/code&gt; in &lt;code&gt;fetch&lt;/code&gt; could contain further binds.
In that case, we wouldn't be able to analyse the whole pipeline at the start.
But as long as the primitives wait for all their inputs at the start and don't do any binds internally,
we can discover the whole pipeline statically.&lt;/p&gt;
&lt;p&gt;We can choose whether to expose these bind operations to application code or not.
If &lt;code&gt;let*&lt;/code&gt; (or &lt;code&gt;let**&lt;/code&gt;) is exposed, then applications get to use all the expressive power of monads,
but there will be points where we cannot show the whole pipeline until some promise resolves.
If we hide them, then applications can only make static pipelines.&lt;/p&gt;
&lt;p&gt;My approach so far has been to use &lt;code&gt;let*&lt;/code&gt; as an escape hatch, so that any required pipeline can be built,
but I later replace any uses of it by more specialised operations. For example, I added:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This processes each item in a list that isn't known until runtime.
However, we can still know statically what pipeline we will apply to each item,
even though we don't know what the items themselves are.
&lt;code&gt;list_map&lt;/code&gt; could have been implemented using &lt;code&gt;let*&lt;/code&gt;, but then we wouldn't be able to see the pipeline statically.&lt;/p&gt;
&lt;p&gt;Here are the other two examples, using the dart approach:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker_pull&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ocaml/opam2&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;make_dockerfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ocaml_version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.07&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Compared to the original, we have an &lt;code&gt;all&lt;/code&gt; to combine the results, and there's an extra &lt;code&gt;let+ base = base&lt;/code&gt; when calculating the dockerfile.
&lt;code&gt;let+&lt;/code&gt; is just another syntax for &lt;code&gt;map&lt;/code&gt;, used here because I chose not to change the signature of &lt;code&gt;make_dockerfile&lt;/code&gt;.
Alternatively, we could have &lt;code&gt;make_dockerfile&lt;/code&gt; take a promise of the base image and do the map inside it instead.
Because &lt;code&gt;map&lt;/code&gt; takes a pure body (&lt;code&gt;make_dockerfile&lt;/code&gt; just generates a string; there are no promises or errors) it doesn't need its own box
on the diagrams and we don't lose anything by allowing its use.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revdeps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_revdeps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;gate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revdeps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;list_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This shows another custom operation: &lt;code&gt;gate revdeps ~on:ok&lt;/code&gt; is a promise that only resolves once both &lt;code&gt;revdeps&lt;/code&gt; and &lt;code&gt;ok&lt;/code&gt; have resolved.
This prevents it from testing the library's revdeps until the library's own tests have passed,
even though it could do this in parallel if we wanted it to.
Whereas with a monad we have to enable concurrency explicitly where we want it (using &lt;code&gt;and*&lt;/code&gt;),
with a dart we have to disable concurrency explicitly where we don't want it (using &lt;code&gt;gate&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I also added a &lt;code&gt;list_iter&lt;/code&gt; convenience function,
and gave it a pretty-printer argument so that we can label the cases in the diagrams once the list inputs are known.&lt;/p&gt;
&lt;p&gt;Finally, although I said that you can't use &lt;code&gt;let*&lt;/code&gt; inside a primitive,
you can still use some other monad (that doesn't generate diagrams).
In fact, in the real system I used a separate &lt;code&gt;let&amp;gt;&lt;/code&gt; operator for primitives.
That expects a body using non-diagram-generating promises provided by the underlying promise library,
so you can't use &lt;code&gt;let*&lt;/code&gt; (or &lt;code&gt;let&amp;gt;&lt;/code&gt;) inside the body of a primitive.&lt;/p&gt;
&lt;h2&gt;Comparison with arrows&lt;/h2&gt;
&lt;p&gt;Given a &amp;quot;dart&amp;quot; you can create an arrow interface from it easily by defining e.g.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Then &lt;code&gt;arr&lt;/code&gt; is just &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;f &amp;gt;&amp;gt;&amp;gt; g&lt;/code&gt; is just &lt;code&gt;fun x -&amp;gt; g (f x)&lt;/code&gt;. &lt;code&gt;first&lt;/code&gt; can be defined easily too, assuming you have some kind
of function for doing two things in parallel (like our &lt;code&gt;and*&lt;/code&gt; above).&lt;/p&gt;
&lt;p&gt;So a dart API (even with &lt;code&gt;let*&lt;/code&gt; hidden) is still enough to express any pipeline you can express using an arrow API.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Arrow_tutorial&quot;&gt;Haskell Arrow tutorial&lt;/a&gt; uses an example where an arrow is a stateful function.
For example, there is a &lt;code&gt;total&lt;/code&gt; arrow that returns the sum of its input and every previous input it has been called with.
e.g. calling it three times with inputs &lt;code&gt;1 2 3&lt;/code&gt; produces outputs &lt;code&gt;1 3 6&lt;/code&gt;.
Running a pipeline on a sequence of inputs returns the sequence of outputs.&lt;/p&gt;
&lt;p&gt;The tutorial uses &lt;code&gt;total&lt;/code&gt; to define a &lt;code&gt;mean1&lt;/code&gt; function like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;mean1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;So this pipeline duplicates each input number,
replaces the second one with &lt;code&gt;1&lt;/code&gt;,
totals both streams, and then
replaces each pair with its ratio.
Each time you put another number into the pipeline, you get out the average of all values input so far.&lt;/p&gt;
&lt;p&gt;The equivalent code using the dart style would be (OCaml uses &lt;code&gt;/.&lt;/code&gt; for floating-point division):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(/.))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That seems more readable to me.
We can simplify the code slightly by defining the standard operators &lt;code&gt;let+&lt;/code&gt; (for &lt;code&gt;map&lt;/code&gt;) and &lt;code&gt;and+&lt;/code&gt; (for &lt;code&gt;pair&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This is not a great example of an arrow anyway,
because we don't use the output of one stateful function as the input to another,
so this is actually just a plain &lt;a href=&quot;https://en.wikipedia.org/wiki/Applicative_functor&quot;&gt;applicative&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We could easily extend the example pipeline with another stateful function though,
perhaps by adding some smoothing.
That would look like &lt;code&gt;mean1 &amp;gt;&amp;gt;&amp;gt; smooth&lt;/code&gt; in the arrow notation,
and &lt;code&gt;values |&amp;gt; mean |&amp;gt; smooth&lt;/code&gt; (or &lt;code&gt;smooth (mean values)&lt;/code&gt;) in the dart notation.&lt;/p&gt;
&lt;p&gt;Note: Haskell does also have an &lt;code&gt;Arrows&lt;/code&gt; syntax extension, which allows the Haskell code to be written as:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;mean2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;returnA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That's more similar to the dart notation.&lt;/p&gt;
&lt;h2&gt;Larger examples&lt;/h2&gt;
&lt;p&gt;I've put up a library using a slightly extended version of these ideas at &lt;a href=&quot;https://github.com/ocurrent/ocurrent&quot;&gt;ocurrent/ocurrent&lt;/a&gt;.
The &lt;code&gt;lib_term&lt;/code&gt; subdirectory is the part relevant to this blog post, with the various combinators described in &lt;a href=&quot;https://github.com/ocurrent/ocurrent/blob/00688f949f3cfbf3d599949f89ca71c8e9e536fc/lib_term/s.ml#L48&quot;&gt;TERM&lt;/a&gt;.
The other directories handle more concrete details, such as integration with the Lwt promise library,
and providing the admin web UI or the Cap'n Proto RPC interface, as well as plugins with primitives
for using Git, GitHub, Docker and Slack.&lt;/p&gt;
&lt;h3&gt;OCaml Docker base image builder&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ocurrent/docker-base-images&quot;&gt;ocurrent/docker-base-images&lt;/a&gt; contains a pipeline that builds Docker base images for OCaml for various Linux distributions, CPU architectures, OCaml compiler versions and configuration options.
For example, to test OCaml 4.09 on Debian 10, you can do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm -it ocurrent/opam:debian-10-ocaml-4.09

:~$ ocamlopt --version
4.09.0

:~$ opam depext -i utop
[...]

:~$ utop
----+-------------------------------------------------------------+------------------
    | Welcome to utop version 2.4.2 (using OCaml version 4.09.0)! |                   
    +-------------------------------------------------------------+                   

Type #utop_help for help about using utop.

-( 11:50:06 )-&amp;lt; command 0 &amp;gt;-------------------------------------------{ counter: 0 }-
utop # 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's what the pipeline looks like (click for full-size):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roscidus.com/blog/images/cicd/docker-base-images.svg&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/docker-base-images-thumb.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It pulls the latest Git commit of opam-repository each week, then builds base images containing that and the opam package manager for each distribution version, then builds one image for each supported compiler variant. Many of the images are built on multiple architectures (&lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;arm32&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;ppc64&lt;/code&gt;) and pushed to a staging area on Docker Hub. Then, the pipeline combines all the hashes to push a multi-arch manifest to Docker Hub. There are also some aliases (e.g. &lt;code&gt;debian&lt;/code&gt; means &lt;code&gt;debian-10-ocaml-4.09&lt;/code&gt; at the moment). Finally, if there is any problem then the pipeline sends the error to a Slack channel.&lt;/p&gt;
&lt;p&gt;You might wonder whether we really need a pipeline for this, rather than a simple script run from a cron-job.
But having a pipeline allows us to see what the pipeline will do before running it, watch the pipeline's progress, restart failed jobs individually, etc, with almost the same code we would have written anyway.&lt;/p&gt;
&lt;p&gt;You can read &lt;a href=&quot;https://github.com/ocurrent/docker-base-images/blob/f65663b09d78bbb17c39aca97cbd9425c2e7816e/src/pipeline.ml&quot;&gt;pipeline.ml&lt;/a&gt; if you want to see the full pipeline.&lt;/p&gt;
&lt;h3&gt;OCaml CI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ocurrent/ocaml-ci&quot;&gt;ocurrent/ocaml-ci&lt;/a&gt; is an (experimental) GitHub app for testing OCaml projects.
The pipeline gets the list of installations of the app,
gets the configured repositories for each installation,
gets the branches and PRs for each repository,
and then tests the head of each one against multiple Linux distributions and OCaml compiler versions.
If the project uses ocamlformat, it also checks that the commit is formatted exactly as ocamlformat would do it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roscidus.com/blog/images/cicd/ocaml-ci.svg&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/cicd/ocaml-ci-thumb.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The results are pushed back to GitHub as the commit status, and also recorded in a local index for the web and tty UIs.
There's quite a lot of red here mainly because if a project doesn't support a particular version of OCaml then the build is marked
as failed and shows up as red in the pipeline, although these failures are filtered out when making the GitHub status report.
We probably need a new colour for skipped stages.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;It's convenient to write CI/CD pipelines as if they were single-shot scripts
that run the steps once, in series, and always succeed,
and then with only minor changes have the pipeline run the steps whenever
the input changes, in parallel, with logging, error reporting, cancellation
and rebuild support.&lt;/p&gt;
&lt;p&gt;Using a monad allows any program to be converted easily to have these features,
but, as with a regular program, we don't know what the program will do with some
data until we run it. In particular, we can only automatically generate diagrams
showing steps that have already started.&lt;/p&gt;
&lt;p&gt;The traditional way to do static analysis is to use an arrow.
This is a little more limited than a monad, because the structure of the pipeline
can't change depending on the input data, although we can add limited flexibility
such as optional steps or a choice between two branches.
However, writing pipelines using arrow notation is difficult because we have to
program in a point-free style (without variables).&lt;/p&gt;
&lt;p&gt;We can get the same benefits of static analysis by using a monad in an unusual way,
here referred to as a &amp;quot;dart&amp;quot;.
Instead of functions that take plain values and return wrapped values, our functions
both take and return wrapped values. This results in a syntax that looks
identical to plain programming, but allows static analysis (at the cost of not being
able to manipulate the wrapped values directly).&lt;/p&gt;
&lt;p&gt;If we hide (or don't use) the monad's &lt;code&gt;let*&lt;/code&gt; (bind) function then the pipelines we
create can always be determined statically. If we use a bind, then there will be holes
in the pipeline that may expand to more pipeline stages as the pipeline runs.&lt;/p&gt;
&lt;p&gt;Primitive steps can be created by using a single &amp;quot;labelled bind&amp;quot;, where the label
provides the static analysis for the atomic component.&lt;/p&gt;
&lt;p&gt;I haven't seen this pattern used before (or mentioned in the arrow documentation),
and it seems to provide exactly the same benefits as arrows with much less difficulty.
If this has a proper name, let me know!&lt;/p&gt;
&lt;p&gt;This work was funded by OCaml Labs.&lt;/p&gt;
</content><id>https://roscidus.com/blog/blog/2019/11/14/cicd-pipelines/</id><title type="text">CI/CD pipelines: Monad, Arrow or Dart?</title><updated>2019-11-14T09:59:40-00:00</updated><author><name>Thomas Leonard</name></author></entry><entry><link href="https://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/blog/categories/ocaml/atom.xml</uri><name>talex5</name></contributor><content type="html">&lt;p&gt;The vchan protocol is used to stream data between virtual machines on a Xen host without needing any locks.
It is largely undocumented.
The TLA Toolbox is a set of tools for writing and checking specifications.
In this post, I'll describe my experiences using these tools to understand how the vchan protocol works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#background&quot;&gt;Background&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#qubes-and-the-vchan-protocol&quot;&gt;Qubes and the vchan protocol&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#tla&quot;&gt;TLA+&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#is-tla-useful&quot;&gt;Is TLA useful?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#basic-tla-concepts&quot;&gt;Basic TLA concepts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#variables-states-and-behaviour&quot;&gt;Variables, states and behaviour&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#actions&quot;&gt;Actions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#correctness-of-spec&quot;&gt;Correctness of Spec&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-model-checker&quot;&gt;The model checker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-real-vchan&quot;&gt;The real vchan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-algorithm&quot;&gt;The algorithm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#testing-the-full-spec&quot;&gt;Testing the full spec&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#some-odd-things&quot;&gt;Some odd things&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#why-does-vchan-work&quot;&gt;Why does vchan work?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#proving-integrity&quot;&gt;Proving Integrity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#availability&quot;&gt;Availability&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#experiences-with-tlaps&quot;&gt;Experiences with TLAPS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-final-specification&quot;&gt;The final specification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#the-original-bug&quot;&gt;The original bug&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://roscidus.com/#conclusions&quot;&gt;Conclusions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://www.reddit.com/r/tlaplus/comments/abi3oz/using_tla_to_understand_xen_vchan/&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=18814350&quot;&gt;Hacker News&lt;/a&gt;
and &lt;a href=&quot;https://lobste.rs/s/a5zer2/using_tla_understand_xen_vchan&quot;&gt;Lobsters&lt;/a&gt; )&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;h3&gt;Qubes and the vchan protocol&lt;/h3&gt;
&lt;p&gt;I run &lt;a href=&quot;https://www.qubes-os.org/&quot;&gt;QubesOS&lt;/a&gt; on my laptop.
A QubesOS desktop environment is made up of multiple virtual machines.
A privileged VM, called dom0, provides the desktop environment and coordinates the other VMs.
dom0 doesn't have network access, so you have to use other VMs for doing actual work.
For example, I use one VM for email and another for development work (these are called &amp;quot;application VMs&amp;quot;).
There is another VM (called sys-net) that connects to the physical network, and
yet another VM (sys-firewall) that connects the application VMs to net-vm.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;https://roscidus.com/blog/images/qubes/qubes-desktop.png&quot; title=&quot;My QubesOS desktop. The windows with blue borders are from my Debian development VM, while the green one is from a Fedora VM, etc.&quot; class=&quot;caption&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;My QubesOS desktop. The windows with blue borders are from my Debian development VM, while the green one is from a Fedora VM, etc.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The default sys-firewall is based on Fedora Linux.
A few years ago, &lt;a href=&quot;https://roscidus.com/blog/blog/2016/01/01/a-unikernel-firewall-for-qubesos/&quot;&gt;I replaced sys-firewall with a MirageOS unikernel&lt;/a&gt;.
MirageOS is written in OCaml, and has very little C code (unlike Linux).
It boots much faster and uses much less RAM than the Fedora-based VM.
But recently, a user reported that &lt;a href=&quot;https://github.com/mirage/mirage-qubes/issues/25&quot;&gt;restarting mirage-firewall was taking a very long time&lt;/a&gt;.
The problem seemed to be that it was taking several minutes to transfer the information about the network configuration to the firewall.
This is sent over vchan.
The user reported that stracing the QubesDB process in dom0 revealed that it was sleeping for 10 seconds
between sending the records, suggesting that a wakeup event was missing.&lt;/p&gt;
&lt;p&gt;The lead developer of QubesOS said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'd guess missing evtchn trigger after reading/writing data in vchan.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps &lt;a href=&quot;https://github.com/mirage/ocaml-vchan&quot;&gt;ocaml-vchan&lt;/a&gt;, the OCaml implementation of vchan, wasn't implementing the vchan specification correctly?
I wanted to check, but there was a problem: there was no vchan specification.&lt;/p&gt;
&lt;p&gt;The Xen wiki lists vchan under &lt;a href=&quot;https://wiki.xenproject.org/wiki/Xen_Document_Days/TODO#Documentation_on_lib.28xen.29vchan&quot;&gt;Xen Document Days/TODO&lt;/a&gt;.
The &lt;a href=&quot;https://xenbits.xen.org/gitweb/?p=xen.git%3Ba=commit%3Bh=1a16a3351ff2f2cf9f0cc0a27c89a0652eb8dfb4&quot;&gt;initial Git commit&lt;/a&gt; on 2011-10-06 said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libvchan: interdomain communications library&lt;/p&gt;
&lt;p&gt;This library implements a bidirectional communication interface between
applications in different domains, similar to unix sockets. Data can be
sent using the byte-oriented &lt;code&gt;libvchan_read&lt;/code&gt;/&lt;code&gt;libvchan_write&lt;/code&gt; or the
packet-oriented &lt;code&gt;libvchan_recv&lt;/code&gt;/&lt;code&gt;libvchan_send&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Channel setup is done using a client-server model; domain IDs and a port
number must be negotiated prior to initialization. The server allocates
memory for the shared pages and determines the sizes of the
communication rings (which may span multiple pages, although the default
places rings and control within a single page).&lt;/p&gt;
&lt;p&gt;With properly sized rings, testing has shown that this interface
provides speed comparable to pipes within a single Linux domain; it is
significantly faster than network-based communication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I looked in the xen-devel mailing list around this period in case the reviewers had asked about how it worked.&lt;/p&gt;
&lt;p&gt;One reviewer &lt;a href=&quot;https://lists.xenproject.org/archives/html/xen-devel/2011-08/msg00874.html&quot;&gt;suggested&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please could you say a few words about the functionality this new
library enables and perhaps the design etc? In particular a protocol
spec would be useful for anyone who wanted to reimplement for another
guest OS etc. [...]
I think it would be appropriate to add protocol.txt at the same time as
checking in the library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, the submitter pointed out that this was unnecessary, saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The comments in the shared header file explain the layout of the shared
memory regions; any other parts of the protocol are application-defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, ordinarily, I wouldn't be much interested in spending my free time
tracking down race conditions in 3rd-party libraries for the benefit of
strangers on the Internet. However, I did want to have another play with TLA...&lt;/p&gt;
&lt;h3&gt;TLA+&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://lamport.azurewebsites.net/tla/tla.html&quot;&gt;TLA+&lt;/a&gt; is a language for specifying algorithms.
It can be used for many things, but it is particularly designed for stateful parallel algorithms.&lt;/p&gt;
&lt;p&gt;I learned about TLA while working at Docker.
Docker EE provides software for managing large clusters of machines.
It includes various orchestrators (SwarmKit, Kubernetes and Swarm Classic) and
a web UI.
Ensuring that everything works properly is very important, and to this end
a large collection of tests had been produced.
Part of my job was to run these tests.
You take a test from a list in a web UI and click whatever buttons it tells you to click,
wait for some period of time,
and then check that what you see matches what the test says you should see.
There were a lot of these tests, and they all had to be repeated on every
supported platform, and for every release, release candidate or preview release.
There was a lot of waiting involved and not much thinking required, so to keep
my mind occupied, I started reading the TLA documentation.&lt;/p&gt;
&lt;p&gt;I read &lt;a href=&quot;https://lamport.azurewebsites.net/tla/hyperbook.html&quot;&gt;The TLA+ Hyperbook&lt;/a&gt; and &lt;a href=&quot;https://lamport.azurewebsites.net/tla/book.html&quot;&gt;Specifying Systems&lt;/a&gt;.
Both are by Leslie Lamport (the creator of TLA), and are freely available online.
They're both very easy to read.
The hyperbook introduces the tools right away so you can start playing, while
Specifying Systems starts with more theory and discusses the tools later.
I think it's worth reading both.&lt;/p&gt;
&lt;p&gt;Once Docker EE 2.0 was released,
we engineers were allowed to spend a week on whatever fun (Docker-related) project we wanted.
I used the time to read the SwarmKit design documents and make a TLA model of that.
I felt that using TLA prompted useful discussions with the SwarmKit developers
(which can see seen in the &lt;a href=&quot;https://github.com/docker/swarmkit/pull/2613&quot;&gt;pull request&lt;/a&gt; comments).&lt;/p&gt;
&lt;p&gt;A specification document can answer questions such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What does it do? (requirements / properties)
&lt;/li&gt;
&lt;li&gt;How does it do it? (the algorithm)
&lt;/li&gt;
&lt;li&gt;Does it work? (model checking)
&lt;/li&gt;
&lt;li&gt;Why does it work? (inductive invariant)
&lt;/li&gt;
&lt;li&gt;Does it &lt;em&gt;really&lt;/em&gt; work? (proofs)
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You don't have to answer all of them to have a useful document,
but I will try to answer each of them for vchan.&lt;/p&gt;
&lt;h2&gt;Is TLA useful?&lt;/h2&gt;
&lt;p&gt;In my (limited) experience with TLA, whenever I have reached the end of a specification
(whether reading it or writing it), I always find myself thinking &amp;quot;Well, that was obvious.
It hardly seems worth writing a spec for that!&amp;quot;.
You might feel the same after reading this blog post.&lt;/p&gt;
&lt;p&gt;To judge whether TLA is useful, I suggest you take a few minutes to look at the code.
If you are good at reading C code then you might find, like the Xen reviewers,
that it is quite obvious what it does, how it works, and why it is correct.
Or, like me, you might find you'd prefer a little help.
You might want to jot down some notes about it now, to see whether you learn anything new.&lt;/p&gt;
&lt;p&gt;To give the big picture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two VMs decide to communicate over vchan. One will be the server and the other the client.
&lt;/li&gt;
&lt;li&gt;The server allocates three chunks of memory: one to hold data in transit from the client to
the server, one for data going from server to client, and the third to track information about
the state of the system. This includes counters saying how much data has been written and how
much read, in each direction.
&lt;/li&gt;
&lt;li&gt;The server tells Xen to grant the client access to this memory.
&lt;/li&gt;
&lt;li&gt;The client asks Xen to map the memory into its address space.
Now client and server can both access it at once.
There are no locks in the protocol, so be careful!
&lt;/li&gt;
&lt;li&gt;Either end sends data by writing it into the appropriate buffer and updating the appropriate counter
in the shared block. The buffers are &lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_buffer&quot;&gt;ring buffers&lt;/a&gt;, so after getting to the end, you
start again from the beginning.
&lt;/li&gt;
&lt;li&gt;The data-written (producer) counter and the data-read (consumer) counter together
tell you how much data is in the buffer, and where it is.
When the difference is zero, the reader must stop reading and wait for more data.
When the difference is the size of the buffer, the writer must stop writing and wait for more space.
&lt;/li&gt;
&lt;li&gt;When one end is waiting, the other can signal it using a &lt;a href=&quot;https://wiki.xen.org/wiki/Event_Channel_Internals&quot;&gt;Xen event channel&lt;/a&gt;.
This essentially sets a pending flag to true at the other end, and wakes the VM if it is sleeping.
If a VM tries to sleep while it has an event pending, it will immediately wake up again.
Sending an event when one is already pending has no effect.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=xen/include/public/io/libxenvchan.h%3Bh=44284f437ab30f01049f280035dbb711103ca9b0%3Bhb=HEAD&quot;&gt;public/io/libxenvchan.h&lt;/a&gt; header file provides some information,
including the shared structures and comments about them:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xen/include/public/io/libxenvchan.h&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ring_shared&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define VCHAN_NOTIFY_WRITE 0x1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define VCHAN_NOTIFY_READ 0x2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt; * vchan_interface: primary shared data structure&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;vchan_interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Standard consumer/producer interface, one pair per buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * left is client write, server read&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * right is client read, server write&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ring_shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * size of the rings, which determines their location&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 10   - at offset 1024 in ring's page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 11   - at offset 2048 in ring's page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 12+  - uses 2^(N-12) grants to describe the multi-page ring&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * These should remain constant once the page is shared.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Only one of the two orders can be 10 (or 11).&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Shutdown detection:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  0: client (or server) has exited&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  1: client (or server) is connected&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  2: client has not yet connected&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Notification bits:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  VCHAN_NOTIFY_WRITE: send notify when data is written&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  VCHAN_NOTIFY_READ: send notify when data is read (consumed)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * cli_notify is used for the client to inform the server of its action&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Grant list: ordering is left, right. Must not extend into actual ring&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * or grow beyond the end of the initial shared page.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * These should remain constant once the page is shared, to allow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * for possible remapping by a client that restarts.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;You might also like to look at &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=tree%3Bf=tools/libvchan%3Bh=44e5af5adacc92511f29d1ab3e1c1037c7ea60fa%3Bhb=HEAD&quot;&gt;the vchan source code&lt;/a&gt;.
Note that the &lt;code&gt;libxenvchan.h&lt;/code&gt; file in this directory includes and extends
the above header file (with the same name).&lt;/p&gt;
&lt;p&gt;For this blog post, we will ignore the Xen-specific business of sharing the memory
and telling the client where it is, and assume that the client has mapped the
memory and is ready to go.&lt;/p&gt;
&lt;h2&gt;Basic TLA concepts&lt;/h2&gt;
&lt;p&gt;We'll take a first look at TLA concepts and notation using a simplified version of vchan.
TLA comes with excellent documentation, so I won't try to make this a full tutorial,
but hopefully you will be able to follow the rest of this blog post after reading it.
We will just consider a single direction of the channel (e.g. client-to-server) here.&lt;/p&gt;
&lt;h3&gt;Variables, states and behaviour&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;variable&lt;/em&gt; in TLA is just what a programmer expects: something that changes over time.
For example, I'll use &lt;code&gt;Buffer&lt;/code&gt; to represent the data currently being transmitted.&lt;/p&gt;
&lt;p&gt;We can also add variables that are just useful for the specification.
I use &lt;code&gt;Sent&lt;/code&gt; to represent everything the sender-side application asked the vchan library to transmit,
and &lt;code&gt;Got&lt;/code&gt; for everything the receiving application has received:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;VARIABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;A &lt;em&gt;state&lt;/em&gt; in TLA represents a snapshot of the world at some point.
It gives a value for each variable.
For example, &lt;code&gt;{ Got: &amp;quot;H&amp;quot;, Buffer: &amp;quot;i&amp;quot;, Sent: &amp;quot;Hi&amp;quot;, ... }&lt;/code&gt; is a state.
The &lt;code&gt;...&lt;/code&gt; is just a reminder that a state also includes everything else in the world,
not just the variables we care about.&lt;/p&gt;
&lt;p&gt;Here are some more states:&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; State &lt;/th&gt;&lt;th&gt; Got &lt;/th&gt;&lt;th&gt; Buffer &lt;/th&gt;&lt;th&gt; Sent &lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt; s0    &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s1    &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; H      &lt;/td&gt;&lt;td&gt; H    &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s2    &lt;/td&gt;&lt;td&gt; H   &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; H    &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s3    &lt;/td&gt;&lt;td&gt; H   &lt;/td&gt;&lt;td&gt; i      &lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s4    &lt;/td&gt;&lt;td&gt; Hi  &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s5    &lt;/td&gt;&lt;td&gt; iH  &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;A &lt;em&gt;behaviour&lt;/em&gt; is a sequence of states, representing some possible history of the world.
For example, &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s2, s3, s4 &amp;gt;&amp;gt;&lt;/code&gt; is a behaviour.
So is &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s5 &amp;gt;&amp;gt;&lt;/code&gt;, but not one we want.
The basic idea in TLA is to specify precisely which behaviours we want and which we don't want.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;state expression&lt;/em&gt; is an expression that can be evaluated in the context of some state.
For example, this defines &lt;code&gt;Integrity&lt;/code&gt; to be a state expression that is true whenever what we have got
so far matches what we wanted to send:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Take(m, i) is just the first i elements of message m. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Everything except the first i elements of message m. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Integrity&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; is true for all the states above except for &lt;code&gt;s5&lt;/code&gt;.
I added some helper operators &lt;code&gt;Take&lt;/code&gt; and &lt;code&gt;Drop&lt;/code&gt; here.
Sequences in TLA+ can be confusing because they are indexed from 1 rather than from 0,
so it is easy to make off-by-one errors.
These operators just use lengths, which we can all agree on.
In Python syntax, it would be written something like:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Integrity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;A &lt;em&gt;temporal formula&lt;/em&gt; is an expression that is evaluated in the context of a complete behaviour.
It can use the temporal operators, which include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; (that's supposed to look like a square) : &amp;quot;always&amp;quot;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; (that's supposed to look like a diamond) : &amp;quot;eventually&amp;quot;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;[] F&lt;/code&gt; is true if the expression &lt;code&gt;F&lt;/code&gt; is true at &lt;em&gt;every&lt;/em&gt; point in the behaviour.
&lt;code&gt;&amp;lt;&amp;gt; F&lt;/code&gt; is true if the expression &lt;code&gt;F&lt;/code&gt; is true at &lt;em&gt;any&lt;/em&gt; point in the behaviour.&lt;/p&gt;
&lt;p&gt;Messages we send should eventually arrive.
Here's one way to express that:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;TLA syntax is a bit odd. It's rather like LaTeX (which is not surprising: Lamport is also the &amp;quot;La&amp;quot; in LaTeX).
&lt;code&gt;\A&lt;/code&gt; means &amp;quot;for all&amp;quot; (rendered as an upside-down A).
So this says that for every number &lt;code&gt;x&lt;/code&gt;, it is always true that if we have sent &lt;code&gt;x&lt;/code&gt; bytes then
eventually we will have received at least &lt;code&gt;x&lt;/code&gt; bytes.&lt;/p&gt;
&lt;p&gt;This pattern of &lt;code&gt;[] (F =&amp;gt; &amp;lt;&amp;gt;G)&lt;/code&gt; is common enough that it has a shorter notation of &lt;code&gt;F ~&amp;gt; G&lt;/code&gt;, which
is read as &amp;quot;F (always) leads to G&amp;quot;. So, &lt;code&gt;Availability&lt;/code&gt; can also be written as:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We're only checking the lengths in &lt;code&gt;Availability&lt;/code&gt;, but combined with &lt;code&gt;Integrity&lt;/code&gt; that's enough to ensure
that we eventually receive what we want.
So ideally, we'd like to ensure that every possible behaviour of the vchan library will satisfy
the temporal formula &lt;code&gt;Properties&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integrity&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That &lt;code&gt;/\&lt;/code&gt; is &amp;quot;and&amp;quot; by the way, and &lt;code&gt;\/&lt;/code&gt; is &amp;quot;or&amp;quot;.
I did eventually start to be able to tell one from the other, though I still think &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; would be easier.
In case I forget to explain some syntax, &lt;a href=&quot;https://lamport.azurewebsites.net/tla/summary.pdf&quot;&gt;A Summary of TLA&lt;/a&gt; lists most of it.&lt;/p&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;It is hopefully easy to see that &lt;code&gt;Properties&lt;/code&gt; defines properties we want.
A user of vchan would be happy to see that these are things they can rely on.
But they don't provide much help to someone trying to implement vchan.
For that, TLA provides another way to specify behaviours.&lt;/p&gt;
&lt;p&gt;An &lt;em&gt;action&lt;/em&gt; in TLA is an expression that is evaluated in the context of a pair of states,
representing a single atomic step of the system.
For example:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The &lt;code&gt;Read&lt;/code&gt; action is true of a step if that step transfers all the data from &lt;code&gt;Buffer&lt;/code&gt; to &lt;code&gt;Got&lt;/code&gt;.
Unprimed variables (e.g. &lt;code&gt;Buffer&lt;/code&gt;) refer to the current state and primed ones (e.g. &lt;code&gt;Buffer'&lt;/code&gt;)
refer to the next state.
There's some more strange notation here too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We're using &lt;code&gt;/\&lt;/code&gt; to form a bulleted list here rather than as an infix operator.
This is indentation-sensitive. TLA also supports &lt;code&gt;\/&lt;/code&gt; lists in the same way.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\o&lt;/code&gt; is sequence concatenation (&lt;code&gt;+&lt;/code&gt; in Python).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; is the empty sequence (&lt;code&gt;[ ]&lt;/code&gt; in Python).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNCHANGED Sent&lt;/code&gt; means &lt;code&gt;Sent' = Sent&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Python, it might look like this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Actions correspond more closely to code than temporal formulas,
because they only talk about how the next state is related to the current one.&lt;/p&gt;
&lt;p&gt;This action only allows one thing: reading the whole buffer at once.
In the C implementation of vchan the receiving application can provide a buffer of any size
and the library will read at most enough bytes to fill the buffer.
To model that, we will need a slightly more flexible version:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This says that a step is a &lt;code&gt;Read&lt;/code&gt; step if there is any &lt;code&gt;n&lt;/code&gt; (in the range 1 to the length of the buffer)
such that we transferred &lt;code&gt;n&lt;/code&gt; bytes from the buffer. &lt;code&gt;\E&lt;/code&gt; means &amp;quot;there exists ...&amp;quot;.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Write&lt;/code&gt; action can be defined in a similar way:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;CONSTANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;A &lt;code&gt;CONSTANT&lt;/code&gt; defines a parameter (input) of the specification
(it's constant in the sense that it doesn't change between states).
A &lt;code&gt;Write&lt;/code&gt; operation adds some message &lt;code&gt;m&lt;/code&gt; to the buffer, and also adds a copy of it to &lt;code&gt;Sent&lt;/code&gt;
so we can talk about what the system is doing.
&lt;code&gt;Seq(Byte)&lt;/code&gt; is the set of all possible sequences of bytes,
and &lt;code&gt;\ {&amp;lt;&amp;lt; &amp;gt;&amp;gt;}&lt;/code&gt; just excludes the empty sequence.&lt;/p&gt;
&lt;p&gt;A step of the combined system is either a &lt;code&gt;Read&lt;/code&gt; step or a &lt;code&gt;Write&lt;/code&gt; step:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We also need to define what a valid starting state for the algorithm looks like:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Finally, we can put all this together to get a temporal formula for the algorithm:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Some more notation here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[Next]_vars&lt;/code&gt; (that's &lt;code&gt;Next&lt;/code&gt; in brackets with a subscript &lt;code&gt;vars&lt;/code&gt;) means
&lt;code&gt;Next \/ UNCHANGED vars&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;Init&lt;/code&gt; (a state expression) in a temporal formula means it must be
true for the &lt;em&gt;first&lt;/em&gt; state of the behaviour.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[][Action]_vars&lt;/code&gt; means that &lt;code&gt;[Action]_vars&lt;/code&gt; must be true for each step.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TLA syntax requires the &lt;code&gt;_vars&lt;/code&gt; subscript here.
This is because other things can be going on in the world beside our algorithm,
so it must always be possible to take a step without our algorithm doing anything.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spec&lt;/code&gt; defines behaviours just like &lt;code&gt;Properties&lt;/code&gt; does,
but in a way that makes it more obvious how to implement the protocol.&lt;/p&gt;
&lt;h3&gt;Correctness of Spec&lt;/h3&gt;
&lt;p&gt;Now we have definitions of &lt;code&gt;Spec&lt;/code&gt; and &lt;code&gt;Properties&lt;/code&gt;,
it makes sense to check that every behaviour of &lt;code&gt;Spec&lt;/code&gt; satisfies &lt;code&gt;Properties&lt;/code&gt;.
In Python terms, we want to check that all behaviours &lt;code&gt;b&lt;/code&gt; satisfy this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpecOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;i.e. either &lt;code&gt;b&lt;/code&gt; isn't a behaviour that could result from the actions of our algorithm or,
if it is, it satisfies &lt;code&gt;Properties&lt;/code&gt;. In TLA notation, we write this as:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SpecOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It's OK if a behaviour is allowed by &lt;code&gt;Properties&lt;/code&gt; but not by &lt;code&gt;Spec&lt;/code&gt;.
For example, the behaviour which goes straight from &lt;code&gt;Got=&amp;quot;&amp;quot;, Sent=&amp;quot;&amp;quot;&lt;/code&gt; to
&lt;code&gt;Got=&amp;quot;Hi&amp;quot;, Sent=&amp;quot;Hi&amp;quot;&lt;/code&gt; in one step meets our requirements, but it's not a
behaviour of &lt;code&gt;Spec&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The real implementation may itself further restrict &lt;code&gt;Spec&lt;/code&gt;.
For example, consider the behaviour &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s2 &amp;gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; State &lt;/th&gt;&lt;th&gt; Got &lt;/th&gt;&lt;th&gt; Buffer &lt;/th&gt;&lt;th&gt; Sent &lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt; s0    &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; Hi     &lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s1    &lt;/td&gt;&lt;td&gt; H   &lt;/td&gt;&lt;td&gt; i      &lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; s2    &lt;/td&gt;&lt;td&gt; Hi  &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt; Hi   &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The sender sends two bytes at once, but the reader reads them one at a time.
This &lt;em&gt;is&lt;/em&gt; a behaviour of the C implementation,
because the reading application can ask the library to read into a 1-byte buffer.
However, it is &lt;em&gt;not&lt;/em&gt; a behaviour of the OCaml implementation,
which gets to choose how much data to return to the application and will return both bytes together.&lt;/p&gt;
&lt;p&gt;That's fine.
We just need to show that &lt;code&gt;OCamlImpl =&amp;gt; Spec&lt;/code&gt; and &lt;code&gt;Spec =&amp;gt; Properties&lt;/code&gt; and we can deduce that
&lt;code&gt;OCamlImpl =&amp;gt; Properties&lt;/code&gt;.
This is, of course, the key purpose of a specification:
we only need to check that each implementation implements the specification,
not that each implementation directly provides the desired properties.&lt;/p&gt;
&lt;p&gt;It might seem strange that an implementation doesn't have to allow all the specified behaviours.
In fact, even the trivial specification &lt;code&gt;Spec == FALSE&lt;/code&gt; is considered to be a correct implementation of &lt;code&gt;Properties&lt;/code&gt;,
because it has no bad behaviours (no behaviours at all).
But that's OK.
Once the algorithm is running, it must have &lt;em&gt;some&lt;/em&gt; behaviour, even if that behaviour is to do nothing.
As the user of the library, you are responsible for checking that you can use it
(e.g. by ensuring that the &lt;code&gt;Init&lt;/code&gt; conditions are met).
An algorithm without any behaviours corresponds to a library you could never use,
not to one that goes wrong once it is running.&lt;/p&gt;
&lt;h3&gt;The model checker&lt;/h3&gt;
&lt;p&gt;Now comes the fun part: we can ask TLC (the TLA model checker) to check that &lt;code&gt;Spec =&amp;gt; Properties&lt;/code&gt;.
You do this by asking the toolbox to create a new model (I called mine &lt;code&gt;SpecOK&lt;/code&gt;) and setting &lt;code&gt;Spec&lt;/code&gt; as the
&amp;quot;behaviour spec&amp;quot;. It will prompt for a value for &lt;code&gt;BufferSize&lt;/code&gt;. I used &lt;code&gt;2&lt;/code&gt;.
There will be various things to fix up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To check &lt;code&gt;Write&lt;/code&gt;, TLC first tries to get every possible &lt;code&gt;Seq(Byte)&lt;/code&gt;, which is an infinite set.
I defined &lt;code&gt;MSG == Seq(Byte)&lt;/code&gt; and changed &lt;code&gt;Write&lt;/code&gt; to use &lt;code&gt;MSG&lt;/code&gt;.
I then added an alternative definition for &lt;code&gt;MSG&lt;/code&gt; in the model so that we only send messages of limited length.
In fact, my replacement &lt;code&gt;MSG&lt;/code&gt; ensures that &lt;code&gt;Sent&lt;/code&gt; will always just be an incrementing sequence (&lt;code&gt;&amp;lt;&amp;lt; 1, 2, 3, ... &amp;gt;&amp;gt;&lt;/code&gt;).
That's enough to check &lt;code&gt;Properties&lt;/code&gt;, and much quicker than checking every possible message.
&lt;/li&gt;
&lt;li&gt;The system can keep sending forever. I added a state constraint to the model: &lt;code&gt;Len(Sent) &amp;lt; 4&lt;/code&gt;
This tells TLC to stop considering any execution once this becomes false.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that, the model runs successfully.
This is a nice feature of TLA: instead of changing our specification to make it testable,
we keep the specification correct and just override some aspects of it in the model.
So, the specification says we can send any message, but the model only checks a few of them.&lt;/p&gt;
&lt;p&gt;Now we can add &lt;code&gt;Integrity&lt;/code&gt; as an invariant to check.
That passes, but it's good to double-check by changing the algorithm.
I changed &lt;code&gt;Read&lt;/code&gt; so that it doesn't clear the buffer, using &lt;code&gt;Buffer' = Drop(Buffer, 0)&lt;/code&gt;
(with &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;n&lt;/code&gt;).
Then TLC reports a counter-example (&amp;quot;Invariant Integrity is violated&amp;quot;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sender writes &lt;code&gt;&amp;lt;&amp;lt; 1, 2 &amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Buffer&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The reader reads one byte, to give &lt;code&gt;Got=1, Buffer=12, Sent=12&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The reader reads another byte, to give &lt;code&gt;Got=11, Buffer=12, Sent=12&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looks like it really was checking what we wanted.
It's good to be careful. If we'd accidentally added &lt;code&gt;Integrity&lt;/code&gt; as a &amp;quot;property&amp;quot; to check rather than
as an &amp;quot;invariant&amp;quot; then it would have interpreted it as a temporal formula and reported success just because
it &lt;em&gt;is&lt;/em&gt; true in the &lt;em&gt;initial&lt;/em&gt; state.&lt;/p&gt;
&lt;p&gt;One really nice feature of TLC is that (unlike a fuzz tester) it does a breadth-first search and therefore
finds minimal counter-examples for invariants.
The example above is therefore the quickest way to violate &lt;code&gt;Integrity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Checking &lt;code&gt;Availability&lt;/code&gt; complains because of the use of &lt;code&gt;Nat&lt;/code&gt; (we're asking it to check for every possible
length).
I replaced the &lt;code&gt;Nat&lt;/code&gt; with &lt;code&gt;AvailabilityNat&lt;/code&gt; and overrode that to be &lt;code&gt;0..4&lt;/code&gt; in the model.
It then complains &amp;quot;Temporal properties were violated&amp;quot; and shows an example where the sender wrote
some data and the reader never read it.&lt;/p&gt;
&lt;p&gt;The problem is, &lt;code&gt;[Next]_vars&lt;/code&gt; always allows us to do nothing.
To fix this, we can specify a &amp;quot;weak fairness&amp;quot; constraint.
&lt;code&gt;WF_vars(action)&lt;/code&gt;, says that we can't just stop forever with &lt;code&gt;action&lt;/code&gt; being always possible but never happening.
I updated &lt;code&gt;Spec&lt;/code&gt; to require the &lt;code&gt;Read&lt;/code&gt; action to be fair:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WF_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Again, care is needed here.
If we had specified &lt;code&gt;WF_vars(Next)&lt;/code&gt; then we would be forcing the sender to keep sending forever, which users of vchan are not required to do.
Worse, this would mean that every possible behaviour of the system would result in &lt;code&gt;Sent&lt;/code&gt; growing forever.
Every behaviour would therefore hit our &lt;code&gt;Len(Sent) &amp;lt; 4&lt;/code&gt; constraint and
TLC wouldn't consider it further.
That means that TLC would &lt;em&gt;never&lt;/em&gt; check any actual behaviour against &lt;code&gt;Availability&lt;/code&gt;,
and its reports of success would be meaningless!
Changing &lt;code&gt;Read&lt;/code&gt; to require &lt;code&gt;n \in 2..Len(Buffer)&lt;/code&gt; is a quick way to see that TLC is actually checking &lt;code&gt;Availability&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the complete spec so far: &lt;a href=&quot;https://roscidus.com/blog/images/tla/vchan1.pdf&quot;&gt;vchan1.pdf&lt;/a&gt; (&lt;a href=&quot;https://github.com/talex5/spec-vchan/commit/75a846d5c83d86ba7be42b5c3b9f98635bcc544d&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;The real vchan&lt;/h2&gt;
&lt;p&gt;The simple &lt;code&gt;Spec&lt;/code&gt; algorithm above has some limitations.
One obvious simplification is that &lt;code&gt;Buffer&lt;/code&gt; is just the sequence of bytes in transit, whereas in the real system it is a ring buffer, made up of an array of bytes along with the producer and consumer counters.
We could replace it with three separate variables to make that explicit.
However, ring buffers in Xen are well understood and I don't feel that it would make the specification any clearer
to include that.&lt;/p&gt;
&lt;p&gt;A more serious problem is that &lt;code&gt;Spec&lt;/code&gt; assumes that there is a way to perform the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; operations atomically.
Otherwise the real system would have behaviours not covered by the spec.
To implement the above &lt;code&gt;Spec&lt;/code&gt; correctly, you'd need some kind of lock.
The real vchan protocol is more complicated than &lt;code&gt;Spec&lt;/code&gt;, but avoids the need for a lock.&lt;/p&gt;
&lt;p&gt;The real system has more shared state than just &lt;code&gt;Buffer&lt;/code&gt;.
I added extra variables to the spec for each item of shared state in the C code, along with its initial value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SenderLive = TRUE&lt;/code&gt; (sender sets to FALSE to close connection)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReceiverLive = TRUE&lt;/code&gt; (receiver sets to FALSE to close connection)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NotifyWrite = TRUE&lt;/code&gt; (receiver wants to be notified of next write)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DataReadyInt = FALSE&lt;/code&gt; (sender has signalled receiver over event channel)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NotifyRead = FALSE&lt;/code&gt; (sender wants to be notified of next read)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpaceAvailableInt = FALSE&lt;/code&gt; (receiver has notified sender over event channel)
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;DataReadyInt&lt;/code&gt; represents the state of the receiver's event port.
The sender can make a Xen hypercall to set this and wake (or interrupt) the receiver.
I guess sending these events is somewhat slow,
because the &lt;code&gt;NotifyWrite&lt;/code&gt; system is used to avoid sending events unnecessarily.
Likewise, &lt;code&gt;SpaceAvailableInt&lt;/code&gt; is the sender's event port.&lt;/p&gt;
&lt;h3&gt;The algorithm&lt;/h3&gt;
&lt;p&gt;Here is my understanding of the protocol. On the sending side:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sending application asks to send some bytes.&lt;br/&gt;
We check whether the receiver has closed the channel and abort if so.
&lt;/li&gt;
&lt;li&gt;We check the amount of buffer space available.
&lt;/li&gt;
&lt;li&gt;If there isn't enough, we set &lt;code&gt;NotifyRead&lt;/code&gt; so the receiver will notify us when there is more.&lt;br/&gt;
We also check the space again after this, in case it changed while setting the flag.
&lt;/li&gt;
&lt;li&gt;If there is any space:
&lt;ul&gt;
&lt;li&gt;We write as much data as we can to the buffer.
&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;NotifyWrite&lt;/code&gt; flag is set, we clear it and notify the receiver of the write.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If we wrote everything, we return success.
&lt;/li&gt;
&lt;li&gt;Otherwise, we wait to be notified of more space.
&lt;/li&gt;
&lt;li&gt;We check whether the receiver has closed the channel.&lt;br/&gt;
If so we abort. Otherwise, we go back to step 2.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the receiving side:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The receiving application asks us to read up to some amount of data.
&lt;/li&gt;
&lt;li&gt;We check the amount of data available in the buffer.
&lt;/li&gt;
&lt;li&gt;If there isn't as much as requested, we set &lt;code&gt;NotifyWrite&lt;/code&gt; so the sender will notify us when there is.&lt;br/&gt;
We also check the space again after this, in case it changed while setting the flag.
&lt;/li&gt;
&lt;li&gt;If there is any data, we read up to the amount requested.&lt;br/&gt;
If the &lt;code&gt;NotifyRead&lt;/code&gt; flag is set, we clear it and notify the sender of the new space.&lt;br/&gt;
We return success to the application (even if we didn't get as much as requested).
&lt;/li&gt;
&lt;li&gt;Otherwise (if there was no data), we check whether the sender has closed the connection.
&lt;/li&gt;
&lt;li&gt;If not (if the connection is still open), we wait to be notified of more data,
and then go back to step 2.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either side can close the connection by clearing their &amp;quot;live&amp;quot; flag and signalling
the other side. I assumed there is also some process-local way that the close operation
can notify its own side if it's currently blocked.&lt;/p&gt;
&lt;p&gt;To make expressing this kind of step-by-step algorithm easier,
TLA+ provides a programming-language-like syntax called PlusCal.
It then translates PlusCal into TLA actions.&lt;/p&gt;
&lt;p&gt;Confusingly, there are two different syntaxes for PlusCal: Pascal style and C style.
This means that, when you search for examples on the web,
there is a 50% chance they won't work because they're using the other flavour.
I started with the Pascal one because that was the first example I found, but switched to C-style later because it was more compact.&lt;/p&gt;
&lt;p&gt;Here is my attempt at describing the sender algorithm above in PlusCal:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWrite&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Our idea of how much free space is available.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* The data we haven't sent yet.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Everything we were asked to send.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;\* Remember we wanted to send this&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_request_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_write_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_recheck_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_write_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_check_notify_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Atomic test-and-clear&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_notify_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Signal receiver&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_blocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_check_recv_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The labels (e.g. &lt;code&gt;sender_request_notify:&lt;/code&gt;) represent points in the program where other actions can happen.
Everything between two labels is considered to be atomic.
I &lt;a href=&quot;https://github.com/talex5/spec-vchan/blob/d6e1c803820c952c53314da47270812e2fe88e79/vchan.tla#L654-L692&quot;&gt;checked&lt;/a&gt; that every block of code between labels accesses only one shared variable.
This means that the real system can't see any states that we don't consider.
The toolbox doesn't provide any help with this; you just have to check manually.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sender_ready&lt;/code&gt; label represents a state where the client application hasn't yet decided to send any data.
Its label is tagged with &lt;code&gt;-&lt;/code&gt; to indicate that fairness doesn't apply here, because the protocol doesn't
require applications to keep sending more data forever.
The other steps are fair, because once we've decided to send something we should keep going.&lt;/p&gt;
&lt;p&gt;Taking a step from &lt;code&gt;sender_ready&lt;/code&gt; to &lt;code&gt;sender_write&lt;/code&gt; corresponds to the vchan library's write function
being called with some argument &lt;code&gt;m&lt;/code&gt;.
The &lt;code&gt;with (m \in MSG)&lt;/code&gt; says that &lt;code&gt;m&lt;/code&gt; could be any message from the set &lt;code&gt;MSG&lt;/code&gt;.
TLA also contains a &lt;code&gt;CHOOSE&lt;/code&gt; operator that looks like it might do the same thing, but it doesn't.
When you use &lt;code&gt;with&lt;/code&gt;, you are saying that TLC should check &lt;em&gt;all&lt;/em&gt; possible messages.
When you use &lt;code&gt;CHOOSE&lt;/code&gt;, you are saying that it doesn't matter which message TLC tries (and it will always try the
same one).
Or, in terms of the specification, a &lt;code&gt;CHOOSE&lt;/code&gt; would say that applications can only ever send one particular message, without telling you what that message is.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;sender_write_data&lt;/code&gt;, we set &lt;code&gt;free := 0&lt;/code&gt; for no obvious reason.
This is just to reduce the number of states that the model checker needs to explore,
since we don't care about its value after this point.&lt;/p&gt;
&lt;p&gt;Some of the code is a little awkward because I had to put things in &lt;code&gt;else&lt;/code&gt; branches that would more naturally go after the whole &lt;code&gt;if&lt;/code&gt; block, but the translator wouldn't let me do that.
The use of semi-colons is also a bit confusing: the PlusCal-to-TLA translator requires them after a closing brace in some places, but the PDF generator messes up the indentation if you include them.&lt;/p&gt;
&lt;p&gt;Here's how the code block starting at &lt;code&gt;sender_request_notify&lt;/code&gt; gets translated into a TLA action:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_request_notify&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;k k-Conditional&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k k-Conditional&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k k-Conditional&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;pc&lt;/code&gt; is a mapping from process ID to the label where that process is currently executing.
So &lt;code&gt;sender_request_notify&lt;/code&gt; can only be performed when the SenderWriteID process is
at the &lt;code&gt;sender_request_notify&lt;/code&gt; label.
Afterwards &lt;code&gt;pc[SenderWriteID]&lt;/code&gt; will either be at &lt;code&gt;sender_write_data&lt;/code&gt; or &lt;code&gt;sender_recheck_len&lt;/code&gt;
(if there wasn't enough space for the whole message).&lt;/p&gt;
&lt;p&gt;Here's the code for the receiver:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* The amount of data we think the buffer contains.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* The amount of data the user wants us to read.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Pseudo-variable recording all data ever received by receiver.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_recheck_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_check_notify_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;\* (atomic test-and-clear)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_notify_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;\* Return success&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Return success&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_await_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It's quite similar to before.
&lt;code&gt;recv_ready&lt;/code&gt; corresponds to a state where the application hasn't yet called &lt;code&gt;read&lt;/code&gt;.
When it does, we take &lt;code&gt;n&lt;/code&gt; (the maximum number of bytes to read) as an argument and
store it in the local variable &lt;code&gt;want&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: you can use the C library in blocking or non-blocking mode.
In blocking mode, a &lt;code&gt;write&lt;/code&gt; (or &lt;code&gt;read&lt;/code&gt;) waits until data is sent (or received).
In non-blocking mode, it returns a special code to the application indicating that it needs to wait.
The application then does the waiting itself and then calls the library again.
I think the specification above covers both cases, depending on whether you think of
&lt;code&gt;sender_blocked&lt;/code&gt; and &lt;code&gt;recv_await_data&lt;/code&gt; as representing code inside or outside of the library.&lt;/p&gt;
&lt;p&gt;We also need a way to close the channel.
It wasn't clear to me, from looking at the C headers, when exactly you're allowed to do that.
I &lt;em&gt;think&lt;/em&gt; that if you had a multi-threaded program and you called the close function while the write
function was blocked, it would unblock and return.
But if you happened to call it at the wrong time, it would try to use a closed file descriptor and fail
(or read from the wrong one).
So I guess it's single threaded, and you should use the non-blocking mode if you want to cancel things.&lt;/p&gt;
&lt;p&gt;That means that the sender can close only when it is at &lt;code&gt;sender_ready&lt;/code&gt; or &lt;code&gt;sender_blocked&lt;/code&gt;,
and similarly for the receiver.
The situation with the OCaml code is the same, because it is cooperatively threaded and so the close
operation can only be called while blocked or idle.
However, I decided to make the specification more general and allow for closing at any point
by modelling closing as separate processes:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Clear liveness flag&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Signal receiver&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;recv_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;\* Clear liveness flag&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;recv_notify_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Signal sender&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Again, the processes are &amp;quot;fair&amp;quot; because once we start closing we should finish,
but the initial labels are tagged with &amp;quot;-&amp;quot; to disable fairness there: it's OK if
you keep a vchan open forever.&lt;/p&gt;
&lt;p&gt;There's a slight naming problem here.
The PlusCal translator names the actions it generates after the &lt;em&gt;starting&lt;/em&gt; state of the action.
So &lt;em&gt;sender_open&lt;/em&gt; is the action that moves &lt;em&gt;from&lt;/em&gt; the &lt;em&gt;sender_open&lt;/em&gt; label.
That is, the &lt;em&gt;sender_open&lt;/em&gt; action actually closes the connection!&lt;/p&gt;
&lt;p&gt;Finally, we share the event channel with the buffer going in the other direction, so we might
get notifications that are nothing to do with us.
To ensure we handle that, I added another process that can send events at any time:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpuriousInterrupts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpuriousID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;spurious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;either/or&lt;/code&gt; says that we need to consider both possibilities.
This process isn't marked fair, because we can't rely these interrupts coming.
But we do have to handle them when they happen.&lt;/p&gt;
&lt;h3&gt;Testing the full spec&lt;/h3&gt;
&lt;p&gt;PlusCal code is written in a specially-formatted comment block, and you have to press Ctrl-T to
generate (or update) then TLA translation before running the model checker.&lt;/p&gt;
&lt;p&gt;Be aware that the TLA Toolbox is a bit unreliable about keyboard short-cuts.
While typing into the editor always works, short-cuts such as Ctrl-S (save) sometimes get disconnected.
So you think you're doing &amp;quot;edit/save/translate/save/check&amp;quot; cycles, but really you're just checking some old version over and over again.
You can avoid this by always running the model checker with the keyboard shortcut too, since that always seems to fail at the same time as the others.
Focussing a different part of the GUI and then clicking back in the editor again fixes everything for a while.&lt;/p&gt;
&lt;p&gt;Anyway, running our model on the new spec shows that &lt;code&gt;Integrity&lt;/code&gt; is still OK.
However, the &lt;code&gt;Availability&lt;/code&gt; check fails with the following counter-example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sender writes &lt;code&gt;&amp;lt;&amp;lt; 1 &amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Buffer&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The sender closes the connection.
&lt;/li&gt;
&lt;li&gt;The receiver closes the connection.
&lt;/li&gt;
&lt;li&gt;All processes come to a stop, but the data never arrived.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We need to update &lt;code&gt;Availability&lt;/code&gt; to consider the effects of closing connections.
And at this point, I'm very unsure what vchan is intended to do.
We could say:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That passes.
But vchan describes itself as being like a Unix socket.
If you write to a Unix socket and then close it, you still expect the data to be delivered.
So actually I tried this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This says that if a sender write operation completes successfully (we're back at &lt;code&gt;sender_ready&lt;/code&gt;)
and at that point the sender hasn't closed the connection, then the receiver will eventually receive
the data (or close its end).&lt;/p&gt;
&lt;p&gt;That is how I would expect it to behave.
But TLC reports that the new spec does &lt;em&gt;not&lt;/em&gt; satisfy this, giving this example (simplified - there are 16 steps in total):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The receiver starts reading. It finds that the buffer is empty.
&lt;/li&gt;
&lt;li&gt;The sender writes some data to &lt;code&gt;Buffer&lt;/code&gt; and returns to &lt;code&gt;sender_ready&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;The sender closes the channel.
&lt;/li&gt;
&lt;li&gt;The receiver sees that the connection is closed and stops.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Is this a bug? Without a specification, it's impossible to say.
Maybe vchan was never intended to ensure delivery once the sender has closed its end.
But this case only happens if you're very unlucky about the scheduling.
If the receiving application calls &lt;code&gt;read&lt;/code&gt; when the sender has closed the connection but there is data
available then the C code &lt;em&gt;does&lt;/em&gt; return the data in that case.
It's only if the sender happens to close the connection just after the receiver has checked the buffer and just before it checks the close flag that this happens.&lt;/p&gt;
&lt;p&gt;It's also easy to fix.
I changed the code in the receiver to do a final check on the buffer before giving up:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_final_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;With that change, we can be sure that data sent while the connection is open will always be delivered
(provided only that the receiver doesn't close the connection itself).
If you spotted this issue yourself while you were reviewing the code earlier, then well done!&lt;/p&gt;
&lt;p&gt;Note that when TLC finds a problem with a temporal property (such as &lt;code&gt;Availability&lt;/code&gt;),
it does not necessarily find the shortest example first.
I changed the limit on &lt;code&gt;Sent&lt;/code&gt; to &lt;code&gt;Len(Sent) &amp;lt; 2&lt;/code&gt; and added an action constraint of &lt;code&gt;~SpuriousInterrupts&lt;/code&gt;
to get a simpler example, with only 1 byte being sent and no spurious interrupts.&lt;/p&gt;
&lt;h3&gt;Some odd things&lt;/h3&gt;
&lt;p&gt;I noticed a couple of other odd things, which I thought I'd mention.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;NotifyWrite&lt;/code&gt; is initialised to &lt;code&gt;TRUE&lt;/code&gt;, which seemed unnecessary.
We can initialise it to &lt;code&gt;FALSE&lt;/code&gt; instead and everything still works.
We can even initialise it with &lt;code&gt;NotifyWrite \in {TRUE, FALSE}&lt;/code&gt; to allow either behaviour,
and thus test that old programs that followed the original version of the spec still work
with either behaviour.&lt;/p&gt;
&lt;p&gt;That's a nice advantage of using a specification language.
Saying &amp;quot;the code is the spec&amp;quot; becomes less useful as you build up more and more versions of the code!&lt;/p&gt;
&lt;p&gt;However, because there was no spec before, we can't be sure that existing programs do follow it.
And, in fact, I found that QubesDB uses the vchan library in a different and unexpected way.
Instead of calling read, and then waiting if libvchan says to, QubesDB blocks first in all cases, and
then calls the read function once it gets an event.&lt;/p&gt;
&lt;p&gt;We can document that by adding an extra step at the start of ReceiverRead:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;\* (recommended)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;\* (QubesDB does this)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_await_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Then TLC shows that &lt;code&gt;NotifyWrite&lt;/code&gt; cannot start as &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second odd thing is that the receiver sets &lt;code&gt;NotifyRead&lt;/code&gt; whenever there isn't enough data available
to fill the application's buffer completely.
But usually when you do a read operation you just provide a buffer large enough for the largest likely message.
It would probably make more sense to set &lt;code&gt;NotifyWrite&lt;/code&gt; only when the buffer is completely empty.
After checking the current version of the algorithm, I changed the specification to allow either behaviour.&lt;/p&gt;
&lt;h3&gt;Why does vchan work?&lt;/h3&gt;
&lt;p&gt;At this point, we have specified what vchan should do and how it does it.
We have also checked that it does do this, at least for messages up to 3 bytes long with a buffer size of 2.
That doesn't sound like much, but we still checked 79,288 distinct states, with behaviours up to 38 steps long.
This would be a perfectly reasonable place to declare the specification (and blog post) finished.&lt;/p&gt;
&lt;p&gt;However, TLA has some other interesting abilities.
In particular, it provides a very interesting technique to help discover &lt;em&gt;why&lt;/em&gt; the algorithm works.&lt;/p&gt;
&lt;p&gt;We'll start with &lt;code&gt;Integrity&lt;/code&gt;.
We would like to argue as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Integrity&lt;/code&gt; is true in any initial state (i.e. &lt;code&gt;Init =&amp;gt; Integrity&lt;/code&gt;).
&lt;/li&gt;
&lt;li&gt;Any &lt;code&gt;Next&lt;/code&gt; step preserves &lt;code&gt;Integrity&lt;/code&gt; (i.e. &lt;code&gt;Integrity /\ Next =&amp;gt; Integrity'&lt;/code&gt;).
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then it would just be a matter looking at each possible action that makes up &lt;code&gt;Next&lt;/code&gt; and
checking that each one individually preserves &lt;code&gt;Integrity&lt;/code&gt;.
However, we can't do this with &lt;code&gt;Integrity&lt;/code&gt; because (2) isn't true.
For example, the state &lt;code&gt;{ Got: &amp;quot;&amp;quot;, Buffer: &amp;quot;21&amp;quot;, Sent: &amp;quot;12&amp;quot; }&lt;/code&gt; satisfies &lt;code&gt;Integrity&lt;/code&gt;,
but if we take a read step then the new state won't.
Instead, we have to argue &amp;quot;If we take a &lt;code&gt;Next&lt;/code&gt; step in any reachable state then &lt;code&gt;Integrity'&lt;/code&gt;&amp;quot;,
but that's very difficult because how do we know whether a state is reachable without searching them all?&lt;/p&gt;
&lt;p&gt;So the idea is to make a stronger version of &lt;code&gt;Integrity&lt;/code&gt;, called &lt;code&gt;IntegrityI&lt;/code&gt;, which does what we want.
&lt;code&gt;IntegrityI&lt;/code&gt; is called an &lt;em&gt;inductive invariant&lt;/em&gt;.
The first step is fairly obvious - I began with:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; just said that &lt;code&gt;Got&lt;/code&gt; is a prefix of &lt;code&gt;Sent&lt;/code&gt;.
This says specifically that the rest is &lt;code&gt;Buffer \o msg&lt;/code&gt; - the data currently being transmitted and the data yet to be transmitted.&lt;/p&gt;
&lt;p&gt;We can ask TLC to check &lt;code&gt;Init /\ [][Next]_vars =&amp;gt; []IntegrityI&lt;/code&gt; to check that it is an invariant, as before.
It does that by finding all the &lt;code&gt;Init&lt;/code&gt; states and then taking &lt;code&gt;Next&lt;/code&gt; steps to find all reachable states.
But we can also ask it to check &lt;code&gt;IntegrityI /\ [][Next]_vars =&amp;gt; []IntegrityI&lt;/code&gt;.
That is, the same thing but starting from any state matching &lt;code&gt;IntegrityI&lt;/code&gt; instead of &lt;code&gt;Init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I created a new model (&lt;code&gt;IntegrityI&lt;/code&gt;) to do that.
It reports a few technical problems at the start because it doesn't know the types of anything.
For example, it can't choose initial values for &lt;code&gt;SenderLive&lt;/code&gt; without knowing that &lt;code&gt;SenderLive&lt;/code&gt; is a boolean.
I added a &lt;code&gt;TypeOK&lt;/code&gt; state expression that gives the expected type of every variable:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxWriteLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We also need to tell it all the possible states of &lt;code&gt;pc&lt;/code&gt; (which says which label each process it at):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_reading&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_got_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_final_check&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;spurious&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;You might imagine that the PlusCal translator would generate that for you, but it doesn't.
We also need to override &lt;code&gt;MESSAGE&lt;/code&gt; with &lt;code&gt;FINITE_MESSAGE(n)&lt;/code&gt; for some &lt;code&gt;n&lt;/code&gt; (I used &lt;code&gt;2&lt;/code&gt;).
Otherwise, it can't enumerate all possible messages.
Now we have:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;With that out of the way, TLC starts finding real problems
(that is, examples showing that &lt;code&gt;IntegrityI /\ Next =&amp;gt; IntegrityI'&lt;/code&gt; isn't true).
First, &lt;code&gt;recv_read_data&lt;/code&gt; would do an out-of-bounds read if &lt;code&gt;have = 1&lt;/code&gt; and &lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt;.
Our job is to explain why that isn't a valid state.
We can fix it with an extra constraint:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;(note: that &lt;code&gt;=&amp;gt;&lt;/code&gt; is &amp;quot;implies&amp;quot;, while the &lt;code&gt;&amp;lt;=&lt;/code&gt; is &amp;quot;less-than-or-equal-to&amp;quot;)&lt;/p&gt;
&lt;p&gt;Now it complains that if we do &lt;code&gt;recv_got_len&lt;/code&gt; with &lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;, have = 1, want = 0&lt;/code&gt; then we end up in &lt;code&gt;recv_read_data&lt;/code&gt; with
&lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;, have = 1&lt;/code&gt;, and we have to explain why &lt;em&gt;that&lt;/em&gt; can't happen and so on.&lt;/p&gt;
&lt;p&gt;Because TLC searches breadth-first, the examples it finds never have more than 2 states.
You just have to explain why the first state can't happen in the real system.
Eventually, you get a big ugly pile of constraints, which you then think about for a bit and simply.
I ended up with:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It's a good idea to check the final &lt;code&gt;IntegrityI&lt;/code&gt; with the original &lt;code&gt;SpecOK&lt;/code&gt; model,
just to check it really is an invariant.&lt;/p&gt;
&lt;p&gt;So, in summary, &lt;code&gt;Integrity&lt;/code&gt; is always true because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sent&lt;/code&gt; is always the concatenation of &lt;code&gt;Got&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;msg&lt;/code&gt;.
That's fairly obvious, because &lt;code&gt;sender_ready&lt;/code&gt; sets &lt;code&gt;msg&lt;/code&gt; and appends the same thing to &lt;code&gt;Sent&lt;/code&gt;,
and the other steps (&lt;code&gt;sender_write_data&lt;/code&gt; and &lt;code&gt;recv_read_data&lt;/code&gt;) just transfer some bytes from
the start of one variable to the end of another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although, like all local information, the receiver's &lt;code&gt;have&lt;/code&gt; variable might be out-of-date,
there must be &lt;em&gt;at least&lt;/em&gt; that much data in the buffer, because the sender process will only
have added more, not removed any. This is sufficient to ensure that we never do an
out-of-range read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Likewise, the sender's &lt;code&gt;free&lt;/code&gt; variable is a lower bound on the true amount of free space,
because the receiver only ever creates more space. We will therefore never write beyond the
free space.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this ability to explain why an algorithm works, by being shown examples where the inductive property
doesn't hold, is a really nice feature of TLA.
Inductive invariants are useful as a first step towards writing a proof,
but I think they're valuable even on their own.
If you're documenting your own algorithm,
this process will get you to explain your own reasons for believing it works
(I &lt;a href=&quot;https://github.com/mirage/capnp-rpc/pull/149&quot;&gt;tried it&lt;/a&gt; on a simple algorithm in my own code and it seemed helpful).&lt;/p&gt;
&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Originally, I had the &lt;code&gt;free&lt;/code&gt; and &lt;code&gt;have&lt;/code&gt; constraints depending on &lt;code&gt;pc&lt;/code&gt;.
However, the algorithm sets them to zero when not in use so it turns out they're always true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IntegrityI&lt;/code&gt; matches 532,224 states, even with a maximum &lt;code&gt;Sent&lt;/code&gt; length of 1, but it passes!
There are some games you can play to speed things up;
see &lt;a href=&quot;https://lamport.azurewebsites.net/tla/inductive-invariant.pdf&quot;&gt;Using TLC to Check Inductive Invariance&lt;/a&gt; for some suggestions
(I only discovered that while writing this up).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Proving Integrity&lt;/h3&gt;
&lt;p&gt;TLA provides a syntax for writing proofs,
and integrates with &lt;a href=&quot;https://tla.msr-inria.inria.fr/tlaps/content/Home.html&quot;&gt;TLAPS&lt;/a&gt; (the &lt;em&gt;TLA+ Proof System&lt;/em&gt;) to allow them to be checked automatically.&lt;/p&gt;
&lt;p&gt;Proving &lt;code&gt;IntegrityI&lt;/code&gt; is just a matter of showing that &lt;code&gt;Init =&amp;gt; IntegrityI&lt;/code&gt; and that it is preserved
by any possible &lt;code&gt;[Next]_vars&lt;/code&gt; step.
To do that, we consider each action of &lt;code&gt;Next&lt;/code&gt; individually, which is long but simple enough.&lt;/p&gt;
&lt;p&gt;I was able to prove it, but the &lt;code&gt;recv_read_data&lt;/code&gt; action was a little difficult
because we don't know that &lt;code&gt;want &amp;gt; 0&lt;/code&gt; at that point, so we have to do some extra work
to prove that transferring 0 bytes works, even though the real system never does that.&lt;/p&gt;
&lt;p&gt;I therefore added an extra condition to &lt;code&gt;IntegrityI&lt;/code&gt; that &lt;code&gt;want&lt;/code&gt; is non-zero whenever it's in use,
and also conditions about &lt;code&gt;have&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; being 0 when not in use, for completeness:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                          &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                          &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_got_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;h3&gt;Availability&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; was quite easy to prove, but I had more trouble trying to explain &lt;code&gt;Availability&lt;/code&gt;.
One way to start would be to add &lt;code&gt;Availability&lt;/code&gt; as a property to check to the &lt;code&gt;IntegrityI&lt;/code&gt; model.
However, it takes a while to check properties as it does them at the end, and the examples
it finds may have several steps (it took 1m15s to find a counter-example for me).&lt;/p&gt;
&lt;p&gt;Here's a faster way (37s).
The algorithm will deadlock if both sender and receiver are in their blocked states and neither
interrupt is pending, so I made a new invariant, &lt;code&gt;I&lt;/code&gt;, which says that deadlock can't happen:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;I discovered some obvious facts about closing the connection.
For example, the &lt;code&gt;SenderLive&lt;/code&gt; flag is set if and only if the sender's close thread hasn't done anything.
I've put them all together in &lt;code&gt;CloseOK&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Some obvious facts about shutting down connections. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* An endpoint is live iff its close thread hasn't done anything:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_open&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_open&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* The send and receive loops don't terminate unless someone has closed the connection:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_final_check&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the receiver closed the connection then we will get (or have got) the signal:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;But I had problems with other examples TLC showed me, and
I realised that I didn't actually know why this algorithm doesn't deadlock.&lt;/p&gt;
&lt;p&gt;Intuitively it seems clear enough:
the sender puts data in the buffer when there's space and notifies the receiver,
and the receiver reads it and notifies the writer.
What could go wrong?
But both processes are working with information that can be out-of-date.
By the time the sender decides to block because the buffer looked full, the buffer might be empty.
And by the time the receiver decides to block because it looked empty, it might be full.&lt;/p&gt;
&lt;p&gt;Maybe you already saw why it works from the C code, or the algorithm above,
but it took me a while to figure it out!
I eventually ended up with an invariant of the form:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SendMayBlock&lt;/span&gt;    &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceWakeupComing&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiveMayBlock&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWakeupComing&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;SendMayBlock&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt; if we're in a state that may lead to being blocked without checking the
buffer's free space again. Likewise, &lt;code&gt;ReceiveMayBlock&lt;/code&gt; indicates that the receiver might block.
&lt;code&gt;SpaceWakeupComing&lt;/code&gt; and &lt;code&gt;DataWakeupComing&lt;/code&gt; predict whether we're going to get an interrupt.
The idea is that if we're going to block, we need to be sure we'll be woken up.
It's a bit ugly, though, e.g.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;DataWakeupComing&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Event sent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Event being sent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Event requested and ...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Sender can see receiver is still alive and ...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceWakeupComing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;It did pass my model that tested sending one byte, and I decided to try a proof.
Well, it didn't work.
The problem seems to be that &lt;code&gt;DataWakeupComing&lt;/code&gt; and &lt;code&gt;SpaceWakeupComing&lt;/code&gt; are really mutually recursive.
The reader will wake up if the sender wakes it, but the sender might be blocked, or about to block.
That's OK though, as long as the receiver will wake it, which it will do, once the sender wakes it...&lt;/p&gt;
&lt;p&gt;You've probably already figured it out, but I thought I'd document my confusion.
It occurred to me that although each process might have out-of-date information,
that could be fine as long as at any one moment one of them was right.
The last process to update the buffer must know how full it is,
so one of them must have correct information at any given time, and that should be enough to avoid deadlock.&lt;/p&gt;
&lt;p&gt;That didn't work either.
When you're at a proof step and can't see why it's correct, you can ask TLC to show you an example.
e.g. if you're stuck trying to prove that &lt;code&gt;sender_request_notify&lt;/code&gt; preserves &lt;code&gt;I&lt;/code&gt; when the
receiver is at &lt;code&gt;recv_ready&lt;/code&gt;, the buffer is full, and &lt;code&gt;ReceiverLive = FALSE&lt;/code&gt;,
you can ask for an example of that:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;You then create a new model that searches &lt;code&gt;Example /\ [][Next]_vars&lt;/code&gt; and tests &lt;code&gt;I&lt;/code&gt;.
As long as &lt;code&gt;Example&lt;/code&gt; has several constraints, you can use a much larger model for this.
I also ask it to check the property &lt;code&gt;[][FALSE]_vars&lt;/code&gt;, which means it will show any step starting from &lt;code&gt;Example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It quickly became clear what was wrong: it is quite possible that neither process is up-to-date.
If both processes see the buffer contains &lt;code&gt;X&lt;/code&gt; bytes of data, and the sender sends &lt;code&gt;Y&lt;/code&gt; bytes and the receiver reads &lt;code&gt;Z&lt;/code&gt; bytes, then the sender will think there are &lt;code&gt;X + Y&lt;/code&gt; bytes in the buffer and the receiver will think there are &lt;code&gt;X - Z&lt;/code&gt; bytes, and neither is correct.
My original 1-byte buffer was just too small to find a counter-example.&lt;/p&gt;
&lt;p&gt;The real reason why vchan works is actually rather obvious.
I don't know why I didn't see it earlier.
But eventually it occurred to me that I could make use of &lt;code&gt;Got&lt;/code&gt; and &lt;code&gt;Sent&lt;/code&gt;.
I defined &lt;code&gt;WriteLimit&lt;/code&gt; to be the total number of bytes that the sender would write before blocking,
if the receiver never did anything further.
And I defined &lt;code&gt;ReadLimit&lt;/code&gt; to be the total number of bytes that the receiver would read if the sender
never did anything else.&lt;/p&gt;
&lt;p&gt;Did I define these limits correctly?
It's easy to ask TLC to check some extra properties while it's running.
For example, I used this to check that &lt;code&gt;ReadLimit&lt;/code&gt; behaves sensibly:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;ReadLimitCorrect&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We will eventually receive what ReadLimit promises:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WF_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* ReadLimit can only decrease if we decide to shut down:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* ReceiverRead steps don't change the read limit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Because &lt;code&gt;ReadLimit&lt;/code&gt; is defined in terms of what it does when no other processes run,
this property should ideally be tested in a model without the fairness conditions
(i.e. just &lt;code&gt;Init /\ [][Next]_vars&lt;/code&gt;).
Otherwise, fairness may force the sender to perform a step.
We still want to allow other steps, though, to show that &lt;code&gt;ReadLimit&lt;/code&gt; is a lower bound.&lt;/p&gt;
&lt;p&gt;With this, we can argue that e.g. a 2-byte buffer will eventually transfer 3 bytes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The receiver will eventually read 3 bytes as long as the sender eventually sends 3 bytes.
&lt;/li&gt;
&lt;li&gt;The sender will eventually send 3, if the receiver reads at least 1.
&lt;/li&gt;
&lt;li&gt;The receiver will read 1 if the sender sends at least 1.
&lt;/li&gt;
&lt;li&gt;The sender will send 1 if the reader has read at least 0 bytes, which is always true.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By this point, I was learning to be more cautious before trying a proof,
so I added some new models to check this idea further.
One prevents the sender from ever closing the connection and the other prevents the receiver from ever closing.
That reduces the number of states to consider and I was able to check a slightly larger model.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the reader is stuck, but data is available, the sender will unblock it:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderShouldBeUnblocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* The sender is going to write more:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The sender is about to increase ReadLimit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The sender is about to notify us of shutdown:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the writer is stuck, but there is now space available, the receiver will unblock it:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriterShouldBeUnblocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* The reader is going to read more:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The reader is about to increase WriteLimit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The receiver is about to notify us of shutdown:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;If a process is on a path to being blocked then it must have set its notify flag.
&lt;code&gt;NotifyFlagsCorrect&lt;/code&gt; says that in that case, the flag it still set, or the interrupt has been sent,
or the other process is just about to trigger the interrupt.&lt;/p&gt;
&lt;p&gt;I managed to use that to prove that the sender's steps preserved &lt;code&gt;I&lt;/code&gt;,
but I needed a little extra to finish the receiver proof.
At this point, I finally spotted the obvious invariant (which you, no doubt, saw all along):
whenever &lt;code&gt;NotifyRead&lt;/code&gt; is still set, the sender has accurate information about the buffer.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;c&quot;&gt;\* The sender has accurate information about the buffer:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;c&quot;&gt;\* Or the flag is being cleared right now:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That's pretty obvious, isn't it?
The sender checks the buffer after setting the flag, so it must have accurate information at that point.
The receiver clears the flag after reading from the buffer (which invalidates the sender's information).&lt;/p&gt;
&lt;p&gt;Now I had a dilemma.
There was obviously going to be a matching property about &lt;code&gt;NotifyWrite&lt;/code&gt;.
Should I add that, or continue with just this?
I was nearly done, so I continued and finished off the proofs.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;I&lt;/code&gt; proved, I was able to prove some other nice things quite easily:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That says that, whenever the sender is idle or blocked, the receiver will read everything sent so far,
without any further help from the sender. And:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That says that whenever the receiver is blocked, the sender can fill the buffer.
That's pretty nice.
It would be possible to make a vchan system that e.g. could only send 1 byte at a time and still
prove it couldn't deadlock and would always deliver data,
but here we have shown that the algorithm can use the whole buffer.
At least, that's what these theorems say as long as you believe that &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; are defined correctly.&lt;/p&gt;
&lt;p&gt;With the proof complete, I then went back and deleted all the stuff about &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; from &lt;code&gt;I&lt;/code&gt;
and started again with just the new rules about &lt;code&gt;NotifyRead&lt;/code&gt; and &lt;code&gt;NotifyWrite&lt;/code&gt;.
Instead of using &lt;code&gt;WriteLimit = Len(Got) + BufferSize&lt;/code&gt; to indicate that the sender has accurate information,
I made a new &lt;code&gt;SenderInfoAccurate&lt;/code&gt; that just returns &lt;code&gt;TRUE&lt;/code&gt; whenever the sender will fill the buffer without further help.
That avoids some unnecessary arithmetic, which TLAPS needs a lot of help with.&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* The sender's information is accurate if whenever it is going to block, the buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   really is full. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We have accurate information:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* In these states, we're going to check the buffer before blocking:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If we've been signalled, we'll immediately wake next time we try to block:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We're about to write some data:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;\* But we won't need to block&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If we wrote all the data we intended to, we'll return without blocking:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;By talking about accuracy instead of the write limit, I was also able to include &amp;quot;Done&amp;quot; in with
the other happy cases.
Before, that had to be treated as a possible problem because the sender can't use the full buffer when it's Done.&lt;/p&gt;
&lt;p&gt;With this change, the proof of &lt;code&gt;Spec =&amp;gt; []I&lt;/code&gt; became much simpler (384 lines shorter).
And most of the remaining steps were trivial.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; idea still seemed useful, though,
but I found I was able to prove the same things from &lt;code&gt;I&lt;/code&gt;.
e.g. we can still conclude this, even if &lt;code&gt;I&lt;/code&gt; doesn't mention &lt;code&gt;WriteLimit&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That's nice, because it keeps the invariant and its proofs simple,
but we still get the same result in the end.&lt;/p&gt;
&lt;p&gt;I initially defined &lt;code&gt;WriteLimit&lt;/code&gt; to be the number of bytes the sender &lt;em&gt;could&lt;/em&gt; write if
the sending application wanted to send enough data,
but I later changed it to be the actual number of bytes it &lt;em&gt;would&lt;/em&gt; write if the application didn't
try to send any more.
This is because otherwise, with packet-based sends
(where we only write when the buffer has enough space for the whole message at once)
&lt;code&gt;WriteLimit&lt;/code&gt; could go down.
e.g. we think we can write another 3 bytes,
but then the application decides to write 10 bytes and now we can't write anything more.&lt;/p&gt;
&lt;p&gt;The limit theorems above are useful properties,
but it would be good to have more confidence that &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; are correct.
I was able to prove some useful lemmas here.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;ReceiverRead&lt;/code&gt; steps don't change &lt;code&gt;ReadLimit&lt;/code&gt; (as long as the receiver hasn't closed
the connection):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverReadPreservesReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;This gives us a good reason to think that ReadLimit is correct:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the receiver is blocked it cannot read any more than it has without help.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadLimit&lt;/code&gt; is defined to be &lt;code&gt;Len(Got)&lt;/code&gt; then, so &lt;code&gt;ReadLimit&lt;/code&gt; is obviously correct for this case.
&lt;/li&gt;
&lt;li&gt;Since read steps preserve &lt;code&gt;ReadLimit&lt;/code&gt;, this shows that ReadLimit is correct in all cases.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g. if &lt;code&gt;ReadLimit = 5&lt;/code&gt; and no other processes do anything,
then we will end up in a state with the receiver blocked, and &lt;code&gt;ReadLimit = Len(Got) = 5&lt;/code&gt;
and so we really did read a total of 5 bytes.&lt;/p&gt;
&lt;p&gt;I was also able to prove that it never decreases (unless the receiver closes the connection):&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimitMonotonic&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;So, if &lt;code&gt;ReadLimit = n&lt;/code&gt; then it will always be at least &lt;code&gt;n&lt;/code&gt;,
and if the receiver ever blocks then it will have read at least &lt;code&gt;n&lt;/code&gt; bytes.&lt;/p&gt;
&lt;p&gt;I was able to prove similar properties about &lt;code&gt;WriteLimit&lt;/code&gt;.
So, I feel reasonably confident that these limit predictions are correct.&lt;/p&gt;
&lt;p&gt;Disappointingly, we can't actually prove &lt;code&gt;Availability&lt;/code&gt; using TLAPS,
because currently it understands very little temporal logic (see &lt;a href=&quot;https://github.com/tlaplus/v2-tlapm/blob/c0ea83d8481e9dffbcbc5b54822c0e235ff59153/library/TLAPS.tla#L312&quot;&gt;TLAPS limitations&lt;/a&gt;).
However, I could show that the system can't deadlock while there's data to be transmitted:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* We can't get into a state where the sender and receiver are both blocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   and there is no wakeup pending: *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeadlockFree1&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUFFICES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSizeType&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* We can't get into a state where the sender is idle and the receiver is blocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   unless the buffer is empty (all data sent has been consumed): *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeadlockFree2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;I've included the proof of &lt;code&gt;DeadlockFree1&lt;/code&gt; above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To show deadlock can't happen, it suffices to assume it has happened and show a contradiction.
&lt;/li&gt;
&lt;li&gt;If both processes are blocked then &lt;code&gt;NotifyRead&lt;/code&gt; and &lt;code&gt;NotifyWrite&lt;/code&gt; must both be set
(because processes don't block without setting them,
and if they'd been unset then an interrupt would now be pending and we wouldn't be blocked).
&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;NotifyRead&lt;/code&gt; is still set,
the sender is correct in thinking that the buffer is still full.
&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;NotifyWrite&lt;/code&gt; is still set,
the receiver is correct in thinking that the buffer is still empty.
&lt;/li&gt;
&lt;li&gt;That would be a contradiction, since &lt;code&gt;BufferSize&lt;/code&gt; isn't zero.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If it doesn't deadlock, then some process must keep getting woken up by interrupts,
which means that interrupts keep being sent.
We only send interrupts after making progress (writing to the buffer or reading from it),
so we must keep making progress.
We'll have to content ourselves with that argument.&lt;/p&gt;
&lt;h2&gt;Experiences with TLAPS&lt;/h2&gt;
&lt;p&gt;The toolbox doesn't come with the proof system, so you need to install it separately.
The instructions are out-of-date and have a lot of broken links.
In May, I turned the steps into a Dockerfile, which got it partly installed, and asked on the TLA group for help,
but no-one else seemed to know how to install it either.
By looking at the error messages and searching the web for programs with the same names, I finally managed to get it working in December.
If you have trouble installing it too, try using &lt;a href=&quot;https://github.com/talex5/tla&quot;&gt;my Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once installed, you can write a proof in the toolbox and then press Ctrl-G, Ctrl-G to check it.
On success, the proof turns green. On failure, the failing step turns red.
You can also do the Ctrl-G, Ctrl-G combination on a single step to check just that step.
That's useful, because it's pretty slow.
It takes more than 10 minutes to check the complete specification.&lt;/p&gt;
&lt;p&gt;TLA proofs are done in the mathematical style,
which is to write a set of propositions and vaguely suggest that thinking about these will lead you to the proof.
This is good for building intuition, but bad for reproducibility.
A mathematical proof is considered correct if the reader is convinced by it, which depends on the reader.
In this case, the &amp;quot;reader&amp;quot; is a collection of automated theorem-provers with various timeouts.
This means that whether a proof is correct or not depends on how fast your computer is,
how many programs are currently running, etc.
A proof might pass one day and fail the next.
Some proof steps consistently pass when you try them individually,
but consistently fail when checked as part of the whole proof.
If a step fails, you need to break it down into smaller steps.&lt;/p&gt;
&lt;p&gt;Sometimes the proof system is very clever, and immediately solves complex steps.
For example, here is the proof that the &lt;code&gt;SenderClose&lt;/code&gt; process (which represents the sender closing the channel),
preserves the invariant &lt;code&gt;I&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClosePreservesI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUFFICES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k k-Conditional&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k k-Conditional&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;A step such as &lt;code&gt;IntegrityI' BY DEF IntegrityI&lt;/code&gt; says
&amp;quot;You can see that &lt;code&gt;IntegrityI&lt;/code&gt; will be true in the next step just by looking at its definition&amp;quot;.
So this whole lemma is really just saying &amp;quot;it's obvious&amp;quot;.
And TLAPS agrees.&lt;/p&gt;
&lt;p&gt;At other times, TLAPS can be maddeningly stupid.
And it can't tell you what the problem is - it can only make things go red.&lt;/p&gt;
&lt;p&gt;For example, this fails:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We're trying to say that &lt;code&gt;pc[2]&lt;/code&gt; is unchanged, given that &lt;code&gt;pc'&lt;/code&gt; is the same as &lt;code&gt;pc&lt;/code&gt; except that we changed &lt;code&gt;pc[1]&lt;/code&gt;.
The problem is that TLA is an untyped language.
Even though we know we did a mapping update to &lt;code&gt;pc&lt;/code&gt;,
that isn't enough (apparently) to conclude that &lt;code&gt;pc&lt;/code&gt; is in fact a mapping.
To fix it, you need:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The extra &lt;code&gt;pc \in [Nat -&amp;gt; STRING]&lt;/code&gt; tells TLA the type of the &lt;code&gt;pc&lt;/code&gt; variable.
I found missing type information to be the biggest problem when doing proofs,
because you just automatically assume that the computer will know the types of things.
Another example:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;We're just trying to remove the &lt;code&gt;x + ...&lt;/code&gt; from both sides of the equation.
The problem is, TLA doesn't know that &lt;code&gt;Min(y, 10)&lt;/code&gt; is a number,
so it doesn't know whether the normal laws of addition apply in this case.
It can't tell you that, though - it can only go red.
Here's the solution:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The &lt;code&gt;BY DEF Min&lt;/code&gt; tells TLAPS to share the definition of &lt;code&gt;Min&lt;/code&gt; with the solvers.
Then they can see that &lt;code&gt;Min(y, 10)&lt;/code&gt; must be a natural number too and everything works.&lt;/p&gt;
&lt;p&gt;Another annoyance is that sometimes it can't find the right lemma to use,
even when you tell it exactly what it needs.
Here's an extreme case:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* (TLAPS doesn't cope with &amp;quot;NEW VARAIBLE src&amp;quot;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PROOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OMITTED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SameAgain&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* (TLAPS doesn't cope with &amp;quot;NEW VARAIBLE src&amp;quot;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;TransferFacts&lt;/code&gt; states some useful facts about transferring data between two variables.
You can prove that quite easily.
&lt;code&gt;SameAgain&lt;/code&gt; is identical in every way, and just refers to &lt;code&gt;TransferFacts&lt;/code&gt; for the proof.
But even with only one lemma to consider - one that matches all the assumptions and conclusions perfectly -
none of the solvers could figure this one out!&lt;/p&gt;
&lt;p&gt;My eventual solution was to name the bundle of results.
This works:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PROOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OMITTED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SameAgain&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;Most of the art of using TLAPS is in controlling how much information to share with the provers.
Too little (such as failing to provide the definition of &lt;code&gt;Min&lt;/code&gt;) and they don't have enough information to find the proof.
Too much (such as providing the definition of &lt;code&gt;TransferResults&lt;/code&gt;) and they get overwhelmed and fail to find the proof.&lt;/p&gt;
&lt;p&gt;It's all a bit frustrating, but it does work,
and being machine checked does give you some confidence that your proofs are actually correct.&lt;/p&gt;
&lt;p&gt;Another, perhaps more important, benefit of machine checked proofs is that
when you decide to change something in the specification you can just ask it to re-check everything.
Go and have a cup of tea, and when you come back it will have highlighted in red any steps that need to be updated.
I made a lot of changes, and this worked very well.&lt;/p&gt;
&lt;p&gt;The TLAPS philosophy is that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are concerned with an algorithm or system, you should not be spending your time proving basic mathematical facts.
Instead, you should assert the mathematical theorems you need as assumptions or theorems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So even if you can't find a formal proof of every step, you can still use TLAPS to break it down into steps than you
either can prove, or that you think are obvious enough that they don't require a proof.
However, I was able to prove everything I needed for the vchan specification within TLAPS.&lt;/p&gt;
&lt;h2&gt;The final specification&lt;/h2&gt;
&lt;p&gt;I did a little bit of tidying up at the end.
In particular, I removed the &lt;code&gt;want&lt;/code&gt; variable from the specification.
I didn't like it because it doesn't correspond to anything in the OCaml implementation,
and the only place the algorithm uses it is to decide whether to set &lt;code&gt;NotifyWrite&lt;/code&gt;,
which I thought might be wrong anyway.&lt;/p&gt;
&lt;p&gt;I changed this:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;to:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;That always allows an implementation to set &lt;code&gt;NotifyWrite&lt;/code&gt; if it wants to,
or to skip that step just as long as &lt;code&gt;have &amp;gt; 0&lt;/code&gt;.
That covers the current C behaviour, my proposed C behaviour, and the OCaml implementation.
It also simplifies the invariant, and even made the proofs shorter!&lt;/p&gt;
&lt;p&gt;I put the final specification online at &lt;a href=&quot;https://github.com/talex5/spec-vchan&quot;&gt;spec-vchan&lt;/a&gt;.
I also configured Travis CI to check all the models and verify all the proofs.
That's useful because sometimes I'm too impatient to recheck everything on my laptop before pushing updates.&lt;/p&gt;
&lt;p&gt;You can generate a PDF version of the specification with &lt;code&gt;make pdfs&lt;/code&gt;.
Expressions there can be a little easier to read because they use proper symbols, but
it also breaks things up into pages, which is highly annoying.
It would be nice if it could omit the proofs too, as they're really only useful if you're trying to edit them.
I'd rather just see the statement of each theorem.&lt;/p&gt;
&lt;h2&gt;The original bug&lt;/h2&gt;
&lt;p&gt;With my new understanding of vchan, I couldn't see anything obvious wrong with the C code
(at least, as long as you keep the connection open, which the firewall does).&lt;/p&gt;
&lt;p&gt;I then took a look at &lt;a href=&quot;https://github.com/mirage/ocaml-vchan&quot;&gt;ocaml-vchan&lt;/a&gt;.
The first thing I noticed was that someone had commented out all the memory barriers,
noting in the Git log that they weren't needed on x86.
I am using x86, so that's not it, but I filed a bug about it anyway: &lt;a href=&quot;https://github.com/mirage/ocaml-vchan/issues/122&quot;&gt;Missing memory barriers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other strange thing I saw was the behaviour of the &lt;code&gt;read&lt;/code&gt; function.
It claims to implement the Mirage &lt;code&gt;FLOW&lt;/code&gt; interface, which says that &lt;code&gt;read&lt;/code&gt;
&amp;quot;blocks until some data is available and returns a fresh buffer containing it&amp;quot;.
However, looking at the code, what it actually does is to return a pointer directly into the shared buffer.
It then delays updating the consumer counter until the &lt;em&gt;next&lt;/em&gt; call to &lt;em&gt;read&lt;/em&gt;.
That's rather dangerous, and I filed another bug about that: &lt;a href=&quot;https://github.com/mirage/ocaml-vchan/issues/119&quot;&gt;Read has very surprising behaviour&lt;/a&gt;.
However, when I checked the &lt;code&gt;mirage-qubes&lt;/code&gt; code, it just takes this buffer and &lt;a href=&quot;https://github.com/mirage/mirage-qubes/blob/ea900d5ac93278a43150cd21ced407806416681c/lib/msg_chan.ml#L34&quot;&gt;makes a copy of it&lt;/a&gt; immediately.
So that's not the bug either.&lt;/p&gt;
&lt;p&gt;Also, the original bug report mentioned a 10 second timeout,
and neither the C implementation nor the OCaml one had any timeouts.
Time to look at QubesDB itself.&lt;/p&gt;
&lt;p&gt;QubesDB accepts messages from either the guest VM (the firewall) or from local clients connected over Unix domain sockets.
The basic structure is:&lt;/p&gt;
&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vchan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vchan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;handle_vchan_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;handle_client_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p&gt;The suspicion was that we were missing a vchan event,
but then it was discovering that there was data in the buffer anyway due to the timeout.
Looking at the code, it does seem to me that there is a possible race condition here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A local client asks to send some data.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_client_data&lt;/code&gt; sends the data to the firewall using a blocking write.
&lt;/li&gt;
&lt;li&gt;The firewall sends a message to QubesDB at the same time and signals an event because the firewall-to-db buffer has data.
&lt;/li&gt;
&lt;li&gt;QubesDB gets the event but ignores it because it's doing a blocking write and there's still no space in the db-to-firewall direction.
&lt;/li&gt;
&lt;li&gt;The firewall updates its consumer counter and signals another event, because the buffer now has space.
&lt;/li&gt;
&lt;li&gt;The blocking write completes and QubesDB returns to the main loop.
&lt;/li&gt;
&lt;li&gt;QubesDB goes to sleep for 10 seconds, without checking the buffer.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don't think this is the cause of the bug though,
because the only messages the firewall might be sending here are &lt;code&gt;QDB_RESP_OK&lt;/code&gt; messages,
and QubesDB just discards such messages.&lt;/p&gt;
&lt;p&gt;I managed to reproduce the problem myself,
and saw that in fact QubesDB doesn't make any progress due to the 10 second timeout.
It just tries to go back to sleep for another 10 seconds and then
immediately gets woken up by a message from a local client.
So, it looks like QubesDB is only sending updates every 10 seconds because its client, &lt;code&gt;qubesd&lt;/code&gt;,
is only asking it to send updates every 10 seconds!
And looking at the &lt;code&gt;qubesd&lt;/code&gt; logs, I saw stacktraces about libvirt failing to attach network devices, so
I read the Xen network device attachment specification to check that the firewall implemented that correctly.&lt;/p&gt;
&lt;p&gt;I'm kidding, of course.
There isn't any such specification.
But maybe this blog post will inspire someone to write one...&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;As users of open source software, we're encouraged to look at the source code and check that it's correct ourselves.
But that's pretty difficult without a specification saying what things are &lt;em&gt;supposed&lt;/em&gt; to do.
Often I deal with this by learning just enough to fix whatever bug I'm working on,
but this time I decided to try making a proper specification instead.
Making the TLA specification took rather a long time, but it was quite pleasant.
Hopefully the next person who needs to know about vchan will appreciate it.&lt;/p&gt;
&lt;p&gt;A TLA specification generally defines two sets of behaviours.
The first is the set of desirable behaviours (e.g. those where the data is delivered correctly).
This definition should clearly explain what users can expect from the system.
The second defines the behaviours of a particular algorithm.
This definition should make it easy to see how to implement the algorithm.
The TLC model checker can check that the algorithm's behaviours are all acceptable,
at least within some defined limits.&lt;/p&gt;
&lt;p&gt;Writing a specification using the TLA notation forces us to be precise about what we mean.
For example, in a prose specification we might say &amp;quot;data sent will eventually arrive&amp;quot;, but in an
executable TLA specification we're forced to clarify what happens if the connection is closed.
I would have expected that if a sender writes some data and then closes the connection then the data would still arrive,
but the C implementation of vchan does not always ensure that.
The TLC model checker can find a counter-example showing how this can fail in under a minute.&lt;/p&gt;
&lt;p&gt;To explain why the algorithm always works, we need to find an inductive invariant.
The TLC model checker can help with this,
by presenting examples of unreachable states that satisfy the invariant but don't preserve it after taking a step.
We must add constraints to explain why these states are invalid.
This was easy for the &lt;code&gt;Integrity&lt;/code&gt; invariant, which explains why we never receive incorrect data, but
I found it much harder to prove that the system cannot deadlock.
I suspect that the original designer of a system would find this step easy, as presumably they already know why it works.&lt;/p&gt;
&lt;p&gt;Once we have found an inductive invariant, we can write a formal machine-checked proof that the invariant is always true.
Although TLAPS doesn't allow us to prove liveness properties directly,
I was able to prove various interesting things about the algorithm: it doesn't deadlock; when the sender is blocked, the receiver can read everything that has been sent; and when the receiver is blocked, the sender can fill the entire buffer.&lt;/p&gt;
&lt;p&gt;Writing formal proofs is a little tedious, largely because TLA is an untyped language.
However, there is nothing particularly difficult about it,
once you know how to work around various limitations of the proof checkers.&lt;/p&gt;
&lt;p&gt;You might imagine that TLA would only work on very small programs like libvchan, but this is not the case.
It's just a matter of deciding what to specify in detail.
For example, in this specification I didn't give any details about how ring buffers work,
but instead used a single &lt;code&gt;Buffer&lt;/code&gt; variable to represent them.
For a specification of a larger system using vchan, I would model each channel using just &lt;code&gt;Sent&lt;/code&gt; and &lt;code&gt;Got&lt;/code&gt;
and an action that transferred some of the difference on each step.&lt;/p&gt;
&lt;p&gt;The TLA Toolbox has some rough edges.
The ones I found most troublesome were: the keyboard shortcuts frequently stop working;
when a temporal property is violated, it doesn't tell you which one it was; and
the model explorer tooltips appear right under the mouse pointer,
preventing you from scrolling with the mouse wheel.
It also likes to check its &amp;quot;news feed&amp;quot; on a regular basis.
It can't seem to do this at the same time as other operations,
and if you're in the middle of a particularly complex proof checking operation,
it will sometimes suddenly pop up a box suggesting that you cancel your job,
so that it can get back to reading the news.&lt;/p&gt;
&lt;p&gt;However, it is improving.
In the latest versions, when you get a syntax error, it now tells you where in the file the error is.
And pressing Delete or Backspace while editing no longer causes it to crash and lose all unsaved data.
In general I feel that the TLA Toolbox is quite usable now.
If I were designing a new protocol, I would certainly use TLA to help with the design.&lt;/p&gt;
&lt;p&gt;TLA does not integrate with any language type systems, so even after you have a specification
you still need to check manually that your code matches the spec.
It would be nice if you could check this automatically, somehow.&lt;/p&gt;
&lt;p&gt;One final problem is that whenever I write a TLA specification, I feel the need to explain first what TLA is.
Hopefully it will become more popular and that problem will go away.&lt;/p&gt;
&lt;p&gt;Update 2019-01-10: Marek Marczykowski-G&amp;oacute;recki told me that the state model for network devices is the same as
the one for block devices, which is documented in the &lt;code&gt;blkif.h&lt;/code&gt; block device header file, and provided libvirt debugging help -
so the bug is &lt;a href=&quot;https://github.com/mirage/mirage-qubes/issues/25#issuecomment-452921207&quot;&gt;now fixed&lt;/a&gt;!&lt;/p&gt;
</content><id>https://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/</id><title type="text">Using TLA+ to understand Xen vchan</title><updated>2019-01-01T09:15:18-00:00</updated><author><name>Thomas Leonard</name></author></entry></feed>