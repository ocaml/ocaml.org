<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://feeds.simplecast.com/L9810DOa</id><title type="text">signalsandthreads</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="https://signals-threads.simplecast.com/episodes/the-future-of-programming-with-richard-eisenberg-pOktpZ_e" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Richard Eisenberg is one of the core maintainers of Haskell. He recently joined Jane Street&amp;rsquo;s Tools and Compilers team, where he hacks on the OCaml compiler. He and Ron discuss the powerful language feature that got him into PL design in the first place&amp;mdash;dependent types&amp;mdash;and its role in a world where AIs can (somewhat) competently write your code for you. They also discuss the differences between Haskell and OCaml; the perils of trying to make a language that works for everybody; and how best a company like Jane Street can collaborate with the open source community.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/future-of-programming&quot; target=&quot;_blank&quot;&gt;website.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Dependent_type&quot;&gt;Dependent types&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.haskell.org/ghc/&quot;&gt;GHC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.janestreet.com/tech-talks/unboxed-types-for-ocaml/&quot;&gt;Unboxed types in OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://typeclasses.com/extensions-intro&quot;&gt;Language extensions in Haskell&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/the-future-of-programming-with-richard-eisenberg-pOktpZ_e</id><title type="text">The Future of Programming with Richard Eisenberg</title><updated>2023-05-18T15:15:49-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/swapping-the-engine-out-of-a-moving-race-car-with-ella-ehrlich-WWjYmqQI" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Ella Ehrlich has been a developer at Jane Street for close to a decade. During much of that time, she&amp;rsquo;s worked on Gord, one of Jane Street&amp;rsquo;s oldest and most critical systems, which is responsible for normalizing and distributing the firm&amp;rsquo;s trading data. Ella and Ron talk about how to grow and modernize a legacy system without compromising uptime, why game developers are the &amp;ldquo;musicians of software,&amp;rdquo; and some of the work Jane Street has done to try to hire a more diverse set of software engineers.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/swapping-the-engine-out-of-a-moving-race-car&quot; target=&quot;_blank&quot;&gt;website.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://lol.fandom.com/wiki/Evil_Geniuses.NA&quot;&gt;EG&lt;/a&gt;, The League of Legends team that Ella is a huge fan of.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;, the message bus that Gord migrated to.&lt;/li&gt;&lt;li&gt;Some of the &lt;a href=&quot;https://www.openfigi.com/&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Reuters_Instrument_Code&quot;&gt;sources&lt;/a&gt; &lt;a href=&quot;https://www.cmegroup.com/tools-information/vendorSymbol.html&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://www.isin.org/&quot;&gt;symbology&lt;/a&gt; you have to deal with when normalizing trading data. (Really, there are too many sources to list here!)&lt;/li&gt;&lt;li&gt;A list of Jane Street&amp;rsquo;s recruiting &lt;a href=&quot;https://www.janestreet.com/join-jane-street/programs-and-events/&quot;&gt;Programs and Events&lt;/a&gt;, including &lt;a href=&quot;https://www.janestreet.com/join-jane-street/programs-and-events/insight/&quot;&gt;INSIGHT&lt;/a&gt;, which focuses on women, and &lt;a href=&quot;https://www.janestreet.com/join-jane-street/programs-and-events/in-focus/&quot;&gt;IN FOCUS&lt;/a&gt;, which focuses on historically underrepresented ethnic or racial minorities.&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/swapping-the-engine-out-of-a-moving-race-car-with-ella-ehrlich-WWjYmqQI</id><title type="text">Swapping the Engine Out of a Moving Race Car with Ella Ehrlich</title><updated>2022-09-12T20:46:54-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/state-machine-replication-and-why-you-should-care-with-doug-patti-ddqeDcTw" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Doug Patti is a developer in Jane Street&amp;rsquo;s Client-Facing Tech team, where he works on a system called Concord that undergirds Jane Street&amp;rsquo;s client offerings. In this episode, Doug and Ron discuss how Concord, which has state-machine replication as its core abstraction, helps Jane Street achieve the reliability, scalability, and speed that the client business demands. They&amp;rsquo;ll also discuss Doug&amp;rsquo;s involvement in building a successor system called Aria, which is designed to deliver those same benefits to a much wider audience.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/state-machine-replication-and-why-you-should-care&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jane Street&amp;rsquo;s &lt;a href=&quot;https://www.janestreet.com/institutional-services/electronic-trading-platforms/&quot;&gt;client-facing trading platforms&lt;/a&gt;&lt;/li&gt;&lt;li&gt;A Signals and Threads episode on &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets/&quot;&gt;market data and multicast&lt;/a&gt; which discusses some of the history of state-machine replication in the markets.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://www.investopedia.com/terms/f/financial-information-exchange.asp&quot;&gt;FIX protocol&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multicast&quot;&gt;UDP multicast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reliable_multicast#:~:text=A%20reliable%20multicast%20is%20any,as%20multi-receiver%20file%20transfer.&quot;&gt;Reliable multicast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/intro&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/state-machine-replication-and-why-you-should-care-with-doug-patti-ddqeDcTw</id><title type="text">State Machine Replication, and Why You Should Care with Doug Patti</title><updated>2022-04-20T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/memory-management-with-stephen-dolan-VnWeJYgk" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Stephen Dolan works on Jane Street&amp;rsquo;s Tools and Compilers team where he focuses on the OCaml compiler. In this episode, Stephen and Ron take a trip down memory lane, discussing how to manage computer memory efficiently and safely. They consider trade-offs between reference counting and garbage collection, the surprising gains achieved by prefetching, and how new language features like local allocation and unboxed types could give OCaml users more control over their memory.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/memory-management&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stephen&amp;rsquo;s command-line JSON processor, &lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Stephen&amp;rsquo;s Cambridge dissertation, &lt;a href=&quot;https://www.cs.tufts.edu/~nr/cs257/archive/stephen-dolan/thesis.pdf&quot;&gt;&amp;ldquo;Algebraic Subtyping&amp;rdquo;&lt;/a&gt;, and a &lt;a href=&quot;https://github.com/stedolan/mlsub&quot;&gt;protoype implementation of mlsub&lt;/a&gt;, a language based on those ideas.&lt;/li&gt;&lt;li&gt;A &lt;a href=&quot;https://blog.janestreet.com/memory-allocator-showdown/&quot;&gt;post from Stephen&lt;/a&gt; on how to benchmark different memory allocators.&lt;/li&gt;&lt;li&gt;A Jane Street tech talk on &lt;a href=&quot;https://www.janestreet.com/tech-talks/unboxed-types-for-ocaml/&quot;&gt;&amp;ldquo;Unboxed Types for OCaml&amp;rdquo;&lt;/a&gt;, and an &lt;a href=&quot;https://github.com/ocaml/RFCs/blob/881b220adc1f358ab15f7743d5cd764222ab7d30/rfcs/unboxed-types.md&quot;&gt;RFC&lt;/a&gt; in the OCaml RFC repo.&lt;/li&gt;&lt;li&gt;A paper from Stephen and &lt;a href=&quot;https://kcsrk.info/&quot;&gt;KC Sivaramakrishnan&lt;/a&gt; called &lt;a href=&quot;https://kcsrk.info/papers/pldi18-memory.pdf&quot;&gt;&amp;ldquo;Bounding Data Races in Space and Time&amp;rdquo;&lt;/a&gt;, which is all about a new and better memory model for Multicore OCaml.&lt;/li&gt;&lt;li&gt;Another &lt;a href=&quot;https://arxiv.org/pdf/2004.11663.pdf&quot;&gt;paper&lt;/a&gt; describing the design of OCaml&amp;rsquo;s multicore GC.&lt;/li&gt;&lt;li&gt;The Rust RFC for &lt;a href=&quot;https://rust-lang.github.io/rfcs/0387-higher-ranked-trait-bounds.html&quot;&gt;Higher-ranked trait bounds&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/memory-management-with-stephen-dolan-VnWeJYgk</id><title type="text">Memory Management with Stephen Dolan</title><updated>2022-01-05T17:30:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/what-is-an-operating-system-with-anil-madhavapeddy-q6Bgv_BW" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Anil Madhavapeddy is an academic, author, engineer, entrepreneur, and OCaml aficionado. In this episode, Anil and Ron consider the evolving role of operating systems, security on the internet, and the pending arrival (at last!) of OCaml 5.0. They also discuss using Raspberry Pis to fight climate change; the programming inspiration found in British pubs and on Moroccan beaches; and the time Anil went to a party, got drunk, and woke up with a job working on the Mars Polar Lander.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/what-is-an-operating-system&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ron, Anil, and Jason Hickey&amp;rsquo;s book, &lt;a href=&quot;https://dev.realworldocaml.org/&quot;&gt;&amp;ldquo;Real World OCaml&amp;rdquo;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Anil&amp;rsquo;s &lt;a href=&quot;https://anil.recoil.org/&quot;&gt;personal website&lt;/a&gt; and &lt;a href=&quot;https://scholar.google.com/citations?hl=en&amp;amp;user=u2nZ7F8AAAAJ&amp;amp;view_op=list_works&amp;amp;sortby=pubdate&quot;&gt;Google Scholar page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://mirage.io/&quot;&gt;MirageOS&lt;/a&gt; library operating system&lt;/li&gt;&lt;li&gt;Cambridge University&amp;rsquo;s &lt;a href=&quot;https://ocamllabs.io/&quot;&gt;OCaml Labs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;NASA&amp;rsquo;s &lt;a href=&quot;https://mars.nasa.gov/mars-exploration/missions/polar-lander/&quot;&gt;Mars Polar Lander&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://xenproject.org/&quot;&gt;Xen Project&lt;/a&gt;, home to the &lt;a href=&quot;https://xenproject.org/developers/teams/xen-hypervisor/&quot;&gt;hypervisor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://tezos.com/&quot;&gt;Tezos proof-of-stake blockchain&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://coq.inria.fr/&quot;&gt;Coq Proof Assistant&lt;/a&gt; system&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/what-is-an-operating-system-with-anil-madhavapeddy-q6Bgv_BW</id><title type="text">What Is an Operating System? with Anil Madhavapeddy</title><updated>2021-11-03T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/building-a-ui-framework-with-ty-overby-1YPs6hg_" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Ty Overby is a programmer in Jane Street&amp;rsquo;s web platform group where he works on Bonsai, our OCaml library for building interactive browser-based UI. In this episode, Ty and Ron consider the functional approach to building user interfaces. They also discuss Ty&amp;rsquo;s programming roots in Neopets, what development features they crave on the web, the unfairly maligned CSS, and why Excel is &amp;ldquo;arguably the greatest programming language ever developed.&amp;rdquo;&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/building-a-ui-framework&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jane Street&amp;rsquo;s &lt;a href=&quot;https://opensource.janestreet.com/bonsai/&quot;&gt;Bonsai&lt;/a&gt; library&lt;/li&gt;&lt;li&gt;The 3D design system &lt;a href=&quot;https://openscad.org/&quot;&gt;OpenSCAD&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Matt Keeter&amp;rsquo;s &lt;a href=&quot;https://libfive.com/&quot;&gt;libfive&lt;/a&gt; design tools&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://try.dot.net/&quot;&gt;Try .NET&lt;/a&gt; in-browser repl&lt;/li&gt;&lt;li&gt;Jane Street&amp;rsquo;s &lt;a href=&quot;https://opensource.janestreet.com/incr_dom/&quot;&gt;Incr_dom&lt;/a&gt; library&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot;&gt;Elm Architecture&lt;/a&gt; &amp;ldquo;pattern for architecting interactive programs&amp;rdquo;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; JavaScript library&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://houdini.glitch.me/&quot;&gt;Houdini&lt;/a&gt; proposal&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt; UI toolkit&lt;/li&gt;&lt;/ul&gt;
</content><id>https://signals-threads.simplecast.com/episodes/building-a-ui-framework-with-ty-overby-1YPs6hg_</id><title type="text">Building a UI Framework with Ty Overby</title><updated>2021-10-06T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;James Somers is Jane Street&amp;rsquo;s writer-in-residence, splitting his time between English and OCaml, and helping to push forward all sorts of efforts around knowledge-sharing at Jane Street. In this episode, James and Ron talk about the role of technical writing in an organization like Jane Street, and how engineering software relates to editing prose.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode &amp;nbsp;on our &lt;a href=&quot;https://signalsandthreads.com/writing-technically/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/realworldocaml/mdx&quot;&gt;mdx&lt;/a&gt;, the modified Markdown format that supports executing OCaml code blocks&lt;/li&gt;&lt;li&gt;More on &lt;a href=&quot;https://documentation.divio.com/introduction/&quot;&gt;the 4 types of technical writing&lt;/a&gt; that James references&lt;/li&gt;&lt;li&gt;Donald Knuth&amp;rsquo;s original book on &lt;a href=&quot;https://en.wikipedia.org/wiki/Literate_programming&quot;&gt;Literate Programming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;More on &lt;a href=&quot;https://www.newyorker.com/magazine/2013/01/14/structure&quot;&gt;John McPhee&amp;rsquo;s use of KEDIT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Peter Seibel&amp;rsquo;s &lt;a href=&quot;https://codersatwork.com/&quot;&gt;Coders at Work&lt;/a&gt;&lt;/li&gt;&lt;li&gt;David Goodsell&amp;rsquo;s &lt;a href=&quot;https://books.google.com/books/about/The_Machinery_of_Life.html?id=0nV-mIqPa5gC&quot;&gt;The Machinery of Life&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Scott Huler&amp;rsquo;s &lt;a href=&quot;https://books.google.com/books?id=oqGUXPWbieMC&quot;&gt;Defining the Wind&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some of James&amp;rsquo;s writing &lt;a href=&quot;https://blog.janestreet.com/author/jsomers/&quot;&gt;on our tech blog&lt;/a&gt;&lt;/p&gt;
</content><id>https://signalsandthreads.com/</id><title type="text">Writing, Technically with James Somers</title><updated>2021-09-01T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/more-signals-and-threads-coming-soon-bZXFSWKN" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Signals &amp;amp; Threads is back, and we have a fun season of topics lined up, including: Building better abstractions for design and user interfaces, the role of writing in a technical organization, the approach that different languages take to memory management...and more. We hope you&amp;rsquo;ll join us. The first episode drops September 1st.&lt;/p&gt;
</content><id>https://signals-threads.simplecast.com/episodes/more-signals-and-threads-coming-soon-bZXFSWKN</id><title type="text">More Signals &amp; Threads coming soon!</title><updated>2021-08-24T13:36:17-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;In this week's episode, the season 1 finale, Ron speaks with Jeanne, Matt, and Grace, three former tech interns at Jane Street who have returned as full-timers. They talk about the experience of being an intern at Jane Street, the types of projects that interns work on, and how they've found the transition to full-time work.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/</id><title type="text">An inside look at Jane Street's tech internship with Jeanne Van Briesen, Matt Else, and Grace Zhang</title><updated>2020-11-06T17:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Despite a steady trickle of newcomers, email still reigns supreme as the chief communication mechanism for the Information Age. At Jane Street, it&amp;rsquo;s just as critical as anywhere, but there&amp;rsquo;s one difference: the system at the heart of our email infrastructure is homegrown. This week, Ron talks to Dominick LoBraico, an engineer working on Jane Street&amp;rsquo;s technology infrastructure, about how and why we built Mailcore, an email server written and configured in OCaml. They delve into questions around how best to represent the configuration of a complex system, when you should build your own and when you shouldn&amp;rsquo;t, and the benefits of bringing a code-focused approach to solving systems problems.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/</id><title type="text">Building a functional email server with Dominick LoBraico</title><updated>2020-10-28T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/language-design/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Equal parts science and art, programming language design is very much an unsolved problem. This week, Ron speaks with Leo White, from Jane Street's Tools &amp;amp; Compilers team, about cutting-edge language features, future work happening on OCaml, and Jane Street's relationship with the broader open-source community. The conversation covers everything from the paradox of language popularity, to advanced type system features like modular implicits and dependent types. Listen in, no programming languages PhD required!&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/language-design/</id><title type="text">Language design with Leo White</title><updated>2020-10-21T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/clock-synchronization/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Clock synchronization, keeping all of the clocks on your network set to the &amp;ldquo;correct&amp;rdquo; time, sounds straightforward: our smartphones sure don&amp;rsquo;t seem to have trouble with it. Next, keep them all accurate to within 100 microseconds, and prove that you did -- now things start to get tricky. In this episode, Ron talks with Chris Perl, a systems engineer at Jane Street about the fundamental difficulty of solving this problem at scale and how we solved it.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/clock-synchronization/</id><title type="text">Clock synchronization with Chris Perl</title><updated>2020-10-14T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/python-ocaml-and-machine-learning/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;A conversation with Laurent Mazare about how your choice of programming language interacts with the kind of work you do, and in particular about the tradeoffs between Python and OCaml when doing machine learning and data analysis. Ron and Laurent discuss the tradeoffs between working in a text editor and a Jupyter Notebook, the importance of visualization and interactivity, how tools and practices vary between language ecosystems, and how language features like borrow-checking in Rust and ref-counting in Swift and Python can make machine learning easier.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/python-ocaml-and-machine-learning/</id><title type="text">Python, OCaml, and Machine Learning with Laurent Mazare</title><updated>2020-10-07T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/compiler-optimization/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;It&amp;rsquo;s a software engineer&amp;rsquo;s dream: A compiler that can take idiomatic high-level code and output maximally efficient instructions. Ron&amp;rsquo;s guest this week is Greta Yorsh, who has worked on just that problem in a career spanning both industry and academia. Ron and Greta talk about some&amp;nbsp; of the tricks that compilers use to make our software faster, ranging from feedback-directed optimization and super-optimization to formal analysis.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/compiler-optimization/</id><title type="text">Compiler optimization with Greta Yorsh</title><updated>2020-09-30T16:00:00-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/multicast-and-the-markets/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Electronic exchanges like Nasdaq need to handle a staggering number of transactions every second. To keep up, they rely on two deceptively simple-sounding concepts: single-threaded programs and multicast networking. In this episode, Ron speaks with Brian Nigito, a 20-year industry veteran who helped build some of the earliest electronic exchanges, about the tradeoffs that led to the architecture we have today, and how modern exchanges use these straightforward building blocks to achieve blindingly fast performance at scale.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to things we discussed on our &lt;a href=&quot;https://signalsandthreads.com/multicast-and-the-markets&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/multicast-and-the-markets/</id><title type="text">Multicast and the markets with Brian Nigito</title><updated>2020-09-23T16:00:09-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/build-systems/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Most software engineers only think about their build system when it breaks; and yet, this often unloved piece of software forms the backbone of every serious project. This week, Ron has a conversation with Andrey Mokhov about build systems, from the venerable Make to Bazel and beyond. Andrey has a lot of experience in this field, including significant contributions to &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/wikis/building/hadrian&quot;&gt;the replacement&lt;/a&gt; for the Glasgow Haskell Compiler&amp;rsquo;s Make-based system and &lt;a href=&quot;https://www.cambridge.org/core/journals/journal-of-functional-programming/article/build-systems-a-la-carte-theory-and-practice/097CE52C750E69BD16B78C318754C7A4&quot;&gt;Build Systems &amp;agrave; la carte&lt;/a&gt;, a paper that untangles the complex ecosystem of existing build systems. Ron and Andrey muse on questions like why every language community seems to have its own purpose-built system and, closer to home, where Andrey and the rest of the build systems team at Jane Street are focusing their efforts.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to related work on our &lt;a href=&quot;https://signalsandthreads.com/build-systems&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/build-systems/</id><title type="text">Build systems with Andrey Mokhov</title><updated>2020-09-16T15:55:47-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signalsandthreads.com/programmable-hardware/" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;The ever-widening availability of FPGAs has opened the door to solving a broad set of performance-critical problems in hardware.&amp;nbsp; In this episode, Ron speaks with Andy Ray, who leads Jane Street&amp;rsquo;s hardware design team. Andy has a long career prior to Jane Street shipping hardware designs for things like modems and video codecs. That work led him to create &lt;a href=&quot;https://github.com/janestreet/hardcaml&quot;&gt;Hardcaml&lt;/a&gt;, a domain-specific language for expressing hardware designs. Ron and Andy talk about the current state-of-the-art in hardware tooling, the economics of FPGAs, and how the process of designing hardware can be improved by applying lessons from software engineering.&lt;/p&gt;&lt;p&gt;You can find the transcript for this episode along with links to related work on our &lt;a href=&quot;https://signalsandthreads.com/programmable-hardware/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</content><id>https://signalsandthreads.com/programmable-hardware/</id><title type="text">Programmable hardware with Andy Ray</title><updated>2020-09-09T15:17:14-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry><entry><link href="https://signals-threads.simplecast.com/episodes/introducing-signals-threads-zLlapP9a" rel="alternate"/><contributor><uri>https://feeds.simplecast.com/L9810DOa</uri><name>signalsandthreads</name></contributor><content type="html">&lt;p&gt;Listen in on Jane Street&amp;rsquo;s Ron Minsky as he has conversations with engineers working on everything from clock synchronization to reliable multicast, build systems to reconfigurable hardware. Get a peek at how Jane Street approaches problems, and how those ideas relate to tech more broadly.&lt;/p&gt;
</content><id>https://signals-threads.simplecast.com/episodes/introducing-signals-threads-zLlapP9a</id><title type="text">Introducing Signals &amp; Threads</title><updated>2020-08-24T01:25:54-00:00</updated><author><email>signals-and-threads@janestreet.com (Jane Street)</email><name>signalsandthreads</name></author></entry></feed>