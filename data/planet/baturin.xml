<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://baturin.org/blog/atom-ocaml.xml</id><title type="text">baturin</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="https://www.baturin.org/blog/lua-ml-embedding-and-projection" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    One thing I find odd about many interpreter projects is that they are designed as standalone and can't be used as embedded
scripting languages. Lua-ML is completely different in that regard: it's designed as an extension language first and offers
some unique features for that use case, including a reconfigurable runtime library. You can remove modules from its standard library or replace
them with your own implementations. Of course, you can also pass OCaml values to Lua code and take them back in a type-safe manner too.
That aspect isn't very obvious or well-documented, so in this post we'll try to uncover it.
    </content><id>https://www.baturin.org/blog/lua-ml-embedding-and-projection</id><title type="text">Embedding and projection in Lua-ML</title><updated>2020-08-28T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/if-you-think-reasonml-compiles-to-js-you-are-wrong" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    In this post we'll examine what &lt;a href=&quot;https://reasonml.github.io/&quot;&gt;ReasonML&lt;/a&gt; really is and what it compiles to.
Everyone coming from the ML community already knows the truth, but in the JS community, this misconception
seems surprisingly common. It's not just about giving credit, but about the true potential of the language
that is far greater than that of TypeScript or Elm.
    </content><id>https://www.baturin.org/blog/if-you-think-reasonml-compiles-to-js-you-are-wrong</id><title type="text">If you think ReasonML compiles to JS, you are wrong</title><updated>2019-09-05T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/declarative-parse-error-reporting-with-menhir" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    Many parsers for custom formats aren't very user friendly when it comes to error handling.
At best you get the line and column where the error is, at worst a &amp;ldquo;Parse error&amp;rdquo;
message is all you get. Can we do better? With right tools, we definitely can and it's not that hard.
    </content><id>https://www.baturin.org/blog/declarative-parse-error-reporting-with-menhir</id><title type="text">Declarative parse error reporting with Menhir</title><updated>2019-08-24T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/extending-ocaml-programs-with-lua-soupault-got-plugin-support" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    Most of the time, when people make extensible programs in typed functional languages,
they make a DSL, not least because it's much easier to make a DSL in a language with algebraic types
and pattern matching than in one without.&lt;br/&gt;
Some use cases really require a general-purpose language though. That's where things get
more interesting. Commonly used embeddable interpreters such as Lua, Guile, or Chicken are written in C.
It's possible to make OCaml or Haskell bindings for them and such bindings do exist,
but that's two high level languages communicating through a low level one.&lt;br/&gt;
It would be much better to be able to expose native types to the embedded language in a type-safe and more or less convenient
fashion. Here's my take at it.
    </content><id>https://www.baturin.org/blog/extending-ocaml-programs-with-lua-soupault-got-plugin-support</id><title type="text">Extending OCaml programs with Lua (soupault got plugin support)</title><updated>2019-08-10T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/introduction-to-ocaml-part-5-exceptions-lists-and-structural-recursion" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    In OCaml, exceptions are not objects, and there are no exception hierarchies. It may look unusual now,
but in fact exceptions predate the rise of object oriented languages and it's more in line with original
implementations. The advantage is that they are very lightweight.
    </content><id>https://www.baturin.org/blog/introduction-to-ocaml-part-5-exceptions-lists-and-structural-recursion</id><title type="text">Introduction to OCaml, part 5: exceptions, lists, and structural recursion</title><updated>2018-08-18T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/introduction-to-ocaml-part-4-higher-order-functions-parametric-polymorphism-and-algebraic-data-types" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    So far we have only worked with functions that take value of a single type known beforehand.
However, we have already seen functions whose types were left without explanation, such as
&lt;code&gt;let hello _ = print_endline &amp;quot;hello world&amp;quot;&lt;/code&gt; that we used to demonstrate the wildcard pattern.
&lt;br/&gt;
What is its type? If you enter it into the REPL, you will see that it's &lt;code&gt;'a -&amp;gt; unit&lt;/code&gt;.
What does the mysterious 'a mean? Simply put, it's a placeholder for any type.
Essentially, a variable for types &amp;mdash;a &lt;em&gt;type variable&lt;/em&gt;.
    </content><id>https://www.baturin.org/blog/introduction-to-ocaml-part-4-higher-order-functions-parametric-polymorphism-and-algebraic-data-types</id><title type="text">Introduction to OCaml, part 4: higher order functions, parametric polymorphism and algebraic data types</title><updated>2018-08-12T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/introduction-to-ocaml-part-3" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    This should have been covered earlier, but better late than even later.
In this chapter we'll learn about booleans and conditional expressions.
    </content><id>https://www.baturin.org/blog/introduction-to-ocaml-part-3</id><title type="text">Introduction to OCaml, part 3</title><updated>2018-08-08T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/introduction-to-ocaml-part-2" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    In the previous chapter we've learnt how to use variables and arithmetic functions.
Now it's time to learn how to make our own functions.
    </content><id>https://www.baturin.org/blog/introduction-to-ocaml-part-2</id><title type="text">Introduction to OCaml, part 2</title><updated>2018-08-07T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/introduction-to-ocaml" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    This post series started as a response to requests from some friends curious about OCaml.
There are quite a few nice books already, but I realized that if I just recommend them any one of those
books, it still will leave me with quite a few things to explain in depth, or force me to recommend another
just to learn about that part. So I thought I may as well write something that hopefully will allow
a person who already knows how to program in some other language get started with writing OCaml programs
and continue learning on their own and find their own sources.
    </content><id>https://www.baturin.org/blog/introduction-to-ocaml</id><title type="text">Introduction to OCaml</title><updated>2018-08-06T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/implementing-sets-with-functions-alone" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    Implementation of sets using nothing but functions would be one of the first tricks in the
&amp;ldquo;100 Fun Things to Do With Functions and Closures&amp;rdquo; book if that book existed.
It may not be very practical, but it may help people get into the functional mindset.
We'll use &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml&lt;/a&gt; for demonstration.
    </content><id>https://www.baturin.org/blog/implementing-sets-with-functions-alone</id><title type="text">Implementing sets with functions alone</title><updated>2018-04-12T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry><entry><link href="https://www.baturin.org/blog/duck-typing" rel="alternate"/><contributor><uri>https://baturin.org/blog/atom-ocaml.xml</uri><name>baturin</name></contributor><content type="html">
    So called &amp;ldquo;duck typing&amp;rdquo; is often poorly explained and thus often misunderstood.
Its name and the adage associated with it (&amp;ldquo;if it walks like a duck and quacks like a duck,
then it is a duck&amp;rdquo;) don't do it any favors either.
    </content><id>https://www.baturin.org/blog/duck-typing</id><title type="text">Duck typing</title><updated>2018-02-21T00:00:00-00:00</updated><author><name>Daniil Baturin</name></author></entry></feed>