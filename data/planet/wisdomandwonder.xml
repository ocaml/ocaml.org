<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://www.wisdomandwonder.com/tag/OCaml/feed</id><title type="text">wisdomandwonder</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="https://www.wisdomandwonder.com/link/8006/opam-for-ocaml" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">OPAM is a source-based package manager for OCaml. It supports multiple simultaneous compiler installations, flexible package constraints, and a Git-friendly development workflow. Why here.</content><id>https://www.wisdomandwonder.com/link/8006/opam-for-ocaml</id><title type="text">OPAM for OCaml</title><updated>2013-08-12T20:48:27-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/4441/godi-the-source-code-objective-caml-distribution" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">Via its homepage: GODI provides an advanced programming environment for the Objective Caml (O&amp;rsquo;Caml) language. From INRIA (who created O&amp;rsquo;Caml) you can get the O&amp;rsquo;Caml compiler and runtime system, but this is usually not enough to develop applications. You also need libraries, and there are many developers all over the world providing them; you can &amp;hellip; &lt;a href=&quot;https://www.wisdomandwonder.com/link/4441/godi-the-source-code-objective-caml-distribution&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &amp;quot;GODI &amp;ndash; The source code Objective Caml distribution&amp;quot;&lt;/span&gt;&lt;/a&gt;</content><id>https://www.wisdomandwonder.com/link/4441/godi-the-source-code-objective-caml-distribution</id><title type="text">GODI â€“ The source code Objective Caml distribution</title><updated>2013-08-11T19:51:18-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5707/programming-pic-microcontrollers-with-objective-caml" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">This project brings Objective Caml into the set of tools which allow to program PIC microcontrollers. (via Anil)</content><id>https://www.wisdomandwonder.com/link/5707/programming-pic-microcontrollers-with-objective-caml</id><title type="text">Programming PIC microcontrollers with Objective Caml</title><updated>2011-06-01T11:12:40-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5360/stalin-scheme-vs-ocaml" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">Here is an old post comparing Stalin Scheme to OCaml, among a few other languages. Here is the article on Jon&amp;rsquo;s page. Stalin seems pretty amazing.</content><id>https://www.wisdomandwonder.com/link/5360/stalin-scheme-vs-ocaml</id><title type="text">Stalin Scheme vs OCaml</title><updated>2010-11-06T22:25:12-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5310/enhanced-ocaml-documentation-version-3-12" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">The Enhanced Ocaml Documentation is provided by Hendrik Tews; basically it visually highlights any difference between the previous and current version of the documentation. Here is how he does it: I diff the txt versions of the reference manual and change the html version by hand. For the grammar rule index I use a tool &amp;hellip; &lt;a href=&quot;https://www.wisdomandwonder.com/link/5310/enhanced-ocaml-documentation-version-3-12&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &amp;quot;Enhanced Ocaml Documentation Version 3.12&amp;quot;&lt;/span&gt;&lt;/a&gt;</content><id>https://www.wisdomandwonder.com/link/5310/enhanced-ocaml-documentation-version-3-12</id><title type="text">Enhanced Ocaml Documentation Version 3.12</title><updated>2010-09-25T02:47:28-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5302/resources-for-learning-camlp4" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">For an accessible introduction to modern (&amp;gt;= 3.10) Camlp4, you may be interested in Jake Donham&amp;rsquo;s blog post series &amp;ldquo;Reading Camlp4&amp;rdquo; : http://ambassadortothecomputers.blogspot.com/search/label/camlp4 You will also find valuable (though incomplete) information on the camlp4 wiki : http://brion.inria.fr/gallium/index.php/Camlp4 The older version of camlp4 (&amp;lt; 3.10, now called camlp5) also provides a documentation http://caml.inria.fr/pub/docs/tutorial-camlp4/index.html , and you &amp;hellip; &lt;a href=&quot;https://www.wisdomandwonder.com/link/5302/resources-for-learning-camlp4&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &amp;quot;Resources for Learning CamlP4&amp;quot;&lt;/span&gt;&lt;/a&gt;</content><id>https://www.wisdomandwonder.com/link/5302/resources-for-learning-camlp4</id><title type="text">Resources for Learning CamlP4</title><updated>2010-09-25T02:42:51-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5238/objective-caml-for-multicore-architectures" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">Efforts being made on one of the biggest criticisms of OCaml. (via Caml-list)</content><id>https://www.wisdomandwonder.com/link/5238/objective-caml-for-multicore-architectures</id><title type="text">Objective Caml for Multicore Architectures</title><updated>2010-09-13T12:31:25-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5208/unison-on-the-iphone" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">Here is how to get Unison running on the iPhone. Nice. Via Sylvain via LinkedIn-Ocaml Developers.</content><id>https://www.wisdomandwonder.com/link/5208/unison-on-the-iphone</id><title type="text">Unison on the iPhone</title><updated>2010-09-11T20:13:37-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5120/ocamlnet-3-0-0" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">I&amp;rsquo;m very proud to announce Ocamlnet 3.0.0, a completely overhauled version of Ocamlnet. Wish I had some problems that needed solving with ocamlnet! (via caml-list)</content><id>https://www.wisdomandwonder.com/link/5120/ocamlnet-3-0-0</id><title type="text">ocamlnet-3.0.0</title><updated>2010-09-01T21:55:33-00:00</updated><author><name>wisdomandwonder</name></author></entry><entry><link href="https://www.wisdomandwonder.com/link/5041/delimited-continuations-on-ocaml" rel="alternate"/><contributor><uri>https://www.wisdomandwonder.com/tag/OCaml/feed</uri><name>wisdomandwonder</name></contributor><content type="html">Via Oleg: The library delimcc directly implementing delimited continuations on OCaml now supports native code (ocamlopt) on selected platforms. http://okmij.org/ftp/continuations/caml-shift.tar.gz The library delimcc implements shift/reset, prompt/control, shift0, control0 delimited continuation operators with multiple, arbitrarily typed prompts. The delimcc implementation is direct: it copies only the relevant fragment of the OCaml stack. The implementation is fully &amp;hellip; &lt;a href=&quot;https://www.wisdomandwonder.com/link/5041/delimited-continuations-on-ocaml&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &amp;quot;Delimited continuations on OCaml&amp;quot;&lt;/span&gt;&lt;/a&gt;</content><id>https://www.wisdomandwonder.com/link/5041/delimited-continuations-on-ocaml</id><title type="text">Delimited continuations on OCaml</title><updated>2010-08-21T15:20:43-00:00</updated><author><name>wisdomandwonder</name></author></entry></feed>