<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">gallium</title><updated>2023-05-27T10:01:48-00:00</updated><entry><link href="http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-28" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

    &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) daily work on the OCaml compiler. This week, the
focus is on compiler messages and backward compatibility.&lt;/p&gt;


  

  
&lt;h3&gt;A tag for quoting inline
code&lt;/h3&gt;
&lt;p&gt;Last week, while I was investigating the breaking change in behavior
for polymorphic variants, I have also started a much more boring change:
uniformizing the quoting style for inline code in the compiler
messages.&lt;/p&gt;
&lt;p&gt;Currently, this quoting style is mostly left to the appreciation of
authors of every compiler messages. This has lead the OCaml compiler
messages to be quite heterogeneous, with different messages using
&lt;code&gt;&amp;quot;...&amp;quot;&lt;/code&gt;, other &lt;code&gt;'...'&lt;/code&gt;, or &lt;code&gt;`...'&lt;/code&gt;,
depending on the preference of the initial author.&lt;/p&gt;
&lt;p&gt;To make the compiler message, I spent the time to introduce a new
&lt;code&gt;inline_code&lt;/code&gt; tag in the set of &lt;code&gt;Format&lt;/code&gt; tags used
by the compiler.&lt;/p&gt;
&lt;p&gt;With this new tag, the compiler message&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The external function `%s' is not available&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;can be rewritten as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The external function %a is not available&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline_code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which has the advantage of centralizing the styling of inline code
fragment in a single location. In particular, this means that we could
adapt the styling to the rendering medium (fancy terminal could use
fancy styling while basic terminal use a textual quote).&lt;/p&gt;
&lt;p&gt;My proposal with this change is currently available as a &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12210&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Cleaning-up error messages&lt;/h3&gt;
&lt;p&gt;Adding an &lt;code&gt;inline_code&lt;/code&gt; tag was also a good occasion to
spot small mistakes in error messages. For example, the error message
for non-overriding inheritance&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;also_empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;lost a word at some point it time, yielding the following error
message&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inheritance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;does&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which may confuse reader wondering what is a
&lt;code&gt;method instance variable&lt;/code&gt;. The sentence is quite easier to
read once we add back the missing &lt;code&gt;and&lt;/code&gt; and plurals&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inheritance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;does&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Backward
compatibility and polymorphic variants&lt;/h3&gt;
&lt;p&gt;As discussed last week, I have been working with Gabriel Scherer on a
way to preserve backward compatibility for programs that mix open
polymorphic variant types and explicit polymorphic annotation in OCaml
5.1:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The backward compatibility hack that we came up with last week is to
automatically add the missing annotations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, while writing a description of this hack in &lt;a href=&quot;https://github.com/ocaml/ocaml#12211&quot;&gt;my pull request&lt;/a&gt;, I
realized that this change was breaking backward compatibility in
&lt;em&gt;another&lt;/em&gt; corner case:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|_)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the issue is that writing such type annotation let the
typechecker infers that the real type of the row variable is
&lt;code&gt;[&amp;gt; `Foo | `Bar` ]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|_)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and not just &lt;code&gt;[&amp;gt; `Foo ]&lt;/code&gt;. However, with our hack, this
code will be converted to&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;([&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|_)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where suddenly we cannot widen &lt;code&gt;[&amp;gt; `Foo ]&lt;/code&gt; to
&lt;code&gt;[&amp;gt; `Foo | `Bar` ]&lt;/code&gt;. And thus the line above fails to
compile with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;but&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;universal&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;may&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To avoid this regression, Jacques Garrigue proposed to only add
annotations to polymorphic variant types that contains references to
universal type variables. In other words, with this updated rule&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|_)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is kept unchanged because &lt;code&gt;[&amp;gt; `Foo ]&lt;/code&gt; does not point to
&lt;code&gt;'b&lt;/code&gt; (or any universally quantified type variables).&lt;/p&gt;
&lt;p&gt;Contrarily&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is transformed into&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;([&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;because &lt;code&gt;[&amp;gt; `X  of 'a ]&lt;/code&gt; refers to the explicitly
quantified type variable &lt;code&gt;'a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, this rule is still well behaved in presence of nested
explicitly polymorphic annotations. For instance, looking at&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;lt;m: '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'irr. ('&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a | `Y of '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a) &amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  &amp;gt; -&amp;gt; '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we can see that the nearest explicit annotation where all universal
variables involved in &lt;code&gt;[&amp;gt; `X of 'a | `Y of 'b]&lt;/code&gt; are bound
is the one the method &lt;code&gt;m&lt;/code&gt;. Thus the type above is equivalent
with the new rule to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(([&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the one hand, I am not sure if the restoration of backward
compatibility in OCaml 5.1 is really worth the complexity of this new
rule. On the other hand, the new rule is conservative enough that we
could use it to emit warnings or hint messages with a sensible
resolution if the missing feature for constrained abstract types lands
in OCaml.&lt;/p&gt;


  </content><id>http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-28</id><title type="text">Florian's OCaml compiler weekly, 28 April 2023</title><updated>2023-04-28T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://cambium.inria.fr/blog/florian-compiler-weekly-2023-04-24" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) daily work on the OCaml compiler. This week, the
focus is on two interesting bugs in the first alpha release of OCaml
5.1.0.&lt;/p&gt;


  

&lt;p&gt;With the release of the first alpha for OCaml 5.1.0, I have shifted a
part of my time towards updating core tools like &lt;a href=&quot;https://github.com/ocaml/odoc/pull/956&quot;&gt;odoc&lt;/a&gt; for OCaml 5.1 and
hunting bugs in the new release.&lt;/p&gt;
&lt;p&gt;Last Monday, working with Kate Deplaix, we found two interesting bugs
by looking at &lt;a href=&quot;http://check.ocamllabs.io&quot;&gt;the opam-health-check
reports&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bug in the new parsetree node for value bindings&lt;/li&gt;
&lt;li&gt;A potentially painful change of behavior for explicitly polymorphic
with open polymorphic variant types.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coercion on value
definitions&lt;/h3&gt;
&lt;p&gt;The first bug stems from a rare construct in the OCaml language:
coercion in value definition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we are coercing the body of the value definition to the type
&lt;code&gt;&amp;lt;x:int&amp;gt;&lt;/code&gt; masking the method &lt;code&gt;m&lt;/code&gt;. This
syntax is a bit surprising we have an explicit coercion which is an
expression which is applied on the pattern side of the definition.&lt;/p&gt;
&lt;p&gt;Before OCaml 5.1, such constructions were desugared in the parser
itself to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When I updated the abstract syntax tree to avoid desugaring value
bindings of the form&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let pat: typ = exp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in the parsetree, I forgot this case which means that the AST dropped
the coercion part of the annotation.&lt;/p&gt;
&lt;p&gt;This mistake ought to be fixed but it leads to an interesting
question on how to represent constraints on value bindings. Should we be
generic and represent the constraints as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_constraint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locally_abstract_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type_expr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coercion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type_expr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, with this representation, we cover two possible new cases
that could be written in fantasy syntax as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type a b c. typ :&amp;gt; coercion
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type a b c. :&amp;gt; coercion
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More problematically, this product type allows for constraints
without any real constraints&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type a b c.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus the generic product feels a tad too wide.&lt;/p&gt;
&lt;p&gt;Another option is to tailor a type closer to the currently supported
syntax with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_constraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Constraint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;locally_abstract_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* type a b c . ... *)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_expr&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* ...: typ *)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coercion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* typ? ...* );&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;      coercion: type_expr  (* ...  :&amp;gt; typ *)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This representation has the disadvantage of losing part of the
similarity between the &lt;code&gt;Coercion&lt;/code&gt; and &lt;code&gt;constraint&lt;/code&gt;
case but it covers exactly the constructs allowed in the syntax.&lt;/p&gt;
&lt;p&gt;This my &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12191&quot;&gt;current
bug fix proposal&lt;/a&gt; for OCaml 5.1.0 .&lt;/p&gt;
&lt;h3&gt;Polymorphic
variants and explicit universal quantification&lt;/h3&gt;
&lt;p&gt;Another interesting difference of behavior between OCaml 5.1.0 and
5.0.0 appears when writing code that mix both open polymorphic variant
types and explicit polymorphic annotation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code compiled in OCaml 5.0.0, but fails in OCaml 5.1.0 with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b ]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      but a pattern was expected which matches values of type [&amp;gt; `X of '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;universal&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;would&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;because the universal variable &lt;code&gt;'a&lt;/code&gt; might escape through
the global row variable hidden in &lt;code&gt;[&amp;gt; X of _ ]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The issue can be fixed by making sure that the row variable is also
bound by the explicit universal quantification:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not only this fix is not that obvious, but it is not compatible with
the short syntax for universal-outside and locally abstract-inside type
variables. For instance, if we start with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;adding a local type &lt;code&gt;r&lt;/code&gt; doesn&amp;rsquo;t help&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a,'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a ] as '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;because we would need a constrained abstract type.&lt;/p&gt;
&lt;p&gt;Thus, we are left with no other options than desugaring the short
hand to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is a bit of mouthful compared to our starting point.&lt;/p&gt;
&lt;p&gt;Thus, I have been investigating with Gabriel Scherer a possibility to
keep the previous definition working&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a. [&amp;gt; `X of '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a = function (`X x) -&amp;gt; x | _ -&amp;gt; assert false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;by making the assumption that any row variables that are unnamed in
an explicit type annotation under an explicit universal quantification
should be bound by the binder. In other words, we could consider that
whenever an user write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a. [&amp;gt; `X of '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a = function (`X x) -&amp;gt; x | _ -&amp;gt; assert false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;they meant to write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a ] as '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a = function (`X x) -&amp;gt; x | _ -&amp;gt; assert false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and thus the typechecker ought to add implicitly the row variable
&lt;code&gt;'r'&lt;/code&gt; to the list of bound variables in the left-hand side of
&lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

</content><id>http://cambium.inria.fr/blog/florian-compiler-weekly-2023-04-24</id><title type="text">Florian's OCaml compiler weekly, 24 April 2023</title><updated>2023-04-24T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://cambium.inria.fr/blog/florian-compiler-weekly-2023-04-17" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) daily work on the OCaml compiler. This week, the
focus is on the first alpha release of OCaml 5.1.0 and some discussion
with the ocamlformat team.&lt;/p&gt;


  

&lt;h3&gt;First alpha release for
OCaml 5.1.0&lt;/h3&gt;
&lt;p&gt;Between Friday and Saturday, I have published the first alpha for
OCaml 5.1.0. As the first version of OCaml 5 published after the feature
freeze for OCaml 5, this version feels like a midpoint between the usual
release process for OCaml 4 and the experimental release of OCaml 5.0.0
.&lt;/p&gt;
&lt;p&gt;In particular, this release will integrate many features that were
either frozen during the development of OCaml 5 or merged in the
development version after the branch for OCaml 5.0 was cut. For
instance, the support for Risc-V was merged in July last year, but it
will only be available with OCaml 5.1 around next July.&lt;/p&gt;
&lt;p&gt;Contrarily, the development windows for contributors that were busy
with OCaml 5.0.0 bug fixing was especially short since there was only
four months between the OCaml 5.0.0 release and the feature freeze for
OCaml 5.1 .&lt;/p&gt;
&lt;p&gt;It is a bit too soon right now to try to summarize the new features
in OCaml 5.1, since unexpected problems might still require to remove
some of the new features (even if that happens rarely in practice).&lt;/p&gt;
&lt;p&gt;However, I have a quite interesting early example of unexpected
incompatibility due to a refactoring: the more precise support for
generative functors break the menhir parser generator.&lt;/p&gt;
&lt;h4&gt;An
example on unintended breakage for generative functor&lt;/h4&gt;
&lt;p&gt;What are generative functors?&lt;/p&gt;
&lt;p&gt;In brief, generative functors are a way to express the fact that
evaluating a functor create side-effect that meaningfully impact the
types that the functor creates and thus two successive applications of
the functor should away yield different types.&lt;/p&gt;
&lt;p&gt;This would be hopefully clearer with the following example, consider
the functor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the functor is applicative, and unsafe! We can break the
internal assertion that we only add &lt;code&gt;stride&lt;/code&gt; to our counters
by using the fact that the two modules &lt;code&gt;Counter_1&lt;/code&gt; and
&lt;code&gt;Counter_2&lt;/code&gt; share the same types &lt;code&gt;t&lt;/code&gt; in&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, we can mix calls to functions of the two modules to break one
of the internal invariants:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assert_failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Counter_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Counter_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Counter_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, here the issue is that the functor &lt;code&gt;Counter&lt;/code&gt;
was intended to be used only with anonymous structure as an argument&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, since we have lost the identity of the anonymous module after
the application, we are guaranteed that the type &lt;code&gt;Counter.t&lt;/code&gt;
is fresh.&lt;/p&gt;
&lt;p&gt;Generative functors (available since OCaml 4.02) makes it possible to
express this intent in the module type system. By defining the functor
&lt;code&gt;Make_counter&lt;/code&gt; as generative with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generative_make_counter&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generative_make_counter&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we inform the module system that&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter_1&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Generative_make_counter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is an error which is rejected with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generative&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applied&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Consequently, we are guaranteed that each call to
&lt;code&gt;Make_counter&lt;/code&gt; creates a fresh type &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, back in 4.02 and 2014, it was decided to represent the
generative application as an application to a syntactic empty structure.
In other words,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;was represented as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This choice of the representation was simpler but it has the
disadvantage of allowing some confusing code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, applicative functors could applied to the unit argument:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Second, generative functors could be applied to a syntactically
empty structure:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Generative_make_counter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;end&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At least, both options make it clear that the types of the generated
modules would be fresh.&lt;/p&gt;
&lt;p&gt;Nevertheless, with more hindsight, it seems better to make the
distinction between the two cases clearer. Thus starting with OCaml 5.1,
the parser and the typechecker distinguishes between &lt;code&gt;F()&lt;/code&gt;
and &lt;code&gt;F(struct end)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In OCaml 5.1, applying a functor to a syntactically empty
structure&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Warning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generative_make_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;generates a warning&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Warning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt; [&lt;span class=&quot;nv&quot;&gt;generative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;]: &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;generative&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;functor&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;applied&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; using '(struct end)' is deprecated.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This warning is here to let some breathing room for ppxs that had to
use this syntax before OCaml 5.1 .&lt;/p&gt;
&lt;p&gt;Contrarily, applying an applicative functor to the empty argument
generates an error&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make_counter&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;functor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicative&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During the review of this change, I didn&amp;rsquo;t think about the
possibility that some OCaml programs would have switch to generative
syntax for application without making the change to the type of the
functor itself.&lt;/p&gt;
&lt;p&gt;But this was too optimistic for at least one opam package. This
package is now fixed, but it remains to be seen if this was an
unfortunate and rare accident. If this is not the case, we will need to
add a deprecation warning on this side too.&lt;/p&gt;
&lt;h3&gt;OCaml Parser and ocamlformat&lt;/h3&gt;
&lt;p&gt;This week, I also had an interesting discussions with members of the
ocamlformat team concerning upstreaming some of the ocamlformat patches
to the compiler.&lt;/p&gt;
&lt;p&gt;As a code formatter, ocamlformat needs to maintain a more precise
mapping between its syntax tree and the code source that the main OCaml
parser. Indeed, ocamlformat cannot afford to discard meaningful
distinction in the code source due to some synctactic sugar. Contrarily,
the main compiler only need to keep enough information about the code
source to be able to report errors, and prints the parsed abstract
syntax tree in a good-enough format.&lt;/p&gt;
&lt;p&gt;The objectives of the two parsers are thus not completely aligned.
However, comparing notes from time to time is a good way to catch
potential issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the compiler loosing important location information?&lt;/li&gt;
&lt;li&gt;Is the compiler mixing different concern in the parsing of the code
source?&lt;/li&gt;
&lt;li&gt;Is the compiler making ppxs transformation harder to express because
the AST veer too far from the surface language?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good example of the last two categories was my &lt;a href=&quot;https://cambium.inria.fr/blog/florian-weekly-2023-03-27/&quot;&gt;change&lt;/a&gt;
for type constraints on value binding. Indeed, before this change the
OCaml parser read&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;as if the programmer had written:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, the two construct are defined to be equivalent at the
level of the typechecker. It is however pretty clear that the
distinction between the two is very meaningful for the programmer.
Moreover, the transformation is complex enough that ppx authors would
probably rather not try to undo the transformation.&lt;/p&gt;
&lt;p&gt;Moving the transformation from the parser to the typechecker was thus
deemed a good move.&lt;/p&gt;
&lt;p&gt;For OCaml 5.2, we will try to seek other refactoring to the parser
that would make sense in the main parser while reducing ocamlformat
maintenance burden.&lt;/p&gt;


  </content><id>http://cambium.inria.fr/blog/florian-compiler-weekly-2023-04-17</id><title type="text">Florian's OCaml compiler weekly, 17 April 2023</title><updated>2023-04-17T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-11" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) daily work on the OCaml compiler. This week, the
focus is on the newly tagged OCaml 5.1 branch.&lt;/p&gt;


  

&lt;h3&gt;A branch for OCaml 5.1&lt;/h3&gt;
&lt;p&gt;Last week, I have mostly worked on preparing the branching of OCaml
5.1. Before creating the new branch I try to check that there are no new
features that are really on the fence to be integrated and that there
are no bugs that would hinder the CI process on the new branch.&lt;/p&gt;
&lt;p&gt;For this new branch, it was the last point that was an unexpected
source of delays.&lt;/p&gt;
&lt;p&gt;Indeed, during a refactoring of the parsetree AST (Abstract syntax
tree) I had introduced a bug in ocamldep that was not caught by CI tests
for ocamldep itself. However, once I updated the bootstrapped compiler
when cutting the new branch, the bug surfaced when compiling the
dependency graph of the compiler itself.&lt;/p&gt;
&lt;p&gt;Consequently, I had to interrupt the publication of the new branch to
fix this issue in &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12164&quot;&gt;a
short pull request&lt;/a&gt;. The fix was merged last week, and I have
published the fixed OCaml 5.1 branch today.&lt;/p&gt;
&lt;h3&gt;Retrospective
on my work before OCaml 5.1 feature freeze&lt;/h3&gt;
&lt;p&gt;Now that we have a branch for OCaml 5.1, the branch will only receive
bug fixes until the final release in summer (probably in July?). It thus
seems a good time to reflect a bit on my work in this first half of
OCaml 5.1 release cycle. Beware however that new features can still be
released before the first beta of OCaml 5.1.0.&lt;/p&gt;
&lt;p&gt;Overall, I have reviewed 19 pull requests, written 9 pull requests
implementing new features, and 3 pull requests implementing bug
fixes.&lt;/p&gt;
&lt;p&gt;Overall, the merged pull requests should provide an incremental but
noticeable improvement to error messages which where the main theme of
most the pull requests that I reviewed or authored.&lt;/p&gt;
&lt;h4&gt;Reviewing pull requests&lt;/h4&gt;
&lt;p&gt;Looking at my reviewed pull requests, I have indeed reviewed 9 pull
requests improving error messages. Then with 4 reviews, the type system
was another area where my work was focused.&lt;/p&gt;
&lt;h5&gt;Error messages&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Most of the improvements for error messages made the messages
more explicit by trying to present more contextual information to the
user:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11530&quot;&gt;#11530&lt;/a&gt;:
Include kinds in kind mismatch error message. (Leonhard Markert, review
by Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11888&quot;&gt;#11888&lt;/a&gt;:
Improve the error message when type variables cannot be deduced from the
type parameters. (Stefan Muenzel, review by Florian Angeletti and
Gabriel Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12051&quot;&gt;#12051&lt;/a&gt;:
Improve the error messages when type variables cannot be generalized
(Stefan Muenzel, review by Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/10818&quot;&gt;#10818&lt;/a&gt;:
Preserve integer literal formatting in type hint. (Leonhard Markert,
review by Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other pull requests improved the structure of the error messages
by making a better use of highlights and locations:&lt;/p&gt;
&lt;ol start=&quot;5&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11679&quot;&gt;#11679&lt;/a&gt;:
Improve the error message about too many arguments to a function (Jules
Aguillon, review by Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12116&quot;&gt;#12116&lt;/a&gt;:
Don&amp;rsquo;t suggest to insert a semicolon when the type is not unit (Jules
Aguillon, review by Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were also two formatting improvements:&lt;/p&gt;
&lt;ol start=&quot;7&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11646&quot;&gt;#11646&lt;/a&gt;:
Add colors to error message hints. (Christiana Anthony, review by
Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12024&quot;&gt;#12024&lt;/a&gt;:
insert a blank line between separate compiler messages (Gabriel Scherer,
review by Florian Angeletti, report by David Wong)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, there was one improvement on the ability to
cross-reference the reference manual within error or warning
messages:&lt;/p&gt;
&lt;ol start=&quot;9&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12125&quot;&gt;#12125&lt;/a&gt;:
Add Misc.print_see_manual and modify &lt;span class=&quot;citation&quot; data-cites=&quot;manual_ref&quot;&gt;[@manual_ref]&lt;/span&gt; to accept lists for simpler
printing of manual references (Stefan Muenzel, review by Florian
Angeletti)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Type system&lt;/h5&gt;
&lt;p&gt;On the type system side, I have most reviewed internal refactoring
changes that are probably not that user visible (even when they remove
some bugs).&lt;/p&gt;
&lt;ol start=&quot;10&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/6941&quot;&gt;#6941&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11187&quot;&gt;#11187&lt;/a&gt;:
prohibit using classes through recursive modules inheriting or including
a class belonging to a mutually-recursive module would previous behave
incorrectly, and now results in a clean error. (Leo White, review by
Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11912&quot;&gt;#11912&lt;/a&gt;:
Refactoring handling of scoped type variables (Richard Eisenberg, review
by Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11569&quot;&gt;#11569&lt;/a&gt;:
Remove hash type encoding (Hyunggyu Jang, review by Gabriel Scherer and
Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11984&quot;&gt;#11984&lt;/a&gt;:
Add dedicated syntax for generative functor application. Previously,
OCaml did not disinguish between &lt;code&gt;F ()&lt;/code&gt; and
&lt;code&gt;F (struct end)&lt;/code&gt;, even though the latter looks applicative.
Instead, the decision between generative and applicative functor
application was made based on the type of &lt;code&gt;F&lt;/code&gt;. With this
patch, we now distinguish these two application forms; writing
&lt;code&gt;F (struct end)&lt;/code&gt; for a generative functor leads to new
warning 73. (Frederic Bour and Richard Eisenberg, review by Florian
Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Internal refactoring&lt;/h5&gt;
&lt;ol start=&quot;14&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11745&quot;&gt;#11745&lt;/a&gt;:
Debugger and toplevels: embed printer types rather than reading their
representations from topdirs.cmi at runtime]. (S&amp;eacute;bastien Hinderer,
review by Florian Angeletti, Nicol&amp;aacute;s Ojeda B&amp;auml;r and Gabriel Scherer)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;CLI interface&lt;/h5&gt;
&lt;ol start=&quot;15&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11653&quot;&gt;#11653&lt;/a&gt;:
Add the -no-absname option to ocamlc, ocamlopt and ocamldep. (Abiola
Abdulsalam, review by S&amp;eacute;bastien Hinderer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11696&quot;&gt;#11696&lt;/a&gt;:
Add the -no-g option to ocamlc and ocamlopt. (Abiola Abdulsalam, review
by S&amp;eacute;bastien Hinderer, Nicol&amp;aacute;s Ojeda B&amp;auml;r and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Standard library&lt;/h5&gt;
&lt;ol start=&quot;17&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11128&quot;&gt;#11128&lt;/a&gt;:
Add In_channel.isatty, Out_channel.isatty. (Nicol&amp;aacute;s Ojeda B&amp;auml;r, review by
Gabriel Scherer and Florian Angeletti)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12103&quot;&gt;#12103&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12104&quot;&gt;#12104&lt;/a&gt;: fix a
concurrency memory-safety bug in Buffer (Gabriel Scherer, review by
Florian Angeletti, report by Samuel Hym)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Documentation&lt;/h5&gt;
&lt;ol start=&quot;19&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11676&quot;&gt;#11676&lt;/a&gt;:
Fix missing since annotation in the &lt;code&gt;Sys&lt;/code&gt; and
&lt;code&gt;Format&lt;/code&gt; modules (Github user Bukolab99, review by Florian
Angeletti)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Authored feature pull
requests&lt;/h4&gt;
&lt;p&gt;As it is was the case before the OCaml 5.0 multicore freeze, my
personal contribution was focused on error messages during the last
month with 5 pull requests on this thematic for a total of 9 pull
requests.&lt;/p&gt;
&lt;h5&gt;Error messages&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In particular, the new release will hopefully see an improvement
in the way that types are printed in error messages, both when
identifiers collide&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11286&quot;&gt;#11286&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11515&quot;&gt;#11515&lt;/a&gt;:
disambiguate identifiers by using how recently they have been bound in
the current environment (Florian Angeletti, review by Gabriel
Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11910&quot;&gt;#11910&lt;/a&gt;:
Simplify naming convention for shadowed or ephemeral identifiers in
error messages (eg:
&lt;code&gt;Illegal shadowing of included type t/2 by t&lt;/code&gt;) (Florian
Angeletti, review by Jules Aguillon)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;or when a weak row type variable rears its head:&lt;/p&gt;
&lt;ol start=&quot;3&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12107&quot;&gt;#12107&lt;/a&gt;:
use aliases to mark weak row variables: &lt;code&gt;_[&amp;lt; ... ]&lt;/code&gt;,
&lt;code&gt;&amp;lt; _..&amp;gt;&lt;/code&gt;, &lt;code&gt;_#ct&lt;/code&gt; are now rendered as
&lt;code&gt;[&amp;lt; ...] as '_weak1&lt;/code&gt; ,
&lt;code&gt;&amp;lt; .. &amp;gt; as '_weak1&lt;/code&gt;, and &lt;code&gt;#ct as '_weak1&lt;/code&gt;.
(Florian Angeletti, suggestion by Stefan Muenzel, review by Gabriel
Scherer)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also implemented or participated to two relatively small
improvement on warnings:&lt;/p&gt;
&lt;ol start=&quot;4&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11235&quot;&gt;#11235&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11864&quot;&gt;#11864&lt;/a&gt;: usage
warnings for constructors and fields can now be disabled on
field-by-field or constructor-by-constructor basis (Florian Angeletti,
review by Gabriel Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/10931&quot;&gt;#10931&lt;/a&gt;:
Improve warning 14 (illegal backslash) with a better explanation of the
causes and how to fix it. (David Allsopp, Florian Angeletti, Lucas De
Angelis, Gabriel Scherer, review by Nicol&amp;aacute;s Ojeda B&amp;auml;r, Florian
Angeletti, David Allsopp and Gabriel Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;OCamldoc maintenance&lt;/h5&gt;
&lt;p&gt;I still keep maintaining ocamldoc in a minimal working state, but I
hope to switch to odoc for the manual in time for the release of OCaml
5.1 .&lt;/p&gt;
&lt;ol start=&quot;6&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11889&quot;&gt;#11889&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11978&quot;&gt;#11978&lt;/a&gt;:
ocamldoc: handle injectivity annotations and wildcards in type
parameters. (Florian Angeletti, report by Wiktor Kuchta, review by Jules
Aguillon)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12165&quot;&gt;#12165&lt;/a&gt;:
ocamldoc, use standard doctype to avoid quirk mode. (Florian Angeletti,
review by Gabriel Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Documentation&lt;/h5&gt;
&lt;ol start=&quot;8&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12028&quot;&gt;#12028&lt;/a&gt;:
Update format documentation to make it clearer that
&lt;code&gt;pp_print_newline&lt;/code&gt; flushes its newline (Florian Angeletti,
review by Gabriel Scherer)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Internal refactoring&lt;/h5&gt;
&lt;ol start=&quot;9&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12119&quot;&gt;#12119&lt;/a&gt;:
mirror type constraints on value binding in the parsetree: the
constraint &lt;code&gt;typ&lt;/code&gt; in &lt;code&gt;let pat : typ = exp&lt;/code&gt; is now
directly stored in the value binding node in the parsetree. (Florian
Angeletti, review by Richard Eisenberg)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Authored bug fixes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Least but not last, I have fixed two of my mistakes in previous
pull requests&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11450&quot;&gt;#11450&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12018&quot;&gt;#12018&lt;/a&gt;: Fix
erroneous functor error messages that were too eager to cast
&lt;code&gt;struct end&lt;/code&gt; functor arguments as unit modules in
&lt;code&gt;F(struct end)&lt;/code&gt;. (Florian Angetti, review by Gabriel
Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12061&quot;&gt;#12061&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/12063&quot;&gt;#12063&lt;/a&gt;: don&amp;rsquo;t
add inconsistent equalities when computing high-level error messages for
functor applications and inclusions. (Florian Angeletti, review by
Gabriel Scherer)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and fixed what was maybe one of the fastest bug to trigger in
OCaml history&lt;/p&gt;
&lt;ol start=&quot;3&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/11824&quot;&gt;#11824&lt;/a&gt;:
Fix a crash when calling &lt;code&gt;ocamlrun -b&lt;/code&gt; (Florian Angeletti,
review by S&amp;eacute;bastien Hinderer)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;since the bug did not require any code source to trigger.&lt;/p&gt;


  </content><id>http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-11</id><title type="text">Florian's OCaml compiler weekly, 11 April 2023</title><updated>2023-04-11T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-03" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) work on the OCaml compiler: this week, the focus is
on format string and how to serialize partial error messages while still
using the formatting engine from the Format module.&lt;/p&gt;


  

  
&lt;p&gt;Last week, beyond some ongoing discussion on the refactorisation of
Dynlink, and a draft for some future tutorial on GADTs, I spent some
time refactoring and cleaning up my work on an alternative interpreter
for OCaml format strings.&lt;/p&gt;
&lt;h3&gt;A serializable
data type for Format messages&lt;/h3&gt;
&lt;p&gt;A medium term objective for me this year is to make it possible for
the compiler to emit machine-readable messages at the destination of the
various development tools for OCaml.&lt;/p&gt;
&lt;p&gt;This would avoid the need for those tools to parse the compiler error
messages or warnings, and make it simpler for exterior contributors to
experiment with new error formats.&lt;/p&gt;
&lt;p&gt;One of the obstacle towards this objective comes from the difficulty
to have partial messages when using &lt;code&gt;Format&lt;/code&gt; as a formatting
engine. As an example, imagine that I want to print an error message
with a prefix&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and a main body&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if I want to preserve the newline hint in the main body while making
the body message starts just after the prefix, I need to print the two
parts of the error message at the same time, with for instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%t%t&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_body&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I rendered ever part of the messages to string before printing I
would lose the context that the Format module is using for indentation
and line breaks. Similarly, I cannot start rendering the second message
before the first. This means that the &lt;code&gt;Format&lt;/code&gt; requires us to
always print messages in order.&lt;/p&gt;
&lt;p&gt;This complexity is reflected in the type of the compiler error report
where partial messages are represented as suspended closure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This representation creates three issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, one must be very careful that the delayed closure does not
capture the wrong global state.&lt;/li&gt;
&lt;li&gt;Second, it is not serializable.&lt;/li&gt;
&lt;li&gt;Third, it is cumbersome and for instance warning messages where
never converted to this format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As surprising as it may sound, the first grievance rears its head not
that infrequently in the compiler code base because the pretty-printer
for types is full of global states (there are some global state to track
loop, some other state to track naming decision, yet another global
state to track shortest path name).&lt;/p&gt;
&lt;p&gt;As a way to circumvent this issue, I have been working on immutable
interpreter for format strings which translates format strings as a
sequence of formatting instruction that might be interpreted later by a
formatting engine.&lt;/p&gt;
&lt;p&gt;For instance with this interpreter, the format string&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Format_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;@[This is a text with %s,@ breaks and @[%d box@].@]&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;one hole&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
   &lt;span class=&quot;nn&quot;&gt;Format_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is rendered to the following sequence of instructions for
&lt;code&gt;Format&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Open_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is a text with &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;one hole&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Simple_break&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;breaks and &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Open_box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; box&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Close_box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Close_box&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One advantages of this type is that we have transformed the format
string into data, with no closures in sight. The format is thus
inherently serializable and does not rely on any captured state.&lt;/p&gt;
&lt;p&gt;Moreover, with a bit of GADTs, we can create a compatibility layer
between the classical &lt;code&gt;Format&lt;/code&gt; interpreter and the new
immutable interpreter.&lt;/p&gt;
&lt;p&gt;First, we define compatibility formatters as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then the actual printing functions can choose which underlying
function to call in function of the formatter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp_print_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp_print_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Doc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Immutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdoc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Splitting all primitive functions of the &lt;code&gt;Format&lt;/code&gt; module
gives us a new &lt;code&gt;fprintf&lt;/code&gt; function with type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this compatibility layer in place, converting a
&lt;code&gt;Format&lt;/code&gt; printers is a matter of adding a single
&lt;code&gt;open Format_doc.Compat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I am still pondering on the implementation and design of this
alternative printing module. It is thus probable that I will end up
tying the final PR on this feature but I have made the implementation
available as a small &lt;a href=&quot;https://github.com/Octachron/format-doc&quot;&gt;format-doc&lt;/a&gt;
library.&lt;/p&gt;


  </content><id>http://gallium.inria.fr/blog/florian-compiler-weekly-2023-04-03</id><title type="text">OCaml compiler weekly, 3 April 2023</title><updated>2023-04-03T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/florian-compiler-weekly-2023-03-27" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;This series of blog post aims to give a short weekly glimpse into my
(Florian Angeletti) work on the OCaml compiler.&lt;/p&gt;


  

  
  &lt;h3&gt;Reviewing github pull
requests&lt;/h3&gt;
&lt;p&gt;Last week, I have spent a significant portion of my week reviewing
pull requests on the compiler and I have been fortunate to merge three
nice pull requests:&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12116&quot;&gt;Don&amp;rsquo;t suggest a
semicolon when the type is not unit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This pull request by Jules Aguillon improves the new error report for
applying a function to too many argument.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((+)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'List.map'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; (&lt;span class=&quot;s&quot;&gt;'a -&amp;gt; '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;s&quot;&gt;'a list -&amp;gt; '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applied&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.ml&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;:
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; ((+) &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;) [&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;] [&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;]
                           ^^
  &lt;span class=&quot;n&quot;&gt;Hint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Did&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;';'&lt;/span&gt;?
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.ml&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;:
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; ((+) &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;) [&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;] [&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;]
                             ^^^^^^^
  &lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expected&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;by removing the hint whenever the expect result type of the
application is not &lt;code&gt;unit&lt;/code&gt;. This let us with a shorter and
to-the-point error message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((+)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'List.map'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; (&lt;span class=&quot;s&quot;&gt;'a -&amp;gt; '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;s&quot;&gt;'a list -&amp;gt; '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applied&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test.ml&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;:
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; ((+) &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;) [&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;] [&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;]
                             ^^^^^^^
  &lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expected&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that if you don&amp;rsquo;t recognize the error message format, this is
expected: the previous version had already been considerably improved by
a previous PR by Jules.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12051&quot;&gt;Print the type
variables that cannot be generalized&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This pull request by Stefan Muenzel proposed to make more explicit
the error messages concerning non-generalizable type variables. The new
error message points explicitly to all non-generalize type variables in
the involved types.&lt;/p&gt;
&lt;p&gt;For instance, writing a ml file containing the single line&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;now raises&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_weak1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_weak1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_weak2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ains&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generalizable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_weak1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_weak2&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manual&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Moreover whenever the error happens in a submodule, the error message
now points to the first value with a non-generalizable type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; [] &lt;span class=&quot;nb&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;File &amp;quot;test.ml&amp;quot;, line 1, characters 0-36:
1 | module M = struct let x = ref [] end
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: The type of this module, sig val x : '_weak1 list ref end,
       contains non-generalizable type variable(s).
       (see manual section 6.1.2)
File &amp;quot;test.ml&amp;quot;, line 1, characters 22-23:
1 | module M = struct let x = ref [] end
                          ^
  The type of this value, '_weak1 list ref,
  contains the non-generalizable type variable(s) '_weak1.
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12125&quot;&gt;Better manual reference
in error message&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In order to implement the improved error message above, a better way
to cite subsections in the manual was needed. Stefan Muenzel took the
time to improve the manual cross-reference checker tool to handle this
case. The manual cross-reference test checks that references in error
messages and warnings are consistent with the section numbering of the
manual by parsing the latex-generated aux-file. On the OCaml side, the
test only handled chapter and section numbers.&lt;/p&gt;
&lt;p&gt;With the change in Stefan&amp;rsquo;s PR, it is now possible to cite uniformly
chapters, sections and subsections (and subsubsections) of the manual in
error messages.&lt;/p&gt;
&lt;h3&gt;My pull requests&lt;/h3&gt;
&lt;p&gt;Two weeks ago, I finally found the time to propose a small change on
the OCaml AST node for value bindings.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/12119&quot;&gt;Explicit type
constraints in value bindings&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Consider the following value binding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before my change, the type constraint was stored both in the pattern
node and (sometimes) in the expression node with a rather complex
desugaring. This duplication of nodes make handling such constraints in
ppxs more complicated than it ought to be and it introduced some
irregular encoding of type expressions.&lt;/p&gt;
&lt;p&gt;With my change, the type constraint is stored directly in the value
binding node, and the elaboration has been moved to the typechecker.
Hopefully, soon we will no longer build parsetree node in the
typechecker. However, in the meanwhile, the parsetree is now closer to
the source language and simpler to transform with ppxs.&lt;/p&gt;
&lt;h3&gt;On-going discussions&lt;/h3&gt;
&lt;p&gt;In term of medium term projects, I have been discussing two
interesting projects last week.&lt;/p&gt;
&lt;h4&gt;Dynlink library&lt;/h4&gt;
&lt;p&gt;I have spent some time discussing with S&amp;eacute;bastien Hinderer about his
plans to simplify the build and dependency of OCaml dynlinking library.
Right now, this library is built with its own version of the compiler
library (to avoid module name collision) which introduces a lot of
complexity in the compiler build system. After some discussions with
S&amp;eacute;bastien, we decided to try to isolate a core &lt;code&gt;linking&lt;/code&gt;
library that would be shared with both &lt;code&gt;dynlink&lt;/code&gt; and the rest
of the compiler library.&lt;/p&gt;
&lt;h4&gt;OCamltest DSL&lt;/h4&gt;
&lt;p&gt;The ocamltest DSL for the compiler test suite is currently inspired
by org mode as a generic way to write tree of tests. However, with some
more distance, it has become clearer that such representation is not
optimized for most tests in the compiler test suite. In particular,
tests often have very long sequences of actions that are ill-fit the
current representation. We have thus been discussing an improved DSL for
ocamltest for some time, and recently converged towards a new
version.&lt;/p&gt;


  </content><id>http://gallium.inria.fr/blog/florian-compiler-weekly-2023-03-27</id><title type="text">OCaml compiler weekly, 27 March 2023</title><updated>2023-03-27T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/measuring-compilation-time/" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">


It can be tricky to evaluate the effect of invidual commits or pull requests on
the speed of the OCaml compiler. In this blog post, I (Florian Angeletti) report my
experience on measuring such impact with some degree of statistical significance.


  

  &lt;p&gt;The OCaml typechecker is an important piece of the OCaml compiler
pipeline which accounts for a significant portion of time spent on
compiling an OCaml program (see the &lt;a href=&quot;http://gallium.inria.fr/blog/index.rss#compilation-profile&quot;&gt;appendices&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The code of the typechecker is also quite optimised, sometimes to the
detriment of the readability of the code. Recently, Jacques Garrigue and
Takafumi Saikawa have worked on a series of pull requests to improve the
readability of the typechecker (&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10337&quot;&gt;#10337&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10474&quot;&gt;#10474&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10541&quot;&gt;#10541&lt;/a&gt;).
Unfortunately, those improvements are also expected to increase the
typechecking time of OCaml programs because they add abstraction
barriers, and remove some optimisations that were breaking the
abstraction barriers.&lt;/p&gt;
&lt;p&gt;The effect is particularly pronounced on &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10337&quot;&gt;#10337&lt;/a&gt;. Due to the
improvement of the readability of the typechecker, this pull request has
been merged after some quick tests to check that the compilation time
increase was not too dire.&lt;/p&gt;
&lt;p&gt;However, the discussion on this pull request highlighted the fact
that it was difficult to measure OCaml compilation time on a scale large
enough to enable good statistical analysis and that it would be
useful.&lt;/p&gt;
&lt;p&gt;Consequently, I decided to try my hand at a statistical analysis of
OCaml compilation time, using this pull request &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10337&quot;&gt;#10337&lt;/a&gt; as a case
study. Beyond this specific PR, I think that it is interesting to write
down a process and a handful of tools for measuring OCaml compilation
time on the opam ecosystem.&lt;/p&gt;
&lt;p&gt;Before doing any kind of analysis, the first step is to find an easy
way to collect the data of interest. Fortunately, the OCaml compiler can
emit timing information with flag &lt;code&gt;-dtimings&lt;/code&gt;. However, this
information is emitted on stdout, whereas my ideal sampling process
would be to just pick an opam package, launch a build process and
recover the timing information for each file. This doesn&amp;rsquo;t work if the
data is sent to the stdout, and never see again. This first step is thus
to create a version of the OCaml compiler that can output the timing
information of the compilation to a specific directory. With this change
(&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10575&quot;&gt;#10575&lt;/a&gt;),
installing an opam package with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OCAMLPARAM=&amp;quot;,_,timings=1,dump-dir= /tmp/pkgnname&amp;quot; opam install pkgname&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;outputs all profiling information to &lt;code&gt;/tmp/pkgname&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This makes it possible to collect large number of data points on
compilation times by using opam, and the canonical installation process
of each package without the need of much glue code.&lt;/p&gt;
&lt;p&gt;For this case study, I am using 5 core packages
&lt;code&gt;containers&lt;/code&gt;, &lt;code&gt;dune&lt;/code&gt;, &lt;code&gt;tyxml&lt;/code&gt;,
&lt;code&gt;coq&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt;. Once their dependencies are
added, I end up with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ocamlfind&lt;/li&gt;
&lt;li&gt;num&lt;/li&gt;
&lt;li&gt;zarith&lt;/li&gt;
&lt;li&gt;seq&lt;/li&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;li&gt;coq&lt;/li&gt;
&lt;li&gt;dune&lt;/li&gt;
&lt;li&gt;re&lt;/li&gt;
&lt;li&gt;ocamlbuild&lt;/li&gt;
&lt;li&gt;uchar&lt;/li&gt;
&lt;li&gt;topkg&lt;/li&gt;
&lt;li&gt;uutf&lt;/li&gt;
&lt;li&gt;tyxml&lt;/li&gt;
&lt;li&gt;sexplib0&lt;/li&gt;
&lt;li&gt;base&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then it is a matter of repeatedly installing those packages, and
measuring the compilation times before and after &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/10337&quot;&gt;#10337&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to get more reliable statistics on each file, each package
was compiled 250 times leading to 1,6 millions of data points (available
&lt;a href=&quot;http://gallium.inria.fr/static/longer_complex.log.xz&quot;&gt;here&lt;/a&gt;) after slightly more
than a week-end of computation.&lt;/p&gt;
&lt;p&gt;In order to try to reduce the noise induced by the operating system
scheduler, the compilation process is run with &lt;code&gt;OPAMJOBS=1&lt;/code&gt;.
Similarly, the compilation process was isolated as much as possible from
the other process using the &lt;code&gt;cset&lt;/code&gt; Linux utility to reserve
one full physical core to the opam processes.&lt;/p&gt;
&lt;p&gt;The code for collecting samples, analyzing them, and plotting the
graphs below is available at &lt;a href=&quot;https://github.com/Octachron/ocaml-perfomance-monitoring&quot;&gt;https://github.com/Octachron/ocaml-perfomance-monitoring&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Comparing averages, files by
files&lt;/h2&gt;
&lt;p&gt;With the data at hand, we can compute the average compilation by
files, and by stage of the OCaml compiler pipeline. In our case, we are
mostly interested in the typechecking stage, and global compilation
time, since #10337 should only alter the time spent on typechecking. It
is therefore useful to split the compilation time into
&lt;code&gt;typechecking + other=total&lt;/code&gt;. Then for each files in the 15
packages above, we can can compute the average time for each of those
stages and the relative change of average compilation time:
&lt;code&gt;time after/time before&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Rendering those relative changes for the typechecking time, file by
file (with the corresponding 90% confidence interval) yields&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/mean_ratio.svg&quot; alt=&quot;Relative change in average typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative change in average typechecking
time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To avoid noise, I have removed files for which the average
typechecking time was inferior to one microsecond on the reference
version of the compiler.&lt;/p&gt;
&lt;p&gt;In the graph above, there are few remarkable points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As expected, the average typechecking time increased for almost all
files&lt;/li&gt;
&lt;li&gt;A significant portion of points are stuck to the line
&amp;ldquo;after/before=1&amp;rdquo;. This means that for those files there was no changes
at all of the typechecking times.&lt;/li&gt;
&lt;li&gt;The standard deviation time varies wildly across packages. The
typechecking of some dune files tend to have a very high variances.
However outside of those files, the standard deviation seems moderate,
and the mean estimator seem to have converged.&lt;/li&gt;
&lt;li&gt;For a handful a files for which the typechecking time more than
doubled. However the relative typechecking time does seem to be confined
in the &lt;code&gt;[1,1.2]&lt;/code&gt; range for a majority of files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the data is quite noisy, it is useful before trying to
interpret it to check that we are not looking only at noise.
Fortunately, we have the data on the time spent outside of the
typechecking stage available, and those times should be mostly noise. We
have thus a baseline, that looks like&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/other_ratio.svg&quot; alt=&quot;Relative change in average non-typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative change in average
non-typechecking time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This cloud of points look indeed much noisier. More importantly, it
seems centred around the line &lt;code&gt;after/before=1&lt;/code&gt;. This means
that our hypothesis that the compilation time outside of the
typechecking stage has not been altered is not visibly invalidated by
our data points. An other interesting point is that the high variance
points seems to be shared between the typechecking and other graphs.&lt;/p&gt;
&lt;p&gt;We can even check on the graphs for the average total compilation
(file by file)&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/total_ratio.svg&quot; alt=&quot;Relative change in average total time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative change in average total time by
files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;that those points still have a high variance here. However, outside
of this cluster of points, we have a quite more compact distribution of
points for the total compilation time: it seems that we have a quite
consistent increase of the total compilation time of around 3%.&lt;/p&gt;
&lt;p&gt;And this is reflected in the averages:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Typechecking average&lt;/th&gt;
&lt;th&gt;Other average&lt;/th&gt;
&lt;th&gt;Total average&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1.06641&lt;/td&gt;
&lt;td&gt;1.01756&lt;/td&gt;
&lt;td&gt;1.03307&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There is thus an increase of around 6.6% of typechecking time which
translates to an increase of 3.3% of total time. However, the
non-typechecking time also increased by 1.7% in average. The average is
thus either tainted by some structural bias or the relative variance
(mean/ratio) is still enough for the distribution of the ratio to be
ill-behaved (literature seems to indicate that a relative variance &amp;lt;
10% is required for the distribution of ratio to be Gaussian-like).
Anyway, we probably cannot count on a precision of more than 1.7%. Even
with this caveat, we still have a visible effect on the total
compilation time.&lt;/p&gt;
&lt;p&gt;We might better served by comparing the geometric average. Indeed, we
are comparing ratio of time, with possibly a heavy-tailed noise. By
using the geometric average (which compute the exponential of the
arithmetic mean of the logarithms of our ratio), we can check that rare
events don&amp;rsquo;t have an undue influence on the average. In our case the
geometric means looks like&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 36%&quot;/&gt;
&lt;col style=&quot;width: 30%&quot;/&gt;
&lt;col style=&quot;width: 32%&quot;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Typechecking geometric average&lt;/th&gt;
&lt;th&gt;Other geometric average&lt;/th&gt;
&lt;th&gt;Total geometric average&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1.05963&lt;/td&gt;
&lt;td&gt;1.01513&lt;/td&gt;
&lt;td&gt;1.03215&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;All geometric averages have decreased compared to the arithmetic
means, which is a sign that the compilation time distribution is skewed
towards high compilation times. However, the changes are small and do
not alter our previous interpretation.&lt;/p&gt;
&lt;p&gt;We can somewhat refine those observations by looking at the medians
(which are even less affected by the heavy-tailness of
distributions)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Typechecking median&lt;/th&gt;
&lt;th&gt;Other median&lt;/th&gt;
&lt;th&gt;Total media&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1.03834&lt;/td&gt;
&lt;td&gt;1.00852&lt;/td&gt;
&lt;td&gt;1.02507&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here, the non-typechecking times seems far less affected by the
structural bias (with an increase of 0.9%) whereas the increase of
typechecking time and total compilation time are reduced but still here
at 3.8% and 2.5% respectively.&lt;/p&gt;
&lt;h2&gt;Comparing averages, quantiles&lt;/h2&gt;
&lt;p&gt;We can refine our analysis by looking at the quantiles of those
relative changes of compilation time&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/mean_quantiles.svg&quot; alt=&quot;Quantiles of the relative change of average typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative change of
average typechecking time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;mean quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.875097&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;1.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1.03834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1.08826&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.162&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;1.51411&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;2.76834&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here we see that the typechecking time of around 25% of files is
simply not affected at all by the changes. And for half of the files,
the compilation time is inferior to 9%. Contrarily, there is 1% of files
for which the typechecking time increases by more than 50% (with
outliers around 200%-400% increase).&lt;/p&gt;
&lt;p&gt;However, looking at the total compilation does seems to reduce the
overall impact of the change&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/total_quantiles.svg&quot; alt=&quot;Quantiles of the relative change in average total time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative change in
average total time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;total quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.945555&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;1.00707&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1.02507&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.07895&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;1.17846&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;1.4379&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Indeed, we still have 25% of files not impacted, but for 65% of files
the relative increase of compilation time is less than 8%. (and the
outliers stalls at a 50% increase)&lt;/p&gt;
&lt;p&gt;We can also have a quick look at the quantiles for the
non-typechecking time&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/other_quantiles.svg&quot; alt=&quot;Quantiles of the relative change in average non-typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative change in
average non-typechecking time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;other quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.855129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;0.956174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;0.995239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1.00852&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1.03743&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.08618&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;1.25541&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;1.67784&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;but here the only curiosity if that the curve is more symmetric and
we have 25% of files for which the non-typechecking compilation time
decrease randomly.&lt;/p&gt;
&lt;h2&gt;Noise models and minima&lt;/h2&gt;
&lt;p&gt;One issue with our previous analysis is the high variance which is
observable in the non-typechecking average times across files. A
possibility to mitigate this issue is to change our noise model. Using
an average, we implicitly assumed that the compilation time was
mostly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;observable_compilation_time = theoretical_computation_time + noise&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where noise is a random variable with at least a finite variance and
a mean of &lt;code&gt;0&lt;/code&gt;. Indeed, with this symmetry hypothesis the
expectation of the observable computation time aligns with the
theoretical compilation time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E[observable_computation_time] = E[theoretical_computation_time] + E[noise] = theoretical_computation_time&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the variance &lt;code&gt;Var[observable_computation_time]&lt;/code&gt; is
exactly the variance of the noise &lt;code&gt;Var[noise]&lt;/code&gt;. Then our
finite variance hypothesis ensure that the empirical average hypothesis
converges relatively well towards the theoretical expectation.&lt;/p&gt;
&lt;p&gt;However, we can imagine another noise model with a multiplicative
noise (due to CPU scheduling for instance),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;observable_compilation_time = scheduling_noise * theoretical_computation_time + noise&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with both &lt;code&gt;scheduling_noise&amp;gt;1&lt;/code&gt; and
&lt;code&gt;noise&amp;gt;1&lt;/code&gt;. With this model, the expectation of the
observable compilation time does not match up with the theoretical
computation time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E[observable_computation_time] - theoretical_computation_time =
  (E[scheduling_noise]-1) * theoretical_computation_time + E[noise]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, in this model, the average observable computation time is a
structurally biased estimator for the theoretical computation time. This
bias might be compensated by the fact that we are only looking to ratio.
Nevertheless, this model also induces a second source of variance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Var[observable_computation_time] = theoretical_computation_time^2 Var[scheduling_noise] + Var[noise]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(/assuming the two noises are not correlated), and this variance
increases with the theoretical computation time. This relative standard
deviation might be problematic when computing ratio.&lt;/p&gt;
&lt;p&gt;If this second noise model is closer to reality, using the empirical
average estimators might be not ideal. However, the positivity of the
noise opens another avenue for estimators: we can consider the minima of
a series of independent realisations. Then, we have&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;min(observable_compilation_time) = min(scheduling_noise * theoretical_computation_time) + min(noise) = theoretical_computation_time&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if the &lt;code&gt;min(scheduling_noise)=1&lt;/code&gt; and
&lt;code&gt;min(noise)=0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This model has another advantage: by assuming that the (essential)
support of the noise distribution has finite lower bound, we know that
the empirical minima will converge towards a three-parameter Weibull
distribution with a strictly positive support. (To be completely
explicit, we also need to assume some regularity of the distribution
around this lower bound too).&lt;/p&gt;
&lt;p&gt;This means that the distribution ratio of the empirical minima will
not exhibits the infinite moments of the ratio of two Gaussians. Without
this issue, our estimator should have less variance.&lt;/p&gt;
&lt;p&gt;However, we cannot use Gaussian confidence intervals for the
empirical minima. Moreover, estimating the confidence interval for the
Weibull distribution is more complex. Since we are mostly interested in
corroborating our previous result, we are bypassing the computation of
those confidence intervals.&lt;/p&gt;
&lt;h2&gt;Comparing minima&lt;/h2&gt;
&lt;p&gt;We can then restart out analysis using the minimal compilation time
file-by-file. Starting with the minimal typechecking time, we get&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_ratio.svg&quot; alt=&quot;Relative change in minimal typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative change in minimal typechecking
time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are notable differences with the average version: - a very
significant part of our points takes the same time to typecheck before
and after #10337 - there is a discretization effects going on: data
points tend to fall on exactly the same value of the ratio&lt;/p&gt;
&lt;p&gt;Beyond those changes, there is still a visible general increase of
typechecking time.&lt;/p&gt;
&lt;p&gt;The same differences are visible for the non typechecking compilation
time &lt;img src=&quot;http://gallium.inria.fr/blog/images/min_other_ratio.svg&quot; alt=&quot;Relative change in minimal non-typechecking time by files&quot;/&gt;&lt;/p&gt;
&lt;p&gt;and the total compilation time&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_total_ratio.svg&quot; alt=&quot;Relative change in minimal total time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative change in minimal total time by
files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;but overall the minimal total compilation and non-typechecking time
mirrors what we had seen with the average. The distribution of the
non-typechecking times is maybe more evenly centred around a ratio of
1.&lt;/p&gt;
&lt;p&gt;We can have a look at the averages and median (across files) to have
more global point of view&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Typechecking&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;th&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;1.06907&lt;/td&gt;
&lt;td&gt;1.01031&lt;/td&gt;
&lt;td&gt;1.02901&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;Geometric average&lt;/td&gt;
&lt;td&gt;1.05998&lt;/td&gt;
&lt;td&gt;1.00672&lt;/td&gt;
&lt;td&gt;1.0276&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;Median&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A striking change is that the median for the typechecking and total
compilation time is equal to one: more than half of files are not
affected by the changes when looking at the minimal compilation time.
This might be an issue with the granularity of time measurement, or it
could be a genuine fact.&lt;/p&gt;
&lt;p&gt;More usefully, we still have an increase of average typechecking time
between 6% and 6.9% depending on the averaging methods, which translates
to a total compilation time increase between 2.7% and 3.3%. And this
time, the increase of unrelated compilation time is between 0.7% to
0.9%. This seems to confirms that do have a real increase of average
compilation time and 3% increase time is a reasonable number.&lt;/p&gt;
&lt;h2&gt;Comparing minima, quantiles&lt;/h2&gt;
&lt;p&gt;With the discretization, the quantiles of the compilation time are
quite interesting and uncharacteristic.&lt;/p&gt;
&lt;p&gt;For instance the typechecking quantiles,&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_quantiles.svg&quot; alt=&quot;Quantiles of the relative change in minimal typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative change in
minimal typechecking time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;min quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1.07692&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;are stuck to 1 between the first and 50th centile. In other words the
minimal typechecking time of more than 50% of the files in our
experiment is unchanged. For 40% of the files, the increase is less than
20%. And the most extreme files see only an increase of 100% of the
typechecking time. On the higher quantiles, the presence of multiple
jumps is the consequence of the discretization of ratio that was already
visible on the raw data.&lt;/p&gt;
&lt;p&gt;When looking at the time spent outside of typechecking,&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_other_quantiles.svg&quot; alt=&quot;Quantiles of the relative change in minimal non-typechecking time by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative change in
minimal non-typechecking time by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;min_other quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;0.947368&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.11111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;1.33333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;we observe that the non-typechecking relation compilation time for
more than 80% of file is unaffected by the change (or somehow
accelerated for 10% of files).&lt;/p&gt;
&lt;p&gt;The quantiles for the total compilation time, &lt;img src=&quot;http://gallium.inria.fr/blog/images/min_total_quantiles.svg&quot; alt=&quot;Quantiles of the relative change in minimal total time by files&quot;/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;min_total quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;1.04545&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;1.22727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;1.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;mostly reflects the trends set by the typechecking time: 55% of files
are unaffected. For 90% of file the increase is less than 10%, and the
maximal impact on the compilation time peaks at a 40% relative
increase.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To sum up, with the available data at hands, it seems sensible to
conclude that #10337 resulted in an average increase of compilation time
of the order of 3%, while the average relative increase of typechecking
time is around 6%. Moreover, for the most impacted files (at the ninth
decile), the relative increase in compilation time ranges between 10% to
40%.&lt;/p&gt;
&lt;h2&gt;Appendices&lt;/h2&gt;
&lt;h3&gt;Compilation profile&lt;/h3&gt;
&lt;p&gt;Since we have data for both typechecking time and non-typechecking
times for a few thousand files, it is interesting to check how much time
is spent on typechecking. We can start by looking at the data points
files by files:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/profile_ratio.svg&quot; alt=&quot;Relative time spent in typechecking by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Relative time spent in typechecking by
files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We have here a relatively uniform cloud of points between 20-60% of
time spent in typechecking compared to total compilation time. This is
is reflected on the average and median&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Arithmetic average&lt;/th&gt;
&lt;th&gt;Median&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;38.8827%&lt;/td&gt;
&lt;td&gt;39.7336%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Both value are quite comparable, the distribution doesn&amp;rsquo;t seem
significantly skewed.&lt;/p&gt;
&lt;p&gt;However, we have a clear cluster of files for which typechecking
accounts for 90% of the total compilation time. Interestingly, this
cluster of points corresponds to the dune cluster of files with a very
variance that we had identified earlier. This explains why those files
have essentially the same profile when looking at the total and
typechecking compilation time: in their case, typechecking accounts for
most of the work done during compilation.&lt;/p&gt;
&lt;p&gt;This relatively uniform distribution is visible both on the quantiles
(with an affine part of the quantiles)&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/profile_quantiles.svg&quot; alt=&quot;Quantiles of the relative time spent in typechecking by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Quantiles of the relative time spent in
typechecking by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;profile quantiles&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;0.111556&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;0.16431&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;25%&lt;/td&gt;
&lt;td&gt;0.283249&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;50%&lt;/td&gt;
&lt;td&gt;0.397336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;td&gt;0.487892&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;0.573355&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;0.749689&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;0.913336&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;and on the histogram of the relative time spent in typechecking&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/profile_hist.svg&quot; alt=&quot;Histogram of the relative time spent in typechecking by files&quot;/&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Histogram of the relative time spent in
typechecking by files&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Histograms&lt;/h3&gt;
&lt;p&gt;Histogram versions for the quantile diagrams are also available. Due
to the mixture of continuous and discrete distributions they are not
that easy to read. Note that those histograms have equiprobable bins (in
other words, constant area) rather than constant width bins.&lt;/p&gt;
&lt;h3&gt;Average compilation time
histograms&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://gallium.inria.fr/blog/images/mean_hist.svg&quot; alt=&quot;Histogram of the relative change of average typechecking time by files&quot;/&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/other_hist.svg&quot; alt=&quot;Histogram of the relative change in average non-typechecking time by files&quot;/&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/total_hist.svg&quot; alt=&quot;Histogram of the relative change in average total time by files&quot;/&gt;&lt;/p&gt;
&lt;p&gt;An interesting take-away for those histograms is that the
typechecking and total compilation time distribution are clearly skewed
to the right: with very few exceptions, compilation increases.
Contrarily the non-typechecking time distribution is much more
symmetric. Since the change here is due to noise, there is no more
reason for the compilation time to increase or decrease.&lt;/p&gt;
&lt;h3&gt;Minimal compilation time
histograms&lt;/h3&gt;
&lt;p&gt;There is no much change when looking at the histogram for the minimal
compilation time for a file&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_hist.svg&quot; alt=&quot;Histogram of the relative change in minimal typechecking time by files&quot;/&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_other_hist.svg&quot; alt=&quot;Histogram of the relative change in minimal non-typechecking time by files&quot;/&gt;
&lt;img src=&quot;http://gallium.inria.fr/blog/images/min_total_hist.svg&quot; alt=&quot;Histogram of the relative change in minimal total time by files&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The most notable difference is that the non-typechecking histogram is
completely dominated by the dirac distribution centred at
&lt;code&gt;x=1&lt;/code&gt;.&lt;/p&gt;

</content><id>http://gallium.inria.fr/blog/measuring-compilation-time/</id><title type="text">Measuring OCaml compilation speed after a refactoring</title><updated>2021-09-17T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/an-ocaml-release-story-1" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

  &lt;p&gt;I (Florian Angeletti) have started working at Inria Paris this
August. A part of my new job is to help deal with the day-to-day care
for the OCaml compiler, particularly during the release process. This
blog post is short glimpse into the life of an OCaml release.&lt;/p&gt;


  

  
  &lt;h3&gt;OCaml and the opam
repository&lt;/h3&gt;
&lt;p&gt;Currently, the song of the OCaml development process is a canon with
two voices: a compiler release spends the first 6 months of its life as
the &amp;ldquo;trunk&amp;rdquo; branch of the OCaml compiler git repository. Then after
those 6 first months, it is named and given a branch on its own. For
instance, this happened on October 18 2019 for OCaml 4.10. Starting from
this point, the branch is frozen: only bug fixes are accepted, whereas
new development happens in trunk again. Our objective is then to release
the new version 3 months later. If we succeed, there are at most two
branches active at the same time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Dev
    Dev
    Dev
    Dev
    Dev
    Dev
    Bug  Dev
    Bug  Dev
    RCs  Dev
         Dev
         Dev
         Dev
         Bug  Dev
         Bug  Dev
         RCs  Dev
              Dev
              Dev
              Dev
              Bug
              Bug
              Rcs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the OCaml compiler does not live in isolation. It makes
little point to release a new version of OCaml which is not compatible
with other parts of the OCaml ecosystem.&lt;/p&gt;
&lt;p&gt;The release cycle of OCaml 4.08 was particularly painful from this
point of view: we refactored parts of the compiler API that were not
previously versioned by ocaml-migrate-parsetree, making it more
difficult to update. In turn, without a working version of
ocaml-migrate-parsetree, ppxses could not be built, breaking all
packages that depends on ppxs. It took months to correct the issue. This
slip of schedule affected the 4.09.0 release and can still be felt on
the 4.11 schedule.&lt;/p&gt;
&lt;h3&gt;Catching knifes before the
fall&lt;/h3&gt;
&lt;p&gt;Lesson learned, we need to test the packages on the opam repository
more often. Two tools in current usage can automate such testing:
opamcheck and opam-health-check.&lt;/p&gt;
&lt;p&gt;The two tools attack the problem with a different angle. The
opam-health-check monitoring tool is developed to check the health of
the opam repository, for released OCaml versions.&lt;/p&gt;
&lt;p&gt;In a complementary way, opamcheck was built by Damien Doligez to
check how well new versions of the OCaml compiler fare in term of
building the opam repository.&lt;/p&gt;
&lt;p&gt;A typical difference between opamcheck and opam-health-check is that
opamcheck is biased towards newer versions of the compiler: if an opam
package builds on the latest unreleased version of the compiler, we
don&amp;rsquo;t need to test it with older compilers. After all, we are mostly
interested in packages that are broken by the new release. The handful
of packages that may be coincidentally fixed by an unreleased compiler
are at most a curiosity; pruning those unlikely events save us some
precious time.&lt;/p&gt;
&lt;p&gt;Since I started at Inria, in the midst of the first beta of OCaml
4.09.0, I have been working with opamcheck to monitor the health of the
opam repository.&lt;/p&gt;
&lt;p&gt;The aim here is twofold. First, we want to detect expected breakages
that are just a sign that a package needs to be updated in advance. The
earliest we catch those, the more time the maintainers have to patch
their packages before the new release. Second, we want to detect
unexpected compatibility issues and breakages.&lt;/p&gt;
&lt;p&gt;One fun example of such unexpected compatibility issue appeared in
the 4.09.0 release cycle. When I first used opamcheck to test the state
of the first 4.09.0 beta, there was a quite problematic broken package:
dune. This was quite stunning at first, because the 4.09.0 version of
OCaml contained mostly bug fixes and small quality-of-life improvements.
That was at least what I had few days before told to few worried
people&amp;hellip;&lt;/p&gt;
&lt;p&gt;So what was happening here? The issue stemmed from a small change of
behaviour in presence of missing cmis: dune was relying on an
unspecified OCaml compiler behaviour in such cases, and this behaviour
had been altered by a mostly unrelated improvement in the
typechecker.&lt;/p&gt;
&lt;p&gt;This change of behaviour was patched and dune worked fine in the
second beta release of 4.09. And this time, the next run of opamcheck
confirmed that that 4.09.0 was a quiet release.&lt;/p&gt;
&lt;p&gt;This is currently the main use of opamcheck: check the health status
of the opam repository on unreleased version of OCaml before
opam-health-check more extensive coverage takes the relay. One of our
objective for the future 4.10.0 release is to keep a much more extensive
test coverage, before the first beta.&lt;/p&gt;
&lt;h3&gt;Opam and the PRs&lt;/h3&gt;
&lt;p&gt;There is another possible use that is probably much more useful to
the anxious OCaml developer: opamcheck can be used to check that a PR or
an experimental branch does not break opam packages. A good example is
&lt;a href=&quot;https://github.com/ocaml/ocaml/issues/8900&quot;&gt;#8900&lt;/a&gt;: this PR
proposes to remove the special handling of abstract types defined inside
the current module. This special case looks nice locally, but it enables
to write some code which is valid if and only if it is located in the
right module, without any possibility to correct this behaviour by
precising module signatures.&lt;/p&gt;
&lt;p&gt;It is therefore quite tempting to try to remove this special case
from the typechecker, but it is reasonable?&lt;/p&gt;
&lt;p&gt;This was another task for opamcheck. First, I added a new opamcheck
option to easily check any pull request on the OCaml compiler. After
some work, there was some good news: this pattern is mostly unused in
the current opam repository.&lt;/p&gt;
&lt;p&gt;Knowing if there are any opam packages that rely on this feature is
definitively a big help when taking those decisions.&lt;/p&gt;
&lt;h3&gt;Using opamcheck&lt;/h3&gt;
&lt;p&gt;So if you are a worried OCaml developer and want to test your fancy
compiler PR on the anvil of the opam repositoy, what are the magical
incantations?&lt;/p&gt;
&lt;p&gt;One option is to download the docker image
&lt;code&gt;octachron/opamchek&lt;/code&gt; with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull octachron/opamcheck
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Beware that the image weights around 7 Gio. If you want to build
opamcheck locally, you first need to clone the current opamcheck
repository&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/Octachron/ocaml.git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably need to install the following opam packages&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;opam install minisat opam-file-format
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And run the common magic&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd opamcheck
make
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, there are two use modes, you can launch opamcheck directly (or
inside a VM), or use the available dockerfiles. In this short blog post,
I will present the later option: it has the advantages of being
relatively lightweight in term of configuration, and makes it easier to
test your legions of PRs simultaneously (you don&amp;rsquo;t have legions of PRs,
do you?) If you went with the manual road above, you need to first build
the image with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make docker
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This installs all external dependency on the docker image. That may
take a while (and a good amount of space).&lt;/p&gt;
&lt;p&gt;Once the image is built or downloaded, there are three main options
to run it. If you want to compare several versions of the compiler
(given as switch names), let&amp;rsquo;s say 4.05 and 4.08.1+flambda, you can
&lt;code&gt;run&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -v opamcheck:/app/log -p &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;:80 --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opamcheck opamcheck run -online-summary&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;.05.0 &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;.08.1+flambda
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The name option is the docker container maps. The &lt;code&gt;-p&lt;/code&gt;
option maps the port &lt;code&gt;80&lt;/code&gt; of the container to
&lt;code&gt;8080&lt;/code&gt; this is used to connect to the http server embedded in
the image. Finally, the &lt;code&gt;-v&lt;/code&gt; precise where the opamcheck log
repository is mounted in the host file system. If you forget this
option, the log a random docker volume will be used. Here, it will be at
&lt;code&gt;/var/lib/docker/volumes/opamcheck&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;During opamcheck run, the progress can be checked with either&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tail -f /var/lib/docker/volumes/opamcheck_log/_data/results
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or by pointing a web browser to
&lt;code&gt;localhost:8080/fullindex.html&lt;/code&gt;. Note that the first summary
is only generated after the OCaml compiler is built and all
uninstallable packages have been discovered. On my machine, this rounds
up at a 15 minutes wait before the first summary is generated. Later
update should be more frequent&lt;/p&gt;
&lt;p&gt;The result should look like this &lt;a href=&quot;https://opamcheck.polychoron.fr/4.10_2019_12_02/fullindex.html&quot;&gt;summary
run&lt;/a&gt; for OCaml 4.10.0. The integer parameter in
&lt;code&gt;-online-summary=n&lt;/code&gt; corresponds to the update period for this
html summary. If the option is not provided, the html summary is only
built at the end of the run.&lt;/p&gt;
&lt;p&gt;If you are more interested by testing a specific PR, for instance &lt;a href=&quot;https://github.com/ocaml/ocaml/issues/8900&quot;&gt;#8900&lt;/a&gt;, the
&lt;code&gt;prmode&lt;/code&gt; will work better&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run opamcheck --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opamcheck prmode -pr &lt;span class=&quot;m&quot;&gt;8900&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;.09.0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command tries to rebase the given PR on top of the given OCaml
version (switch name); it fails immediately if the PR cannot be rebased;
in this case you should use the latest &amp;lsquo;trunk&amp;rsquo; switch as base or use the
&lt;code&gt;branch&lt;/code&gt; option, described a bit below. When possible, it is
a good idea to use a released version as the base, as it will be
compatible with more opam packages than the current trunk.&lt;/p&gt;
&lt;p&gt;If the branch that you want to test is not yet a PR, or needs some
manual rebasing to be compared against a specific compiler version,
there is a branch flag. For instance, let&amp;rsquo;s say that you have a branch
&amp;ldquo;my_very_experimental_branch&amp;rdquo; at the location nowhere.org. You can
run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run opamcheck --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opamcheck prmode -branch https://nowhere.org:my_very_experimental_branch &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;.09.0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command downloads the branch at nowhere.org and compare it
against the &lt;code&gt;4.09.0&lt;/code&gt; switch.&lt;/p&gt;
&lt;p&gt;Currently, a full run of opamcheck takes one or two days: you will
likely get the results before your first PR review. A limitation is the
false positive rate: most opam package descriptions are incomplete or
out of date, so packages will fail for reasons unrelated to your PR.
Unfortunately, this means that there are still some manual triage needed
at the end of an opamcheck run.&lt;/p&gt;
&lt;p&gt;There are four main objectives for opamcheck in the next months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;improve the usability&lt;/li&gt;
&lt;li&gt;share more code with opam-health-check, at least on the
frontend&lt;/li&gt;
&lt;li&gt;reduce the false positive rate&lt;/li&gt;
&lt;li&gt;reduce the time required by a CI run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to check on future development for opamcheck, and a
potentially more up-to-date readme, you can have a look at &lt;a href=&quot;https://github.com/Octachron/opamcheck&quot;&gt;Octachron/opamcheck&lt;/a&gt;.&lt;/p&gt;


  </content><id>http://gallium.inria.fr/blog/an-ocaml-release-story-1</id><title type="text">Testing OCaml releases with opamcheck</title><updated>2019-12-02T08:00:00-00:00</updated><author><email>Florian Angeletti</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/mirage-retreat-field-trip-report" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

    &lt;p&gt;Between March 6th and March 13th 2019, I attended the Mirage retreat
organized by Hannes Mehnert in Marrakesh, Morocco.&lt;/p&gt;
&lt;p&gt;The Mirage retreat takes place in an artist residency organized as a
hostel (shared rooms with simple beds). Hannes gathers a lot of people
whose activity is relevant to the Mirage project; some of them work
within the OCaml ecosystem (but not necessarily Mirage), some work on
system programming (not necessarily in OCaml). The whole place is for
all of us for one week, excellent food is provided, and we get to do
whatever we want. (Thanks to the work of the people there who make this
possible.)&lt;/p&gt;
&lt;p&gt;This was my second time attending the retreat &amp;ndash; first time in
November 2017. It is probably the work-related trip I enjoy most. When I
get back home, I&amp;rsquo;m exhausted, thrilled, I met fascinating people and I
learned a lot.&lt;/p&gt;


    

    &lt;h2&gt;Marracheck&lt;/h2&gt;
&lt;p&gt;This week I came with a specific project (that was decided
spontaneously maybe three weeks before that): I would work with Arma&amp;euml;l
Gu&amp;eacute;neau, also attending the retreat, on mixing ideas for the existing
tools to check opam packages (&lt;a href=&quot;https://github.com/OCamlPro/opam-builder&quot;&gt;opam-builder&lt;/a&gt;, &lt;a href=&quot;https://github.com/damiendoligez/opamcheck&quot;&gt;opamcheck&lt;/a&gt;, &lt;a href=&quot;https://github.com/kit-ty-kate/opam-health-check&quot;&gt;opam-health-check&lt;/a&gt;),
with the objective of building a tool that can build the whole
opam-repository is less than a day on my laptop machine. The ultimate
goal is to make it extremely easy for anyone to test the impact of a
change to the OCaml compiler on the OCaml ecosystem.&lt;/p&gt;
&lt;p&gt;We started with a &lt;em&gt;lot&lt;/em&gt; of discussions on the design, inspired
by our knowledge of opam-builder and opamcheck &amp;ndash; I had hacked on
opam-builder a bit before, and had detailed discussion with Damien about
the design of opamcheck &amp;ndash; and discussions with Kate, working on
opam-health-check and in general the opam CI, also attending the
retreat. Then we did a good bit of pair-programming, with Arma&amp;euml;l behind
the keyboard. We decided to rebuild a tool from scratch and to use the
&lt;code&gt;opam-libs&lt;/code&gt; (the library-level API of the &lt;code&gt;opam&lt;/code&gt;
codebase). By the end of the week, we were still quite far from a
working release, but we have a skeleton in place.&lt;/p&gt;
&lt;p&gt;This would not have been possible without the presence, at the
retreat, of Louis Gesbert and Raja Boujbel, who helped us navigating the
(sometimes daunting) opam API. (We also noticed a few opportunities for
improvements and sent a couple pull-requests to opam itself.) Louis and
Raja are impressive in their handling of the opam codebase. There are
obscure and ugly and painful things within the opam APIs, but they come
from elegance/simplicity/pragmatism compromises that they made,
understand well, and are consistently able to justify. It feels like a
complex codebase that is growing as it discovers its use-cases, with
inevitable cruft, but good hands at work to manage this complexity,
within resource limits.&lt;/p&gt;
&lt;h2&gt;Network drivers&lt;/h2&gt;
&lt;p&gt;My roommate was Fabian Bonk, who participated to the &amp;ldquo;ixy project&amp;rdquo;,
at the TUM (Technische Universit&amp;auml;t M&amp;uuml;nchen), Munich, Germany. The &amp;ldquo;ixy
project&amp;rsquo; aims to implement a simple userland network driver (for some
specific Intel network card) in many different languages, and see what
work and what doesn&amp;rsquo;t. Fabian wrote the OCaml implementation, and was
interested in finding ways to improve its performances.&lt;/p&gt;
&lt;p&gt;At first I preferred to hear about his work from a distance; I know
nothing of network card, and there were people at the retreat noticeably
more knowledgeable about writing high-performance OCaml code. Then I
realized that this was a dangerous strategy: for essientally any topic
there is someone more knowledgeable than you at the retreat. So why not
work on userland network drivers?&lt;/p&gt;
&lt;p&gt;Fabian and I made a few attempts at making the program faster, which
had the somewhat hilarious result of making the program about 500x
slower. It&amp;rsquo;s an interesting problem domain. The driver author says &amp;ldquo;I
would really need to remove this copy here, even though that would
require changing the whole Mirage API&amp;rdquo;; the first reaction is to argue
that copying memory is actually quite fast, so it&amp;rsquo;s probably not the
bottleneck. &amp;ldquo;But we have to copy&amp;rdquo;, they say, &amp;ldquo;ten gibibytes per
second!&amp;rdquo;. Ouch.&lt;/p&gt;
&lt;p&gt;Anyway, after some tinkering, I realized that Fabian working over SSH
to a machine in Munich with the network card, and being able to run
latency tests because &amp;ldquo;for this you need an optical splitter and I don&amp;rsquo;t
have the privilege level to access the one our university has&amp;rdquo;, wasn&amp;rsquo;t
that great for benchmarking. So I decided to convince Fabian to
implement a compliant network card, in C, on his machine &amp;ndash; he insists on
calling it a &amp;ldquo;simulator&amp;rdquo; but what&amp;rsquo;s the difference between software and
hardware these days? The idea was, anyone could then use his network
card on their own machine to test and benchmark the driver against, and
make it faster. Unfortunately, he had an OSX machine, and everything you
would need to implement this nicely is sort of broken on OSX (working
POSIX-compliant shared memory? nope!).&lt;/p&gt;
&lt;h2&gt;Crowbar&lt;/h2&gt;
&lt;p&gt;One thing I realized during the retreat is that I have an amazing
(dis)advantage over some other people there (Hannes included): I know
that Crowbar is extremely easy to use. (You write a generator, a
quickcheck-style test, you listen to the tool tell you how to set a few
weird environment variables, and boom, there come the bugs.)&lt;/p&gt;
&lt;p&gt;Apparently people who haven&amp;rsquo;t tried Crowbar yet are unwilling to do
so because they&amp;rsquo;re not sure how easy it is. Unfortunately, having the
amazing power to find bugs is also a curse: Hannes persuaded me to write
a test for an OCaml implementation of the &lt;code&gt;patch&lt;/code&gt; utility
instead of sleeping one evening.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure what tool authors can do to reduce this particular
barrier to entry. Maybe one thing that works is to simply demo the tool
in front of a crowded audience, every time you have a chance.&lt;/p&gt;
&lt;h2&gt;Mystery in a box&lt;/h2&gt;
&lt;p&gt;I helped Antonio Monteiro track down a failure in his HTTP/2
implementation, and over the course of that I caught a glimpse of the &lt;a href=&quot;https://github.com/inhabitedtype/angstrom&quot;&gt;angstrom&lt;/a&gt; codebase.
Angstrom contains a single-field record (used for first-class
polymorphism) in one apparently-central data structure, and I noticed
that the record does not carry the &lt;code&gt;[@@unboxed]&lt;/code&gt; annotation
(so it is one extra indirection at runtime). So I decided to add the
annotation, hoping it would improve performances.&lt;/p&gt;
&lt;p&gt;There is a dirty secret about &lt;code&gt;[@@unboxed]&lt;/code&gt;: despite what
most people think, it is extremely rare that it can make programs
noticeably faster, because the GC is quite fast and combines allocations
together &amp;ndash; many allocations of a boxed object are combined with an
allocation for their content or container, and and often the indirection
points to an immediately adjacent place in memory so is basically free
to dereference. It may help in some extreme low-latency scenario where
code is written to not allocate at all, but I have never personally seen
a program where &lt;code&gt;[@@unboxed]&lt;/code&gt; makes a noticeable performance
difference.&lt;/p&gt;
&lt;p&gt;That is, until &lt;code&gt;angstrom&lt;/code&gt;. Adding &lt;code&gt;[@@unboxed]&lt;/code&gt;
to this record field makes the program noticeably &lt;em&gt;slower&lt;/em&gt;. The
generated code, at the point where this record is used, is much nicer,
each run allocates less words, but the program is noticeably slower &amp;ndash; 7%
slower. I found it extremely puzzling; Romain &lt;span class=&quot;citation&quot; data-cites=&quot;dinosaure&quot;&gt;@dinosaure&lt;/span&gt; Calabiscetta pointed out that
he tried the same thing, and was similarly puzzled.&lt;/p&gt;
&lt;p&gt;Eventually I lured Pierre Chambart into studying the problem with me,
and we figured it out. I won&amp;rsquo;t get into the technical details here
(hopefully later), but I&amp;rsquo;ll point out that we tested our hypothesis by
inserting &lt;code&gt;();&lt;/code&gt; in several places in the program, and
Arma&amp;euml;l&amp;rsquo;s baffled look made it more than worthwhile.&lt;/p&gt;
&lt;h2&gt;Video games&lt;/h2&gt;
&lt;p&gt;When invited to work on &amp;ldquo;anything they wanted&amp;rdquo;, some people had a
projects that sounded a bit more fun than a parallel compiler of all
OPAM packages &amp;ndash; a gameboy emulator, for example. Of course, everyone
knows that having fun side-projects to work on from time to time is an
excellent thing. Yet those were kept in the recent past after more
pressing side-projects on my TODO list (typically releasing ocamlbuild,
batteries, ppx_deriving and plugins once in a while, or reviewing a
compiler Pull Request). While no one was working on that specifically,
this retreat made me want to try (eventually) something that I&amp;rsquo;ve never
done before, namely implement a video game in OCaml. We&amp;rsquo;ll see whether
that happens someday.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks to everyone who was at the retreat (including the people that
worked hard to ensure we could be there in the best condition). I had a
great time and I&amp;rsquo;m hoping to come again for one of the next
retreats.&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/mirage-retreat-field-trip-report</id><title type="text">The Mirage retreat: field trip report</title><updated>2019-04-15T08:00:00-00:00</updated><author><email>Gabriel Scherer</email><name>gallium</name></author></entry><entry><link href="http://gallium.inria.fr/blog/incremental-cycle-detection" rel="alternate"/><contributor><uri>http://gallium.inria.fr/blog/index.rss</uri><name>gallium</name></contributor><content type="html">

&lt;p&gt;As part of my PhD at Gallium, I have been working on formally proving
OCaml programs using Coq. More precisely, the focus has been on proving
not only that a program is functionally correct (always compute the
right result), but also does so in the expected &lt;em&gt;amount of time&lt;/em&gt;.
In other words, we are interested in formally verifying the asymptotic
complexity of OCaml programs.&lt;/p&gt;
&lt;p&gt;In this blog-post, I&amp;rsquo;m happy to report on our latest endeavour: the
verification of the correctness and (amortized) complexity of a
state-of-the art incremental cycle detection algorithm.&lt;/p&gt;




&lt;p&gt;This is joint work with Jacques-Henri Jourdan and my advisors
Fran&amp;ccedil;ois Pottier and Arthur Chargu&amp;eacute;raud.&lt;/p&gt;
&lt;p&gt;The initial motivation for this work comes from the implementation of
Coq itself! More specifically, efficiently checking the consistency of
universe constraints that result from the type-checking phase is a
difficult problem, that can be seen as an incremental cycle detection
problem. A few years ago, Jacques-Henri reimplemented the part of Coq
responsible for this, following a state-of-the-art algorithm &lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=2846106.2756553&quot;&gt;published by
Bender, Fineman, Gilbert and Tarjan&lt;/a&gt;. They prove that using their
algorithm, adding an edge in a graph with &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt; edges and &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; nodes &lt;em&gt;while ensuring that
after each addition the graph remains acyclic&lt;/em&gt; has amortized
asymptotic complexity &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;O&lt;/em&gt;(min(&lt;em&gt;m&lt;/em&gt;&lt;sup&gt;1/2&lt;/sup&gt;,&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2/3&lt;/sup&gt;))&lt;/span&gt;.
In the common case where the graph is sparse enough, this is equivalent
to &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;O&lt;/em&gt;(&amp;radic;&lt;em&gt;m&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Jacques-Henri&amp;rsquo;s implementation resulted in a nice speedup in
practice, but it is not so easy to convince oneself that it indeed has
the right asymptotic complexity in all cases (in other words, that it
does not have a &amp;ldquo;complexity bug&amp;rdquo;). The amortized analysis required to
establish the &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;O&lt;/em&gt;()&lt;/span&gt; bound on
paper is quite subtle, and for instance relies on a parameter &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;&amp;Delta;&lt;/em&gt;&lt;/span&gt; computed at runtime that looks
quite magical at first glance.&lt;/p&gt;
&lt;p&gt;In the work I&amp;rsquo;m presenting here, we try to untangle this mystery. We
give a formally verified OCaml implemention for a (slightly modified)
incremental cycle detection algorithm from Bender et al.&amp;nbsp;We prove that
it is not only correct, but also satisfies the expected complexity
bound.&lt;/p&gt;
&lt;p&gt;Note that this is not yet the exact algorithm that is currently part
of Coq&amp;rsquo;s implementation, but still an important milestone on the way
there! (Coq implements the variant by Bender et al.&amp;nbsp;that additionally
maintains &amp;ldquo;strong components&amp;rdquo;. We believe it could be implemented and
verified in a modular fashion, by combining the algorithm we present
here and a &lt;a href=&quot;http://gallium.inria.fr/~fpottier/publis/chargueraud-pottier-uf-sltc.pdf&quot;&gt;union-find
data structure&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the draft (currently under submission), and a link to the
OCaml code and Coq proofs:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gallium.inria.fr/~fpottier/publis/gueneau-jourdan-chargueraud-pottier-2019.pdf&quot; class=&quot;uri&quot;&gt;http://gallium.inria.fr/~fpottier/publis/gueneau-jourdan-chargueraud-pottier-2019.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.inria.fr/agueneau/incremental-cycles&quot; class=&quot;uri&quot;&gt;https://gitlab.inria.fr/agueneau/incremental-cycles&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We exploit Separation Logic with Time Credits to verify the
correctness and worst-case amortized asymptotic complexity of a
state-of-the-art incremental cycle detection algorithm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/incremental-cycle-detection</id><title type="text">Formal proof and analysis of an incremental cycle detection algorithm</title><updated>2019-02-12T08:00:00-00:00</updated><author><email>Armaël Guéneau</email><name>gallium</name></author></entry></feed>