<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</id><title type="text">ambassadortothecomputers</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="http://ambassadortothecomputers.blogspot.com/2011/06/logic-programming-in-scala-part-3.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In this post I want to build on the backtracking logic monad we covered &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-2.html&quot;&gt;last time&lt;/a&gt; by adding &lt;em&gt;unification&lt;/em&gt;, yielding an embedded DSL for Prolog-style logic programming.&lt;/p&gt; 
&lt;b&gt;Prolog&lt;/b&gt; 
&lt;p&gt;Here is a small Prolog example, the rough equivalent of &lt;code&gt;List.contains&lt;/code&gt; in Scala:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;prolog&quot;&gt;  &lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt; 
  &lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;Member&lt;/code&gt; doesn&amp;rsquo;t return a boolean; instead it succeeds or fails (in the same way as the logic monad). The &lt;em&gt;goal&lt;/em&gt; &lt;code&gt;member(1, [1,2,3])&lt;/code&gt; succeeds; the goal &lt;code&gt;member(4, [1,2,3])&lt;/code&gt; fails. (What happens for &lt;code&gt;member(1, [1,1,3])&lt;/code&gt;?)&lt;/p&gt; 
 
&lt;p&gt;A Prolog &lt;em&gt;predicate&lt;/em&gt; is defined by one or more &lt;em&gt;clauses&lt;/em&gt; (each ending in a period), made up of a &lt;em&gt;head&lt;/em&gt; (the predicate and arguments before the &lt;code&gt;:-&lt;/code&gt;) and zero or more &lt;em&gt;subgoals&lt;/em&gt; (goals after the &lt;code&gt;:-&lt;/code&gt;, separated by commas; if there are no subgoals the &lt;code&gt;:-&lt;/code&gt; is omitted). To solve a goal, we &lt;em&gt;unify&lt;/em&gt; it (match it) with each clause head, then solve each subgoal in the clause. If a subgoal fails we backtrack and try the next matching head; if there is no matching head the goal fails. A goal may succeed more than once.&lt;/p&gt; 
 
&lt;p&gt;For &lt;code&gt;member&lt;/code&gt; we have two clauses: the first says that &lt;code&gt;member&lt;/code&gt; succeeds if &lt;code&gt;X&lt;/code&gt; is the head of the list (&lt;code&gt;[X|T]&lt;/code&gt; is the same as &lt;code&gt;x::t&lt;/code&gt; in Scala); the second says that &lt;code&gt;member&lt;/code&gt; succeeds if &lt;code&gt;X&lt;/code&gt; is a member of the tail of the list, regardless of the head. There is no clause where the list is empty (written &lt;code&gt;[]&lt;/code&gt;); a goal with an empty list fails since there is no matching clause head.&lt;/p&gt; 
 
&lt;p&gt;Prolog unification is more expressive than pattern matching as found in Scala, OCaml, etc. Both sides of a unification may contain variables; unification attempts to instantiate them so that the two sides are equal. Variables are instantiated by &lt;em&gt;terms&lt;/em&gt;, which themselves may contain variables; unification finds the most general instantiation which makes the sides equal.&lt;/p&gt; 
 
&lt;p&gt;As a small example of this expressivity, we can run &lt;code&gt;member&lt;/code&gt; &amp;ldquo;backwards&amp;rdquo;: the goal &lt;code&gt;member(X, [1,2,3])&lt;/code&gt; succeeds once for each element of the list, with &lt;code&gt;X&lt;/code&gt; bound to the element.&lt;/p&gt; 
 
&lt;p&gt;There is much more on Prolog and logic programming in &lt;a href=&quot;http://www.cs.cmu.edu/~fp/courses/lp/lectures/lp-all.pdf&quot;&gt;Frank Pfenning&amp;rsquo;s course notes&lt;/a&gt;, which I recommend highly.&lt;/p&gt; 
&lt;b&gt;Unification&lt;/b&gt; 
&lt;p&gt;For each type we want to use in unification we&amp;rsquo;ll define a corresponding type of terms, which have the same structure as the underlying type but can also contain variables. These aren&amp;rsquo;t Scala variables (which of course can&amp;rsquo;t be stored in a data structure) but &amp;ldquo;existential variables&amp;rdquo;, or &lt;em&gt;evars&lt;/em&gt;. Evars are just tags; computations will carry an &lt;em&gt;environment&lt;/em&gt; mapping evars to terms, which may be updated after a successful unification.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.collection.immutable.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// invariant: on call to unify, this and t have e substituted&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The important property of an evar is that it is distinct from every other evar; the name attached to it is just a label. An evar is indexed by a phantom type indicating the underlying type of terms which may be bound to it.&lt;/p&gt; 
 
&lt;p&gt;A term is indexed by its underlying type. So &lt;code&gt;Int&lt;/code&gt; becomes &lt;code&gt;Term[Int]&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; becomes &lt;code&gt;Term[String]&lt;/code&gt;, and so on; an evar of type &lt;code&gt;Evar[A]&lt;/code&gt; may only be bound to a term of type &lt;code&gt;Term[A]&lt;/code&gt;. (Prolog is dynamically typed, but this statically-typed treatment of evars and terms fits better with Scala.)&lt;/p&gt; 
 
&lt;p&gt;The &lt;code&gt;unify&lt;/code&gt; method unifies a term with another term of the same type, taking an environment and returning an updated environment (or &lt;code&gt;None&lt;/code&gt; if the unification fails). &lt;code&gt;Occurs&lt;/code&gt; checks if an evar occurs in a term (as we will see this is used to prevent circular bindings). &lt;code&gt;Subst&lt;/code&gt; substitutes the variables in a term with their bindings in an environment, and &lt;code&gt;ground&lt;/code&gt; returns the underlying Scala value represented by the term (provided the term contains no evars).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;An environment is just a map from evars to terms. Because we need to store evars and terms of different types in the same environment, we cast them to and from &lt;code&gt;Any&lt;/code&gt;; this is safe because of the phantom type on &lt;code&gt;Evar&lt;/code&gt;. For simplicity we maintain the invariant that the term bound to each evar is already substituted by the rest of the environment.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;not ground&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;VarTerm&lt;/code&gt; class represents terms consisting of an evar. To unify a &lt;code&gt;VarTerm&lt;/code&gt; with another &lt;code&gt;VarTerm&lt;/code&gt; containing the same evar, we just return the environment unchanged (since there is no new information). Otherwise we check that the evar doesn&amp;rsquo;t appear in the term (since a unification &lt;code&gt;x =:= List(x)&lt;/code&gt; would create a circular term) then return the updated environment.&lt;/p&gt; 
 
&lt;p&gt;To substitute a &lt;code&gt;VarTerm&lt;/code&gt; we return the term bound to the evar in the environment if one exists, otherwise the unsubstituted &lt;code&gt;VarTerm&lt;/code&gt;. A &lt;code&gt;VarTerm&lt;/code&gt; is never ground (we assume &lt;code&gt;ground&lt;/code&gt; is called only on terms which are already substituted by the environment).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LitTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LitTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;LitTerm&lt;/code&gt; represents terms of literal Scala values. A &lt;code&gt;LitTerm&lt;/code&gt; unifies with another &lt;code&gt;LitTerm&lt;/code&gt; containing an equal value, but that adds nothing to the environment. Then we have two cases which we need for every term type&amp;mdash;to unify with a &lt;code&gt;VarTerm&lt;/code&gt; call &lt;code&gt;unify&lt;/code&gt; back on it; otherwise fail.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NilTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NilTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occurs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ground&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; :: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;NilTerm&lt;/code&gt; and &lt;code&gt;ConsTerm&lt;/code&gt; represent the &lt;code&gt;Nil&lt;/code&gt; and &lt;code&gt;::&lt;/code&gt; constructors for lists. &lt;code&gt;Nil&lt;/code&gt; is sort of like a literal, so the methods for &lt;code&gt;NilTerm&lt;/code&gt; are similar to those for &lt;code&gt;LitTerm&lt;/code&gt;. For &lt;code&gt;ConsTerm&lt;/code&gt; we unify by unifying the heads and tails, calling &lt;code&gt;subst&lt;/code&gt; on the tails since unifying the heads may have added bindings to the environment. (Here it&amp;rsquo;s convenient to use a for-comprehension on the &lt;code&gt;Option[Env]&lt;/code&gt; type since either unification may fail.) Similarly we implement &lt;code&gt;occurs&lt;/code&gt;, &lt;code&gt;subst&lt;/code&gt;, and &lt;code&gt;ground&lt;/code&gt; by calling them on the head and tail.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;//implicit def lit2term[A](a: A): Term[A] = LitTerm(a)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int2Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LitTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NilTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Finally we have some implicit conversions to make it a little easier to build &lt;code&gt;Term&lt;/code&gt; values. The &lt;code&gt;lit2term&lt;/code&gt; conversion turned out to be a bad idea; in particular you don&amp;rsquo;t want a &lt;code&gt;LitTerm[List[A]]&lt;/code&gt; since it doesn&amp;rsquo;t unify with a &lt;code&gt;ConsTerm[A]&lt;/code&gt; or &lt;code&gt;NilTerm[A]&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;State&lt;/b&gt; 
&lt;p&gt;In order to combine unification with backtracking, we need to keep track of the environment along each branch of the tree of choices. We don&amp;rsquo;t want the environments from different branches to interfere, so it&amp;rsquo;s convenient to use a purely functional environment representation; we pass the current environment down the tree as computation proceeds. However, we can hide this state passing in the monad interface:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// as before&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// as before&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;LogicState&lt;/code&gt; is mostly the same as &lt;code&gt;Logic&lt;/code&gt;, except that the type of choices has an extra parameter for the type of the state. The &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions get and set the current state. To &lt;code&gt;split&lt;/code&gt; we need an initial state to get things started, and each result includes an updated state. Finally we add the syntax &lt;code&gt;&amp;amp;&lt;/code&gt; to sequence two computations, ignoring the value of the first. We&amp;rsquo;ll use this to sequence goals, since we care only about the updated environment.&lt;/p&gt; 
 
&lt;p&gt;The simplest implementation of &lt;code&gt;LogicState&lt;/code&gt; builds on &lt;code&gt;Logic&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicStateT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logic&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We embed state-passing in a &lt;code&gt;Logic.T&lt;/code&gt; as a function from an initial state to a choice of alternatives, where each alternative includes an updated state along with its value.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;All of these operations pass the state through unchanged. Note that &lt;code&gt;or&lt;/code&gt; passes the same state to both alternatives&amp;mdash;different branches of the tree cannot interfere with one another&amp;rsquo;s state.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}))&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In &lt;code&gt;split&lt;/code&gt; we pass the given state to the underlying &lt;code&gt;Logic.T&lt;/code&gt;, and for each alternative we unpack the pair of state and value. The choice of remaining alternatives &lt;code&gt;t&lt;/code&gt; encapsulates the current state, so when we return it we ignore the input state. In &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; we return and replace the current state.&lt;/p&gt; 
 
&lt;p&gt;Another approach is to pass state explicitly through &lt;code&gt;LogicSFK&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicStateSFK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is not really any different from &lt;code&gt;LogicStateT&lt;/code&gt; applied to &lt;code&gt;LogicSFK&lt;/code&gt;&amp;mdash;we have just uncurried the state argument. We can take the same path as last time and defunctionalize this into a tail-recursive implementation (see the &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/scala-logic&quot;&gt;full code&lt;/a&gt;) although &lt;code&gt;LogicStateT&lt;/code&gt; applied to &lt;code&gt;LogicSFKDefuncTailrec&lt;/code&gt; inherits tail-recursiveness from the underlying &lt;code&gt;Logic&lt;/code&gt; monad.&lt;/p&gt; 
&lt;b&gt;Scrolog&lt;/b&gt; 
&lt;p&gt;Finally we can put the pieces together into a Prolog-like embedded DSL:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scrolog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LogicState&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LogicState._&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;From our point of view, a goal is a stateful choice among alternatives, where we don&amp;rsquo;t care about the value returned, only the environment.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TermSyntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;env2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env2&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termSyntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TermSyntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We connect term unification to the stateful logic monad with a wrapper class defining a &lt;code&gt;=:=&lt;/code&gt; operator. To unify terms in the monad, we get the current environment, substitute it into the two terms (to satisfy the invariant above), then call &lt;code&gt;unify&lt;/code&gt;; if it fails we fail the computation, else we set the new state.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; function solves a goal, taking as arguments the goal, the maximum number of solutions to find, and a term to be evaluated in the environment of each solution.&lt;/p&gt; 
&lt;b&gt;Examples&lt;/b&gt; 
&lt;p&gt;First we need to set up Scrolog:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scrolog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scrolog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicStateT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicSFKDefuncTailrec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Scrolog._&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here is a translation of the &lt;code&gt;member&lt;/code&gt; predicate:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hd&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tl&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConsTerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We implement predicates by functions, and goals by function calls. To implement matching the clause head, we explicitly unify the input arguments against each clause head, and combine the clauses with &lt;code&gt;|&lt;/code&gt;. Subgoals are sequenced with &lt;code&gt;&amp;amp;&lt;/code&gt;. Finally, we must create local evars explicitly, since they are fresh for each call (just as local variables are in Scala).&lt;/p&gt; 
 
&lt;p&gt;Finally we can run the goal above:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;As another example, we can implement addition over unary natural numbers. In Prolog this would be&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;prolog&quot;&gt;  &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s-Atom&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt; 
  &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In Prolog we can just invent symbols like &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;; in Scala we need first to define a type of natural numbers, then terms over that type:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nat&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nat&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nat&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZTerm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// like NilTerm&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// like ConsTerm&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Then we can define &lt;code&gt;sum&lt;/code&gt;, again separating the clauses by &lt;code&gt;|&lt;/code&gt; and explicitly unifying the clause heads:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STerm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We can use &lt;code&gt;sum&lt;/code&gt; to do addition:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;or subtraction:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;or even to find all the pairs of naturals which sum to 3:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res14&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;although the printing of &lt;code&gt;Term[List]&lt;/code&gt; could be better.&lt;/p&gt; 
 
&lt;p&gt;This is only a small taste of the expressivity of Prolog-style logic programming. Again let me recommend &lt;a href=&quot;http://www.cs.cmu.edu/~fp/courses/lp/lectures/lp-all.pdf&quot;&gt;Frank Pfenning&amp;rsquo;s course notes&lt;/a&gt;, which explore the semantics of Prolog in a &amp;ldquo;definitional interpreters&amp;rdquo; style, by gradually refining an interpreter to expose more of the machinery of the language.&lt;/p&gt; 
 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/scala-logic&quot;&gt;full code&lt;/a&gt;.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2011/06/logic-programming-in-scala-part-3.html</id><title type="text">Logic programming in Scala, part 3: unification and state</title><updated>2011-06-09T03:41:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-2.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-1.html&quot;&gt;previous post&lt;/a&gt; we saw how to write computations in a logic monad, where a &amp;ldquo;value&amp;rdquo; is a choice among alternatives, and operating on a value means operating on all the alternatives.&lt;/p&gt; 
 
&lt;p&gt;Our first implementation of the logic monad represents a choice among alternatives as a list, and operating on a value means running the operation for each alternative immediately (to produce a new list of alternatives). If we imagine alternatives as leaves of a tree (with &lt;code&gt;|&lt;/code&gt; indicating branching), the first implementation explores the tree breadth-first.&lt;/p&gt; 
 
&lt;p&gt;This is OK for some problems, but we run into trouble when there are a large or infinite number of alternatives. For example, a choice among the natural numbers:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LogicList._&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LogicList._&lt;/span&gt; 
 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullPointerException&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This goes wrong because even though the right-hand argument to &lt;code&gt;|&lt;/code&gt; is by-name, we immediately try to use it, and fail because &lt;code&gt;nat&lt;/code&gt; is not yet defined.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LogicList.T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StackOverflowError&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;With &lt;code&gt;def&lt;/code&gt; we can successfully define &lt;code&gt;nat&lt;/code&gt;, because the right-hand side isn&amp;rsquo;t evaluated until &lt;code&gt;nat&lt;/code&gt; is used in the call to &lt;code&gt;run&lt;/code&gt;, but we overflow the stack trying to compute all the natural numbers.&lt;/p&gt; 
 
&lt;p&gt;Let&amp;rsquo;s repair this with a fancier implementation of the logic monad, translated from Kiselyov et al.&amp;rsquo;s &lt;a href=&quot;http://okmij.org/ftp/Computation/LogicT.pdf&quot;&gt;Backtracking, Interleaving, and Terminating Monad Transformers&lt;/a&gt;. This implementation will explore the tree depth-first.&lt;/p&gt; 
&lt;b&gt;Success and failure continuations&lt;/b&gt; 
&lt;p&gt;The idea is to represent a choice of alternatives by a function, which takes as arguments two functions: a &lt;em&gt;success continuation&lt;/em&gt; and a &lt;em&gt;failure continuation&lt;/em&gt;. The success continuation is just a function indicating what to do next with each alternative; the failure continuation is what to do next when there are no more alternatives.&lt;/p&gt; 
 
&lt;p&gt;For success, what we do next is either return the alternative (when we have reached a leaf of the tree), or perform some operation on it (possibly forming new branches rooted at the alternative). For failure, what we do next is back up to the last branch point and succeed with the next alternative. If there are no more alternatives at the previous branch point we back up again, and so on until we can succeed or finally run out of alternatives. In other words, we do depth-first search on the tree, except that the tree isn&amp;rsquo;t a materialized data structure&amp;mdash;it&amp;rsquo;s created on the fly.&lt;/p&gt; 
 
&lt;p&gt;(In the jargon of logic programming, a branch point is called a &amp;ldquo;choice point&amp;rdquo;, and going back to an earlier choice point is called &amp;ldquo;backtracking&amp;rdquo;.)&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicSFK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The continuations can return a result of some arbitrary type &lt;code&gt;R&lt;/code&gt;. This means that the function representing a choice has a &amp;ldquo;rank-2&amp;rdquo; polymorphic type&amp;mdash;it takes functions which are themselves polymorphic&amp;mdash;which is not directly representable in Scala. But we can encode it by making the representation function a method on a trait.&lt;/p&gt; 
 
&lt;p&gt;The success continuation takes a value of the underlying type (i.e. an alternative), and also a failure continuation, to call in case this branch of the tree eventually fails (by calling &lt;code&gt;fail&lt;/code&gt;, or &lt;code&gt;filter&lt;/code&gt; when no alternative satisfies the predicate). The failure continuation is also called to succeed with the next alternative after returning a leaf (see &lt;code&gt;split&lt;/code&gt;).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To fail, just call the failure continuation. To succeed with one alternative, call the success continuation with the single alternative and the passed-in failure continuation&amp;mdash;there are no more alternatives to try, so if this branch fails the &lt;code&gt;unit&lt;/code&gt; fails.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;Or&lt;/code&gt; creates a choice point. We want to explore the alternatives in both &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, so we pass the success continuation to &lt;code&gt;t1&lt;/code&gt; (which calls it on each alternative); when &lt;code&gt;t1&lt;/code&gt; is exhausted we pass the success continuation to &lt;code&gt;t2&lt;/code&gt;; finally we fail with the caller&amp;rsquo;s failure continuation&amp;mdash;that is, we backtrack.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;For &lt;code&gt;bind&lt;/code&gt; we extend each branch by calling &lt;code&gt;f&lt;/code&gt; on the current leaf. To succeed we call &lt;code&gt;f&lt;/code&gt; on the alternative &lt;code&gt;a&lt;/code&gt;. Now &lt;code&gt;f(a)&lt;/code&gt; returns a choice of alternatives, so we pass it the original success continuation (which says what to do next with alternatives resulting from the &lt;code&gt;bind&lt;/code&gt;), and the failure continuation in force at the point &lt;code&gt;a&lt;/code&gt; was generated (which succeeds with the next available alternative from &lt;code&gt;f(a)&lt;/code&gt;).&lt;/p&gt; 
 
&lt;p&gt;For &lt;code&gt;apply&lt;/code&gt; things are simpler, since &lt;code&gt;f(a)&lt;/code&gt; returns a single value rather than a choice of alternatives: we succeed immediately with the returned value.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To filter a choice of alternatives, each time we succeed with a value we see if it satisfies the predicate &lt;code&gt;p&lt;/code&gt;; if it does, we succeed with that value (extending the branch), otherwise we fail (pruning the branch).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The point of &lt;code&gt;split&lt;/code&gt; is to pull a single alternative from a choice, returning along with it a choice of the remaining alternatives. In the list implementation we just returned the head and tail of the list. In this implementation, the alternatives are computed on demand; we want to be careful to do only as much computation as needed to pull the first alternative&lt;/p&gt; 
 
&lt;p&gt;The failure continuation we pass to &lt;code&gt;t&lt;/code&gt; just returns &lt;code&gt;None&lt;/code&gt; when there are no more alternatives. The success continuation &lt;code&gt;sk&lt;/code&gt; returns the first alternative and a choice of the remaining alternatives (wrapped in &lt;code&gt;Some&lt;/code&gt;).&lt;/p&gt; 
 
&lt;p&gt;The tricky part is the choice of remaining alternatives. We&amp;rsquo;re given the failure continuation &lt;code&gt;fk&lt;/code&gt;; calling it calls &lt;code&gt;sk&lt;/code&gt; on the next alternative, which ultimately returns &lt;code&gt;Some(a, t)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the next alternative, or &lt;code&gt;None&lt;/code&gt; if there are no more alternatives. We repackage this &lt;code&gt;Option&lt;/code&gt; as a choice of alternatives with &lt;code&gt;unsplit&lt;/code&gt;. So that we don&amp;rsquo;t call &lt;code&gt;fk&lt;/code&gt; too soon, we call &lt;code&gt;unsplit&lt;/code&gt; via &lt;code&gt;bind&lt;/code&gt;, which defers the call until the resulting choice of alternatives is actually used.&lt;/p&gt; 
 
&lt;p&gt;Now we can write infinite choices:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LogicSFK._&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LogicSFK._&lt;/span&gt; 
 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LogicSFK.T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicSFK$$anon$3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aea0c1&lt;/span&gt; 
 
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Well, this is a pretty complicated way to generate the natural numbers up to 10&amp;hellip;&lt;/p&gt; 
 
&lt;p&gt;While &lt;code&gt;nat&lt;/code&gt; looks like a lazy stream (as you might write in Haskell), no results are memoized (as they are in Haskell). To compute each successive number all the previous ones must be recomputed, and the running time of &lt;code&gt;run(nat, N)&lt;/code&gt; is O(N&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt; 
&lt;b&gt;Defunctionalization&lt;/b&gt; 
&lt;p&gt;The code above is a fairly direct translation of the Haskell code from the paper. But its use of continuation-passing style doesn&amp;rsquo;t map well to Scala, because Scala doesn&amp;rsquo;t implement tail-call elimination (because the JVM doesn&amp;rsquo;t). Every call to a success or failure continuation adds a frame to the stack, even though all we ever do with the result is return it (i.e. the call is in &lt;em&gt;tail-position&lt;/em&gt;), so the stack frame could be eliminated.&lt;/p&gt; 
 
&lt;p&gt;Surprisingly, we run out of memory before we run out of stack:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OutOfMemoryError&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;space&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A little heap profiling shows that we&amp;rsquo;re using quadratic space as well as quadratic time. It turns out that the implementation of &lt;code&gt;Logic.run&lt;/code&gt; (from the previous post) has a space leak. The call to &lt;code&gt;run&lt;/code&gt; is not tail-recursive, so the stack frame hangs around, and although &lt;code&gt;t&lt;/code&gt; is dead after &lt;code&gt;split(t)&lt;/code&gt;, there&amp;rsquo;s still a reference to it on the stack.&lt;/p&gt; 
 
&lt;p&gt;We can rewrite &lt;code&gt;run&lt;/code&gt; with an accumulator to be tail-recursive:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;runAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Now &lt;code&gt;scalac&lt;/code&gt; compiles &lt;code&gt;runAcc&lt;/code&gt; as a loop, so there are no stack frames holding on to dead values of &lt;code&gt;t&lt;/code&gt;, and we get the expected:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StackOverflowError&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To address the stack overflow we turn to &lt;em&gt;defunctionalization&lt;/em&gt;. The idea (from John Reynold&amp;rsquo;s classic paper &lt;a href=&quot;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.110.5892&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Definitional Interpreters for Higher-Order Programming Languages&lt;/a&gt;) is to replace functions and their applications with data constructors (we&amp;rsquo;ll use case classes) and an &lt;code&gt;apply&lt;/code&gt; function, which matches the data constructor and does whatever the corresponding function body does. If a function captures variables, the data constructor must capture the same variables.&lt;/p&gt; 
 
&lt;p&gt;After defunctionalization we&amp;rsquo;re left with three mutually recursive &lt;code&gt;apply&lt;/code&gt; functions (one for each of &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;FK&lt;/code&gt;, and &lt;code&gt;SK&lt;/code&gt;) where each recursive call is in tail position. In theory the compiler could transform these into code that takes only constant stack space (since they are local functions private to &lt;code&gt;split&lt;/code&gt;). But in fact it will do so only for single recursive functions, so we will need to do this transformation by hand.&lt;/p&gt; 
 
&lt;p&gt;There is one hitch: the original code is not completely tail-recursive, because of &lt;code&gt;unsplit&lt;/code&gt;, which calls a failure continuation then matches on the result. To fix this we need to add yet another continuation, which represents what to do after returning a result from a success or failure continuation.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicSFKDefunc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A choice of alternatives &lt;code&gt;T[A]&lt;/code&gt; is now represented symbolically by case classes, and the functions which operate on choices just return the corresponding case. The cases capture the same variables that were captured in the original functions.&lt;/p&gt; 
 
&lt;p&gt;We have an additional case &lt;code&gt;Unsplit&lt;/code&gt; which represents the &lt;code&gt;bind(unit(fk), unsplit)&lt;/code&gt; combination from &lt;code&gt;split&lt;/code&gt;. And we use &lt;code&gt;O[A]&lt;/code&gt; as a convenient abbreviation.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Each case for &lt;code&gt;FK&lt;/code&gt; (respectively &lt;code&gt;SK&lt;/code&gt;) corresponds to a success (respectively failure) continuation function in the original code&amp;mdash;it&amp;rsquo;s easy to match them up.&lt;/p&gt; 
 
&lt;p&gt;The &lt;code&gt;K&lt;/code&gt; cases are for the new return continuation. They are defunctionalized from functions &lt;code&gt;R =&amp;gt; R2&lt;/code&gt;; we can either return a value directly, or match on whether it is &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; as in &lt;code&gt;unsplit&lt;/code&gt;. (If &lt;code&gt;K&lt;/code&gt; is hard to understand you might try &amp;ldquo;refunctionalizing&amp;rdquo; it by replacing the cases with functions.)&lt;/p&gt; 
 
&lt;p&gt;We see that case classes are more powerful than variants in OCaml, without &lt;a href=&quot;https://sites.google.com/site/ocamlgadt/&quot;&gt;GADTs&lt;/a&gt; at least. Cases can have &amp;ldquo;input&amp;rdquo; type variables (appearing in arguments) which do not appear in the &amp;ldquo;output&amp;rdquo; (the type the case extends). When we match on the case these are treated as existentials. And the output type of a case can be more restrictive than type it extends; when we match on the case we can make more restrictive assumptions about types in that branch of the match. More on this in Emir, Odersky, and Williams&amp;rsquo; &lt;a href=&quot;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5295&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Matching Objects with Patterns&lt;/a&gt;.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyFK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applySK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyFK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyFK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applySK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applySK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applySK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyFK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Again, each of these cases corresponds directly to a function in the original code, and again it is easy to match them up (modulo the extra return continuation argument) to see that all we have done is separated the data part of the function (i.e. the captured variables) from the code part.&lt;/p&gt; 
 
&lt;p&gt;The exception is &lt;code&gt;Unsplit&lt;/code&gt;, which again corresponds to &lt;code&gt;bind(unit(fk),
unsplit)&lt;/code&gt;. To apply it, we apply &lt;code&gt;fk&lt;/code&gt; (which collapses &lt;code&gt;unit(fk)&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, and the application of &lt;code&gt;fk&lt;/code&gt; in &lt;code&gt;unsplit&lt;/code&gt;) with &lt;code&gt;KUnsplit&lt;/code&gt; as continuation, capturing &lt;code&gt;sk&lt;/code&gt;, &lt;code&gt;fk&lt;/code&gt;, and &lt;code&gt;k&lt;/code&gt; (corresponding to their capture in the success continuation of &lt;code&gt;bind&lt;/code&gt;).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyFK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;For &lt;code&gt;KReturn&lt;/code&gt; we just return the result. Although &lt;code&gt;KReturn&lt;/code&gt; extends &lt;code&gt;K[R,R]&lt;/code&gt;, Scala doesn&amp;rsquo;t deduce from this that &lt;code&gt;R&lt;/code&gt; = &lt;code&gt;R2&lt;/code&gt;, so we must coerce the result. For &lt;code&gt;KUnsplit&lt;/code&gt; we do the same match as &lt;code&gt;unsplit&lt;/code&gt;, then apply the resulting &lt;code&gt;T&lt;/code&gt; (for the &lt;code&gt;None&lt;/code&gt; case we call the failure continuation directly instead of applying &lt;code&gt;fail&lt;/code&gt;). Here Scala deduces from the return type of &lt;code&gt;KUnsplit&lt;/code&gt; that is safe to treat &lt;code&gt;r&lt;/code&gt; as an &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;    &lt;span class=&quot;n&quot;&gt;applyT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))),&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Finally we apply the input &lt;code&gt;T&lt;/code&gt; in correspondence to the original &lt;code&gt;split&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;Tail call elimination&lt;/b&gt; 
&lt;p&gt;(This section has been revised; you can see the original &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/ba9621fc48ff84e01d9f70d076cc912b8185729d&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt; 
 
&lt;p&gt;To eliminate the stack frames from tail calls, we next rewrite the four mutually-recursive functions into a single recursive function (which Scala compiles as a loop). To do this we have to abandon some type safety (but only in the implementation of the &lt;code&gt;Logic&lt;/code&gt; monad; we&amp;rsquo;ll still present the same safe interface).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicSFKDefuncTailrec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is all pretty much as before except that we erase all the type parameters. Having done so we can combine the four defunctionalized types into a single type &lt;code&gt;I&lt;/code&gt; (for &amp;ldquo;instruction&amp;rdquo; perhaps), which will allow us to write a single recursive &lt;code&gt;apply&lt;/code&gt; function. The type parameter in &lt;code&gt;T[A]&lt;/code&gt; is then a &lt;em&gt;phantom type&lt;/em&gt; since it does not appear on the right-hand side of the definition; it is used only to enforce constraints outside the module.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The functions for building &lt;code&gt;T[A]&lt;/code&gt; values are mostly the same. We have to cast passed-in functions since &lt;code&gt;Any&lt;/code&gt; is not a subtype of arbitrary &lt;code&gt;A&lt;/code&gt;. The return type annotations don&amp;rsquo;t seem necessary but I saw some strange type errors without them (possibly related to the phantom type?) when using the &lt;code&gt;Logic.Syntax&lt;/code&gt; wrapper.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKOr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKBind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KUnsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nc&quot;&gt;SKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))),&lt;/span&gt; 
        &lt;span class=&quot;nc&quot;&gt;FKSplit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
        &lt;span class=&quot;nc&quot;&gt;KReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The original functions took varying arguments; the single function takes all the arguments which the original ones did. We pass &lt;code&gt;null&lt;/code&gt; for unused arguments in each call, but otherwise the cases are the same as before.&lt;/p&gt; 
 
&lt;p&gt;Now we can evaluate &lt;code&gt;nat&lt;/code&gt; to large N without running out of stack (but since the running time is quadratic it takes longer than I care to wait to complete):&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;See the complete code &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/scala-logic&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;Next time we&amp;rsquo;ll thread state through this backtracking logic monad, and use it to implement unification.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-2.html</id><title type="text">Logic programming in Scala, part 2: backtracking</title><updated>2011-04-30T05:07:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-1.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;I got a new job where I am hacking some Scala. I thought I would learn something by translating some functional code into Scala, and a friend had recently pointed me to Kiselyov et al.&amp;rsquo;s &lt;a href=&quot;http://okmij.org/ftp/Computation/LogicT.pdf&quot;&gt;Backtracking, Interleaving, and Terminating Monad Transformers&lt;/a&gt;, which provides a foundation for Prolog-style logic programming. Of course, a good translation should use the local idiom. So in this post (and the next) I want to explore an embedded domain-specific language for logic programming in Scala.&lt;/p&gt; 
&lt;b&gt;A search problem&lt;/b&gt; 
&lt;p&gt;Here is a problem I sometimes give in interviews:&lt;/p&gt; 
 
&lt;blockquote&gt; 
&lt;p&gt;Four people need to cross a rickety bridge, which can hold only two people at a time. It&amp;rsquo;s a moonless night, so they need a light to cross; they have one flashlight with a battery which lasts 60 minutes. Each person crosses the bridge at a different speed: Alice takes 5 minutes, Bob takes 10, Candace takes 20 minutes, and Dave 25. How do they get across?&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;p&gt;I&amp;rsquo;m not interested in the answer&amp;mdash;I&amp;rsquo;m interviewing programmers, not law school applicants&amp;mdash;but rather in how to write a program to find the answer.&lt;/p&gt; 
 
&lt;p&gt;The basic shape of the solution is to represent the state of the world (where are the people, where is the flashlight, how much battery is left), write a function to compute from any particular state the set of possible next states, then search for an answer (a path from the start state to the final state) in the tree formed by applying the next state function transitively to the start state. (&lt;a href=&quot;http://web.engr.oregonstate.edu/~erwig/papers/Zurg_JFP04.pdf&quot;&gt;Here is a paper&lt;/a&gt; describing solutions in Prolog and Haskell.)&lt;/p&gt; 
 
&lt;p&gt;Here is a first solution in Scala:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Alice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dave&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Alice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// values is broken&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Person._&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Alice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; 
                   &lt;span class=&quot;n&quot;&gt;lightOnLeft&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                   &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We define an enumeration of people (the &lt;code&gt;Enumeration&lt;/code&gt; class is a &lt;a href=&quot;https://lampsvn.epfl.ch/trac/scala/ticket/3687&quot;&gt;bit broken&lt;/a&gt; in Scala 2.8.1), a map of the time each takes to cross, and a case class to store the state of the world: the list of people on the left side of the bridge (the right side is just the complement); whether the flashlight is on the left; and how much time remains in the flashlight.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This function returns the list of pairs of people from the input list. We use &lt;code&gt;foldLeft&lt;/code&gt; to do a double loop over the input list, accumulating pairs &lt;code&gt;(p1, p2)&lt;/code&gt; where &lt;code&gt;p1 &amp;lt; p2&lt;/code&gt;; this avoids returning &lt;code&gt;(Alice, Bob)&lt;/code&gt; and also &lt;code&gt;(Bob, Alice)&lt;/code&gt;. The use of &lt;code&gt;foldLeft&lt;/code&gt; is rather OCamlish, and if you know Scala you will complain that &lt;code&gt;foldLeft&lt;/code&gt; is not idiomatic&amp;mdash;we will repair this shortly.&lt;/p&gt; 
 
&lt;p&gt;In Scala, &lt;code&gt;Nil&lt;/code&gt; doesn&amp;rsquo;t have type &lt;code&gt;'a list&lt;/code&gt; like in OCaml and Haskell, but rather &lt;code&gt;List[Nothing]&lt;/code&gt;. The way local type inference works, the type variable in the type of &lt;code&gt;foldLeft&lt;/code&gt; is instantiated with the type of the &lt;code&gt;init&lt;/code&gt; argument, so you have to ascribe a type to &lt;code&gt;init&lt;/code&gt; (or explicitly instantiate the type variable with &lt;code&gt;foldLeft[List[(Person,
Person)]]&lt;/code&gt;) or else you get a type clash between &lt;code&gt;List[Nothing]&lt;/code&gt; and &lt;code&gt;List[(Person, Person)]&lt;/code&gt;.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightOnLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterNot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
            &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterNot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here we compute the set of successor states for a state. We make a heuristic simplification: when the flashlight is on the left (the side where everyone begins) we move two people from the left to the right; when it is on the right we move only one. I don&amp;rsquo;t have a proof that an answer must take this form, but I believe it, and it makes the code shorter.&lt;/p&gt; 
 
&lt;p&gt;So when the light is on the left we fold over all the pairs of people still on the left, compute the time remaining if they were to cross, and if it is not negative build a new state where they and the flashlight are moved to the right and the time remaining updated.&lt;/p&gt; 
 
&lt;p&gt;If the light is on the right we do the same in reverse, but choose only one person to move.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A list of successive states is a &lt;em&gt;path&lt;/em&gt; (with the starting state at the end and the most recent state at the beginning); the state tree is a set of paths. The tree rooted at a path is the set of paths with the input path as a suffix. To compute this tree, we find the successor states of the head of the path, augment the path with each state in turn, recursively find the tree rooted at each augmented path, then append them all (including the input path).&lt;/p&gt; 
 
&lt;p&gt;Then to find an answer, we generate the state tree rooted at the path consisting only of the start state (everybody and the flashlight on the left, 60 minutes remaining on the light), then filter out the paths which end in a final state (everybody on the right).&lt;/p&gt; 
&lt;b&gt;For-comprehensions&lt;/b&gt; 
&lt;p&gt;To make the code above more idiomatic Scala (and more readable), we would of course use for-comprehensions, for example:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Just as before, we do a double loop over the input list, returning pairs where &lt;code&gt;p1 &amp;lt; p2&lt;/code&gt;. (However, under the hood the result list is constructed by appending to a &lt;code&gt;ListBuffer&lt;/code&gt; rather than with &lt;code&gt;::&lt;/code&gt;, so the pairs are returned in the reverse order.)&lt;/p&gt; 
 
&lt;p&gt;The for-comprehension syntax isn&amp;rsquo;t specific to lists. It&amp;rsquo;s syntactic sugar which translates to method calls, so we can use it on any objects which implement the right methods. The methods we need are&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;where &lt;code&gt;T&lt;/code&gt; is some type constructor, like &lt;code&gt;List&lt;/code&gt;. For &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; have their ordinary meaning, and &lt;code&gt;flatMap&lt;/code&gt; is a &lt;code&gt;map&lt;/code&gt; (where the result type must be a list) which concatenates the resulting lists (that is, it flattens the list of lists).&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;WithFilter&lt;/code&gt; is like &lt;code&gt;filter&lt;/code&gt; but should be implemented as a &amp;ldquo;virtual&amp;rdquo; filter for efficiency&amp;mdash;for &lt;code&gt;List&lt;/code&gt; it doesn&amp;rsquo;t build a new filtered list, but instead just keeps track of the filter function; this way multiple adjacent filters can be combined and the result produced with a single pass over the list.&lt;/p&gt; 
 
&lt;p&gt;The details of the translation are in the &lt;a href=&quot;http://www.scala-lang.org/docu/files/ScalaReference.pdf&quot;&gt;Scala reference manual&lt;/a&gt;, section 6.19. Roughly speaking, &lt;code&gt;&amp;lt;-&lt;/code&gt; becomes &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt; becomes &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt; becomes &lt;code&gt;map&lt;/code&gt;. So another way to write &lt;code&gt;chooseTwo&lt;/code&gt; is:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;b&gt;The logic monad&lt;/b&gt; 
&lt;p&gt;So far we have taken a concrete view of the choices that arise in searching the state tree, by representing a choice among alternatives as a list. For example, in the &lt;code&gt;chooseTwo&lt;/code&gt; function we returned a list of alternative pairs. I want now to take a more abstract view, and define an abstract type &lt;code&gt;T[A]&lt;/code&gt; to represent a choice among alternatives of type &lt;code&gt;A&lt;/code&gt;, along with operations on the type, packaged into a trait:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A &lt;code&gt;fail&lt;/code&gt; value is a choice among no alternatives. A &lt;code&gt;unit(a)&lt;/code&gt; is a choice of a single alternative. The value &lt;code&gt;or(t1, t2)&lt;/code&gt; is a choice among the alternatives represented by &lt;code&gt;t1&lt;/code&gt; together with the alternatives represented by &lt;code&gt;t2&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;The meaning of &lt;code&gt;apply&lt;/code&gt;ing a function to a choice of alternatives is a choice among the results of applying the function to each alternative; that is, if &lt;code&gt;t&lt;/code&gt; represents a choice among &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;, then &lt;code&gt;apply(t, f)&lt;/code&gt; represents a choice among &lt;code&gt;f(1)&lt;/code&gt;, &lt;code&gt;f(2)&lt;/code&gt;, and &lt;code&gt;f(3)&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Bind&lt;/code&gt; is the same except the function returns a choice of alternatives, so we must combine all the alternatives in the result; that is, if &lt;code&gt;t&lt;/code&gt; is a choice among &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt;, and &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;{ x =&amp;gt; or(unit(x), unit(x + 1)) }&lt;/code&gt;, then &lt;code&gt;bind(t, f)&lt;/code&gt; is a choice among &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, and &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;A &lt;code&gt;filter&lt;/code&gt; of a choice of alternatives by a predicate is a choice among only the alternatives which pass the the predicate.&lt;/p&gt; 
 
&lt;p&gt;Finally, &lt;code&gt;split&lt;/code&gt; is a function which returns the first alternative in a choice of alternatives (if there is at least one) along with a choice among the remaining alternatives.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;As a convenience, &lt;code&gt;or(as: List[A])&lt;/code&gt; means a choice among the elements of &lt;code&gt;as&lt;/code&gt;. And &lt;code&gt;run&lt;/code&gt; returns a list of the first &lt;code&gt;n&lt;/code&gt; alternatives in a choice, picking them off one by one with &lt;code&gt;split&lt;/code&gt;; this is how we get answers out of a &lt;code&gt;T[A]&lt;/code&gt;.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here we hook into the for-comprehension notation, by wrapping values of type &lt;code&gt;T[A]&lt;/code&gt; in an object with the methods we need (and &lt;code&gt;|&lt;/code&gt; as an additional bit of syntactic sugar), which methods just delegate to the functions defined above. We arrange with an implicit conversion for these wrappers to spring into existence when we need them.&lt;/p&gt; 
&lt;b&gt;The bridge puzzle with the logic monad&lt;/b&gt; 
&lt;p&gt;Now we can rewrite the solution in terms of the &lt;code&gt;Logic&lt;/code&gt; trait:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Logic._&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We pass an implementation of the logic monad in, then open it so the implicit conversion is available (we can also use &lt;code&gt;T[A]&lt;/code&gt; and the &lt;code&gt;Logic&lt;/code&gt; functions without qualification).&lt;/p&gt; 
 
&lt;p&gt;The &lt;code&gt;Person&lt;/code&gt;, &lt;code&gt;times&lt;/code&gt;, and &lt;code&gt;State&lt;/code&gt; definitions are as before.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;As we saw, we can write &lt;code&gt;chooseTwo&lt;/code&gt; more straightforwardly using a for-comprehension. In the previous version we punned on &lt;code&gt;list&lt;/code&gt; as a concrete list and as a choice among alternatives; here we convert one to the other explicitly.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightOnLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterNot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeRemaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is pretty much as before, except with for-comprehensions instead of &lt;code&gt;foldLeft&lt;/code&gt; and explicit consing. (You can easily figure out the branch for the flashlight on the right.)&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
         &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
         &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In &lt;code&gt;tree&lt;/code&gt; we use &lt;code&gt;|&lt;/code&gt; to adjoin the input path (previously we gave it in the initial value of &lt;code&gt;foldLeft&lt;/code&gt;). In &lt;code&gt;search&lt;/code&gt; we need to actually run the &lt;code&gt;Logic.T[A]&lt;/code&gt; value rather than returning it, because it&amp;rsquo;s an abstract type and can&amp;rsquo;t escape the module (see the Postscript for an alternative); this is why the other methods must be &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;Implementing the logic monad with lists&lt;/b&gt; 
&lt;p&gt;We can recover the original solution by implementing &lt;code&gt;Logic&lt;/code&gt; with lists:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogicList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A choice among alternatives is just a &lt;code&gt;List&lt;/code&gt; of the alternatives, so the semantics we sketched above are realized in a very direct way.&lt;/p&gt; 
 
&lt;p&gt;The downside to the &lt;code&gt;List&lt;/code&gt; implementation is that we compute all the alternatives, even if we only care about one of them. (In the bridge problem any path to the final state is a satisfactory answer, but our program computes all such paths, even if we pass an argument to &lt;code&gt;search&lt;/code&gt; requesting only one answer.) We might even want to solve problems with an infinite number of solutions.&lt;/p&gt; 
 
&lt;p&gt;Next time we&amp;rsquo;ll repair this downside by implementing the backtracking monad from the paper by Kiselyov et al.&lt;/p&gt; 
 
&lt;p&gt;See the complete code &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/scala-logic&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;b&gt;Postscript: modules in Scala&lt;/b&gt; 
&lt;p&gt;I got the idea of implementing the for-comprehension methods as an implict wrapper from Edward Kmett&amp;rsquo;s &lt;a href=&quot;https://github.com/ekmett/functorial&quot;&gt;functorial&lt;/a&gt; library. It&amp;rsquo;s nice that &lt;code&gt;T[A]&lt;/code&gt; remains completely abstract, and the for-comprehension notation is just sugar. I also tried an implementation where &lt;code&gt;T[A]&lt;/code&gt; is bounded by a trait containing the methods:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monadic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monadic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// no Syntax class needed&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This works too but the type system hackery is a bit ugly, and it constrains implementations of &lt;code&gt;Logic&lt;/code&gt; more than is necessary.&lt;/p&gt; 
 
&lt;p&gt;Another design choice is whether &lt;code&gt;T[A]&lt;/code&gt; is an abstract type (as I have it) or a type parameter of &lt;code&gt;Logic&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// no abstract type T[A] but otherwise as before&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Neither alternative provides the expressivity of OCaml modules (&lt;em&gt;but see addendum below&lt;/em&gt;): with abstract types, consumers of &lt;code&gt;Logic&lt;/code&gt; cannot return values of &lt;code&gt;T[A]&lt;/code&gt; (as we saw above); with a type parameter, they can, but the type is no longer abstract.&lt;/p&gt; 
 
&lt;p&gt;In OCaml we would write&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;(* and so on *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;and get both the abstract type and the ability to return values of the type.&lt;/p&gt; 
 
&lt;p&gt;&lt;em&gt;Addendum&lt;/em&gt;&lt;/p&gt; 
 
&lt;p&gt;Jorge Ortiz points out in the comments that it is possible to keep &lt;code&gt;T[A]&lt;/code&gt; abstract and also return its values from &lt;code&gt;Bridge&lt;/code&gt;, by making the &lt;code&gt;Logic&lt;/code&gt; argument a (public) &lt;code&gt;val&lt;/code&gt;. We can then remove the &lt;code&gt;private&lt;/code&gt;s, and write &lt;code&gt;search&lt;/code&gt; as just:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;instead of baking &lt;code&gt;run&lt;/code&gt; into it. Now, if we write &lt;code&gt;val b = new Bridge(LogicList)&lt;/code&gt; then &lt;code&gt;b.search&lt;/code&gt; has type &lt;code&gt;b.Logic.T[List[b.State]]&lt;/code&gt;, and we can call &lt;code&gt;b.Logic.run&lt;/code&gt; to evaluate it.&lt;/p&gt; 
 
&lt;p&gt;This is only a modest improvement; what&amp;rsquo;s still missing, compared to the OCaml version, is the fact that &lt;code&gt;LogicList&lt;/code&gt; and &lt;code&gt;b.Logic&lt;/code&gt; are the same module. So we can&amp;rsquo;t call &lt;code&gt;LogicList.run(b.search)&lt;/code&gt; directly. Worse, we can&amp;rsquo;t compose modules which use the same &lt;code&gt;Logic&lt;/code&gt; implementation, because they each have their own incompatibly-typed &lt;code&gt;Logic&lt;/code&gt; member.&lt;/p&gt; 
 
&lt;p&gt;I thought there might be a way out of this using singleton types&amp;mdash;the idea is that a match of a value &lt;code&gt;v&lt;/code&gt; against a typed pattern where the type is &lt;code&gt;w.type&lt;/code&gt; succeeds when &lt;code&gt;v eq w&lt;/code&gt; (section 8.2 in the reference manual). So we can define&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;b.Logic.T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;b.Logic.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;which is accepted, but sadly&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;b.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LogicList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mismatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;b.Logic.T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;b.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;b.Logic.T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;b.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;b.State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LogicList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
                                          &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;Addendum addendum&lt;/em&gt;&lt;/p&gt; 
 
&lt;p&gt;Some further advice from Jorge Ortiz: the specific type of &lt;code&gt;Logic&lt;/code&gt; (not just &lt;code&gt;Logic.type&lt;/code&gt;) can be exposed outside &lt;code&gt;Bridge&lt;/code&gt; either through polymorphism:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LogicList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;or by defining an abstract value (this works the same if &lt;code&gt;Bridge&lt;/code&gt; is a trait):&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bridge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logic&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;So we can compose uses of &lt;code&gt;T&lt;/code&gt; but it remains abstract.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2011/04/logic-programming-in-scala-part-1.html</id><title type="text">Logic programming in Scala, part 1</title><updated>2011-04-07T05:03:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/11/three-uses-for-binary-heap.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;Lately I have been interviewing for jobs, so doing a lot of whiteboard programming, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;binary heaps&lt;/a&gt; keep arising in the solutions to these interview problems. There is nothing new or remarkable about these applications (binary heaps and their uses are covered in any undergraduate algorithms class), but I thought I would write them down because they are cute, and in the hope that they might be useful to someone else who (like me) gets by most days as a working programmer with no algorithm fancier than quicksort or binary search.&lt;/p&gt; 
&lt;b&gt;Binary heaps&lt;/b&gt; 
&lt;p&gt;Here&amp;rsquo;s a signature for a binary heap module &lt;code&gt;Heap&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderedType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We start with a signature for ordered types (following the &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; modules in the standard library), so we can provide a type-specific comparison function.&lt;/p&gt; 
 
&lt;p&gt;From an ordered type we can make a heap which supports adding elements, peeking the smallest element (&lt;code&gt;None&lt;/code&gt; if there are no elements) without removing it, removing and returning the smallest element (raising &lt;code&gt;Not_found&lt;/code&gt; if the heap is empty), and returning the number of elements.&lt;/p&gt; 
 
&lt;p&gt;We&amp;rsquo;ll work out the asymptotic running times of the algorithms below, so it will be useful to know that the worst-case running time of the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;take_min&lt;/code&gt; functions is &lt;code&gt;O(log n)&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the number of elements in the heap.&lt;/p&gt; 
&lt;b&gt;Finding the k smallest elements in a list&lt;/b&gt; 
&lt;p&gt;Here&amp;rsquo;s a simple one. To find the smallest element in a list, we could sort the list then take the first element in the sorted list, at a cost of &lt;code&gt;O(log n)&lt;/code&gt;. Or we could just take a pass over the list keeping a running minimum, at a cost of &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;What if we want the &lt;code&gt;k&lt;/code&gt; smallest elements? Again, we could sort the list, but if &lt;code&gt;k &amp;lt; n&lt;/code&gt; we can do better by generalizing the single-pass solution. The idea is to keep the &lt;code&gt;k&lt;/code&gt; smallest elements we&amp;rsquo;ve seen so far in a binary heap. For each element in the list we add it to the heap, then (if there were already &lt;code&gt;k&lt;/code&gt; elements in the heap) remove the largest element in the heap, leaving the &lt;code&gt;k&lt;/code&gt; smallest.&lt;/p&gt; 
 
&lt;p&gt;The running time is &lt;code&gt;O(n log k)&lt;/code&gt; since we do an &lt;code&gt;add&lt;/code&gt; and a &lt;code&gt;take_min&lt;/code&gt; in a heap of size &lt;code&gt;k&lt;/code&gt; for each of &lt;code&gt;n&lt;/code&gt; elements in the list. Here&amp;rsquo;s the code:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here we make good use of OCaml 3.12&amp;rsquo;s new feature for &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/manual021.html#toc80&quot;&gt;explicitly naming type variables&lt;/a&gt; in a polymorphic function to make a structure matching &lt;code&gt;OrderedType&lt;/code&gt;. The heap has the same element type as the list, but we reverse the comparison since we want to remove the largest rather than smallest element from the heap in the loop. At the end of &lt;code&gt;kmin&lt;/code&gt; we drain the heap to build a list of the &lt;code&gt;k&lt;/code&gt; smallest elements.&lt;/p&gt; 
&lt;b&gt;Merging k lists&lt;/b&gt; 
&lt;p&gt;Suppose we want to merge &lt;code&gt;k&lt;/code&gt; lists. We could merge them pairwise until there is only one list, but that would take &lt;code&gt;k - 1&lt;/code&gt; passes, for a worst-case running time of &lt;code&gt;O(n * (k - 1))&lt;/code&gt;. Instead we can merge them all in one pass, using a binary heap so we can find the next smallest element of &lt;code&gt;k&lt;/code&gt; lists in &lt;code&gt;O(log k)&lt;/code&gt; time, for a running time of &lt;code&gt;O(n
log k)&lt;/code&gt;. Here&amp;rsquo;s the code:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We store the lists in the heap, and compare them by comparing their head element (we&amp;rsquo;re careful not to put an empty list in the heap). When we take the smallest list from the heap, its head becomes the next element in the output list, and we return its tail (if it is not empty) to the heap.&lt;/p&gt; 
&lt;b&gt;Computing a skyline&lt;/b&gt; 
&lt;p&gt;The next problem was told to me in terms of computing the skyline of a set of buildings. A building has a height and a starting and ending &lt;code&gt;x&lt;/code&gt;-coordinate; buildings may overlap. The skyline of a set of buildings is a list of (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) pairs (in ascending &lt;code&gt;x&lt;/code&gt; order), describing a sequence of horizontal line segments (each starting at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) and ending at the subsequent &lt;code&gt;x&lt;/code&gt;), such that at any &lt;code&gt;x&lt;/code&gt; there is no space between the line segment and the tallest building. (Here&amp;rsquo;s &lt;a href=&quot;http://stackoverflow.com/questions/1066234/the-skyline-problem&quot;&gt;another description&lt;/a&gt; with diagrams.)&lt;/p&gt; 
 
&lt;p&gt;I googled a bit to see what this is useful for, and didn&amp;rsquo;t find much. One application is to extract a monophonic line from polyphonic music, where &lt;code&gt;x&lt;/code&gt; is time and height is some metric on notes, like pitch or volume. It might be useful for searching data which is only intermittently applicable&amp;mdash;say, to compute a schedule over time of the nearest open restaurant.&lt;/p&gt; 
 
&lt;p&gt;The algorithm scans the building start and end points in ascending &lt;code&gt;x&lt;/code&gt; order, keeping the &amp;ldquo;active&amp;rdquo; buildings (those which overlap the current &lt;code&gt;x&lt;/code&gt;) in a binary heap. The height of the skyline can only change at a building start or end point. We can determine the tallest building at a point by calling &lt;code&gt;peek_min&lt;/code&gt; on the heap.&lt;/p&gt; 
 
&lt;p&gt;When we hit a start point we add the building to the heap; for an end point we do nothing (the heap has no operation to remove an element). So we may have inactive buildings in the heap. We remove them lazily&amp;mdash;before checking the height of the highest building, we call &lt;code&gt;take_min&lt;/code&gt; to remove any higher inactive buildings.&lt;/p&gt; 
 
&lt;p&gt;The worst-case running time is &lt;code&gt;O(n log n)&lt;/code&gt;, since we do some heap operations for each building, and we might end up with all the buildings in the heap.&lt;/p&gt; 
 
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* x0, x1, h *)&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skyline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,_)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;nn&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
       &lt;span class=&quot;nn&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,_,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,_,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Heights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,_,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,_,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We use a second heap &lt;code&gt;events&lt;/code&gt; to store the &amp;ldquo;events&amp;rdquo; (the start and end points of all the buildings), in order to process them in ascending &lt;code&gt;x&lt;/code&gt; order. (This use is not dynamic&amp;mdash;we do not add new elements to the heap while processing them&amp;mdash;so we could just as well use another means of sorting the points.) In this heap we store the &lt;code&gt;x&lt;/code&gt; coordinate and the building (we can tell whether we have a start or end point by comparing the &lt;code&gt;x&lt;/code&gt; coordinate to the building&amp;rsquo;s start point), and compare elements by comparing just the &lt;code&gt;x&lt;/code&gt; coordinates.&lt;/p&gt; 
 
&lt;p&gt;The main heap &lt;code&gt;heights&lt;/code&gt; stores buildings, and we compare them by comparing heights (reversed, so &lt;code&gt;peek_min&lt;/code&gt; peeks the tallest building). While there are still events, we add the building to &lt;code&gt;heights&lt;/code&gt; if the event is a start point, clear out inactive buildings, then return the pair (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) where &lt;code&gt;x&lt;/code&gt; is the point we&amp;rsquo;re processing and &lt;code&gt;y&lt;/code&gt; is the height of the tallest active building. Additionally we filter out adjacent pairs with the same height; these can arise when a shorter building starts or ends while a taller building is active.&lt;/p&gt; 
&lt;b&gt;Implementing binary heaps&lt;/b&gt; 
&lt;p&gt;The following implementation is derived from the one in Daniel B&amp;uuml;nzli&amp;rsquo;s &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; library (edited a little bit for readability). The &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;Wikipedia article on binary heaps&lt;/a&gt; explains the standard technique well, so I won&amp;rsquo;t repeat it.&lt;/p&gt; 
 
&lt;p&gt;The only piece of trickiness is the use of &lt;code&gt;Obj.magic 0&lt;/code&gt; for unused elements of the array, so we can grow it by doubling the size rather than adding a single element each time, and thereby amortize the cost of blitting the old array.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[||];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr'&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peek_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take_min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(Complete code is &lt;a href=&quot;https://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/binary-heaps&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/11/three-uses-for-binary-heap.html</id><title type="text">Three uses for a binary heap</title><updated>2010-11-25T04:58:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/09/reading-camlp4-part-11-syntax.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In this final (?) post in my series on Camlp4, I want at last to cover syntax extensions. A nontrivial syntax extension involves almost all the topics we have &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/p/reading-camlp4.html&quot;&gt;previously covered&lt;/a&gt;, so it seems fitting that we treat them last.&lt;/p&gt; 
&lt;b&gt;Extending grammars&lt;/b&gt; 
&lt;p&gt;In the post on &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html&quot;&gt;parsing&lt;/a&gt; we covered Camlp4 grammars but stopped short of explaining how to extend them. Well, this is not completely true: we used the &lt;code&gt;EXTEND&lt;/code&gt; form to extend an empty grammar, and we can also use it to extend non-empty grammars. We saw a small example of this when implementing &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-8-implementing.html&quot;&gt;quotations&lt;/a&gt;, where we extended the JSON grammar with a new &lt;code&gt;json_eoi&lt;/code&gt; entry (which refered to an entry in the original grammar). Rules and levels may also be added to existing entries, and rules may be deleted.&lt;/p&gt; 
 
&lt;p&gt;Let&amp;rsquo;s look at a complete syntax extension, which demonstrates modifying Camlp4&amp;rsquo;s OCaml grammar. The purpose of the extension is to change the precedence of the method call operator &lt;code&gt;#&lt;/code&gt; to make &amp;ldquo;method chaining&amp;rdquo; read better. For example, if the &lt;code&gt;foo&lt;/code&gt; method returns an object, you can write&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;to call the &lt;code&gt;baz&lt;/code&gt; method, rather than needing&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(I originally wrote this for use with the &lt;a href=&quot;http://github.com/jaked/ocamljs/tree/master/src/jquery/&quot;&gt;&lt;code&gt;jQuery&lt;/code&gt; binding for &lt;code&gt;ocamljs&lt;/code&gt;&lt;/a&gt;; method chaining is common with &lt;code&gt;jQuery&lt;/code&gt;.)&lt;/p&gt; 
 
&lt;p&gt;Here is the extension:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Camlp4&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pa_jquery&amp;quot;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Camlp4Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Syntax&lt;/span&gt; 
  
    &lt;span class=&quot;nc&quot;&gt;DELETE_RULE&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  
    &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apply&amp;quot;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEFTA&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OCamlSyntaxExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To make sense of a syntax extension it&amp;rsquo;s helpful to refer to &lt;code&gt;Camlp4OCamlRevisedParser.ml&lt;/code&gt; (which defines the revised syntax grammar) and &lt;code&gt;Camlp4OCamlParser.ml&lt;/code&gt; (which defines the original syntax as an extension of the revised syntax). There we see that the &lt;code&gt;#&lt;/code&gt; operator is parsed in the &lt;code&gt;expr&lt;/code&gt; entry, in a level called &amp;rdquo;&lt;code&gt;.&lt;/code&gt;&amp;rdquo; (which includes other dereferencing operators), and that this level appears below the &lt;code&gt;apply&lt;/code&gt; level, which parses function application. Recall from the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html&quot;&gt;parsing&lt;/a&gt; post that operators in lower levels bind more tightly. So to get the effect we want, we need to move the &lt;code&gt;#&lt;/code&gt; rule above the &lt;code&gt;apply&lt;/code&gt; level in the grammar.&lt;/p&gt; 
 
&lt;p&gt;First we delete the rule from its original location: &lt;code&gt;DELETE_RULE&lt;/code&gt; takes the grammar, the entry, and the symbols on the left-hand side of the rule, followed by &lt;code&gt;END&lt;/code&gt;; you don&amp;rsquo;t have to say in what level it appears. Then we add the rule at a new location: we create a new level &lt;code&gt;#&lt;/code&gt; containing the rule from the original grammar, and add it before the level named &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;There are several ways to specify where a level is inserted: &lt;code&gt;BEFORE&lt;/code&gt; &lt;em&gt;level&lt;/em&gt; and &lt;code&gt;AFTER&lt;/code&gt; &lt;em&gt;level&lt;/em&gt; put it before or after some other level; &lt;code&gt;LEVEL&lt;/code&gt; &lt;em&gt;level&lt;/em&gt; adds rules to an existing level (you will be warned but not stopped from changing the label or associativity of the level); &lt;code&gt;FIRST&lt;/code&gt; and &lt;code&gt;LAST&lt;/code&gt; put the level before or after all other levels. If you don&amp;rsquo;t specify, rules are added to the topmost level in the entry. The resulting grammar works just as if you had given it all at once, making the insertions in the specified places. (However, it is not very clear from the code how ordering works when inserting rules into an existing level; it is perhaps best not to rely on the order of rules in a level anyway.)&lt;/p&gt; 
 
&lt;p&gt;Finally we register the extension. The &lt;code&gt;Make&lt;/code&gt; argument to &lt;code&gt;OCamlSyntaxExtension&lt;/code&gt; returns a &lt;code&gt;Sig.Camlp4Syntax&lt;/code&gt; for some reason (in &lt;code&gt;Register.ml&lt;/code&gt; it is just ignored) so we &lt;code&gt;include Syntax&lt;/code&gt; to provide it.&lt;/p&gt; 
 
&lt;p&gt;(The complete code for this example is &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-syntax-extensions/pa_jquery&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt; 
&lt;b&gt;Transforming the AST&lt;/b&gt; 
&lt;p&gt;Let&amp;rsquo;s do a slightly more complicated example involving some transformation of the parsed AST. It often comes up that we want to &lt;code&gt;let&lt;/code&gt;-bind the value of an expression to a name, trapping exceptions, then evaluate the body of the &lt;code&gt;let&lt;/code&gt; outside the scope of the exception handler. This is a bit painful to write in stock OCaml; we can only straightforwardly express trapping exceptions in the whole &lt;code&gt;let&lt;/code&gt; expression:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A nice alternative is to use thunks to delay the evaluation of the body, doing it outside the scope of the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;with&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; 
   &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(We must thunkify the exception handler to make the types work out.) This is simple enough to do by hand, but let&amp;rsquo;s give it some syntactic sugar:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;which should expand to the thunkified version above. (The idea and syntax are taken from Martin Jambon&amp;rsquo;s &lt;a href=&quot;http://martin.jambon.free.fr/micmatch.html&quot;&gt;micmatch&lt;/a&gt; extension.)&lt;/p&gt; 
 
&lt;p&gt;Let&amp;rsquo;s look at the existing rules in &lt;code&gt;Camlp4OCamlRevisedParser.ml&lt;/code&gt; for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; to get an idea of how to parse the &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;try&lt;/code&gt; form:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;let&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt_rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;try&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mksequence'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;For &lt;code&gt;let&lt;/code&gt;, the &lt;code&gt;opt_rec&lt;/code&gt; entry parses an optional &lt;code&gt;rec&lt;/code&gt; keyword (we see there is a special antiquotation for interpolating &lt;code&gt;rec&lt;/code&gt;). &lt;code&gt;Binding&lt;/code&gt; parses a group of bindings separated by &lt;code&gt;and&lt;/code&gt;. &lt;code&gt;SELF&lt;/code&gt; is just &lt;code&gt;expr&lt;/code&gt;. For &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;sequence&lt;/code&gt; is a sequence of expressions separated by &lt;code&gt;;&lt;/code&gt;, and &lt;code&gt;match_case&lt;/code&gt; is a group of match cases separated by &lt;code&gt;|&lt;/code&gt;. (These entries are both a little different in the original syntax, to account for the different semicolon rules and the &lt;code&gt;[]&lt;/code&gt; delimiters around the match cases.) Recall that &lt;code&gt;Camlp4OCamlRevisedParser.ml&lt;/code&gt; uses the revised syntax quotations, so we have &lt;code&gt;[]&lt;/code&gt; around the match cases. The call to &lt;code&gt;mksequence'&lt;/code&gt; just wraps a &lt;code&gt;do {}&lt;/code&gt; around a sequence if necessary; more on this below.&lt;/p&gt; 
 
&lt;p&gt;The parsing rule we want is a combination of these. Here is the extension:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;let&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;try&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt_rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
                       &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_match_case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
             &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We put &lt;code&gt;rec&lt;/code&gt; after &lt;code&gt;try&lt;/code&gt; (following &lt;code&gt;micmatch&lt;/code&gt;), which is a little weird &lt;s&gt;, but if we put it before we would need to look ahead to
disambiguate `let` from `let try`; once we parse `opt_rec` we are
committed to one rule or the other&lt;/s&gt; ; instead we could start the rule &lt;code&gt;&amp;quot;let&amp;quot;; r = opt_rec; &amp;quot;try&amp;quot;&lt;/code&gt;, which has no ambiguity with the ordinary &lt;code&gt;let&lt;/code&gt; rule because the &lt;code&gt;&amp;quot;let&amp;quot;; opt_rec&lt;/code&gt; prefix is factored out; the parser doesn&amp;rsquo;t choose between the rules until it tries to parse &lt;code&gt;try&lt;/code&gt;. After &lt;code&gt;in&lt;/code&gt; we parse &lt;code&gt;sequence&lt;/code&gt; rather than &lt;code&gt;SELF&lt;/code&gt;; this seems like a good choice because there is a &lt;code&gt;with&lt;/code&gt; to end the sequence.&lt;/p&gt; 
 
&lt;p&gt;Now, to transform the AST, we map over the match cases. The &lt;code&gt;match_case&lt;/code&gt; entry returns a list of cases separated by &lt;code&gt;Ast.McOr&lt;/code&gt;; we call &lt;code&gt;list_of_match_case&lt;/code&gt; to get an ordinary list. For each case, we match the pattern, &lt;code&gt;when&lt;/code&gt; clause, and expression on the right-hand side (these are packaged in an &lt;code&gt;Ast.McArr&lt;/code&gt;, where the &lt;code&gt;when&lt;/code&gt; clause field is &lt;code&gt;Ast.ExNil&lt;/code&gt; if there is no &lt;code&gt;when&lt;/code&gt; clause), and return it with the expression thunkified. Then we return the whole &lt;code&gt;let&lt;/code&gt; inside &lt;code&gt;try&lt;/code&gt;, with the body sequence thunkified.&lt;/p&gt; 
 
&lt;p&gt;We have to add a &lt;code&gt;do {}&lt;/code&gt; around the body, creating an &lt;code&gt;Ast.ExSeq&lt;/code&gt; node, because that&amp;rsquo;s what is expected by &lt;code&gt;Camlp4Ast2OCamlAst.ml&lt;/code&gt;&amp;mdash;recall from the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/03/reading-camlp4-part-5-filters.html&quot;&gt;filters&lt;/a&gt; post that the Camlp4 AST is translated to an OCaml AST and marshalled to the compiler. If we forget this (and &amp;ldquo;we&amp;rdquo; often forget these idiosyncrasies) then we get the error &amp;rdquo;&lt;code&gt;expr; expr: not allowed here, use do {...} or [|...|] to surround them&lt;/code&gt;&amp;rdquo;, which is pretty helpful as these errors go.&lt;/p&gt; 
 
&lt;p&gt;(The complete code for this example is &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-syntax-extensions/pa_let_try&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt; 
&lt;b&gt;Extending pattern matching&lt;/b&gt; 
&lt;p&gt;As a final example, let&amp;rsquo;s extend OCaml&amp;rsquo;s pattern syntax. In the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-9-implementing.html&quot;&gt;quotations&lt;/a&gt; post we noted that JSON quotations in a pattern are not very useful, because we would usually like a pattern to match even if the fields of an object come in a different order or there are extra fields. To keep the code short let&amp;rsquo;s abstract the problem a little and consider matching association lists: if we write a match case&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;we would like it to match association lists with &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;bar&amp;quot;&lt;/code&gt; keys, in any order, with any extra pairs in the list. Our translation looks like this:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This might seem overcomplicated, and it is true that we could simplify it for this case. But the built-in pattern syntax is complicated, and it is tricky handling all the cases to make things work smoothly; the strategy that produces the code above will handle some (but not all) of the complications. (We&amp;rsquo;ll consider some improvements below.)&lt;/p&gt; 
 
&lt;p&gt;The basic idea is that when we come to an &lt;code&gt;alist&lt;/code&gt; we replace it with a new fresh name, then do further matching in a &lt;code&gt;when&lt;/code&gt; clause, so if it fails we can continue to the next case by returning &lt;code&gt;false&lt;/code&gt;. In the &lt;code&gt;when&lt;/code&gt; clause we look up the keys, putting them in &lt;code&gt;option&lt;/code&gt;s, then match on the &lt;code&gt;option&lt;/code&gt;s; we handle nested patterns (to the right of a key) by embedding them in the &lt;code&gt;when&lt;/code&gt; clause match. The &lt;code&gt;when&lt;/code&gt; clause match also binds variables appearing in the original pattern, so they are available to the &lt;code&gt;when&lt;/code&gt; clause of the original case (if there is one). Finally, we do the whole thing over again in the match case body to provide bindings to the original body.&lt;/p&gt; 
 
&lt;p&gt;In order to implement this we&amp;rsquo;ll use both a syntax extension and a filter. The reason is that we&amp;rsquo;d like to extend the &lt;code&gt;patt&lt;/code&gt; entry, but to do the AST transformation we sketched above we need to transform &lt;code&gt;match_case&lt;/code&gt;s. We could replace the &lt;code&gt;match_case&lt;/code&gt; part of the parser as well but that seems needlessly hairy, and generally when writing a syntax extension we&amp;rsquo;d like to touch as little of the parser as possible so it interoperates well with other extensions.&lt;/p&gt; 
 
&lt;p&gt;First, here is the syntax extension:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;simple&amp;quot;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;alist&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
         &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
           &lt;span class=&quot;nc&quot;&gt;LIST0&lt;/span&gt; 
             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;simple&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
               &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;simple&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PaOlbi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
             &lt;span class=&quot;nc&quot;&gt;SEP&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alist&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paSem_of_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We extend the &lt;code&gt;simple&lt;/code&gt; level of the &lt;code&gt;patt&lt;/code&gt; entry, which parses primitive patterns. Inside &lt;code&gt;alist []&lt;/code&gt; we parse a list of &lt;code&gt;expr&lt;/code&gt; / &lt;code&gt;patt&lt;/code&gt; pairs; we parse &lt;code&gt;expr&lt;/code&gt; at the &lt;code&gt;simple&lt;/code&gt; level or else it would parse the whole pair as an &lt;code&gt;expr&lt;/code&gt;, and the same for &lt;code&gt;patt&lt;/code&gt; just in case. Then we return the pair of expression and pattern in an &lt;code&gt;Ast.PaOlbi&lt;/code&gt; (ordinarily used for optional argument defaults in function definitions). Why? Well, we need to return something of type &lt;code&gt;patt&lt;/code&gt;, but we need somehow to get the &lt;code&gt;expr&lt;/code&gt; to our filter, and this is the only &lt;code&gt;patt&lt;/code&gt; constructor that holds an &lt;code&gt;expr&lt;/code&gt;. (As an alternative we could parse a &lt;code&gt;patt&lt;/code&gt; instead of an &lt;code&gt;expr&lt;/code&gt;, but then we&amp;rsquo;d need to translate it to an &lt;code&gt;expr&lt;/code&gt; at the point we use it.) Finally we return the list wrapped in a data constructor so we can recognize it easily in the filter; because it is lower-case, we can be sure that &amp;ldquo;alist&amp;rdquo; is not the identifier of a real data constructor.&lt;/p&gt; 
 
&lt;p&gt;Now let&amp;rsquo;s look at the filter. First, some helper functions:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;__pa_alist_patt_&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_of_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_tup_of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exCom_of_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patt_tup_of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paCom_of_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We have a function to generate fresh names, a function to turn a list of expressions into a tuple, and a similar function for patterns. The reason we need these latter two is that a tuple with 0 or 1 elements is not allowed by &lt;code&gt;Camlp4Ast2OCamlAst.ml&lt;/code&gt; (the empty &amp;ldquo;tuple&amp;rdquo; is actually a special identifier in the Camlp4 AST). Next, the main rewrite function:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rewrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The function takes the parts of an &lt;code&gt;Ast.McArr&lt;/code&gt; (that is, a match case). We&amp;rsquo;re going to map over the pattern &lt;code&gt;p&lt;/code&gt;, building up a function &lt;code&gt;k&lt;/code&gt; as we encounter nested &lt;code&gt;alist&lt;/code&gt; forms. We want to generate the same matching code in the &lt;code&gt;when&lt;/code&gt; clause and the body, so &lt;code&gt;k&lt;/code&gt; is parameterized with an expression in case of success (the original &lt;code&gt;when&lt;/code&gt; clause or the body) and in case of failure (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;assert
false&lt;/code&gt;). We will build &lt;code&gt;k&lt;/code&gt; from the inside out, starting with a function that just returns the success expression.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; 
 
        &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alist&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fresh&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
                    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
                       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PaOlbi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
                       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
                    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
                    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                       &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
                         &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$)&lt;/span&gt; 
                         &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
                       &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
                    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
                       &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr_tup_of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
                         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt_tup_of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
                         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;);&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;Ast.map&lt;/code&gt; object provides methods to map each syntactic class of the AST, along with default implementations which return the node unchanged. We extend it to walk over the pattern, leaving it unchanged except when we come to our special &lt;code&gt;alist&lt;/code&gt; constructor. In that case we generate a fresh name, which we return as the value of the function. Then we extract the &lt;code&gt;expr&lt;/code&gt; / &lt;code&gt;patt&lt;/code&gt; pairs and map them to &lt;code&gt;try Some (List.assoc ...&lt;/code&gt; expressions and &lt;code&gt;Some&lt;/code&gt; patterns. Finally we extend &lt;code&gt;k&lt;/code&gt; by matching all the expressions against all the patterns; if the match succeeds we call the previous &lt;code&gt;k&lt;/code&gt;, otherwise the failure expression. Since we build &lt;code&gt;k&lt;/code&gt; from the inside out, we transform subpatterns first (by matching over &lt;code&gt;super#patt p&lt;/code&gt;).&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We call &lt;code&gt;map#patt&lt;/code&gt; on &lt;code&gt;p&lt;/code&gt; to replace special &lt;code&gt;alist&lt;/code&gt; constructor nodes with fresh names and build up &lt;code&gt;k&lt;/code&gt;, then call the resulting &lt;code&gt;k&lt;/code&gt; on the &lt;code&gt;when&lt;/code&gt; clause (if there is no &lt;code&gt;when&lt;/code&gt; clause we replace it with &lt;code&gt;true&lt;/code&gt;) and body, and finally return the result as a &lt;code&gt;match_case&lt;/code&gt;, completing the rewrite function.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; 
 
        &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;rewrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AstFilters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_str_item_filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We extend &lt;code&gt;Ast.map&lt;/code&gt; again to call the rewrite function on each &lt;code&gt;match_case&lt;/code&gt;, then register the resulting filter.&lt;/p&gt; 
 
&lt;p&gt;The code above handles &lt;code&gt;when&lt;/code&gt; clauses and nested &lt;code&gt;alist&lt;/code&gt; patterns, and interacts properly with ordinary OCaml patterns. However, it completely falls down on nested pattern alternatives. If we write&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;we get this mess:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fooz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
             &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
           &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa_alist_patt_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
                  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* the same mess for the body *)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The first problem is that both arms of an alternative must bind the same names, but we have replaced them with two different fresh names. The second problem is that we have blindly treated alternative &lt;code&gt;alist&lt;/code&gt; patterns as being nested one inside the other. A solution to both these problems is to split nested alternatives into separate cases, at the cost of duplicating the &lt;code&gt;when&lt;/code&gt; clause and body in each.&lt;/p&gt; 
 
&lt;p&gt;Jeremy Yallop&amp;rsquo;s &lt;a href=&quot;http://code.google.com/p/ocaml-patterns&quot;&gt;patterns&lt;/a&gt; framework (see &lt;a href=&quot;http://github.com/jaked/patterns&quot;&gt;here&lt;/a&gt; for an update that works with OCaml 3.12.0) allows multiple pattern extensions to coexist, and provides some common facilities to make them easier to write. In particular it splits nested alternatives into separate cases. Another deficiency in the code above is that it duplicates the match expression (built in &lt;code&gt;k&lt;/code&gt;) in the &lt;code&gt;when&lt;/code&gt; clause and body. This can be avoided by computing the body within the &lt;code&gt;when&lt;/code&gt; clause, setting a reference, and dereferencing it in the body. However, the reference must be bound outside the &lt;code&gt;match_case&lt;/code&gt; to be visible both in the &lt;code&gt;when&lt;/code&gt; clause and the body, so this approach must transform each AST node that contains &lt;code&gt;match_case&lt;/code&gt;s in order to bind the refs in the right place. The &lt;code&gt;patterns&lt;/code&gt; framework handles this as well.&lt;/p&gt; 
 
&lt;p&gt;(The complete code for this example is &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-syntax-extensions/pa_alist_patt&quot;&gt;here&lt;/a&gt;. A version using the &lt;code&gt;patterns&lt;/code&gt; framework is &lt;a href=&quot;http://github.com/jaked/patterns/blob/master/applications/alist/pa_alist.ml&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/09/reading-camlp4-part-11-syntax.html</id><title type="text">Reading Camlp4, part 11: syntax extensions</title><updated>2010-09-11T00:16:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/08/ocamljs-03.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;I am happy to announce version 0.3 of ocamljs. Ocamljs is a system for compiling OCaml to Javascript. It includes a Javascript back-end for the OCaml compiler, as well as several support libraries, such as bindings to the browser DOM. Ocamljs also works with &lt;a href=&quot;http://jaked.github.com/orpc&quot;&gt;orpc&lt;/a&gt; for RPC over HTTP, and &lt;a href=&quot;http://jaked.github.com/froc&quot;&gt;froc&lt;/a&gt; for functional reactive browser programming.&lt;/p&gt; 
 
&lt;p&gt;Changes since version 0.2 include:&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;support for OCaml 3.11.x and 3.12.0&lt;/li&gt; 
 
&lt;li&gt;jQuery binding (contributed by Dave Benjamin)&lt;/li&gt; 
 
&lt;li&gt;full support for OCaml objects (interoperable with Javascript objects)&lt;/li&gt; 
 
&lt;li&gt;Lwt 2.x support&lt;/li&gt; 
 
&lt;li&gt;ocamllex and ocamlyacc support&lt;/li&gt; 
 
&lt;li&gt;better interoperability with Javascript&lt;/li&gt; 
 
&lt;li&gt;many small fixes and improvements&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;Development of ocamljs has moved from Google Code to Github; see&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;project page: &lt;a href=&quot;http://github.com/jaked/ocamljs&quot;&gt;http://github.com/jaked/ocamljs&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;documentation: &lt;a href=&quot;http://jaked.github.com/ocamljs&quot;&gt;http://jaked.github.com/ocamljs&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;downloads: &lt;a href=&quot;http://github.com/jaked/ocamljs/downloads&quot;&gt;http://github.com/jaked/ocamljs/downloads&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt;Comparison to js_of_ocaml&lt;/b&gt; 
&lt;p&gt;Since I last did an &lt;code&gt;ocamljs&lt;/code&gt; release, a new OCaml-to-Javascript system has arrived, &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;&lt;code&gt;js_of_ocaml&lt;/code&gt;&lt;/a&gt;. I want to say a little about how the two systems compare:&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Ocamljs&lt;/code&gt; is a back-end to the existing OCaml compiler; it translates the &amp;ldquo;lambda&amp;rdquo; intermediate language to Javascript. (This is also where the bytecode and native code back-ends connect to the common front-end.) &lt;code&gt;Js_of_ocaml&lt;/code&gt; post-processes ordinary OCaml bytecode (compiled and linked with the ordinary OCaml bytecode compiler) into Javascript. With &lt;code&gt;ocamljs&lt;/code&gt; you need a special installation of the compiler (and special support for &lt;code&gt;ocamlbuild&lt;/code&gt; and &lt;code&gt;ocamlfind&lt;/code&gt;), you need to recompile libraries, and you need the OCaml source to build it. With &lt;code&gt;js_of_ocaml&lt;/code&gt; you don&amp;rsquo;t need any of this.&lt;/p&gt; 
 
&lt;p&gt;Since &lt;code&gt;ocamljs&lt;/code&gt; recompiles libraries, it&amp;rsquo;s possible to special-case code for the Javascript build to take advantage of Javascript facilities. For example, &lt;code&gt;ocamljs&lt;/code&gt; implements the &lt;code&gt;Buffer&lt;/code&gt; module on top of Javascript arrays instead of strings, for better performance. Similarly, it implements &lt;code&gt;CamlinternalOO&lt;/code&gt; to use Javascript method dispatch directly instead of layering OCaml method dispatch on top. &lt;code&gt;Js_of_ocaml&lt;/code&gt; can&amp;rsquo;t do this (or at least it would be necessary to recognize the compiled bytecode and replace it with the special case).&lt;/p&gt; 
 
&lt;p&gt;Because &lt;code&gt;js_of_ocaml&lt;/code&gt; works from bytecode, it can&amp;rsquo;t always know the type of values (at the bytecode level, &lt;code&gt;int&lt;/code&gt;s, &lt;code&gt;bool&lt;/code&gt;s, and &lt;code&gt;char&lt;/code&gt;s all have the same representation, for example). This makes interoperating with native Javascript more difficult: you usually need conversion functions between the OCaml and Javascript representation of values when you call a Javascript function from OCaml. &lt;code&gt;Ocamljs&lt;/code&gt; has more information to work with, and can represent OCaml bools as Javascript bools, for example, so you can usually call a Javascript function from OCaml without conversions.&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Ocamljs&lt;/code&gt; has a mixed representation of strings: literal strings and the result of &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;Buffer.contents&lt;/code&gt;, and &lt;code&gt;Printf.sprintf&lt;/code&gt; are all immutable Javascript strings; strings created with &lt;code&gt;String.create&lt;/code&gt; are mutable strings implemented by Javascript arrays (with a &lt;code&gt;toString&lt;/code&gt; method which returns the represented string). This is good for interoperability&amp;mdash;you can usually pass a string directly to Javascript&amp;mdash;but it doesn&amp;rsquo;t match regular OCaml&amp;rsquo;s semantics, and it can cause runtime failures (e.g. if you try to mutate an immutable string). &lt;code&gt;Js_of_ocaml&lt;/code&gt; implements only mutable strings, so you need conversions when calling Javascript, but the semantics match regular OCaml.&lt;/p&gt; 
 
&lt;p&gt;With &lt;code&gt;ocamljs&lt;/code&gt;, Javascript objects can be called from OCaml using the ordinary OCaml method-call syntax, and objects written in OCaml can be called using the ordinary Javascript syntax. With &lt;code&gt;js_of_ocaml&lt;/code&gt;, a special syntax is needed to call Javascript objects, and OCaml objects can&amp;rsquo;t easily be called from Javascript. However, there is an advantage to having a special call syntax: with &lt;code&gt;ocamljs&lt;/code&gt; it is not possible to partially apply calls to native Javascript methods, but this is not caught by the compiler, so there can be a runtime failure.&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Ocamljs&lt;/code&gt; supports inline Javascript, while &lt;code&gt;js_of_ocaml&lt;/code&gt; does not. I think it might be possible for &lt;code&gt;js_of_ocaml&lt;/code&gt; to do so using the same approach that &lt;code&gt;ocamljs&lt;/code&gt; takes: use Camlp4 quotations to embed a syntax tree, then convert the syntax tree from its OCaml representation (as lambda code or bytecode) into Javascript. However, you would still need conversion functions between OCaml and Javascript values.&lt;/p&gt; 
 
&lt;p&gt;I haven&amp;rsquo;t compared the performance of the two systems. It seems like there must be a speed penalty to translating from bytecode compared to translating from lambda code. On the other hand, while &lt;code&gt;ocamljs&lt;/code&gt; is very naive in its translation, &lt;code&gt;js_of_ocaml&lt;/code&gt; makes several optimization passes. With many programs it doesn&amp;rsquo;t matter, since most of the time is spent in browser code. (For example, the &lt;code&gt;planet&lt;/code&gt; example seems to run at the same speed in &lt;a href=&quot;http://jaked.github.com/ocamljs/examples/dom/planet/&quot;&gt;&lt;code&gt;ocamljs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/planet/&quot;&gt;&lt;code&gt;js_of_ocaml&lt;/code&gt;&lt;/a&gt;.) It would be interesting to compare them on something computationally intensive like Andrej Bauer&amp;rsquo;s &lt;a href=&quot;http://random-art.org/&quot;&gt;random-art.org&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Js_of_ocaml&lt;/code&gt; is more complete and careful in its implementation of OCaml (e.g. it supports &lt;code&gt;int64&lt;/code&gt;s), and it generates much more compact code than &lt;code&gt;ocamljs&lt;/code&gt;. I hope to close the gap in these areas, possibly by borrowing some code and good ideas from &lt;code&gt;js_of_ocaml&lt;/code&gt;.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/08/ocamljs-03.html</id><title type="text">ocamljs 0.3</title><updated>2010-08-26T21:45:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/08/mixing-monadic-and-direct-style-code.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;The &lt;a href=&quot;http://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; library is a really nice way to write concurrent programs. A big downside, however, is that you can&amp;rsquo;t use direct-style libraries with it. Suppose we&amp;rsquo;re writing an XMPP server, and we want to parse XML as it arrives over a network connection, using Daniel B&amp;uuml;nzli&amp;rsquo;s nice &lt;a href=&quot;http://erratique.ch/software/xmlm&quot;&gt;&lt;code&gt;xmlm&lt;/code&gt;&lt;/a&gt; library. &lt;code&gt;Xmlm&lt;/code&gt; can read from a &lt;code&gt;string&lt;/code&gt;, or from a &lt;code&gt;Pervasives.in_channel&lt;/code&gt;, or you can give it a function of type &lt;code&gt;(unit -&amp;gt; int)&lt;/code&gt; to return the next character of input. But there is no way to have it read from an Lwt thread; that is, we can&amp;rsquo;t give it a function of type &lt;code&gt;(unit -&amp;gt; int Lwt.t)&lt;/code&gt;, since it doesn&amp;rsquo;t know what do with an &lt;code&gt;Lwt.t&lt;/code&gt;. To keep track of the parser state at the point the input blocks, the whole library would need to be rewritten in Lwt style (i.e. monadic style).&lt;/p&gt; 
 
&lt;p&gt;Now, Lwt does provide the &lt;code&gt;Lwt_preemptive&lt;/code&gt; module, which gives you a way to spin off a preemptive thread (implemented as an ordinary OCaml thread) and wait for its result in the usual Lwt way with &lt;code&gt;bind&lt;/code&gt;. This is useful, but has two drawbacks: preemptive threads are &lt;em&gt;preemptive&lt;/em&gt;, so you&amp;rsquo;re back to traditional locking if you want to operate on shared data; and preemptive threads are &lt;em&gt;threads&lt;/em&gt;, so they are much heavier than Lwt threads, and (continuing the XMPP hypothetical) it may not be feasible to use one per open connection.&lt;/p&gt; 
&lt;b&gt;Fibers&lt;/b&gt; 
&lt;p&gt;What we would really like is to be able spin off a cooperative, direct-style thread. The thread needs a way to block on Lwt threads, but when it blocks we need to be able to schedule another Lwt thread. As a cooperative thread it of course has exclusive access to the process state while it is running. A cooperative, direct-style thread is sometimes called a &lt;em&gt;coroutine&lt;/em&gt; (although to me that word connotes a particular style of inter-thread communication as well, where values are yielded between coroutines), or a &lt;em&gt;fiber&lt;/em&gt;.&lt;/p&gt; 
 
&lt;p&gt;Here&amp;rsquo;s an API for mixing Lwt threads with fibers:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; function spins off a fiber, returning an Lwt thread which is woken with the result of the fiber once it completes. The &lt;code&gt;await&lt;/code&gt; function (which may be called only from within a fiber) blocks on the result of an Lwt thread, allowing another Lwt thread to be scheduled while it is waiting.&lt;/p&gt; 
 
&lt;p&gt;With this API we could implement our XMPP server by calling &lt;code&gt;xmlm&lt;/code&gt; from within a fiber, and passing it a function that &lt;code&gt;await&lt;/code&gt;s the next character available on the network connection. But how do we implement it?&lt;/p&gt; 
&lt;b&gt;Delimited continuations&lt;/b&gt; 
&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt;&amp;rsquo;s recent &lt;a href=&quot;http://caml.inria.fr/pub/ml-archives/caml-list/2010/08/3567e58838e79cacc3441da7508d46fe.en.html&quot;&gt;announcement&lt;/a&gt; of a native-code version of his &lt;code&gt;Delimcc&lt;/code&gt; library for delimited continuations in OCaml reminded me of two things:&lt;/p&gt; 
 
&lt;ol&gt; 
&lt;li&gt;I should find out what delimited continuations are.&lt;/li&gt; 
 
&lt;li&gt;They sound useful for implementing fibers.&lt;/li&gt; 
&lt;/ol&gt; 
 
&lt;p&gt;The paper describing the library, &lt;a href=&quot;http://okmij.org/ftp/continuations/caml-shift.pdf&quot;&gt;Delimited Control in OCaml, Abstractly and Concretely&lt;/a&gt;, has a pretty good overview of delimited continuations, and section 2 of &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.9352&quot;&gt;A Monadic Framework for Delimited Continuations&lt;/a&gt; is helpful too.&lt;/p&gt; 
 
&lt;p&gt;The core API is small:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcont&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take_subcont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_subcont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;I find it easiest to think about these functions as operations on the stack. A prompt is an identifier used to mark a point on the stack (the stack can be marked more than once with the same prompt). The function &lt;code&gt;new_prompt&lt;/code&gt; makes a new prompt which is not equal to any other prompt.&lt;/p&gt; 
 
&lt;p&gt;The call &lt;code&gt;push_prompt p f&lt;/code&gt; marks the stack with &lt;code&gt;p&lt;/code&gt; then runs &lt;code&gt;f&lt;/code&gt;, so the stack, growing to the right, looks like&lt;/p&gt; 
&lt;pre&gt; 
  ABCDpEFGH
&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;ABCD&lt;/code&gt; are stack frames in the continuation of the call to &lt;code&gt;push_prompt&lt;/code&gt;, and &lt;code&gt;EFGH&lt;/code&gt; are frames created while running &lt;code&gt;f&lt;/code&gt;. If &lt;code&gt;f&lt;/code&gt; returns normally (that is, without calling &lt;code&gt;take_subcont&lt;/code&gt;) then its return value is returned by &lt;code&gt;push_prompt&lt;/code&gt;, and we are back to the original stack &lt;code&gt;ABCD&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;If &lt;code&gt;take_subcont p g&lt;/code&gt; is called while running &lt;code&gt;f&lt;/code&gt;, the stack fragment &lt;code&gt;EFGH&lt;/code&gt; is packaged up as an &lt;code&gt;('a,'b) subcont&lt;/code&gt; and passed to &lt;code&gt;g&lt;/code&gt;. You can think of an &lt;code&gt;('a,'b) subcont&lt;/code&gt; as a function of type &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;, where &lt;code&gt;'a&lt;/code&gt; is the return type of the call to &lt;code&gt;take_subcont&lt;/code&gt; and &lt;code&gt;'b&lt;/code&gt; is the return type of the call to &lt;code&gt;push_prompt&lt;/code&gt;. &lt;code&gt;Take_subcont&lt;/code&gt; removes the fragment &lt;code&gt;pEFGH&lt;/code&gt; from the stack, and there are some new frames &lt;code&gt;IJKL&lt;/code&gt; from running &lt;code&gt;g&lt;/code&gt;, so we have&lt;/p&gt; 
&lt;pre&gt; 
  ABCDIJKL
&lt;/pre&gt; 
&lt;p&gt;Now &lt;code&gt;g&lt;/code&gt; can make use of the passed-in &lt;code&gt;subcont&lt;/code&gt; using &lt;code&gt;push_subcont&lt;/code&gt;. (Thinking of a &lt;code&gt;subcont&lt;/code&gt; as a function, &lt;code&gt;push_subcont&lt;/code&gt; is just a weird function application operator, which takes the argument as a thunk). Then the stack becomes&lt;/p&gt; 
&lt;pre&gt; 
  ABCDIJKLEFGH
&lt;/pre&gt; 
&lt;p&gt;Of course &lt;code&gt;g&lt;/code&gt; can call the &lt;code&gt;subcont&lt;/code&gt; as many times as you like.&lt;/p&gt; 
 
&lt;p&gt;A common pattern is to re-mark the stack with &lt;code&gt;push_prompt&lt;/code&gt; before calling &lt;code&gt;push_subcont&lt;/code&gt; (so &lt;code&gt;take_subcont&lt;/code&gt; may be called again). There is an optimized version of this combination called &lt;code&gt;push_delim_subcont&lt;/code&gt;, which produces the stack&lt;/p&gt; 
&lt;pre&gt; 
  ABCDIJKLpEFGH
&lt;/pre&gt; 
&lt;p&gt;The idea that a &lt;code&gt;subcont&lt;/code&gt; is a kind of function is realized by &lt;code&gt;shift0&lt;/code&gt;, which is like &lt;code&gt;take_subcont&lt;/code&gt; except that instead of passing a &lt;code&gt;subcont&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt; it passes an ordinary function. The passed function just wraps a call to &lt;code&gt;push_delim_subcont&lt;/code&gt;. (It is &lt;code&gt;push_delim_subcont&lt;/code&gt; rather than &lt;code&gt;push_subcont&lt;/code&gt; for historical reasons I think&amp;mdash;see the Monadic Framework paper for a comparison of various delimited continuation primitives.)&lt;/p&gt; 
&lt;b&gt;Implementing fibers&lt;/b&gt; 
&lt;p&gt;To implement fibers, we want &lt;code&gt;start f&lt;/code&gt; to mark the stack, then run &lt;code&gt;f&lt;/code&gt;; and &lt;code&gt;await t&lt;/code&gt; to unwind the stack back to the mark, wait for &lt;code&gt;t&lt;/code&gt; to complete, then restore the stack. Here is &lt;code&gt;start&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  
    &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeup_exn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We make a sleeping Lwt thread, and store a new prompt in a global (this is OK because we won&amp;rsquo;t yield control to another Lwt thread before using it; of course this is not safe with OCaml threads). Then we mark the stack with &lt;code&gt;push_prompt&lt;/code&gt; and run the fiber. (The &lt;code&gt;let r = ... match r with ...&lt;/code&gt; is to avoid calling &lt;code&gt;Lwt.wakeup{,_exn}&lt;/code&gt; in the scope of the &lt;code&gt;try&lt;/code&gt;; we use &lt;code&gt;Lwt.state&lt;/code&gt; as a handy type to store either a result or an exception.) If the fiber completes without calling &lt;code&gt;await&lt;/code&gt; then all we do is wake up the Lwt thread with the returned value or exception.&lt;/p&gt; 
 
&lt;p&gt;Here is &lt;code&gt;await&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;await called outside start&amp;quot;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
              &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;try_bind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We first check to be sure that we are in the scope of &lt;code&gt;start&lt;/code&gt;, and that &lt;code&gt;t&lt;/code&gt; isn&amp;rsquo;t already completed (in which case we just return its result). If we actually need to wait for &lt;code&gt;t&lt;/code&gt;, we call &lt;code&gt;shift0&lt;/code&gt;, which capture the stack fragment back to the &lt;code&gt;push_prompt&lt;/code&gt; call in &lt;code&gt;start&lt;/code&gt; (this continuation includes the subsequent &lt;code&gt;match Lwt.poll t&lt;/code&gt; and everything after the call to &lt;code&gt;await&lt;/code&gt;), then &lt;code&gt;try_bind&lt;/code&gt; so we can restore the stack fragment when &lt;code&gt;t&lt;/code&gt; completes (whether by success or failure). When &lt;code&gt;t&lt;/code&gt; completes, the &lt;code&gt;ready&lt;/code&gt; function restores the global &lt;code&gt;active_prompt&lt;/code&gt;, in case the fiber calls &lt;code&gt;await&lt;/code&gt; again, then restores the stack by calling &lt;code&gt;k&lt;/code&gt; (recall that this also re-marks the stack with &lt;code&gt;p&lt;/code&gt;, which is needed if the fiber calls &lt;code&gt;await&lt;/code&gt; again).&lt;/p&gt; 
 
&lt;p&gt;It&amp;rsquo;s pretty difficult to follow what&amp;rsquo;s going on here, so let&amp;rsquo;s try it with stacks. After calling &lt;code&gt;start&lt;/code&gt; we have&lt;/p&gt; 
&lt;pre&gt; 
  ABCDpEFGH
&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;ABCD&lt;/code&gt; is the continuation of &lt;code&gt;push_prompt&lt;/code&gt; in &lt;code&gt;start&lt;/code&gt; (just the return of &lt;code&gt;t&lt;/code&gt;) and &lt;code&gt;EFGH&lt;/code&gt; are frames created by the thunk passed to &lt;code&gt;start&lt;/code&gt;. Now, a call to &lt;code&gt;await&lt;/code&gt; (on an uncompleted thread) calls &lt;code&gt;shift0&lt;/code&gt;, which packs up &lt;code&gt;EFGH&lt;/code&gt; as &lt;code&gt;k&lt;/code&gt; and unwinds the stack to &lt;code&gt;p&lt;/code&gt;. The function passed to &lt;code&gt;shift0&lt;/code&gt; stores &lt;code&gt;k&lt;/code&gt; in &lt;code&gt;ready&lt;/code&gt; but doesn&amp;rsquo;t call it, and control returns to &lt;code&gt;start&lt;/code&gt; (since the stack has been unwound).&lt;/p&gt; 
 
&lt;p&gt;The program continues normally until &lt;code&gt;t&lt;/code&gt; completes. Now control is in &lt;code&gt;Lwt.run_waiters&lt;/code&gt; running threads that were waiting on &lt;code&gt;t&lt;/code&gt;; one of them is our &lt;code&gt;ready&lt;/code&gt; function. When it is called, the stack is re-marked and &lt;code&gt;EFGH&lt;/code&gt; is restored, so we have&lt;/p&gt; 
&lt;pre&gt; 
  QRSTpEFGH
&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;QRST&lt;/code&gt; is wherever we happen to be in the main program, ending in &lt;code&gt;Lwt.run_waiters&lt;/code&gt;. Now, &lt;code&gt;EFGH&lt;/code&gt; ends with the second call to &lt;code&gt;match Lwt.poll&lt;/code&gt; in &lt;code&gt;await&lt;/code&gt;, which returns the value of &lt;code&gt;t&lt;/code&gt; and continues the thunk passed to &lt;code&gt;start&lt;/code&gt;. The stack is now marked with &lt;code&gt;p&lt;/code&gt; inside &lt;code&gt;Lwt.run_waiters&lt;/code&gt;, so when &lt;code&gt;await&lt;/code&gt; is called again control returns there.&lt;/p&gt; 
&lt;b&gt;Events vs. threads&lt;/b&gt; 
&lt;p&gt;We have seen that we can use fibers to write Lwt threads in direct style. Should we abandon Lwt&amp;rsquo;s monadic style entirely, and use Lwt only for its event handling?&lt;/p&gt; 
 
&lt;p&gt;First, how does each style perform? Every time a fiber blocks and resumes, we have to copy, unwind, and restore its entire stack. With Lwt threads, the &amp;ldquo;stack&amp;rdquo; is a bunch of linked closures in the heap, so we don&amp;rsquo;t need to do anything to block or resume. On the other hand, building and garbage-collecting the closures is more expensive than pushing and popping the stack. We can imagine that which style performs better depends on the thread: if it blocks infrequently enough, the amortized cost of copying and restoring the stack might be lower than the cost of building and garbage-collecting the closures. (We can also imagine that a different implementation of delimited continuations might change this tradeoff.)&lt;/p&gt; 
 
&lt;p&gt;Second, how does the code look? The paper &lt;a href=&quot;http://www.stanford.edu/class/cs240/readings/usenix2002-fibers.pdf&quot;&gt;Cooperative Task Management without Manual Stack Management&lt;/a&gt; considers this question in the context of the &amp;ldquo;events vs. threads&amp;rdquo; debate. Many of its points lose their force when translated to OCaml and Lwt&amp;mdash;closures, the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator, and Lwt&amp;rsquo;s syntax extension go a long way toward making Lwt code look like direct style&amp;mdash;but some are still germane. In favor of fibers is that existing direct-style code need not be rewritten to work with Lwt (what motivated us in the first place). In favor of monadic style is that the type of a function reflects the possibility that it might block, yield control to another thread, and disturb state invariants.&lt;/p&gt; 
&lt;b&gt;Direct-style FRP&lt;/b&gt; 
&lt;p&gt;We could apply this idea, of replacing monadic style with direct style using delimited continuations, to other monads&amp;mdash;in particular to the &lt;a href=&quot;http://github.com/jaked/froc&quot;&gt;&lt;code&gt;froc&lt;/code&gt;&lt;/a&gt; library for functional reactive programming. (The Scala.React FRP library also uses delimited continuations to implement direct style; see &lt;a href=&quot;http://lamp.epfl.ch/~imaier/pub/DeprecatingObserversTR2010.pdf&quot;&gt;Deprecating the Observer Pattern&lt;/a&gt; for details.)&lt;/p&gt; 
 
&lt;p&gt;Here&amp;rsquo;s the API:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Not surprisingly, it&amp;rsquo;s just the same as for Lwt, but with a different monad and different names (I don&amp;rsquo;t know if &lt;code&gt;direct&lt;/code&gt; is quite right but it is better than &lt;code&gt;start&lt;/code&gt;). There is already a function &lt;code&gt;Froc.sample&lt;/code&gt; with the same type as &lt;code&gt;read&lt;/code&gt;, but it has a different meaning: &lt;code&gt;sample&lt;/code&gt; takes a snapshot of a behavior but creates no dependency on it.&lt;/p&gt; 
 
&lt;p&gt;The implementation is very similar as well:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc_ddg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_changeable&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  
    &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc_ddg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc_ddg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Froc_ddg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Froc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is essentially the same code as &lt;code&gt;start&lt;/code&gt;, modulo the change of monad. However, some of the functions we need aren&amp;rsquo;t exported from &lt;code&gt;Froc&lt;/code&gt;, so we need to use the underlying &lt;code&gt;Froc_ddg&lt;/code&gt; module and magic the result at the end. &lt;code&gt;Froc_ddg.make_changeable&lt;/code&gt; is the equivalent of &lt;code&gt;Lwt.wait&lt;/code&gt;: it returns an &amp;ldquo;uninitialized&amp;rdquo; monadic value along with a writer for that value. We use &lt;code&gt;Froc_ddg.result&lt;/code&gt; instead of &lt;code&gt;Lwt.state&lt;/code&gt; to store a value or exception, and &lt;code&gt;Froc_ddg.write_result&lt;/code&gt; instead of the pattern match and &lt;code&gt;Lwt.wakeup{,_exn}&lt;/code&gt;.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;read called outside direct&amp;quot;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  
    &lt;span class=&quot;nn&quot;&gt;Delimcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Froc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify_result_b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;active_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;Froc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;And this is essentially the same code as &lt;code&gt;await&lt;/code&gt;. A &lt;code&gt;Froc.behavior&lt;/code&gt; always has a value, so we don&amp;rsquo;t poll it as we did with &lt;code&gt;Lwt.t&lt;/code&gt;, but go straight to &lt;code&gt;shift0&lt;/code&gt;. We have &lt;code&gt;Froc.try_bind&lt;/code&gt; but it&amp;rsquo;s a little more compact to use use &lt;code&gt;notify_result_b&lt;/code&gt;, which passes a &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;Monadic reflection&lt;/b&gt; 
&lt;p&gt;The similarity between these implementations suggests that we could use the same code to get a direct style version of any monad; we only need a way to create an uninitialized monadic value, then set it. The call to &lt;code&gt;Lwt.poll&lt;/code&gt; in &lt;code&gt;await&lt;/code&gt; is an optimization which we would have to forgo. (In both these examples we have a monad with failure, and &lt;code&gt;try_bind&lt;/code&gt;, but we could do without it.)&lt;/p&gt; 
 
&lt;p&gt;A little googling turns up Andrzej Filinski&amp;rsquo;s paper &lt;a href=&quot;http://www.diku.dk/hjemmesider/ansatte/andrzej/papers/RM-abstract.html&quot;&gt;Representing Monads&lt;/a&gt;, which reaches the same conclusion, with a lot more rigor. In that work &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;direct&lt;/code&gt; are called &lt;code&gt;reify&lt;/code&gt;, and &lt;code&gt;await&lt;/code&gt;/&lt;code&gt;read&lt;/code&gt; are called &lt;code&gt;reflect&lt;/code&gt;. &lt;code&gt;Reflect&lt;/code&gt; is close to the implementations above, but in &lt;code&gt;reify&lt;/code&gt; the paper marks the stack inside a function passed to &lt;code&gt;bind&lt;/code&gt; rather than creating an uninitialized monadic value and later setting it.&lt;/p&gt; 
 
&lt;p&gt;This makes sense&amp;mdash;inside &lt;code&gt;bind&lt;/code&gt; an uninitialized monadic value is created, then set from the result of the function passed to &lt;code&gt;bind&lt;/code&gt;. So we are partially duplicating &lt;code&gt;bind&lt;/code&gt; in the code above. If we mark the stack in the right place we should be able to use &lt;code&gt;bind&lt;/code&gt; directly. It is hard to see how to make the details work out, however, since &lt;code&gt;Lwt.bind&lt;/code&gt; and &lt;code&gt;Froc.bind&lt;/code&gt; each have some cases where uninitialized values are not created.&lt;/p&gt; 
 
&lt;p&gt;(You can find the complete code for Lwt fibers &lt;a href=&quot;http://github.com/jaked/lwt-equeue/tree/master/src/lwt-fiber&quot;&gt;here&lt;/a&gt; and direct-style &lt;code&gt;froc&lt;/code&gt; &lt;a href=&quot;http://github.com/jaked/froc/tree/master/src/froc-direct&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt; 
 
&lt;p&gt;(revised 10/22)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/08/mixing-monadic-and-direct-style-code.html</id><title type="text">Mixing monadic and direct-style code with delimited continuations</title><updated>2010-08-21T00:50:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-10-custom-lexers.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;As a final modification to our running JSON quotation example, I want to repair a problem noted in the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-8-implementing.html&quot;&gt;first post&lt;/a&gt;&amp;mdash;that the default lexer does not match the &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot;&gt;JSON spec&lt;/a&gt;&amp;mdash;and in doing so demonstrate the use of custom lexers with Camlp4 grammars. We&amp;rsquo;ll parse UTF8-encoded Javascript using the &lt;a href=&quot;http://www.cduce.org/download.html#side&quot;&gt;ulex&lt;/a&gt; library.&lt;/p&gt; 
 
&lt;p&gt;To use a custom lexer, we need to pass a module matching the &lt;code&gt;Lexer&lt;/code&gt; signature (in &lt;code&gt;camlp4/Camlp4/Sig.ml&lt;/code&gt;) to &lt;code&gt;Camlp4.PreCast.MakeGram&lt;/code&gt;. (Recall that we get back an empty grammar which we then extend with parser entries. ) Let&amp;rsquo;s look at the signature and its subsignatures, and our implementation of each:&lt;/p&gt; 
&lt;b&gt;Error&lt;/b&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;First we have a module for packaging up an exception so it can be handled generically (in particular it may be registered with &lt;code&gt;Camlp4.ErrorHandler&lt;/code&gt; for common printing and handling). We have simple exception needs so we give a simple implementation:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp_print_string&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;b&gt;Token&lt;/b&gt; 
&lt;p&gt;Next we have a module defining the tokens our lexer supports:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* see below *)&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The type &lt;code&gt;t&lt;/code&gt; represents a token. This can be anything we like (in particular it does not need to be a variant with arms &lt;code&gt;KEYWORD&lt;/code&gt;, &lt;code&gt;EOI&lt;/code&gt;, etc. although that is the conventional representation), so long as we provide the specified functions to convert it to a string, print it to a formatter, determine if it matches a string keyword (recall that we can use literal strings in grammars; this function is called to see if the next token matches a literal string), and extract a string representation of it (called when you bind a variable to a token in a grammar&amp;mdash;e.g. &lt;code&gt;n = NUMBER&lt;/code&gt;). Here&amp;rsquo;s our implementation:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NUMBER&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ANTIQUOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EOI&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;KEYWORD %S&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NUMBER %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;STRING &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ANTIQUOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ANTIQUOT %s: %S&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EOI&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;EOI&amp;quot;&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp_print_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_keyword&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwd'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwd'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;invalid_arg&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Cannot extract a string from this token: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; 
                 &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PreCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* see below *)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Not much to it. &lt;code&gt;KEYWORD&lt;/code&gt; covers &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, and punctuation; &lt;code&gt;NUMBER&lt;/code&gt; and &lt;code&gt;STRING&lt;/code&gt; are JSON numbers and strings; as we saw &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-9-implementing.html&quot;&gt;last time&lt;/a&gt; antiquotations are returned in &lt;code&gt;ANTIQUOT&lt;/code&gt;; finally we signal the end of the input with &lt;code&gt;EOI&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;Filter&lt;/b&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_filter&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword_added&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword_removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;Filter&lt;/code&gt; module provides filters over token streams. We don&amp;rsquo;t have a need for it in the JSON example, but it&amp;rsquo;s interesting to see how it is implemented in the default lexer and used in the OCaml parser. The argument to &lt;code&gt;mk&lt;/code&gt; is a function indicating whether a string should be treated as a keyword (i.e. the literal string is used in the grammar), and the default lexer uses it to filter the token stream to convert identifiers into keywords. If we wanted the JSON parser to be extensible, we would need to take this into account; instead we&amp;rsquo;ll just stub out the functions:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define_filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword_added&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword_removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;b&gt;Lexer&lt;/b&gt; 
&lt;p&gt;Finally we have &lt;code&gt;Lexer&lt;/code&gt;, which packages up the other modules and provides the actual lexing function. The lexing function takes an initial location and a character stream, and returns a stream of token and location pairs:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loc&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;I don&amp;rsquo;t want to go through the whole lexing function; it is not very interesting. But here is the main loop:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EOI&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)?&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?([&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]+))?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nc&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8_lexeme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{}[]:,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8_lexeme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&amp;quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;set_start_loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_stored_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;set_start_loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ulexing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Latin1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;antiquot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexbuf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ulexing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Utf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;aq&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;illegal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;lexer&lt;/code&gt; syntax is an extension provided by &lt;code&gt;ulex&lt;/code&gt;; the effect is similar to &lt;code&gt;ocamllex&lt;/code&gt;. The lexer needs to keep track of the current location and return it along with the token (&lt;code&gt;next_line&lt;/code&gt; advances the current location; &lt;code&gt;set_start_loc&lt;/code&gt; is for when a token spans multiple &lt;code&gt;ulex&lt;/code&gt; lexemes). The lexer also needs to parse antiquotations, taking into account nested quotations within them.&lt;/p&gt; 
 
&lt;p&gt;(I think it is not actually necessary to lex JSON as UTF8. The only place that non-ASCII characters can appear is in a string. To lex a string we just accumulate characters until we see a double-quote, which cannot appear as part of a multibyte character. So it would work just as well to accumulate bytes. I am no Unicode expert though. This example was extracted from the Javascript parser in &lt;a href=&quot;http://github.com/jaked/ocamljs/tree/master/src/jslib/&quot;&gt;jslib&lt;/a&gt;, where I think UTF8 must be taken into account.)&lt;/p&gt; 
&lt;b&gt;Hooking up the lexer&lt;/b&gt; 
&lt;p&gt;There are a handful of changes we need to make to call the custom lexer:&lt;/p&gt; 
 
&lt;p&gt;In &lt;code&gt;Jq_parser&lt;/code&gt; we make the grammar with the custom lexer module, and open it so the token constructors are available; we also replace the &lt;code&gt;INT&lt;/code&gt; and &lt;code&gt;FLOAT&lt;/code&gt; cases with just &lt;code&gt;NUMBER&lt;/code&gt;; for the other cases we used the same token constructor names as the default lexer so we don&amp;rsquo;t need to change anything.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_lexer&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PreCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MakeGram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In &lt;code&gt;Jq_quotations&lt;/code&gt; we have &lt;code&gt;Camlp4.PreCast&lt;/code&gt; open (so references to &lt;code&gt;Ast&lt;/code&gt; in the &lt;code&gt;&amp;lt;:expr&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; quotations resolve), so &lt;code&gt;EOI&lt;/code&gt; is &lt;code&gt;Camlp4.PreCast.EOI&lt;/code&gt;; we want &lt;code&gt;Jq_lexer.EOI&lt;/code&gt;, so we need to write it explicitly:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;n&quot;&gt;json_eoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Jq_lexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EOI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(Recall that the backtick lets us match a constructor directly; for some reason we can&amp;rsquo;t module-qualify &lt;code&gt;EOI&lt;/code&gt; without it.)&lt;/p&gt; 
 
&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt; 
 
&lt;p&gt;I want to finish off this series next time by covering grammar extension, with an example OCaml syntax extension.&lt;/p&gt; 
 
&lt;p&gt;(You can find the complete code for this example &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-custom-lexers&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-10-custom-lexers.html</id><title type="text">Reading Camlp4, part 10: custom lexers</title><updated>2010-08-13T19:16:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-9-implementing.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In this post I want to complicate the JSON quotation library from the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-8-implementing.html&quot;&gt;previous post&lt;/a&gt; by adding antiquotations.&lt;/p&gt; 
&lt;b&gt;AST with antiquotations&lt;/b&gt; 
&lt;p&gt;In order to support antiquotations we will need to make some changes to the AST. Here is the new AST type:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* base types same as before *)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_colon&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_comma&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_nil&lt;/span&gt; 
  
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Let&amp;rsquo;s first consider &lt;code&gt;Jq_Ant&lt;/code&gt;. Antiquotations &lt;code&gt;$tag:body$&lt;/code&gt; are returned from the lexer as an &lt;code&gt;ANTIQUOT&lt;/code&gt; token containing the (possibly empty) tag and the entire body (including nested quotations/antiquotations) as a string. In the parser, we deal only with the JSON AST, so we can&amp;rsquo;t really do anything with an antiquotation but return it to the caller (wrapped in a &lt;code&gt;Jq_Ant&lt;/code&gt;).&lt;/p&gt; 
 
&lt;p&gt;The lifting functions generated by &lt;code&gt;Camlp4MetaGenerator&lt;/code&gt; treat &lt;code&gt;Jq_Ant&lt;/code&gt; (and any other constructor ending in &lt;code&gt;Ant&lt;/code&gt;) specially: instead of&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;they have&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExAnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Instead of lifting the constructor, they translate it directly to &lt;code&gt;ExAnt&lt;/code&gt; (or &lt;code&gt;PaAnt&lt;/code&gt;, depending on the context). We don&amp;rsquo;t otherwise have locations in our AST, but &lt;code&gt;Jq_Ant&lt;/code&gt; must take a &lt;code&gt;Loc.t&lt;/code&gt; argument because &lt;code&gt;ExAnt&lt;/code&gt; does. Later, when we walk the OCaml AST expanding antiquotations, it will be convenient to have them as &lt;code&gt;ExAnt&lt;/code&gt; nodes rather than lifted &lt;code&gt;Jq_Ant&lt;/code&gt; nodes.&lt;/p&gt; 
 
&lt;p&gt;In addition to &lt;code&gt;Jq_Ant&lt;/code&gt;, we have new &lt;code&gt;Jq_nil&lt;/code&gt;, &lt;code&gt;Jq_comma&lt;/code&gt;, and &lt;code&gt;Jq_colon&lt;/code&gt; constructors, and we have replaced the lists in &lt;code&gt;Jq_array&lt;/code&gt; and &lt;code&gt;Jq_object&lt;/code&gt; with just &lt;code&gt;t&lt;/code&gt;. The idea here is that in an antiquotation in an array, e.g.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;we would like to be able to substitute any number of elements (including zero) into the array in place of &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;Jq_array&lt;/code&gt; took a list, we could substitute exactly one element only. So instead we build a tree out of &lt;code&gt;Jq_comma&lt;/code&gt; and &lt;code&gt;Jq_nil&lt;/code&gt; constructors; at any point in the tree we can substitute zero (&lt;code&gt;Jq_nil&lt;/code&gt;), one (any other &lt;code&gt;t&lt;/code&gt; constructor), or more than one (a &lt;code&gt;Jq_comma&lt;/code&gt; subtree) elements. We recover a list by taking the fringe of the final tree. (In the &lt;code&gt;Jq_ast&lt;/code&gt; module there are functions &lt;code&gt;t_of_list&lt;/code&gt; and &lt;code&gt;list_of_t&lt;/code&gt; which convert between these representations.) For objects, we use &lt;code&gt;Jq_colon&lt;/code&gt; to associate a name with a value, then build a tree of name/value pairs the same way.&lt;/p&gt; 
 
&lt;p&gt;While this AST meets the need, it is now possible to have ill-formed ASTs, e.g. a bare &lt;code&gt;Jq_nil&lt;/code&gt;, or a &lt;code&gt;Jq_object&lt;/code&gt; where the elements are not &lt;code&gt;Jq_colon&lt;/code&gt; pairs, or where the first argument of &lt;code&gt;Jq_colon&lt;/code&gt; is not a &lt;code&gt;Jq_string&lt;/code&gt;. This is annoying, but it is hard to see how to avoid it without complicating the AST and making it more difficult to use antiquotations.&lt;/p&gt; 
&lt;b&gt;Parsing antiquotations&lt;/b&gt; 
&lt;p&gt;Here is the updated parser:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* base types same as before *)&lt;/span&gt; 
  
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ANTIQUOT&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;flo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alist&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt; 
  
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_comma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_nil&lt;/span&gt; 
 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_colon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We want to support several kinds of antiquotations: For individual elements, &lt;code&gt;$x$&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;t&lt;/code&gt;), or &lt;code&gt;$bool:x$&lt;/code&gt;, &lt;code&gt;$int:x$&lt;/code&gt;, &lt;code&gt;$flo:x$&lt;/code&gt;, or &lt;code&gt;$str:x$&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is an OCaml &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;string&lt;/code&gt;); for these latter cases we need to wrap &lt;code&gt;x&lt;/code&gt; in the appropriate &lt;code&gt;t&lt;/code&gt; constructor. For lists of elements, &lt;code&gt;$list:x$&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;t list&lt;/code&gt;, and &lt;code&gt;$alist:x$&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;(string * t) list&lt;/code&gt;; for these we need to convert &lt;code&gt;x&lt;/code&gt; to the &lt;code&gt;Jq_comma&lt;/code&gt; / &lt;code&gt;Jq_nil&lt;/code&gt; representation above. But in the parser all we do is return a &lt;code&gt;Jq_Ant&lt;/code&gt; containing the tag and body of the &lt;code&gt;ANTIQUOT&lt;/code&gt; token. (We return it in a single string separated by &lt;code&gt;:&lt;/code&gt; because only one string argument is provided in &lt;code&gt;ExAnt&lt;/code&gt;.)&lt;/p&gt; 
 
&lt;p&gt;It is the parser which controls where antiquotations are allowed, by providing a case for &lt;code&gt;ANTIQUOT&lt;/code&gt; in a particular entry, and which tags are allowed in an entry. In this example we have only one entry, so we allow any supported antiquotation anywhere a JSON expression is allowed, but you can see in the OCaml parsers that the acceptable antiquotations can be context-sensitive, and the interpretation of the same antiquotation can vary according to the context (e.g. different conversions may be needed).&lt;/p&gt; 
 
&lt;p&gt;For arrays and objects, we parse &lt;code&gt;SELF&lt;/code&gt; in place of the list. The cases for &lt;code&gt;Jq_comma&lt;/code&gt; and &lt;code&gt;Jq_nil&lt;/code&gt; produce the tree representation, and the case for &lt;code&gt;Jq_colon&lt;/code&gt; allows name/value pairs. Recall that a token or keyword is preferred over the empty string, so the &lt;code&gt;Jq_nil&lt;/code&gt; case matches only when none of the others do. In particular, the quotation &lt;code&gt;&amp;lt;:json&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; parses to &lt;code&gt;Jq_nil&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;We can see that not only is the AST rather free, but so is the parser: it will parse strings which are not well-formed JSON, like &lt;code&gt;&amp;lt;:json&amp;lt; 1, 2 &amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;json:&amp;lt; &amp;quot;foo&amp;quot; : true &amp;gt;&amp;gt;&lt;/code&gt;. We lose safety, since a mistake may produce an ill-formed AST, but gain convenience, since we may want to substitute these fragments in antiquotations. As an alternative, we could have a more restrictive parser (e.g. no commas allowed at the &lt;code&gt;json&lt;/code&gt; entry), and provide different quotations for different contexts (e.g. &lt;code&gt;&amp;lt;:json_list&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt;, allowing commas) for use with antiquotations. For this small language I think it is not worth it.&lt;/p&gt; 
&lt;b&gt;Expanding antiquotations&lt;/b&gt; 
&lt;p&gt;To expand antiquotations, we take a pass over the OCaml AST we got from lifting the JSON AST; look for &lt;code&gt;ExAst&lt;/code&gt; nodes; parse them as OCaml; then apply the appropriate conversion according to the antiquotation tag. To walk the AST we extend the &lt;code&gt;Ast.map&lt;/code&gt; object (generated with the &lt;code&gt;Camlp4FoldGenerator&lt;/code&gt; filter) so we don&amp;rsquo;t need a bunch of boilerplate cases which return the AST unchanged. Here&amp;rsquo;s the code:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AntiquotSyntax&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destruct_aq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; 
    &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aq_expander&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExAnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destruct_aq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;flo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;str&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alist&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
                    &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_of_list&lt;/span&gt; 
                      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
                          &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_colon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
                        &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$)&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PaAnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destruct_aq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;nn&quot;&gt;AQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_patt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;When we find an antiquotation, we unpack the tag and contents (with &lt;code&gt;destruct_aq&lt;/code&gt;), parse it using the host syntax (given by &lt;code&gt;Syntax.AntiquotSyntax&lt;/code&gt; from &lt;code&gt;Camlp4.PreCast&lt;/code&gt;, which might be either the original or revised syntax depending which modules are loaded), then insert conversions depending on the tag. Conversions don&amp;rsquo;t make sense in a pattern context, so for patterns we just return the parsed antiquotation.&lt;/p&gt; 
 
&lt;p&gt;Finally we hook into the quotation machinery, mostly as before:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_quot_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Camlp4_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;antiquotations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Camlp4_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;antiquotations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_eoi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Camlp4_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;antiquotations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; 
 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_quot_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MetaExpr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;aq_expander&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_ast&lt;/span&gt; 
 
&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
 
&lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;DynAst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Before parsing a quotation we set a flag, which is checked by the lexer, to allow antiquotations; the flag is initially false, so antiquotations appearing outside a quotation won&amp;rsquo;t be parsed. After lifting the JSON AST to an OCaml AST, we run the result through the antiquotation expander.&lt;/p&gt; 
 
&lt;p&gt;For concreteness, let&amp;rsquo;s follow the life of a quotation as it is parsed and expanded. Say we begin with&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After parsing:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_comma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;int:x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After lifting:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_comma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExAnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;int:x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)$))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After expanding:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_comma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;b&gt;Nested quotations&lt;/b&gt; 
&lt;p&gt;Let&amp;rsquo;s see that again with a nested quotation:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After parsing:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;Jq_Ant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;:json&amp;lt; 1 &amp;gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After lifting:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;ExAnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;:json&amp;lt; 1 &amp;gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After expanding (during which we parse and expand &lt;code&gt;&amp;quot;&amp;lt;:json&amp;lt; 1 &amp;gt;&amp;gt;&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;lt;:expr&amp;lt; Jq_number 1. &amp;gt;&amp;gt;&lt;/code&gt;):&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;A wise man &lt;a href=&quot;http://www.cs.yale.edu/quotes.html&quot;&gt;once said&lt;/a&gt; &amp;ldquo;The string is a stark data structure and everywhere it is passed there is much duplication of process.&amp;rdquo; So it is with Camlp4 quotations: each nested quotation is re-parsed; each quotation implementation must deal with parsing host-language antiquotation strings; and the lexer for each implementation must lex antiquotations and nested quotations. (Since we used the default lexer we didn&amp;rsquo;t have to worry about this, but see the next post.) It would be nice to have more support from Camlp4. On the other hand, while what happens at runtime seems baroque, the code above is relatively straightforward, and since we work with strings we can use any parser technology we like.&lt;/p&gt; 
 
&lt;p&gt;It has not been much (marginal) trouble to handle quotations in pattern contexts, but they are not tremendously useful. The problem is that we normally don&amp;rsquo;t care about the order of the fields in a JSON object, or if there are extra fields; we would like to write&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* do something with foo *)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;and have it work wherever the &lt;code&gt;foo&lt;/code&gt; field is in the object. This is a more complicated job than just lifting the JSON AST. For an alternative approach to processing JSON using a list-comprehension syntax, see &lt;a href=&quot;http://github.com/jaked/cufp-metaprogramming-tutorial/tree/master/ocaml/json_compr/&quot;&gt;json_compr&lt;/a&gt;, an example I wrote for the upcoming &lt;a href=&quot;http://cufp.org/conference/sessions/2010/camlp4-and-template-haskell&quot;&gt;metaprogramming tutorial at CUFP&lt;/a&gt;. For a fancier JSON DSL (including the ability to induct a type description from a bunch of examples!), see Julien Verlauget&amp;rsquo;s &lt;a href=&quot;http://github.com/pika/jsonpat&quot;&gt;jsonpat&lt;/a&gt;. And for a framework to extend OCaml&amp;rsquo;s pattern-matching syntax, see Jeremy Yallop&amp;rsquo;s &lt;a href=&quot;http://code.google.com/p/ocaml-patterns/&quot;&gt;ocaml-patterns&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;Next time we will see how to use a custom lexer with a Camlp4 grammar.&lt;/p&gt; 
 
&lt;p&gt;(You can find the complete code for this example &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-implementing-antiquotations&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-9-implementing.html</id><title type="text">Reading Camlp4, part 9: implementing antiquotations</title><updated>2010-08-06T00:55:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-8-implementing.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;The Camlp4 system of quotations and antiquotations is an awesome tool for &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-2-quotations_04.html&quot;&gt;producing&lt;/a&gt; and &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-4-consuming-ocaml.html&quot;&gt;consuming&lt;/a&gt; OCaml ASTs. In this post (and the following one) we will see how to provide this facility for other syntaxes and ASTs. Here we consider just quotations; we&amp;rsquo;ll add antiquotations in the following post.&lt;/p&gt; 
&lt;b&gt;An AST for JSON&lt;/b&gt; 
&lt;p&gt;Our running example will be a quotation expander for &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot;&gt;JSON&lt;/a&gt;. Let&amp;rsquo;s begin with the JSON AST, in a module &lt;code&gt;Jq_ast&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_bool&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the same (modulo order and names) as &lt;code&gt;json_type&lt;/code&gt; from the &lt;a href=&quot;http://martin.jambon.free.fr/json-wheel.html&quot;&gt;json-wheel&lt;/a&gt; library, but for various reasons we will not be able to use &lt;code&gt;json_type&lt;/code&gt;. The &lt;code&gt;Jq_&lt;/code&gt; prefix is for &lt;code&gt;json_quot&lt;/code&gt;, the name of this little library.&lt;/p&gt; 
&lt;b&gt;Parsing JSON&lt;/b&gt; 
&lt;p&gt;We&amp;rsquo;ll use a Camlp4 &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html&quot;&gt;grammar&lt;/a&gt; to parse JSON trees. It is not necessary to use Camlp4&amp;rsquo;s parsing facilities in order to implement quotations&amp;mdash;ultimately we will need to provide just a function from strings to ASTs, so we could use &lt;code&gt;ocamlyacc&lt;/code&gt; or what-have-you instead&amp;mdash;but it is convenient. Here is the parser:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PreCast&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_ast&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakeGram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; 
  
  &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
  
  &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_bool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_bool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LIST0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SEP&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;nc&quot;&gt;LIST0&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
              &lt;span class=&quot;nc&quot;&gt;SEP&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We use the default Camlp4 lexer (with &lt;code&gt;MakeGram(Lexer)&lt;/code&gt;); as we have seen, keywords mentioned in a Camlp4 grammar are added to the lexer, so we don&amp;rsquo;t need to do anything special to lex &lt;code&gt;null&lt;/code&gt; etc. However, while JSON/Javascript has a single number type, the default lexer returns different tokens for &lt;code&gt;INT&lt;/code&gt; and &lt;code&gt;FLOAT&lt;/code&gt; numbers, so we convert each to &lt;code&gt;Jq_number&lt;/code&gt;. In fact, these tokens (along with &lt;code&gt;STRING&lt;/code&gt;) represent OCaml &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#integer-literal&quot;&gt;integer&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#float-literal&quot;&gt;float&lt;/a&gt; and &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#string-literal&quot;&gt;string&lt;/a&gt; literals, which do not exactly match the corresponding JSON ones, but they are fairly close so let&amp;rsquo;s not worry about it for now; we&amp;rsquo;ll revisit the lexer in a later post.&lt;/p&gt; 
 
&lt;p&gt;The parser itself is pleasingly compact; we can make good use of the &lt;code&gt;LIST0&lt;/code&gt; special symbol and an anonymous entry for parsing objects. Unfortunately things will get a little more complicated when we come to antiquotations.&lt;/p&gt; 
&lt;b&gt;Lifting the AST&lt;/b&gt; 
&lt;p&gt;Next we need to &amp;ldquo;lift&amp;rdquo; values of the JSON AST to values of the OCaml AST. What does &amp;ldquo;lift&amp;rdquo; mean, and why do we need to do it? The goal is to convert quotations in OCaml code, such as&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;into the equivalent&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_string&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_bool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is to happen as part of Camlp4 preprocessing, which produces an OCaml AST, so what we produce in place of the &lt;code&gt;&amp;lt;:json&amp;lt; ... &amp;gt;&amp;gt;&lt;/code&gt; expression must be a fragment of OCaml AST. We have a parser which takes a valid JSON string to the JSON AST; what remains is to take a JSON AST value to the corresponding OCaml AST. So we need a function with cases something like:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;It is not such a big deal to hand-write this lifting function for a small AST like JSON, but it is arduous and error-prone for full-size ASTs. Fortunately Camlp4 has a filter which does it for us. Let&amp;rsquo;s first look at the signature of the &lt;code&gt;Jq_ast&lt;/code&gt; module:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PreCast&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as above *)&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaExpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaPatt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The generated modules &lt;code&gt;MetaExpr&lt;/code&gt; and &lt;code&gt;MetaPatt&lt;/code&gt; provide functions to lift a JSON AST to either an OCaml &lt;code&gt;expr&lt;/code&gt; (when the quotation appears as an expression) or &lt;code&gt;patt&lt;/code&gt; (when it appears as a pattern). The &lt;code&gt;loc&lt;/code&gt; arguments are inserted into the resulting OCaml AST so that compile errors have correct locations.&lt;/p&gt; 
 
&lt;p&gt;Now the implementation of &lt;code&gt;Jq_ast&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; 
  
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* almost as above *)&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jq_ast&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PreCast&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* for Ast refs in generated code *)&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaExpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_float'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MetaGeneratorExpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaPatt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_float'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MetaGeneratorPatt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The file needs the &lt;code&gt;Camlp4MetaGenerator&lt;/code&gt; filter (the &lt;code&gt;camlp4.metagenerator&lt;/code&gt; package with &lt;code&gt;findlib&lt;/code&gt;). The main idea is that the calls to &lt;code&gt;Camlp4Filters.MetaGenerator{Expr,Patt}&lt;/code&gt; are expanded into the lifting functions. But there are a couple of fussy details:&lt;/p&gt; 
 
&lt;p&gt;First: The argument module &lt;code&gt;Jq_ast&lt;/code&gt; which we pass to the generators is used both on the left and right of the generated function; if you look at the generated code there are cases like:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jq_null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(The &lt;code&gt;&amp;lt;:expr&amp;lt; .. &amp;gt;&amp;gt;&lt;/code&gt; is already expanded in the actual generated code.) We need the AST to be available qualified by the module &lt;code&gt;Jq_ast&lt;/code&gt; both in the current file and also in code that uses the quotation. So we have a nested &lt;code&gt;Jq_ast&lt;/code&gt; module (for local uses, on the left-hand side) which we &lt;code&gt;include&lt;/code&gt; (for external uses, on the right-hand side).&lt;/p&gt; 
 
&lt;p&gt;Second: The generators scan all the types defined in the current module, then generate code from the last-appearing recursive bundle. (In this case the recursive bundle contains just &lt;code&gt;t&lt;/code&gt;, but in general there can be more than one; mutually recursive lifting functions are generated.) There are some special cases for predefined types, and in particular for &lt;code&gt;float&lt;/code&gt;; however, it seems to be wrong:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExFlo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;ExFlo&lt;/code&gt; constructor takes a string representing the float, but calls to this function are generated when you use &lt;code&gt;float&lt;/code&gt; in your type. To work around this, we define the type &lt;code&gt;float'&lt;/code&gt; (on its own rather than as part of the last-appearing recursive bundle, or else Camlp4 would generate a &lt;code&gt;meta_float'&lt;/code&gt; that calls &lt;code&gt;meta_float&lt;/code&gt;), and provide correct &lt;code&gt;meta_float'&lt;/code&gt; functions. There is a similar bug with &lt;code&gt;meta_int&lt;/code&gt;, but &lt;code&gt;meta_bool&lt;/code&gt; is correct, so our &lt;code&gt;Jq_bool&lt;/code&gt; case does not need fixing.&lt;/p&gt; 
 
&lt;p&gt;(It is interesting to contrast this approach of lifting the AST with how it is handled in Template Haskell using the &amp;ldquo;scrap your boilerplate&amp;rdquo; pattern; see Geoffrey Mainland&amp;rsquo;s paper &lt;a href=&quot;http://www.eecs.harvard.edu/~mainland/publications/mainland07quasiquoting.pdf&quot;&gt;Why It&amp;rsquo;s Nice to be Quoted&lt;/a&gt;.)&lt;/p&gt; 
&lt;b&gt;Quotations&lt;/b&gt; 
&lt;p&gt;Finally we can hook the parser and AST lifter into Camlp4&amp;rsquo;s quotation machinery, in the &lt;code&gt;Jq_quotations&lt;/code&gt; module:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PreCast&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Quotation&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_eoi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json_eoi&amp;quot;&lt;/span&gt; 
  
  &lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;json_eoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EOI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_quot_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;Jq_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_eoi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MetaExpr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_quot_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp_ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp_ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
  
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_patt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MetaPatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_quot_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  
  &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
  
  &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;DynAst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;DynAst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;DynAst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;First, we make a new grammar entry &lt;code&gt;json_eoi&lt;/code&gt; which parses a &lt;code&gt;json&lt;/code&gt; expression followed by the end-of-input token &lt;code&gt;EOI&lt;/code&gt;. Grammar entries ordinarily ignore the rest of the input after a successful parse. If we were to use the &lt;code&gt;json&lt;/code&gt; entry directly, we would silently accept quotations with trailing garbage, and in particular incorrect quotations that happen to have a correct prefix, rather than alerting the user.&lt;/p&gt; 
 
&lt;p&gt;Then we register quotation expanders for the &lt;code&gt;&amp;lt;:json&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; quotation in the &lt;code&gt;expr&lt;/code&gt;, &lt;code&gt;patt&lt;/code&gt;, and &lt;code&gt;str_item&lt;/code&gt; contexts (&lt;code&gt;str_item&lt;/code&gt; is useful because that is the context at the top level prompt), using &lt;code&gt;Syntax.Quotation.add&lt;/code&gt;. All the expanders do is call the parser, then run the result through the appropriate lifting function.&lt;/p&gt; 
 
&lt;p&gt;Finally we set &lt;code&gt;json&lt;/code&gt; as the default quotation, so we can just say &lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; for JSON quotations. This is perhaps a bit cheeky, since the user may want something else as the default quotation; whichever module is loaded last wins.&lt;/p&gt; 
 
&lt;p&gt;It is worth reflecting on how the quotation mechanism works in the OCaml parser: There is a lexer token for quotations, but no node in the OCaml AST, so everything must happen in the parser. When a quotation is lexed, its entire contents is returned as a string. (Nested quotations are matched in the lexer&amp;mdash;see &lt;code&gt;quotation&lt;/code&gt; and &lt;code&gt;antiquot&lt;/code&gt; in &lt;code&gt;camlp4/Camlpl4/Struct/Lexer.mll&lt;/code&gt;&amp;mdash;without considering the embedded syntax; this makes the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; tokens unusable in the embedded syntax.) The string is then expanded according to the table of registered expanders; expanders return a fragment of OCaml AST which is inserted into the parse tree.&lt;/p&gt; 
 
&lt;p&gt;You might have thought (as I did) that something fancy happens with quotations, e.g. Camlp4 switches to a different parser on the fly, then back to the original parser for antiquotations. But it is much simpler than that. At the same time, it is much more complicated than that, as we will see next time when we cover antiquotations (and in particular how nested antiquotations/quotations are handled).&lt;/p&gt; 
 
&lt;p&gt;(You can find the complete code &lt;a href=&quot;http://github.com/jaked/ambassadortothecomputers.blogspot.com/tree/master/_code/camlp4-implementing-quotations&quot;&gt;here&lt;/a&gt;, including a pretty-printer and integration with the top level; after building and installing you can say e.g.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jq_ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;although without antiquotations it is not very useful.)&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/08/reading-camlp4-part-8-implementing.html</id><title type="text">Reading Camlp4, part 8: implementing quotations</title><updated>2010-08-03T23:47:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/07/reading-camlp4-part-7-revised-syntax.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;As we have seen, Camlp4 contains an alternative syntax for OCaml, the &amp;ldquo;revised&amp;rdquo; syntax, which attempts to correct some infelicities of the original syntax, and to make it easier to parse and pretty-print. Most (all?) of Camlp4 itself is written in this syntax.&lt;/p&gt; 
 
&lt;p&gt;While OCaml quotations may be written in either original or revised syntax, original syntax quotations are not as well-supported; there are AST constructions which are difficult or impossible to generate from original syntax quotations. (As I understand it, part of the motivation for the revised syntax was to provide more context, in the form of extra brackets etc., so that antiquotations work more smoothly.)&lt;/p&gt; 
 
&lt;p&gt;I have always felt that the revised syntax is a pointless idiosyncrasy, and that whatever value it might bring is offset by the mental clutter of working with two syntaxes (since most code is still written in the original syntax). So I have stuck with original syntax quotations in this series, and recommended that you fall back to AST constructors when quotations don&amp;rsquo;t work out. However, the situation with original syntax quotations seems to have gotten worse in the upcoming OCaml 3.12.0 release (see bugs &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5080&quot;&gt;5080&lt;/a&gt; and &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5104&quot;&gt;5104&lt;/a&gt;).&lt;/p&gt; 
 
&lt;p&gt;These bugs affected my &lt;a href=&quot;http://github.com/jaked/orpc&quot;&gt;orpc&lt;/a&gt; and &lt;a href=&quot;http://github.com/jaked/ocamljs&quot;&gt;ocamljs&lt;/a&gt; projects, and I decided to use revised syntax quotations rather than uglying up the code with AST constructors. This turned out to be not so bad, requiring only a few changes. Fortunately, you can choose for each source file which kind to use (in ocamlbuild you can give the &lt;code&gt;pkg_camlp4.quotations.o&lt;/code&gt; or &lt;code&gt;pkg_camlp4.quotations.r&lt;/code&gt; tags per file), so I left quotations in files that were unaffected or only lightly affected in the original syntax.&lt;/p&gt; 
 
&lt;p&gt;I don&amp;rsquo;t have anything new to say about the revised syntax, but I want to point out the following resources:&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&quot;http://caml.inria.fr/pub/docs/tutorial-camlp4/tutorial005.html&quot;&gt;tutorial and rationale (old camlp4)&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/manual007.html&quot;&gt;reference (old camlp4)&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://brion.inria.fr/gallium/index.php/Revised&quot;&gt;wiki page (new camlp4)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;The final word on the revised syntax is of course the parser itself, found in &lt;code&gt;Camlp4OCamlRevisedParser.ml&lt;/code&gt;; you may find these &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-3-quotations-in.html&quot;&gt;earlier&lt;/a&gt; &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html&quot;&gt;posts&lt;/a&gt; useful in making sense of it.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/07/reading-camlp4-part-7-revised-syntax.html</id><title type="text">Reading Camlp4, part 7: revised syntax</title><updated>2010-07-27T18:01:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In this post I want to discuss Camlp4&amp;rsquo;s &lt;em&gt;stream parsers&lt;/em&gt; and &lt;em&gt;grammars&lt;/em&gt;. Since the OCaml parsers in Camlp4 (which we touched on &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-3-quotations-in.html&quot;&gt;previously&lt;/a&gt;) use them, it&amp;rsquo;s necessary to understand them in order to write syntax extensions; independently, they are a nice alternative to &lt;code&gt;ocamlyacc&lt;/code&gt; and other parser generators. Stream parsers and grammars are outlined for the old Camlp4 in the &lt;a href=&quot;http://caml.inria.fr/pub/docs/tutorial-camlp4/&quot;&gt;tutorial&lt;/a&gt; and &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/&quot;&gt;manual&lt;/a&gt;, but some of the details have changed, and there are many aspects of grammars which are given only a glancing treatment in that material.&lt;/p&gt; 
&lt;b&gt;Streams and stream parsers&lt;/b&gt; 
&lt;p&gt;Parsers generated from Camlp4 grammars are built on stream parsers, so let&amp;rsquo;s start there. It will be easier to explain grammars with this background in hand, and we will see that it is sometimes useful to drop down to stream parsers when writing grammars.&lt;/p&gt; 
 
&lt;p&gt;A &lt;em&gt;stream&lt;/em&gt; of type &lt;code&gt;'a Stream.t&lt;/code&gt; is a sequence of elements of type &lt;code&gt;'a&lt;/code&gt;. Elements of a stream are accessed sequentially; reading the first element of a stream has the side effect of advancing the stream to the next element. You can also peek ahead into a stream without advancing it. Camlp4 provides a syntax extension for working with streams, which expands to operations on the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stream.html&quot;&gt;Stream&lt;/a&gt; module of the standard library.&lt;/p&gt; 
 
&lt;p&gt;There are various ways to make a stream but we&amp;rsquo;ll focus on consuming them; for testing you can make a literal stream with the syntax &lt;code&gt;[&amp;lt; '&amp;quot;foo&amp;quot;; '&amp;quot;bar&amp;quot;; '&amp;quot;baz&amp;quot; &amp;gt;]&lt;/code&gt;&amp;mdash;note the extra single-quotes. With the &lt;code&gt;parser&lt;/code&gt; keyword we can write a function to consume a stream by pattern-matching over prefixes of the stream:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo-bar+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The syntax &lt;code&gt;'&amp;quot;foo&amp;quot;&lt;/code&gt; means match a value &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;; &lt;code&gt;'x&lt;/code&gt; means match any value, binding it to &lt;code&gt;x&lt;/code&gt;, which can be used on the right-hand side of the match as usual; and &lt;code&gt;y = p&lt;/code&gt; means call the parser &lt;code&gt;p&lt;/code&gt; on the rest of the stream, binding the result to &lt;code&gt;y&lt;/code&gt;. You probably get the rough idea, but let&amp;rsquo;s run it through Camlp4 to see exactly what&amp;rsquo;s happening:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo-bar+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We can see that &amp;ldquo;parser&amp;rdquo; is perhaps a strong word for this construct; it&amp;rsquo;s really just a nested pattern match. The generated function &lt;code&gt;peek&lt;/code&gt;s the next element in the stream, then &lt;code&gt;junk&lt;/code&gt;s it once it finds a match (advancing the stream to the next element). If there&amp;rsquo;s no match on the first token, that&amp;rsquo;s a &lt;code&gt;Stream.Failure&lt;/code&gt; (the stream is not advanced, giving us the opportunity to try another parser); but once we have matched the first token, a subsequent match failure is a &lt;code&gt;Stream.Error&lt;/code&gt; (we have committed to a branch, and advanced the stream; if the parse fails now we can&amp;rsquo;t try another parser).&lt;/p&gt; 
 
&lt;p&gt;A call to another parser as the first element of the pattern is treated specially: for this input&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;we get&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;So there is a limited means of backtracking: if &lt;code&gt;q&lt;/code&gt; fails with &lt;code&gt;Stream.Failure&lt;/code&gt; (meaning that the stream has not been advanced) we try the next arm of the parser.&lt;/p&gt; 
 
&lt;p&gt;It&amp;rsquo;s easy to see what would happen if we were to use the same literal as the first element of more than one arm: the first one gets the match. Same if we were to make a recursive call (to the same parser) as the first element: we&amp;rsquo;d get an infinite loop, since it&amp;rsquo;s just a function call. So we can&amp;rsquo;t give arbitrary BNF-like grammars to &lt;code&gt;parser&lt;/code&gt;. We could use it as a convenient way to hand-write a recursive-descent parser, but we won&amp;rsquo;t pursue that idea here. Instead, let&amp;rsquo;s turn to Camlp4&amp;rsquo;s grammars, which specify a recursive-descent parser using a BNF-like syntax.&lt;/p&gt; 
&lt;b&gt;Grammars&lt;/b&gt; 
&lt;p&gt;Here is a complete example of a grammar:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PreCast&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakeGram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;expr&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LIDENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo-bar+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ghost&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exc_located&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;You can build it with the following command:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ocamlfind ocamlc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; 
   -linkpkg -syntax camlp4o &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; 
  -package camlp4.extend -package camlp4.lib &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; 
  grammar1.ml -o grammar1
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Let&amp;rsquo;s cover the infrastructure before investigating &lt;code&gt;EXTEND&lt;/code&gt;. We have a grammar module &lt;code&gt;Gram&lt;/code&gt; which we got from &lt;code&gt;Camlp4.PreCast&lt;/code&gt;; this is an empty grammar using a default lexer. We have an &lt;em&gt;entry&lt;/em&gt; (a grammar nonterminal) &lt;code&gt;expr&lt;/code&gt;, which is an OCaml value. We can parse a string starting at an entry using &lt;code&gt;Gram.parse_string&lt;/code&gt; (we have to pass it an initial location). We trap &lt;code&gt;Loc.Exc_located&lt;/code&gt; (which attaches a location to exceptions raised in parsing) and re-raise the underlying exception so it gets printed. (In subsequent examples I will give just the &lt;code&gt;EXTEND&lt;/code&gt; block.)&lt;/p&gt; 
 
&lt;p&gt;One way to approach &lt;code&gt;EXTEND&lt;/code&gt; is to run the file through Camlp4 (&lt;code&gt;camlp4of&lt;/code&gt; has the required syntax extension) to see what we get. This is fun, but the result does not yield much insight; it&amp;rsquo;s just a simple transformation of the input, passed to &lt;code&gt;Gram.extend&lt;/code&gt;. This is the entry point to a pretty hairy bunch of code that generates a recursive descent parser from the value representing the grammar. Let&amp;rsquo;s take a different tack: &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/manual005.html&quot;&gt;RTFM&lt;/a&gt;, then run some experiments to shine light in places where the fine manual is a bit dim.&lt;/p&gt; 
 
&lt;p&gt;First, what language is parsed by the grammar above? It looks pretty similar to the stream parser example. But what is &lt;code&gt;LIDENT&lt;/code&gt;? The stream parser example works with a stream of strings. Here we are working with a stream of tokens, produced by the &lt;code&gt;Lexer&lt;/code&gt; module; there is a variant defining the token types in &lt;code&gt;PreCast.mli&lt;/code&gt;. The default lexer is OCaml-specific (but it&amp;rsquo;s often good enough for other purposes); a &lt;code&gt;LIDENT&lt;/code&gt; is an OCaml lowercase identifier. A literal string (like &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;) indicates a &lt;code&gt;KEYWORD&lt;/code&gt; token; using it in a grammar registers the keyword with the lexer. So the grammar can parse strings like &lt;code&gt;foo quux bar&lt;/code&gt; or &lt;code&gt;baz foo quux bar&lt;/code&gt;, but not &lt;code&gt;foo bar bar&lt;/code&gt;, since &lt;code&gt;bar&lt;/code&gt; is a &lt;code&gt;KEYWORD&lt;/code&gt; not a &lt;code&gt;LIDENT&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;Most tokens have associated strings; &lt;code&gt;x = LIDENT&lt;/code&gt; puts the associated string in &lt;code&gt;x&lt;/code&gt;. Keywords are given in double quotes (&lt;code&gt;x = KEYWORD&lt;/code&gt; works, but I can&amp;rsquo;t think of a good use for it). You can also use pattern-matching syntax (e.g. &lt;code&gt;`LIDENT x&lt;/code&gt;) to get at the actual token constructor, which may carry more than just a string.&lt;/p&gt; 
 
&lt;p&gt;You can try the example and see that the lexer takes care of whitespace and OCaml comments. You&amp;rsquo;ll also notice that the parser ignores extra tokens after a successful parse; to avoid it we need an &lt;code&gt;EOI&lt;/code&gt; token to indicate the end of the input (but I haven&amp;rsquo;t bothered here).&lt;/p&gt; 
&lt;b&gt;Left-factoring&lt;/b&gt; 
&lt;p&gt;What happens if two rules start with the same token?&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;If this were a stream parser, the first arm would always match when the next token is &lt;code&gt;foo&lt;/code&gt;; if the subsequent token is &lt;code&gt;baz&lt;/code&gt; then the parse fails. But with a grammar, the &lt;em&gt;rule&lt;/em&gt;s (arms, for a grammar) are &lt;em&gt;left-factored&lt;/em&gt;: when there is a common prefix of &lt;em&gt;symbol&lt;/em&gt;s (a symbol is a keyword, token, or entry&amp;mdash;and we will see some others later) among different rules, the parser doesn&amp;rsquo;t choose which rule to use until the common prefix has been parsed. You can think of a factored grammar as a tree, where the nodes are symbols and the leaves are &lt;em&gt;action&lt;/em&gt;s (the right-hand side of a rule is the rule&amp;rsquo;s action); when a symbol distinguishes two rules, that&amp;rsquo;s a branching point. (In fact, this is how grammars are implemented: first the corresponding tree is generated, then the parser is generated from the tree.)&lt;/p&gt; 
 
&lt;p&gt;What if one rule is a prefix of another?&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In this case the parser is greedy: if the next token is &lt;code&gt;baz&lt;/code&gt;, it uses the second rule, otherwise the first. To put it another way, a token or keyword is preferred over &lt;em&gt;epsilon&lt;/em&gt;, the empty string (and this holds for other ways that a grammar can match epsilon&amp;mdash;see below about special symbols).&lt;/p&gt; 
 
&lt;p&gt;What if two rules call the same entry?&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;First, what is this &lt;code&gt;GLOBAL&lt;/code&gt;? By default, all entries are global, meaning that they must be pre-defined with &lt;code&gt;Gram.Entry.mk&lt;/code&gt;. The &lt;code&gt;GLOBAL&lt;/code&gt; declaration gives a list of entries which are global, and makes the rest local, so we don&amp;rsquo;t need to pre-define them, but we can&amp;rsquo;t refer to them outside the grammar. Second, note that we can call entries without binding the result to a variable, and that rules don&amp;rsquo;t need an action&amp;mdash;in that case they return &lt;code&gt;()&lt;/code&gt;. You can try it and see that factoring works on entries too. Maybe this is slightly surprising, if you&amp;rsquo;re thinking about the rules as parse-time alternatives, but factoring happens when the parser is built.&lt;/p&gt; 
 
&lt;p&gt;What about an entry vs. a token?&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Both rules parse the same language, but an explicit token or keyword trumps an entry or other symbol, so the second rule is used. You can try it and see that the order of the rules doesn&amp;rsquo;t matter.&lt;/p&gt; 
 
&lt;p&gt;What about two different entries?&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Factoring happens only within a rule, so the parser doesn&amp;rsquo;t know that &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt; parse the same language. It commits to the first rule after parsing &lt;code&gt;foo&lt;/code&gt;; if after parsing &lt;code&gt;quux&lt;/code&gt; it then sees &lt;code&gt;baz&lt;/code&gt;, it doesn&amp;rsquo;t backtrack and try the second rule, so the parse fails. If you switch the order of the rules, then &lt;code&gt;baz&lt;/code&gt; succeeds but &lt;code&gt;bar&lt;/code&gt; fails.&lt;/p&gt; 
&lt;b&gt;Local backtracking&lt;/b&gt; 
&lt;p&gt;Why have two identical entries in the previous example? If we make them different, something a little surprising happens:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+bar&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo+baz&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Now we can parse both &lt;code&gt;foo quux bar&lt;/code&gt; and &lt;code&gt;foo xyzzy baz&lt;/code&gt;. How does this work? It takes a little digging into the implementation (which I will spare you) to see what&amp;rsquo;s happening: the &lt;code&gt;&amp;quot;foo&amp;quot;&lt;/code&gt; keyword is factored into a common prefix, then we have a choice between &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt;. A choice betwen entries generates a stream parser, with an arm for each entry which calls the entry&amp;rsquo;s parser. As we saw in the stream parsers sections, calling another parser in the first position of a match compiles to a limited form of backtracking. So in the example, if &lt;code&gt;f1&lt;/code&gt; fails with &lt;code&gt;Stream.Failure&lt;/code&gt; (which it does when the next token is not &lt;code&gt;quux&lt;/code&gt;) then the parser tries to parse &lt;code&gt;f2&lt;/code&gt; instead.&lt;/p&gt; 
 
&lt;p&gt;Local backtracking works only when the parser is at a branch point (e.g. a choice between two entries), and when the called entry does not itself commit and advance the stream (in which case &lt;code&gt;Stream.Error&lt;/code&gt; is raised on a parse error instead of &lt;code&gt;Stream.Failure&lt;/code&gt;). Here is an example that fails the first criterion:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugh&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugh&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f1&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f2&amp;quot;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;After parsing &lt;code&gt;g1&lt;/code&gt;, the parser has committed to the first rule, so it&amp;rsquo;s not possible to backtrack and try the second if &lt;code&gt;f1&lt;/code&gt; fails.&lt;/p&gt; 
 
&lt;p&gt;Here&amp;rsquo;s an example that fails the second criterion:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugh&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;When &lt;code&gt;f1&lt;/code&gt; is called, after parsing &lt;code&gt;g&lt;/code&gt; the parser is committed to &lt;code&gt;f1&lt;/code&gt;, so if the next token is not &lt;code&gt;quux&lt;/code&gt; the parse fails rather than backtracking.&lt;/p&gt; 
 
&lt;p&gt;Local backtracking can be used to control parsing with explicit lookahead. We could repair the previous example as follows:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;Gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_parser&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npeek&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KEYWORD&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugh&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We create an entry from a stream parser with &lt;code&gt;Gram.Entry.of_parser&lt;/code&gt;. This could do some useful parsing and return a value just like any other entry, but here we just want to cause a backtrack (by raising &lt;code&gt;Stream.Failure&lt;/code&gt;) if the token &lt;em&gt;after&lt;/em&gt; the next one is &lt;code&gt;xyzzy&lt;/code&gt;. We can see it with &lt;code&gt;Stream.npeek 2&lt;/code&gt;, which returns the next two tokens, but does not advance the stream. (The stream parser syntax is not useful here since it advances the stream on a match.) You can see several examples of this technique in &lt;code&gt;Camlp4OCamlParser.ml&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;We have seen that for stream parsers, a match of a sequence of literals compiles to a nested pattern match; as soon as the first literal matches, we&amp;rsquo;re committed to that arm. With grammars, however, a sequence of tokens (or keywords) is matched all at once: enough tokens are &lt;code&gt;peek&lt;/code&gt;ed; if all match then the stream is advanced past all of them; if any fail to match, &lt;code&gt;Stream.Failure&lt;/code&gt; is raised. So in the first example of this section, &lt;code&gt;f1&lt;/code&gt; could be any sequence of tokens, and local backtracking would still work. Or it could be a sequence of tokens followed by some non-tokens; as long as the failure happens in the sequence of tokens, local backtracking would still work.&lt;/p&gt; 
&lt;b&gt;Self-calls&lt;/b&gt; 
&lt;p&gt;Consider the following grammar:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We&amp;rsquo;ve seen that a choice of entries generates a stream parser with an arm for each entry, and also that a call to another parser in a stream parser match is just a function call. So it seems like the parser should go into a loop before parsing anything.&lt;/p&gt; 
 
&lt;p&gt;However, Camlp4 gives calls to the entry being defined (&amp;ldquo;self-calls&amp;rdquo;) special treatment. The rules of an entry actually generate two parsers, the &amp;ldquo;start&amp;rdquo; and &amp;ldquo;continue&amp;rdquo; parsers (these names are taken from the code). When a self-call appears as the first symbol of a rule, the rest of the rule goes into the continue parser; otherwise the whole rule goes into the start parser. An entry is parsed starting with the start parser; a successful parse is followed by the continue parser. So in the example, we first parse using just the second rule, to get things off the ground, then parse using just the first rule. If there are no start rules (that is, all rules begin with self-calls) the parser doesn&amp;rsquo;t loop, but it fails without parsing anything.&lt;/p&gt; 
&lt;b&gt;Levels and precedence&lt;/b&gt; 
&lt;p&gt;I am sorry to say that I have not been completely honest with you. I have made it seem like entries consist of a list of rules in double square brackets. In fact, entries are lists of &lt;em&gt;level&lt;/em&gt;s, in single square brackets, and each level consists of a list of rules, also in single square brackets. So each of the examples so far has contained only a single level. Here is an example with multiple levels:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(You&amp;rsquo;ll need a &lt;code&gt;string_of_int&lt;/code&gt; to use this grammar with the earlier framework.) The idea with levels is that parsing begins at the topmost level; if no rule applies in the current level, then the next level down is tried. Furthermore, when making a self-call, call at the current level (or the following level; see below) rather than at the top. This gives a way to implement operator precedence: order the operators top to bottom from loosest- to tightest-binding.&lt;/p&gt; 
 
&lt;p&gt;Why does this work? The multi-level grammar is just a &amp;ldquo;stratified&amp;rdquo; grammar, with a little extra support from Camlp4; we could write it manually like this:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;add_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;base_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;When parsing a &lt;code&gt;mul_expr&lt;/code&gt;, for instance, we don&amp;rsquo;t want to parse an &lt;code&gt;add_expr&lt;/code&gt; as a subexpression; &lt;code&gt;1 * 2 + 3&lt;/code&gt; should not parse as &lt;code&gt;1 * (2 + 3)&lt;/code&gt;. A stratified grammar just leaves out the rules for lower-precedence operators at each level. Why do we call &lt;code&gt;add_expr&lt;/code&gt; on the left side of &lt;code&gt;+&lt;/code&gt; but &lt;code&gt;mul_expr&lt;/code&gt; on the right? This makes &lt;code&gt;+&lt;/code&gt; left-associative; we parse &lt;code&gt;1 + 2 + 3&lt;/code&gt; as &lt;code&gt;(1 + 2) + 3&lt;/code&gt; since &lt;code&gt;add_expr&lt;/code&gt; is a possibility only on the left. (For an ordinary recursive-descent parser we&amp;rsquo;d want right-associativity to prevent looping, although the special treatment of self-calls makes the left-associative version work here.)&lt;/p&gt; 
 
&lt;p&gt;Associativity works just the same with the multi-level grammar. By default, levels are left-associative: in the start parser (for a self-call as the first symbol of the rule), the self-call is made at the same level; in the continue parser, self-calls are made at the following level. For right-associativity it&amp;rsquo;s the reverse, and for non-associativity both start and continue parsers call the following level. The associativity of a level can be specified by prefixing it with the keywords &lt;code&gt;NONA&lt;/code&gt;, &lt;code&gt;LEFTA&lt;/code&gt;, or &lt;code&gt;RIGHTA&lt;/code&gt;. (Either I don&amp;rsquo;t understand what non-associativity means, or &lt;code&gt;NONA&lt;/code&gt; is broken; it seems to be the same as &lt;code&gt;LEFTA&lt;/code&gt;.)&lt;/p&gt; 
 
&lt;p&gt;Levels may be labelled, and the level to call may be given explicitly. So another way to write the same grammar is:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;base&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;base&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;base&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;base&amp;quot;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;(Unfortunately, the left-associative version of this loops; explicitly specifying a level when calling an entry defeats the start / continue mechanism, since the call is not recognized as a self-call.) Calls to explicit levels can be used when calling other entries, too, not just for self calls. Level names are also useful for extending grammars, although we won&amp;rsquo;t cover that here.&lt;/p&gt; 
&lt;b&gt;Special symbols&lt;/b&gt; 
&lt;p&gt;There are several special symbols: &lt;code&gt;SELF&lt;/code&gt; refers to the entry being defined (at the current or following level depending on the associativity and the position of the symbol in the rule, as above); &lt;code&gt;NEXT&lt;/code&gt; refers to the entry being defined, at the following level regardless of associativity or position.&lt;/p&gt; 
 
&lt;p&gt;A list of zero or more items can be parsed with the syntax &lt;code&gt;LIST0&lt;/code&gt; &lt;em&gt;elem&lt;/em&gt;, where &lt;em&gt;elem&lt;/em&gt; can be any other symbol. The return value has type &lt;code&gt;'a list&lt;/code&gt; when &lt;em&gt;elem&lt;/em&gt; has type &lt;code&gt;'a&lt;/code&gt;. To parse separators between the elements use &lt;code&gt;LIST0&lt;/code&gt; &lt;em&gt;elem&lt;/em&gt; &lt;code&gt;SEP&lt;/code&gt; &lt;em&gt;sep&lt;/em&gt;; again &lt;em&gt;sep&lt;/em&gt; can be any other symbol. &lt;code&gt;LIST1&lt;/code&gt; means parse one or more items. An optional item can be parsed with &lt;code&gt;OPT&lt;/code&gt; &lt;em&gt;elem&lt;/em&gt;; the return value has type &lt;code&gt;'a
option&lt;/code&gt;. (Both &lt;code&gt;LIST0&lt;/code&gt; and &lt;code&gt;OPT&lt;/code&gt; can match the empty string; see the note above about the treatment of epsilon.)&lt;/p&gt; 
 
&lt;p&gt;Finally, a nested set of rules may appear in a rule, and acts like an anonymous entry (but can have only one level). For example, the rule&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plus&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;parses both &lt;code&gt;1 + 2&lt;/code&gt; and &lt;code&gt;1 plus 2&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;Addendum: A new special symbol appeared in the 3.12.0 release, &lt;code&gt;TRY&lt;/code&gt; &lt;em&gt;elem&lt;/em&gt;, which provides non-local backtracking: a &lt;code&gt;Stream.Error&lt;/code&gt; occurring in &lt;em&gt;elem&lt;/em&gt; is converted to a &lt;code&gt;Stream.Failure&lt;/code&gt;. (It works by running &lt;em&gt;elem&lt;/em&gt; on an on-demand copy of the token stream; tokens are not consumed from the real token stream until &lt;em&gt;elem&lt;/em&gt; succeeds.) &lt;code&gt;TRY&lt;/code&gt; replaces most (all?) cases where you&amp;rsquo;d need to drop down to a stream parser for lookahead. So another way to fix the local backtracking example above is:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EXTEND&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gram&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugh&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;quux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xyzzy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
 
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;f2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]];&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;END&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;hr/&gt; 
&lt;p&gt;Almost the whole point of Camlp4 grammars is that they are extensible&amp;mdash;you can add rules and levels to entries after the fact&amp;mdash;so you can modify the OCaml parsers to make syntax extensions. But I am going to save that for a later post.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/05/reading-camlp4-part-6-parsing.html</id><title type="text">Reading Camlp4, part 6: parsing</title><updated>2010-05-20T04:22:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/05/how-froc-works.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html"> 
&lt;p&gt;I am happy to announce the release of version 0.2 of the &lt;code&gt;froc&lt;/code&gt; library for functional reactive programming in OCaml. There are a number of improvements:&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;better event model: there is now a notion of simultaneous events, and behaviors and events can now be freely mixed&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://ttic.uchicago.edu/~umut/projects/self-adjusting-computation/&quot;&gt;self-adjusting computation&lt;/a&gt; is now supported via memo functions; needless recomputation can be avoided in some cases&lt;/li&gt; 
 
&lt;li&gt;faster priority queue and timeline data structures&lt;/li&gt; 
 
&lt;li&gt;behavior and event types split into co- and contra-variant views for subtyping&lt;/li&gt; 
 
&lt;li&gt;bug fixes and cleanup&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;Development of &lt;code&gt;froc&lt;/code&gt; has moved from Google Code to Github; see&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&quot;http://github.com/jaked/froc&quot;&gt;project page&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://jaked.github.com/froc&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://github.com/jaked/froc/downloads&quot;&gt;downloads&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;Thanks to Ruy Ley-Wild for helpful discussion, and to Daniel B&amp;uuml;nzli for helpful discussion and many good ideas in React.&lt;/p&gt; 
 
&lt;p&gt;I thought I would take this opportunity to explain how &lt;code&gt;froc&lt;/code&gt; works, because it is interesting, and to help putative &lt;code&gt;froc&lt;/code&gt; users use it effectively.&lt;/p&gt; 
&lt;b&gt;Dependency graphs&lt;/b&gt; 
&lt;p&gt;The main idea behind &lt;code&gt;froc&lt;/code&gt; (and self-adjusting computation) is that we can think of an expression as implying a dependency graph, where each subexpression depends on its subexpressions, and ultimately on some input values. When the input values change, we can recompute the expression incrementally by recursively pushing changes to dependent subexpressions.&lt;/p&gt; 
 
&lt;p&gt;To be concrete, suppose we have this expression:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here is a dependency graph relating expressions to their subexpressions:&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/_-BRxxZyoKFE/S-RS60NO3DI/AAAAAAAAAOw/KkXzrR_I14g/s1600/how-froc-works-a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;The edges aren&amp;rsquo;t directed, because we can think of dependencies as either demand-driven (to compute A, we need B), or change-driven (when B changes, we must recompute A).&lt;/p&gt; 
 
&lt;p&gt;Now suppose we do an initial evaluation of the expression with &lt;code&gt;v =
4&lt;/code&gt;, &lt;code&gt;w = 2&lt;/code&gt;, &lt;code&gt;x = 2&lt;/code&gt;, &lt;code&gt;y = 3&lt;/code&gt;, and &lt;code&gt;z = 1&lt;/code&gt;. Then we have (giving labels to unlabelled nodes, and coloring the current value of each node green):&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/_-BRxxZyoKFE/S-RThVz19aI/AAAAAAAAAO4/3Tpx6UqcFYQ/s1600/how-froc-works-b.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;If we set &lt;code&gt;z = 2&lt;/code&gt;, we need only update &lt;code&gt;u&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;, since no other node depends on &lt;code&gt;z&lt;/code&gt;. If we then set &lt;code&gt;v = 6&lt;/code&gt;, we need to update &lt;code&gt;n0&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;n2&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; (since &lt;code&gt;n2&lt;/code&gt; depends on &lt;code&gt;n0&lt;/code&gt;), and &lt;code&gt;u&lt;/code&gt; to &lt;code&gt;11&lt;/code&gt;, but we don&amp;rsquo;t need to update &lt;code&gt;n1&lt;/code&gt;. (This is the change-driven point of view.)&lt;/p&gt; 
 
&lt;p&gt;What if we set &lt;code&gt;z = 2&lt;/code&gt; and &lt;code&gt;v = 6&lt;/code&gt; simultaneously, then do the updates? We have to be careful to do them in the right order. If we updated &lt;code&gt;u&lt;/code&gt; first (since it depends on &lt;code&gt;z&lt;/code&gt;), we&amp;rsquo;d use a stale value for &lt;code&gt;n2&lt;/code&gt;. We could require that we don&amp;rsquo;t update an expression until each of its dependencies has been updated (if necessary). Or we could respect the original evaluation order of the expressions, and say that we won&amp;rsquo;t update an expression until each expression that came before it has been updated.&lt;/p&gt; 
 
&lt;p&gt;In &lt;code&gt;froc&lt;/code&gt; we take the second approach. Each expression is given a &lt;em&gt;timestamp&lt;/em&gt; (not a wall-clock time, but an abstract ordered value) when it&amp;rsquo;s initially evaluated, and we re-evaluate the computation by running through a priority queue of stale expressions, ordered by timestamp. Here is the situation, with changed values in magenta, stale values in red, and timestamps in gray:&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/_-BRxxZyoKFE/S-RUC9vfS7I/AAAAAAAAAPA/ya4vwgVjV04/s1600/how-froc-works-c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;If we update the stale nodes from their dependencies in timestamp order, we get the right answer. We will see how this approach gives us a way to handle &lt;em&gt;control dependencies&lt;/em&gt;, where A does not depend on B, but A&amp;rsquo;s execution is controlled by B.&lt;/p&gt; 
&lt;b&gt;Library interface&lt;/b&gt; 
&lt;p&gt;The core of &lt;code&gt;froc&lt;/code&gt; has the following (simplified) signature:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The type &lt;code&gt;'a t&lt;/code&gt; represents &lt;em&gt;changeable values&lt;/em&gt; (or just &lt;em&gt;changeables&lt;/em&gt;) of type &lt;code&gt;'a&lt;/code&gt;; these are the nodes of the dependency graph. &lt;code&gt;Return&lt;/code&gt; converts a regular value to a changeable value. &lt;code&gt;Bind&lt;/code&gt; makes a new changeable as a dependent of an existing one; the function argument is the expression that computes the value from its dependency. We have &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; as an infix synonym for &lt;code&gt;bind&lt;/code&gt;; there are also multi-argument versions (&lt;code&gt;bind2&lt;/code&gt;, &lt;code&gt;bind3&lt;/code&gt;, etc.) so a value can depend on more than one other value.&lt;/p&gt; 
 
&lt;p&gt;We could translate the expression from the previous section as:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;There are some convenience functions in &lt;code&gt;froc&lt;/code&gt; to make this more readable (these versions are also more efficient):&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;Blift&lt;/code&gt; is like &lt;code&gt;bind&lt;/code&gt; except that you don&amp;rsquo;t need the &lt;code&gt;return&lt;/code&gt; at the end of the expression (below we&amp;rsquo;ll see cases where you actually need &lt;code&gt;bind&lt;/code&gt;); &lt;code&gt;lift&lt;/code&gt; is the same as &lt;code&gt;blift&lt;/code&gt; but with the arguments swapped for partial application. So we could say&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;or even&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(/)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(/)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(+)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(+)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Now, there is no reason to break down expressions all the way&amp;mdash;a node can have a more complicated expression, for example:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blift2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;There is time overhead in propagating dependencies, and space overhead in storing the dependency graph, so it&amp;rsquo;s useful to be able to control the granularity of recomputation by trading off computation over changeable values with computation over ordinary values.&lt;/p&gt; 
&lt;b&gt;Dynamic dependency graphs&lt;/b&gt; 
&lt;p&gt;Take this expression:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here it is in &lt;code&gt;froc&lt;/code&gt; form:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;and its dependency graph, with timestamps:&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://3.bp.blogspot.com/_-BRxxZyoKFE/S-RUj5r9i7I/AAAAAAAAAPI/ROpJD6sK_PI/s1600/how-froc-works-d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;(We begin to see why &lt;code&gt;bind&lt;/code&gt; is sometimes necessary instead of &lt;code&gt;blift&lt;/code&gt;&amp;mdash;in order to return &lt;code&gt;n0&lt;/code&gt; in the &lt;code&gt;else&lt;/code&gt; branch, the function must return &lt;code&gt;'b t&lt;/code&gt; rather than &lt;code&gt;'b&lt;/code&gt;.)&lt;/p&gt; 
 
&lt;p&gt;Suppose we have an initial evaluation with &lt;code&gt;x = 10&lt;/code&gt;, and we then set &lt;code&gt;x = 0&lt;/code&gt;. If we blindly update &lt;code&gt;n0&lt;/code&gt;, we get a &lt;code&gt;Division_by_zero&lt;/code&gt; exception, although we get no such exception from the original code. Somehow we need to take into account the control dependency between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;100 / x&lt;/code&gt;, and compute &lt;code&gt;100 / x&lt;/code&gt; only when &lt;code&gt;b&lt;/code&gt; is false. This can be accomplished by putting it inside the &lt;code&gt;else&lt;/code&gt; branch:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
                              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;How does this work? &lt;code&gt;Froc&lt;/code&gt; keeps track of the start and finish timestamps when running an expression, and associates dependencies with the timestamp when they are attacheed. When an expression is re-run, we detach all the dependencies between the start and finish timestamps. In this case, when &lt;code&gt;b&lt;/code&gt; changes, we detach the dependent expression that divides by 0 before trying to run it.&lt;/p&gt; 
 
&lt;p&gt;Let&amp;rsquo;s walk through the initial run with &lt;code&gt;x = 10&lt;/code&gt;: Here is the graph showing the timestamp ranges, and on the dependency edges, the timestamp when the dependency was attached:&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://3.bp.blogspot.com/_-BRxxZyoKFE/S-RUxKV8mRI/AAAAAAAAAPQ/VuJ4wIzRhsg/s1600/how-froc-works-e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;First we evaluate &lt;code&gt;b&lt;/code&gt; (attaching it as a dependent of &lt;code&gt;x&lt;/code&gt; at time &lt;code&gt;0&lt;/code&gt;) to get &lt;code&gt;false&lt;/code&gt;. Then we evaluate &lt;code&gt;y&lt;/code&gt; (attaching it as a dependent of &lt;code&gt;b&lt;/code&gt; at time &lt;code&gt;3&lt;/code&gt;): we check &lt;code&gt;b&lt;/code&gt; and evaluate &lt;code&gt;n0&lt;/code&gt; to get &lt;code&gt;10&lt;/code&gt; (attaching it as a dependent of &lt;code&gt;x&lt;/code&gt; at time &lt;code&gt;5&lt;/code&gt;). Notice that we have a dependency edge from &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;n0&lt;/code&gt;. This is not a true dependency, since we don&amp;rsquo;t recompute &lt;code&gt;y&lt;/code&gt; when &lt;code&gt;n0&lt;/code&gt; changes; rather the value of &lt;code&gt;y&lt;/code&gt; is a proxy for &lt;code&gt;n0&lt;/code&gt;, so when &lt;code&gt;n0&lt;/code&gt; changes we just forward the new value to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;What happens if we set &lt;code&gt;x = 20&lt;/code&gt;? Both &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;n0&lt;/code&gt; are stale since they depend on &lt;code&gt;x&lt;/code&gt;. We re-run expressions in order of their start timestamp, so we run &lt;code&gt;b&lt;/code&gt; and get &lt;code&gt;false&lt;/code&gt;. Since the value of &lt;code&gt;b&lt;/code&gt; has not changed, &lt;code&gt;y&lt;/code&gt; is not stale. Then we re-run &lt;code&gt;n0&lt;/code&gt;, so its value (and the value of &lt;code&gt;y&lt;/code&gt; by proxy) becomes &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;What happens if we set &lt;code&gt;x = 0&lt;/code&gt;? We run &lt;code&gt;b&lt;/code&gt; and get &lt;code&gt;true&lt;/code&gt;. Now &lt;code&gt;y&lt;/code&gt; is also stale, and it is next in timestamp order. We first detach all the dependencies in the timestamp range &lt;code&gt;4&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt; from the previous run of &lt;code&gt;y&lt;/code&gt;: the dependency of &lt;code&gt;n0&lt;/code&gt; on &lt;code&gt;x&lt;/code&gt; and the proxy dependency of &lt;code&gt;y&lt;/code&gt; on &lt;code&gt;n0&lt;/code&gt;. This time we take the &lt;code&gt;then&lt;/code&gt; branch, so we get &lt;code&gt;0&lt;/code&gt; without attaching any new dependencies. We are done; no &lt;code&gt;Division_by_zero&lt;/code&gt; exception.&lt;/p&gt; 
 
&lt;p&gt;Now we can see why it&amp;rsquo;s important to handle updates in timestamp order: the value which decides a control flow point (e.g. the test of an &lt;code&gt;if&lt;/code&gt;) is always evaluated before the control branches (the &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches), so we have the chance to fix up the dependency graph before the branches are updated.&lt;/p&gt; 
&lt;b&gt;Garbage collection and cleanup functions&lt;/b&gt; 
&lt;p&gt;A node points to its dependencies (so it can read their values when computing its value), and its dependencies point back to the node (so they can mark it stale when they change). This creates a problem for garbage collection: a node which becomes garbage (from the point of view of the library user) is still attached to its dependencies, taking up memory, and causing extra recomputation.&lt;/p&gt; 
 
&lt;p&gt;The implementation of dynamic dependency graphs helps with this problem: as we have seen, when an expression is re-run, the dependencies attached in the course of the previous run are detached, including any dependencies for nodes which have become garbage. Still, until the expression that created them is re-run, garbage nodes remain attached.&lt;/p&gt; 
 
&lt;p&gt;Some other FRP implementations use weak pointers to store a node&amp;rsquo;s dependents, to avoid hanging on to garbage nodes. Since &lt;code&gt;froc&lt;/code&gt; is designed to work in browsers (using &lt;a href=&quot;http://jaked.github.com/ocamljs&quot;&gt;ocamljs&lt;/a&gt;), weak pointers aren&amp;rsquo;t an option because they aren&amp;rsquo;t supported in Javascript. But even in regular OCaml, there are reasons to eschew the use of weak pointers:&lt;/p&gt; 
 
&lt;p&gt;First, it&amp;rsquo;s useful to be able to set up changeable expressions which are used for their effect (say, updating the GUI) rather than their value; to do this with a system using weak pointers, you have to stash the expression somewhere so it won&amp;rsquo;t be GC&amp;rsquo;d. This is similar to the problem of GCing threads; it doesn&amp;rsquo;t make sense if the threads can have an effect.&lt;/p&gt; 
 
&lt;p&gt;Second, there are other resources which may need to be cleaned up in reaction to changes (say, GUI event handler registrations); weak pointers are no help here. &lt;code&gt;Froc&lt;/code&gt; gives you a way to set cleanup functions during a computation, which are run when the computation is re-run, so you can clean up other resources.&lt;/p&gt; 
 
&lt;p&gt;With &lt;code&gt;froc&lt;/code&gt; there are two options to be sure you don&amp;rsquo;t leak memory: you can call &lt;code&gt;init&lt;/code&gt; to clean up the entire system, or you can use &lt;code&gt;bind&lt;/code&gt; to control the lifetime of changeables: for instance, you could have a changeable &lt;code&gt;c&lt;/code&gt; representing a counter, do a computation in the scope of a bind of &lt;code&gt;c&lt;/code&gt; (you can just ignore the value), then increment the counter to clear out the previous computation.&lt;/p&gt; 
 
&lt;p&gt;In fact, there are situations where &lt;code&gt;froc&lt;/code&gt; cleans up too quickly&amp;mdash;when you want to hang on to a changeable after the expression that attached it is re-run. We&amp;rsquo;ll see shortly how to avoid this.&lt;/p&gt; 
&lt;b&gt;Memoizing the previous run&lt;/b&gt; 
&lt;p&gt;Here is the &lt;code&gt;List.map&lt;/code&gt; function, translated to work over lists where the tail is changeable.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;What happens if we run&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;? (I&amp;rsquo;m abusing the list syntax here to mean a changeable list with these elements.) Let&amp;rsquo;s see if we can fit the dependency graph on the page (abbreviating &lt;code&gt;Cons&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt; and writing just &lt;code&gt;f&lt;/code&gt; for the &lt;code&gt;function&lt;/code&gt; expression):&lt;/p&gt; 
 
&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/_-BRxxZyoKFE/S-RVCDRbyuI/AAAAAAAAAPY/XKaamcWm3QE/s1600/how-froc-works-f.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
 
&lt;p&gt;(The dependency edges on the right-hand side don&amp;rsquo;t mean that e.g. &lt;code&gt;f0&lt;/code&gt; depends directly on &lt;code&gt;f1&lt;/code&gt;, but rather that the value returned by &lt;code&gt;f0&lt;/code&gt;&amp;mdash;&lt;code&gt;Cons(2,f1)&lt;/code&gt;&amp;mdash;depends on &lt;code&gt;f1&lt;/code&gt;. We don&amp;rsquo;t re-run &lt;code&gt;f0&lt;/code&gt; when &lt;code&gt;f1&lt;/code&gt; changes, or even update its value by proxy as we did in the previous section. But if &lt;code&gt;f1&lt;/code&gt; is stale it must be updated before we can consider &lt;code&gt;f0&lt;/code&gt; up-to-date.)&lt;/p&gt; 
 
&lt;p&gt;Notice how the timestamp ranges for the &lt;code&gt;function&lt;/code&gt; expressions are nested each within the previous one. There is a control dependency at each recursive call: whether we make a deeper call depends on whether the argument list is &lt;code&gt;Nil&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;So if we change &lt;code&gt;t3&lt;/code&gt;, just &lt;code&gt;f3&lt;/code&gt; is stale. But if we change &lt;code&gt;t0&lt;/code&gt;, we must re-run &lt;code&gt;f0&lt;/code&gt;, &lt;code&gt;f1&lt;/code&gt;, &lt;code&gt;f2&lt;/code&gt;, and &lt;code&gt;f3&lt;/code&gt;&amp;mdash;that is, the whole computation&amp;mdash;detaching all the dependencies, then reattaching them. This is kind of annoying; we do a lot of pointless work since nothing after the first element has changed.&lt;/p&gt; 
 
&lt;p&gt;If only some prefix of the list has changed, we&amp;rsquo;d like to be able to reuse the work we did in the previous run for the unchanged suffix. &lt;code&gt;Froc&lt;/code&gt; addresses this need with &lt;em&gt;memo functions&lt;/em&gt;. In a way similar to ordinary memoization, a memo function records a table of arguments and values when you call it. But in &lt;code&gt;froc&lt;/code&gt; we only reuse values from the previous run, and only those from the timestamp range we&amp;rsquo;re re-running. We can define &lt;code&gt;map&lt;/code&gt; as a memo function:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here the &lt;code&gt;memo&lt;/code&gt; call makes a new memo table. In the initial run we add a memo entry associating each list node (&lt;code&gt;t0&lt;/code&gt;, &lt;code&gt;t1&lt;/code&gt;, &amp;hellip;) with its &lt;code&gt;map&lt;/code&gt; (&lt;code&gt;f0&lt;/code&gt;, &lt;code&gt;f1&lt;/code&gt;, &amp;hellip;). Now, suppose we change &lt;code&gt;t0&lt;/code&gt;: &lt;code&gt;f0&lt;/code&gt; is stale, so we update it. When we go to compute &lt;code&gt;map f t1&lt;/code&gt; we get a memo hit returning &lt;code&gt;f1&lt;/code&gt; (the computation of &lt;code&gt;f1&lt;/code&gt; is contained in the timestamp range of &lt;code&gt;f0&lt;/code&gt;, so it is a candidate for memo matching). &lt;code&gt;F1&lt;/code&gt; is up-to-date so we return it as the value of &lt;code&gt;map f t1&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;There is a further wrinkle: suppose we change both &lt;code&gt;t0&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, leaving &lt;code&gt;t1&lt;/code&gt; unchanged. As before, we get a memo hit on &lt;code&gt;t1&lt;/code&gt; returning &lt;code&gt;f1&lt;/code&gt;, but since &lt;code&gt;f2&lt;/code&gt; is stale, so is &lt;code&gt;f1&lt;/code&gt;. We must run the update queue until &lt;code&gt;f1&lt;/code&gt; is up-to-date before we return it as the value of &lt;code&gt;map f t1&lt;/code&gt;. Recall that we detach the dependencies of the computation we&amp;rsquo;re re-running; in order to update &lt;code&gt;f1&lt;/code&gt; we just leave it attached to its dependencies and run the queue until the end of its timestamp range.&lt;/p&gt; 
 
&lt;p&gt;In general, there can be a complicated pattern of changed and unchanged data&amp;mdash;we could change every other element in the list, for instance&amp;mdash;so memoization and the update loop call one another recursively. From the timestamp point of view, however, we can think of it as a linear scan through time, alternating between updating stale computations and reusing ones which have not changed.&lt;/p&gt; 
 
&lt;p&gt;The memo function mechanism provides a way to keep changeables attached even after the expression that attached them is re-run. We just need to attach them from within a memo function, then look them up again on the next run, so they&amp;rsquo;re left attached to their dependencies. The &lt;a href=&quot;http://jaked.github.com/froc/examples/froc-dom/quickhull&quot;&gt;quickhull&lt;/a&gt; example (&lt;a href=&quot;http://jaked.github.com/froc/examples/froc-dom/quickhull/quickhull.ml&quot;&gt;source&lt;/a&gt;) demonstrates how this works.&lt;/p&gt; 
&lt;b&gt;Functional reactive programming and the event queue&lt;/b&gt; 
&lt;p&gt;Functional reactive programming works with two related types: &lt;em&gt;behavior&lt;/em&gt;s are values that can change over time, but are defined at all times; &lt;em&gt;event&lt;/em&gt;s are defined only at particular instants in time, possibly (but not necessarily) with a different value at each instant. (&lt;em&gt;Signal&lt;/em&gt;s are events or behaviors when we don&amp;rsquo;t care which one.)&lt;/p&gt; 
 
&lt;p&gt;Events can be used to represent external events entering the system (like GUI clicks or keystrokes), and can also represent occurrences within the system, such as a collision between two moving objects. It is natural for events to be defined in terms of behaviors and vice versa. (In fact they can be directly interdefined with the &lt;code&gt;hold&lt;/code&gt; and &lt;code&gt;changes&lt;/code&gt; functions.)&lt;/p&gt; 
 
&lt;p&gt;In &lt;code&gt;froc&lt;/code&gt;, behaviors are just another name for changeables. Events are implemented on top of changeables: they are just changeables with transient values. An incoming event sets the value of its underlying changeable; after changes have propagated through the dependency graph, the values of all the changeables which underlie events are removed (so they can be garbage collected).&lt;/p&gt; 
 
&lt;p&gt;Signals may be defined (mutually) recursively. For example, in the &lt;a href=&quot;http://jaked.github.com/froc/examples/froc-dom/bounce&quot;&gt;bounce&lt;/a&gt; example (&lt;a href=&quot;http://jaked.github.com/froc/examples/froc-dom/bounce/bounce.ml&quot;&gt;source&lt;/a&gt;), the position of the ball is a behavior defined in terms of its velocity, which is a behavior defined in terms of events indicating collisions with the walls and paddle, which are defined in terms of the ball&amp;rsquo;s position.&lt;/p&gt; 
 
&lt;p&gt;&lt;code&gt;Froc&lt;/code&gt; provides the &lt;code&gt;fix_b&lt;/code&gt; and &lt;code&gt;fix_e&lt;/code&gt; functions to define signals recursively. The definition of a signal can&amp;rsquo;t refer directly to its own current value, since it hasn&amp;rsquo;t been determined yet; instead it sees its value from the previous update cycle. When a recursively-defined signal produces a value, an event is queued to be processed in the next update cycle, so the signal can be updated based on its new current value. (If the signal doesn&amp;rsquo;t converge somehow this process loops.)&lt;/p&gt; 
&lt;b&gt;Related systems&lt;/b&gt; 
&lt;p&gt;&lt;code&gt;Froc&lt;/code&gt; is closely related to a few other FRP systems which are change-driven and written in an imperative, call-by-value language:&lt;/p&gt; 
 
&lt;p&gt;&lt;a href=&quot;http://www.cs.brown.edu/~greg/&quot;&gt;FrTime&lt;/a&gt; is an FRP system for PLT Scheme. FrTime has a dependency graph and update queue mechanism similar to &lt;code&gt;froc&lt;/code&gt;, but sorts stale nodes in dependency (&amp;ldquo;topological&amp;rdquo;) rather than timestamp order. There is a separate mechanism for handling control dependencies, using a dynamic scoping feature specific to PLT Scheme (&amp;ldquo;parameters&amp;rdquo;) to track dependencies attached in the course of evaluating an expression; in addition FrTime uses weak pointers to collect garbage nodes. There is no equivalent of &lt;code&gt;froc&lt;/code&gt;&amp;rsquo;s memo functions. Reactivity in FrTime is implicit: you give an ordinary Scheme program, and the compiler turns each subexpression into a changeable value. There is no programmer control over the granularity of recomputation, but there is a compiler optimization (&amp;ldquo;lowering&amp;rdquo;) which recovers some performance by coalescing changeables.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href=&quot;http://www.flapjax-lang.org/&quot;&gt;Flapjax&lt;/a&gt; is a descendent of FrTime for Javascript. It implements the same dependency-ordered queue as FrTime, but there is no mechanism for control dependencies, and there are no weak pointers (since there are none in Javascript), so it is fairly easy to create memory leaks (although there is a special reference-counting mechanism in certain cases). Flapjax can be used as a library; it also has a compiler similar to FrTime&amp;rsquo;s, but since it doesn&amp;rsquo;t handle control dependencies, the semantics of compiled programs are not preserved (e.g. you can observe exceptions that don&amp;rsquo;t occur in the original program).&lt;/p&gt; 
 
&lt;p&gt;&lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; is a library for OCaml, also based on a dependency-ordered queue, using weak pointers, without a mechanism for control dependencies.&lt;/p&gt; 
&lt;b&gt;Colophon&lt;/b&gt; 
&lt;p&gt;I used &lt;a href=&quot;http://mlpost.lri.fr/&quot;&gt;Mlpost&lt;/a&gt; to generate the dependency graph diagrams. It is very nice!&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/05/how-froc-works.html</id><title type="text">How froc works</title><updated>2010-05-07T17:47:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/04/orpc-03.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;I am happy to announce version 0.3 of &lt;code&gt;orpc&lt;/code&gt;, a tool for generating RPC bindings from OCaml signatures. Orpc can generate ONC RPC stubs for use with &lt;a href=&quot;http://projects.camlcity.org/projects/ocamlnet.html&quot;&gt;Ocamlnet&lt;/a&gt; (in place of ocamlrpcgen), and it can also generate RPC over HTTP stubs for use with &lt;a href=&quot;http://github.com/jaked/ocamljs&quot;&gt;ocamljs&lt;/a&gt;. You can use most OCaml types in interfaces, as well as labelled and optional arguments.&lt;/p&gt; 
 
&lt;p&gt;Changes since version 0.2 include&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;a way to use types defined outside the interface file, so you can use a type in more than one interface&lt;/li&gt; 
 
&lt;li&gt;support for polymorphic variants&lt;/li&gt; 
 
&lt;li&gt;a way to specify &amp;ldquo;abstract&amp;rdquo; interfaces that can be instantiated for synchronous, asynchronous, and Lwt clients and servers&lt;/li&gt; 
 
&lt;li&gt;bug fixes&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;Development of &lt;code&gt;orpc&lt;/code&gt; has moved from Google Code to Github; see&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&quot;http://github.com/jaked/orpc&quot;&gt;project page&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://jaked.github.com/orpc&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt; 
 
&lt;li&gt;&lt;a href=&quot;http://github.com/jaked/orpc/downloads&quot;&gt;downloads&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;Let me know what you think.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/04/orpc-03.html</id><title type="text">orpc 0.3</title><updated>2010-04-03T02:18:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/03/updated-backtrace-patch.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;ve updated my &lt;a href=&quot;http://skydeck.com/blog/programming/stack-traces-in-ocaml&quot;&gt;backtrace&lt;/a&gt; &lt;a href=&quot;http://skydeck.com/blog/programming/more-stack-traces-in-ocaml&quot;&gt;patch&lt;/a&gt; to work with OCaml 3.11.x as well as 3.10.x. The patch provides&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt; 
&lt;p&gt;access to backtraces from within a program (this is already provided in stock 3.11.x)&lt;/p&gt; 
&lt;/li&gt; 
 
&lt;li&gt; 
&lt;p&gt;backtraces for dynamically-loaded bytecode&lt;/p&gt; 
&lt;/li&gt; 
 
&lt;li&gt; 
&lt;p&gt;backtraces in the (bytecode) toplevel&lt;/p&gt; 
&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;In addition there are a few improvements since the last version:&lt;/p&gt; 
 
&lt;ul&gt; 
&lt;li&gt; 
&lt;p&gt;debugging events are allocated outside the heap, so memory use should be better with forking (on Linux at least, the data is shared on copy-on-write pages but the first GC causes the pages be copied)&lt;/p&gt; 
&lt;/li&gt; 
 
&lt;li&gt; 
&lt;p&gt;fixed a bug that could cause spurious &amp;ldquo;unknown location&amp;rdquo; lines in the backtrace&lt;/p&gt; 
&lt;/li&gt; 
 
&lt;li&gt; 
&lt;p&gt;a script to apply the patch (instead of the previous multi-step manual process)&lt;/p&gt; 
&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;See &lt;a href=&quot;http://github.com/jaked/ocaml-backtrace-patch&quot;&gt;ocaml-backtrace-patch&lt;/a&gt; on Github or &lt;a href=&quot;http://github.com/downloads/jaked/ocaml-backtrace-patch/ocaml-backtrace-patch-0.5.tar.gz&quot;&gt;download the tarball&lt;/a&gt;.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/03/updated-backtrace-patch.html</id><title type="text">Updated backtrace patch</title><updated>2010-03-28T01:19:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/03/inside-ocaml-objects.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In the &lt;a href=&quot;http://github.com/jaked/ocamljs&quot;&gt;ocamljs&lt;/a&gt; project I wanted to implement the OCaml object system in a way that is interoperable with Javascript objects. Mainly I wanted to be able to call Javascript methods with the OCaml method call syntax, but it is also useful to write objects in OCaml which are callable in the usual way from Javascript.&lt;/p&gt; 
 
&lt;p&gt;I spent some time a few months ago figuring out how OCaml objects are put together in order to implement this (it is in the unreleased &lt;code&gt;ocamljs&lt;/code&gt; trunk&amp;mdash;new release coming soon I hope). I got a &lt;a href=&quot;http://github.com/jaked/ocamljs/issues/issue/1&quot;&gt;bug report&lt;/a&gt; against it the other day, and it turns out I don&amp;rsquo;t remember much of what I figured out. So I am going to figure it out again, and write it down, here in this very blog post!&lt;/p&gt; 
 
&lt;p&gt;Objects are implemented mostly in the &lt;code&gt;CamlinternalOO&lt;/code&gt; library module, with a few compiler primitives for method invocation. The compiler generates &lt;code&gt;CamlinternalOO&lt;/code&gt; calls to construct classes and objects. Our main tool for figuring out what is going on is to write a test program, dump out its lambda code with &lt;code&gt;-dlambda&lt;/code&gt;, and read the &lt;code&gt;CamlinternalOO&lt;/code&gt; source to see what it means. I will explain functions from &lt;a href=&quot;http://caml.inria.fr/cgi-bin/viewcvs.cgi/ocaml/trunk/stdlib/camlinternalOO.ml?rev=8768&quot;&gt;camlinternalOO.ml&lt;/a&gt; but not embed them in the post, so you may want it available for reference.&lt;/p&gt; 
 
&lt;p&gt;I have hand-translated (apologies for any errors) the lambda code back to pseudo-OCaml to make it more readable. The compiler-generated code works directly with the OCaml &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#toc129&quot;&gt;heap representation&lt;/a&gt;, and generally doesn&amp;rsquo;t fit into the OCaml type system. Where the heap representation can be translated back to an OCaml value I do that; otherwise I write blocks with array notation, and atoms with integers. Finally I have used &lt;code&gt;OO&lt;/code&gt; as an abbreviation for &lt;code&gt;CamlinternalOO&lt;/code&gt;.&lt;/p&gt; 
&lt;b&gt;Immediate objects&lt;/b&gt; 
&lt;p&gt;Here is a first test program, defining an immediate object:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;And this is what it compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_methods_variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GetVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|];&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_object_opt&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;obj_init&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;An object has a class, created with &lt;code&gt;create_table&lt;/code&gt; and filled in with &lt;code&gt;new_methods_variables&lt;/code&gt;, &lt;code&gt;set_methods&lt;/code&gt;, and &lt;code&gt;init_class&lt;/code&gt;; the object itself is created by calling &lt;code&gt;create_object_opt&lt;/code&gt; with the class as argument, then initializing the instance variable.&lt;/p&gt; 
 
&lt;p&gt;A table (the value representing a class) has the following fields (and some others we won&amp;rsquo;t cover):&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods_by_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods_by_label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Each instance variable has a slot (its index in the block which represents the object); &lt;code&gt;vars&lt;/code&gt; maps variable names to slots. The &lt;code&gt;size&lt;/code&gt; field records the total number of slots (including internal slots, see below).&lt;/p&gt; 
 
&lt;p&gt;Each public method has a label, computed by hashing the method name. The &lt;code&gt;methods&lt;/code&gt; field (used for method dispatch) holds each method of the class, with the label of the method at the following index (the type is misleading). Each method then has a slot (the index in &lt;code&gt;methods&lt;/code&gt; of the method function); &lt;code&gt;methods_by_name&lt;/code&gt; maps method names to slots, and the confusingly-named &lt;code&gt;methods_by_label&lt;/code&gt; marks slots to whether it is occupied by a public method.&lt;/p&gt; 
 
&lt;p&gt;The &lt;code&gt;create_table&lt;/code&gt; call assigns slots to methods, fills in the method labels in &lt;code&gt;methods&lt;/code&gt;, and sets up &lt;code&gt;methods_by_name&lt;/code&gt; and &lt;code&gt;methods_by_label&lt;/code&gt;. The &lt;code&gt;new_methods_variables&lt;/code&gt; call returns the slot of each public method and each instance variable in a block (which is unpacked into local variables).&lt;/p&gt; 
 
&lt;p&gt;The &lt;code&gt;set_methods&lt;/code&gt; call sets up the method functions in &lt;code&gt;methods&lt;/code&gt;. Its argument is a block containing alternating method slots and method descriptions (the description can take more than one item in the block). For some methods (e.g. &lt;code&gt;move&lt;/code&gt;) the description is just an OCaml function (here you can see that &lt;code&gt;self&lt;/code&gt; is passed as the first argument). For some the description is given by a value of the variant &lt;code&gt;OO.impl&lt;/code&gt; along with some other arguments. For &lt;code&gt;get_x&lt;/code&gt; it is &lt;code&gt;GetVar&lt;/code&gt; followed by the slot for &lt;code&gt;x&lt;/code&gt;. The actual function that gets the instance variable is generated by &lt;code&gt;set_methods&lt;/code&gt;. As far as I understand it, the point of this is to reduce object code size by factoring out the common code from frequently occurring methods.&lt;/p&gt; 
 
&lt;p&gt;Finally &lt;code&gt;create_object_opt&lt;/code&gt; allocates a block of &lt;code&gt;clas.size&lt;/code&gt;, then fills in the first slot with the &lt;code&gt;methods&lt;/code&gt; array of the class and the second with the object&amp;rsquo;s unique ID. (We will see below what the &lt;code&gt;_opt&lt;/code&gt; part is about.)&lt;/p&gt; 
&lt;b&gt;Method calls&lt;/b&gt; 
&lt;p&gt;A public method call:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;291546447&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;where &lt;code&gt;send&lt;/code&gt; is a built-in lambda term. The number is the method label. To understand how the method is applied we have to go a little deeper. In &lt;code&gt;bytegen.ml&lt;/code&gt; there is a case for &lt;code&gt;Lsend&lt;/code&gt; which generates the &lt;code&gt;Kgetpubmet&lt;/code&gt; bytecode instruction to find the method function; the function is then applied like any other function. Next we look to the &lt;code&gt;GETPUBMET&lt;/code&gt; case in &lt;code&gt;interp.c&lt;/code&gt; to see how public methods are looked up in the &lt;code&gt;methods&lt;/code&gt; block (stored in the first field of the object).&lt;/p&gt; 
 
&lt;p&gt;A couple details about &lt;code&gt;methods&lt;/code&gt; we didn&amp;rsquo;t cover before: The first field contains the number of public methods. The second contains a bitmask used for method caching&amp;mdash;briefly, it is enough bits to store offsets into &lt;code&gt;methods&lt;/code&gt;. The rest of the block is method functions and labels as above, padded out so that the range of an offset masked by the bitmask does not overflow the block.&lt;/p&gt; 
 
&lt;p&gt;Returning to &lt;code&gt;GETPUBMET&lt;/code&gt;, we first check to see if the method cache for this call site is valid. The method cache is an extra word at each call site which stores an offset into &lt;code&gt;methods&lt;/code&gt; (but may be garbage&amp;mdash;masking it takes care of this). If the method label at this offset matches the label we&amp;rsquo;re looking for, the associated method function is returned. Otherwise, we binary search &lt;code&gt;methods&lt;/code&gt; to find the method label (methods are sorted in label order in &lt;code&gt;transclass.ml&lt;/code&gt;), then store the offset in the cache and return the associated method function.&lt;/p&gt; 
&lt;b&gt;Classes&lt;/b&gt; 
&lt;p&gt;A class definition:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_methods_variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GetVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|];&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
       &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_object_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is similar to the immediate object code, except that the class constructor takes the class table as an argument rather than constructing it itself, and the object constructor takes &lt;code&gt;self&lt;/code&gt; as an argument. We will see that class and object constructors are each chained up the inheritance hierarchy, and the tables / objects are passed up the chain. The &lt;code&gt;make_class&lt;/code&gt; call calls &lt;code&gt;create_table&lt;/code&gt; and &lt;code&gt;init_class&lt;/code&gt; in the same way we saw in the immediate object case, and returns a tuple, of which the first component is the object constructor. So the &lt;code&gt;new&lt;/code&gt; invocation calls the constructor.&lt;/p&gt; 
&lt;b&gt;Inheritance&lt;/b&gt; 
&lt;p&gt;A subclass definition:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_methods_variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_y&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inherits&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[||]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|];&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_object_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;obj_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;self'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_initializers_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_y&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub_init&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The subclass is connected to its superclass through &lt;code&gt;inherits&lt;/code&gt;, which calls the superclass constructor on the subclass (filling in &lt;code&gt;methods&lt;/code&gt; with the superclass methods) and returns the superclass object constructor (and some other stuff). In the subclass object constructor, the superclass object constructor is called. (This is why the object is created optionally&amp;mdash;the class on which &lt;code&gt;new&lt;/code&gt; is invoked actually allocates the object; further superclass constructors just initialize instance variables.) In addition, we run any initializers, since some superclass may have them.&lt;/p&gt; 
&lt;b&gt;Self- and super-calls&lt;/b&gt; 
&lt;p&gt;A class with a self-call:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;becomes:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GetVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;get_x5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendself&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Here &lt;code&gt;sendself&lt;/code&gt; is a form of &lt;code&gt;Lsend&lt;/code&gt; for self-calls, where we know the method slot at compile time. Instead of generating the &lt;code&gt;Kgetpubmet&lt;/code&gt; bytecode, it generates &lt;code&gt;Kgetmethod&lt;/code&gt;, which just does an array reference to find the method.&lt;/p&gt; 
 
&lt;p&gt;A class with a super-call:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;becomes:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inherits&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[||]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
    &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;move1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|];&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In this case, we are able to look up the actual function for the super-call in the class constructor (returned from &lt;code&gt;inherits&lt;/code&gt;), so the invocation is just a function application rather than a slot dereference.&lt;/p&gt; 
 
&lt;p&gt;I don&amp;rsquo;t totally understand why we don&amp;rsquo;t know the function for self calls. I think it is because the superclass constructor runs before the subclass constructor, so the slot is assigned (this happens before the class constructors are called) but the function hasn&amp;rsquo;t been filled in yet. Still it seems like the knot could somehow be tied at class construction time to avoid a runtime slot dereference.&lt;/p&gt; 
&lt;b&gt;ocamljs implementation&lt;/b&gt; 
&lt;p&gt;The main design goal is that we be able to call methods on ordinary Javascript objects with the OCaml method call syntax, simply by declaring a class type giving the signature of the object. So if you want to work with the browser DOM you can say:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getElementById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* and so on *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;for some appropriate &lt;code&gt;element&lt;/code&gt; type (see &lt;code&gt;src/dom/dom.mli&lt;/code&gt; in &lt;code&gt;ocamljs&lt;/code&gt; for a full definition), and say:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getElementById&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;to make the call.&lt;/p&gt; 
 
&lt;p&gt;These are always public method calls, so they use the &lt;code&gt;Lsend&lt;/code&gt; lambda form. We don&amp;rsquo;t want to do method label dispatch, since Javascript already has dispatch by name, so first off we need to carry the name rather than the label in &lt;code&gt;Lsend&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;We have seen how &lt;code&gt;self&lt;/code&gt; is passed as the first argument when methods are invoked. We can&amp;rsquo;t do that for an arbitrary Javascript function, but the function might use &lt;code&gt;this&lt;/code&gt;, so we need to be sure that &lt;code&gt;this&lt;/code&gt; points to the object.&lt;/p&gt; 
 
&lt;p&gt;There is no way to know at compile time whether a particular method invocation is on a regular Javascript object or an OCaml object. Maybe we could mark OCaml objects somehow and do a check at runtime, but I decided to stick with a single calling convention. So whatever OCaml objects compile to, they have to support the convention for regular Javascript objects&amp;mdash;&lt;code&gt;foo#bar&lt;/code&gt; compiles to &lt;code&gt;foo.bar&lt;/code&gt;, with &lt;code&gt;this&lt;/code&gt; set to &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;As we have seen, self-calls are compiled to a slot lookup rather than a name lookup, so we also need to support indexing into &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;So here&amp;rsquo;s the design: an OCaml object is represented by a Javascript object, with numbered slots containing the instance variables. There is a constructor for each class, with &lt;code&gt;prototype&lt;/code&gt; set up so each method is accessible by name, and the whole &lt;code&gt;methods&lt;/code&gt; block is accessible in a special field, so we can call by slot. (Since we don&amp;rsquo;t need method labels, &lt;code&gt;methods&lt;/code&gt; just holds functions.)&lt;/p&gt; 
 
&lt;p&gt;The calling convention passes &lt;code&gt;self&lt;/code&gt; in &lt;code&gt;this&lt;/code&gt;, so we bind a local &lt;code&gt;self&lt;/code&gt; variable to &lt;code&gt;this&lt;/code&gt; on entry to each method. It doesn&amp;rsquo;t work to say &lt;code&gt;this&lt;/code&gt; everywhere instead of &lt;code&gt;self&lt;/code&gt;, because &lt;code&gt;this&lt;/code&gt; in Javascript is a bit fragile. In particular, if you define and apply a local function (&lt;code&gt;ocamljs&lt;/code&gt; does this frequently), &lt;code&gt;this&lt;/code&gt; is null rather than the lexically-visible &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; 
 
&lt;p&gt;For &lt;code&gt;sendself&lt;/code&gt; we look up the function by slot in the special methods field. Finally, for super-calls, we know the function at class construction time. In this case the function is applied directly, but we need to take care to treat it as a method application rather than an ordinary function call, since the calling convention is different.&lt;/p&gt; 
&lt;b&gt;The bug&lt;/b&gt; 
&lt;p&gt;The OCaml compiler turns super-calls into function applications very early in compilation (during typechecking in &lt;code&gt;typecore.ml&lt;/code&gt;). There is no difference in calling convention for regular OCaml, so it doesn&amp;rsquo;t matter that later phases don&amp;rsquo;t know that these function applications are super-calls. But in our case we have to carry this information forward to the point where we generate Javascript (in &lt;code&gt;jsgen.ml&lt;/code&gt;). It is a little tricky without changing the &amp;ldquo;typedtree&amp;rdquo; intermediate language.&lt;/p&gt; 
 
&lt;p&gt;I had put in a hack to mark these applications with a special extra argument, and it worked fine for my test program, where the method had no arguments. I didn&amp;rsquo;t think through or test the case where the method has arguments though. I was able to fix it (I think!) with a different hack: super calls are compiled to self calls (that is, to &lt;code&gt;Texp_send&lt;/code&gt; with &lt;code&gt;Tmeth_val&lt;/code&gt;) but the identifier in &lt;code&gt;Tmeth_val&lt;/code&gt; is marked with an unused bit to indicate that it binds a function rather than a slot, so we don&amp;rsquo;t need to dereference it.&lt;/p&gt; 
&lt;hr/&gt;&lt;b&gt;Appendix: other features&lt;/b&gt; 
&lt;p&gt;It is interesting to see how the various features of the object system are implemented, but maybe not that interesting, so here they are as an appendix.&lt;/p&gt; 
&lt;b&gt;Constructor parameters&lt;/b&gt; 
&lt;p&gt;A class definition with a constructor parameter:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_init&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_object_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;So the constructor parameter in the surface syntax just turns into a constructor parameter internally. (There is a slightly funny interaction between constructor parameters and &lt;code&gt;let&lt;/code&gt;-bound expressions after &lt;code&gt;class&lt;/code&gt; but before &lt;code&gt;object&lt;/code&gt;: if there is no constructor parameter the &lt;code&gt;let&lt;/code&gt; is evaluated at class construction, but if there is a parameter it is evaluated at object construction, whether or not it depends on the parameter.)&lt;/p&gt; 
&lt;b&gt;Virtual methods and instance variables&lt;/b&gt; 
&lt;p&gt;A class definition with a virtual method:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_method_label&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_object_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Since a virtual class can&amp;rsquo;t be instantiated, there&amp;rsquo;s no need to create the class table with &lt;code&gt;make_class&lt;/code&gt;; we just return the tuple that represents the class, containing the class and object constructor. (I don&amp;rsquo;t understand the call to &lt;code&gt;get_method_label&lt;/code&gt;, since its value is unused; possibly it is called for its side effect, which is to register the method in the class table if it does not already exist.)&lt;/p&gt; 
 
&lt;p&gt;A subclass implementing the virtual method inherits from the virtual class in the usual way.&lt;/p&gt; 
 
&lt;p&gt;A class declaration with a virtual instance variable:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_point2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;becomes:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_methods_variables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Again, a subclass providing the instance variable inherits from the virtual class in the usual way. By the time &lt;code&gt;new_methods_variables&lt;/code&gt; is called in the superclass, the subclass has registered a slot for the variable.&lt;/p&gt; 
&lt;b&gt;Private methods&lt;/b&gt; 
&lt;p&gt;A class definition with a private method:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;compiles to:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_methods_variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_init&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Everything is the same except that the private method is not listed in the public methods of the class. Since a private method is callable only from code in which the class of the object is statically known, there is no need for dispatch or a method label. The private method functions are stored in &lt;code&gt;methods&lt;/code&gt; after the public methods and method labels.&lt;/p&gt; 
 
&lt;p&gt;If we expose a private method in a subclass:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;we get:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub_init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* as before *)&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;OO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;get_x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_sub_init&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Putting &lt;code&gt;&amp;quot;move&amp;quot;&lt;/code&gt; in the call to &lt;code&gt;make_class&lt;/code&gt; registers it as a public method, so later, when &lt;code&gt;set_method&lt;/code&gt; is called for &lt;code&gt;move&lt;/code&gt; in the superclass constructor, it puts the method and its label in &lt;code&gt;methods&lt;/code&gt; for dispatch.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/03/inside-ocaml-objects.html</id><title type="text">Inside OCaml objects</title><updated>2010-03-23T22:32:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2010/03/reading-camlp4-part-5-filters.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;Hey, long time no see!&lt;/p&gt; 
&lt;p&gt;It is high time to get back to Camlp4, so I would like to pick up the thread by covering Camlp4 &lt;em&gt;filters&lt;/em&gt;. We have previously considered the parsing and pretty-printing facilities of Camlp4 separately. But of course the most common way to use Camlp4 is as a front-end to &lt;code&gt;ocamlc&lt;/code&gt;, where it processes files by parsing them into an AST and pretty-printing them back to text (well, not quite&amp;mdash;we will see below how the AST is passed to &lt;code&gt;ocamlc&lt;/code&gt;). In between we can insert filters to transform the AST.&lt;/p&gt; 
&lt;b&gt;A simple filter&lt;/b&gt; 
&lt;p&gt;So let&amp;rsquo;s dive into an example: a filter for type definitions that generates &lt;code&gt;t_to_string&lt;/code&gt; and &lt;code&gt;t_of_string&lt;/code&gt; functions for a type &lt;code&gt;t&lt;/code&gt;, a little like Haskell&amp;rsquo;s &lt;code&gt;deriving Show, Read&lt;/code&gt;. To keep it simple we handle only variant types, and only those where all the arms have no data. Here goes:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AstFilters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AstFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AstFilters&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;In order to hook into Camlp4&amp;rsquo;s plugin mechanism we define the filter as a functor. By opening &lt;code&gt;AstFilters&lt;/code&gt; we get an &lt;code&gt;Ast&lt;/code&gt; module in scope. Unfortunately this is not the same &lt;code&gt;Ast&lt;/code&gt; we got previously from &lt;code&gt;Camlp4.PreCast&lt;/code&gt; (although it has the same signature) so all our code that uses &lt;code&gt;Ast&lt;/code&gt; (including all OCaml syntax quotations) needs to go inside the functor body.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; 
              &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctyp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; 
                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_ctyp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ors&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;to_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; 
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function filters &lt;code&gt;Ast.str_item&lt;/code&gt;s. (It is not actually recursive but we say &lt;code&gt;let rec&lt;/code&gt; so we can define helper functions afterward). If a &lt;code&gt;str_item&lt;/code&gt; has the right form we transform it by calling &lt;code&gt;to_of_string&lt;/code&gt;, otherwise we return it unchanged. We match a sum type definition, then extract the constructor names (provided that they have no data) into a string list. (Recall that a &lt;code&gt;TySum&lt;/code&gt; contains arms separated by &lt;code&gt;TyOr&lt;/code&gt;; the call to &lt;code&gt;list_of_ctyp&lt;/code&gt; converts that to a list of arms.)&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_of_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;For some reason, &lt;code&gt;&amp;lt;:str_item&amp;lt; $si$ &amp;gt;&amp;gt;&lt;/code&gt; wraps an extra &lt;code&gt;StSem&lt;/code&gt; / &lt;code&gt;StNil&lt;/code&gt; around &lt;code&gt;si&lt;/code&gt;, so in order to use the quotation syntax on the left-hand side of a pattern match we need to do the same wrapping.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_of_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_of_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$;;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$;;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$;;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This &lt;code&gt;str_item&lt;/code&gt; replaces the original one in the output, so we include the original one in additional to new ones containing the &lt;code&gt;t_to_string&lt;/code&gt; and &lt;code&gt;t_of_string&lt;/code&gt; functions.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_to_string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
          &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To convert a variant to a string, we match over its constructors and return the corresponding string.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_of_string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
          &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
       &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid_arg&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bad string&amp;quot;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;To convert a string to a variant, we match over the corresponding string for each constructor and return the constructor; we also need a catchall for strings that match no constructor. (What is this &lt;code&gt;tup&lt;/code&gt; and &lt;code&gt;patt&lt;/code&gt; business? A contrived bug which we will fix below.)&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;  &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
  &lt;span class=&quot;nn&quot;&gt;AstFilters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_str_item_filter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_of_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_str_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)$&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Now we register our filter function with Camlp4. The input &lt;code&gt;str_item&lt;/code&gt; may contain many &lt;code&gt;str_items&lt;/code&gt;s separated by &lt;code&gt;StSem&lt;/code&gt;, so we call &lt;code&gt;list_of_str_item&lt;/code&gt; to get a list of individuals.&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;to_of_string&amp;quot;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Camlp4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AstFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Finally we register the plugin with Camlp4. The functor application is just for its side effect, so the plugin is registered when its &lt;code&gt;.cmo&lt;/code&gt; is loaded. We can compile the plugin with&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ocamlfind ocamlc -package camlp4.quotations.o -syntax camlp4o &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; 
  -c to_of_string.ml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;and run it on a file (containing &lt;code&gt;type t = Foo | Bar | Baz&lt;/code&gt; or something) with&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;camlp4o to_of_string.cmo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;.ml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt;&lt;b&gt;Ocamlc's AST&lt;/b&gt; 
&lt;p&gt;Looks pretty good, right? But something goes wrong when we try to use our plugin as a frontend for &lt;code&gt;ocamlc&lt;/code&gt;:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ocamlc -pp &lt;span class=&quot;s1&quot;&gt;'camlp4o ./to_of_string.cmo'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;.ml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;We get a preprocessor error, &amp;ldquo;singleton tuple pattern&amp;rdquo;. It turns out that Camlp4 passes the processed AST to &lt;code&gt;ocamlc&lt;/code&gt; not by pretty-printing it to text, but by converting it to the AST type that &lt;code&gt;ocamlc&lt;/code&gt; uses and marshalling it. This saves the time of reparsing it, and also passes along correct file locations (compare to &lt;code&gt;cpp&lt;/code&gt;&amp;rsquo;s &lt;code&gt;#line&lt;/code&gt; directives). However, as we have seen, the Camlp4 AST is pretty loose. When converting to an &lt;code&gt;ocamlc&lt;/code&gt; AST, Camlp4 does some validity checks on the tree. What can be confusing is that an AST that fails these checks may look fine when pretty-printed.&lt;/p&gt; 
&lt;p&gt;Here the culprit is the line&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;       &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;which produces an invalid pattern consisting of a one-item tuple. When pretty-printed, though, the &lt;code&gt;tup&lt;/code&gt; just turns into an extra set of parentheses, which &lt;code&gt;ocamlc&lt;/code&gt; doesn&amp;rsquo;t mind. What we wanted was&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;       &lt;span class=&quot;o&quot;&gt;$`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;This is a contrived example, but this kind of error is easy to make, and can be hard to debug, because looking at the pretty-printed output doesn&amp;rsquo;t tell you what&amp;rsquo;s wrong. One tactic is to run your code in the toplevel, which will print the constructors of the AST as usual. Another is to use a filter that comes with Camlp4 to &amp;ldquo;lift&amp;rdquo; the AST&amp;mdash;that is, to generate the AST representing the original AST! Maybe it is easier to try it than to explain it:&lt;/p&gt; 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;camlp4o to_of_string.cmo -filter Camlp4AstLifter &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;.ml
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Now compare the result to the tree you get back from Camlp4&amp;rsquo;s parser for the code you &lt;em&gt;meant&lt;/em&gt; to write, and you can probably spot your mistake.&lt;/p&gt; 
&lt;p&gt;(If you tried to redirect the &lt;code&gt;camlp4o&lt;/code&gt; command to a file or pipe it through &lt;code&gt;less&lt;/code&gt; you got some line noise&amp;mdash;this is the marshalled &lt;code&gt;ocamlc&lt;/code&gt; AST. By default Camlp4 checks whether its output is a TTY; if so it calls the pretty-printer, if not the &lt;code&gt;ocamlc&lt;/code&gt; AST marshaller. To override this use the &lt;code&gt;-printer o&lt;/code&gt; option, or &lt;code&gt;-printer r&lt;/code&gt; for revised syntax.)&lt;/p&gt; 
&lt;b&gt;Other builtin filters&lt;/b&gt; 
&lt;p&gt;This &lt;code&gt;Camlp4AstLifter&lt;/code&gt; is pretty useful. What else comes with Camlp4? There are several other filters in &lt;code&gt;camlp4/Camlp4Filters&lt;/code&gt; which you can call with &lt;code&gt;-filter&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4FoldGenerator&lt;/code&gt; generates visitor classes from datatypes. Try putting &lt;code&gt;class x = Camlp4MapGenerator.generated&lt;/code&gt; after a type definition. The idea is that you can override methods of the visitor so you can do some transformation on a tree without having to write the boilerplate to walk the parts you don&amp;rsquo;t care about. In fact, this filter is used as part of the Camlp4 bootstrap to generate vistors for the AST; you can see the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; classes in &lt;code&gt;camlp4/Camlp4/Sig.ml&lt;/code&gt;.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4MetaGenerator&lt;/code&gt; generates lifting functions from a type definition&amp;mdash;these functions are what &lt;code&gt;Camlp4AstLifter&lt;/code&gt; uses to lift the AST, and it&amp;rsquo;s also how quotations are implemented. I&amp;rsquo;m planning to cover how to implement quotations / antiquotations (for a different language) in a future post, and &lt;code&gt;Camlp4MetaGenerator&lt;/code&gt; will be crucial.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4LocationStripper&lt;/code&gt; replaces all the locations in an AST with &lt;code&gt;Loc.ghost&lt;/code&gt;. I don&amp;rsquo;t know what this is for, but it might be useful if you wanted to compare two ASTs and be insensitive to their locations.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4Profiler&lt;/code&gt; inserts profiling code, in the form of function call counts. I haven&amp;rsquo;t tried it, and I&amp;rsquo;m not sure when you would want it in preference to gprof.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4TrashRemover&lt;/code&gt; just filters out a module called &lt;code&gt;Camlp4Trash&lt;/code&gt;. Such a module may be found in &lt;code&gt;camlp4/Camlp4/Struct/Camlp4Ast.mlast&lt;/code&gt;; I think the idea is that the module is there in order to generate some stuff, but the module itself is not needed.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4MapGenerator&lt;/code&gt; has been subsumed by &lt;code&gt;Camlp4FoldGenerator&lt;/code&gt;.&lt;/p&gt; 
&lt;/li&gt; 
&lt;li&gt; 
&lt;p&gt;&lt;code&gt;Camlp4ExceptionTracer&lt;/code&gt; seems to be a special-purpose tool to help debug Camlp4.&lt;/p&gt; 
&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;OK, maybe not too much useful stuff here, but it is interesting to work out how Camlp4 is bootstrapped.&lt;/p&gt; 
&lt;p&gt;I think next time I will get into Camlp4&amp;rsquo;s extensible parsers, on the way toward syntax extensions.&lt;/p&gt; 
&lt;b&gt;Colophon&lt;/b&gt; 
&lt;p&gt;I wrote my previous posts in raw HTML, with highlighted code generated from a hightlighted Emacs buffer by &lt;a href=&quot;http://fly.cc.fer.hr/~hniksic/emacs/htmlize.el&quot;&gt;htmlize.el&lt;/a&gt;. Iterating on this setup was unutterably painful. This post was written using &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;jekyll&lt;/a&gt; with a simple template to approximate the Blogspot formatting, mostly so I can check that lines of code aren&amp;rsquo;t too long. Jekyll is very nice: you can write text with &lt;a href=&quot;http://maruku.rubyforge.org/&quot;&gt;Markdown&lt;/a&gt;, and highlight code with &lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2010/03/reading-camlp4-part-5-filters.html</id><title type="text">Reading Camlp4, part 5: filters</title><updated>2010-03-03T02:09:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/05/lwt-and-concurrent-ml.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;Programming concurrent systems with threads and locks is famously, even fabulously, error-prone. With Lwt's cooperative threads you don't have to worry so much about protecting data structures against concurrent modification, since your code runs atomically between &lt;code&gt;bind&lt;/code&gt;s. Still, the standard concurrency primitives (mutexes, condition variables) are sometimes useful; but using them with Lwt is not much less painful than with preemptive threads. In this post I want to explore the combination of Lwt with the concurrency primitives of &lt;a href=&quot;http://cml.cs.uchicago.edu/&quot;&gt;Concurrent ML&lt;/a&gt;. I hope to convince you that CML's primitives are easier to use, and a good match for Lwt.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;Blocking queues in Lwt&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;I got started with Lwt when I was writing a work queue (as an Ocamlnet RPC service using &lt;a href=&quot;http://code.google.com/p/orpc2/&quot;&gt;orpc&lt;/a&gt;). The server keeps a queue of jobs, and workers poll for a task via RPC. An RPC request turns into an Lwt thread; all these threads share the queue. If there's no job in the queue, a request blocks until one is available. So I needed a blocking queue, with the following signature:&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;create &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;add &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a Lwt.t&lt;/span&gt;
&lt;/pre&gt;The queue is unbounded, so you can &lt;code&gt;add&lt;/code&gt; without blocking, but a &lt;code&gt;take&lt;/code&gt; may block. (It's nice how in Lwt the possibility of blocking is revealed in the type). Here's the implementation: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;htmlize-variable-name&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex.t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-variable-name&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition.t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-variable-name&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a Queue.t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;{&lt;/span&gt;
  m &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex&lt;/span&gt;.create &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;();&lt;/span&gt;
  c &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.create &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;();&lt;/span&gt;
  q &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.create &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;A queue is made up of a regular OCaml queue, a condition variable (signaled when there's something in the queue), and a mutex for use with the condition variable. (The &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/src/lwt-equeue/lwt_condition.ml&quot;&gt;&lt;code&gt;Lwt_condition&lt;/code&gt;&lt;/a&gt; module is based on the &lt;code&gt;Condition&lt;/code&gt; module of the standard OCaml threads library.) &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; e t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.add e t.q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.signal t.c&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex&lt;/span&gt;.lock t.m &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.is_empty t.q
  &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.wait t.c t.m
  &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;e &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.take t.q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex&lt;/span&gt;.unlock t.m&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  e
&lt;/pre&gt;Since Lwt threads are cooperative we don't need to worry about concurrent access to the underlying queue. The role of the mutex here is only to ensure that when a thread blocked on the condition gets signaled, another thread can't take the element first.&lt;br/&gt;
&lt;b&gt;Timeouts?&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;What if there are no entries in the queue for a while? Within a single process, no big deal, the thread can keep waiting forever. That doesn't seem like a good idea over a network connection; we should time out at some point and return a response indicating that no task is available.  Here is a first attempt at taking an element from the queue with a timeout: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.choose &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_queue&lt;/span&gt;.take q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_unix&lt;/span&gt;.sleep timeout &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.fail &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;Failure &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;The &lt;code&gt;Lwt.choose&lt;/code&gt; function &amp;quot;behaves as the first thread [...] to terminate&amp;quot;. However, the other threads are still running after the first one terminates. It doesn't matter if the &lt;code&gt;sleep&lt;/code&gt; is still running after the &lt;code&gt;take&lt;/code&gt; completes, but if the &lt;code&gt;sleep&lt;/code&gt; finishes first, then the &lt;code&gt;take&lt;/code&gt; thread is still waiting to take an element from the queue. When an element becomes available, this thread takes it, and drops it on the floor (since the &lt;code&gt;choose&lt;/code&gt; has already finished). And in general this sort of thing can happen whenever a thread you &lt;code&gt;choose&lt;/code&gt; between has some effect; the effect still happens even if the thread is not chosen.  A thread can block on only one condition at a time. In order to &lt;code&gt;take&lt;/code&gt; an element with a timeout, we're forced to build timeouts into the queue, so we can get at the queue's condition variable. We add an optional argument to &lt;code&gt;take&lt;/code&gt;: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;float &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a t &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.t
&lt;/pre&gt;and modify the implementation: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;?(&lt;/span&gt;timeout&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=(-&lt;/span&gt;1.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;))&lt;/span&gt; t &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;timed_out &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; timeout &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;=&lt;/span&gt; 0.
  &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.ignore_result
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Lwt_unix&lt;/span&gt;.sleep timeout &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
        timed_out &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;htmlize-constant&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.broadcast t.c&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex&lt;/span&gt;.lock t.m &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;while_empty&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;!&lt;/span&gt;timed_out &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.is_empty t.q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-constant&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.wait t.c t.m &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; while_empty &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    while_empty &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;not_empty &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;e &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; not_empty &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; Some &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.take t.q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_mutex&lt;/span&gt;.unlock t.m&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_condition&lt;/span&gt;.signal t.c&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; e &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt; Some e &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return e &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.fail Timeout
&lt;/pre&gt;In an auxilliary thread we wait for the timeout, then set a timeout flag for the main thread and broadcast the condition. It's important to use &lt;code&gt;broadcast&lt;/code&gt;, which signals all waiting threads, instead of &lt;code&gt;signal&lt;/code&gt;, which signals an arbitrary waiter, in order to be sure that we wake up the timed-out thread. But now it's possible for a thread to be signaled when neither the timeout has expired nor an element is available, so we must loop around waiting on the condition. And a &lt;code&gt;signal&lt;/code&gt; from adding an element may be sent to a timed-out thread, so we need to &lt;code&gt;signal&lt;/code&gt; another thread to avoid forgetting the added element.  This is not very nice. First, the interface isn't modular. We've hard-coded a particular pair of events to wait for; what if we wanted to wait on two queues at once, or a queue and network socket? Second, the implementation is tricky to understand. We have to reason about how multiple threads, each potentially at a different point in the program, interact with the shared state.&lt;br/&gt;
&lt;b&gt;Lwt_event&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Concurrent ML provides a different set of primitives. It makes the notion of an &lt;em&gt;event&lt;/em&gt;--something that may happen in the future, like a timeout or a condition becoming true--into an explicit datatype, so you can return it from a function, store it in a data structure, and so on: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event&lt;/span&gt;
&lt;/pre&gt;When an event occurs, it carries a value of type &lt;code&gt;'a&lt;/code&gt;. The act of &lt;em&gt;synchronizing&lt;/em&gt; on (waiting for) an event is a separate function: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;sync &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a Lwt.t&lt;/span&gt;
&lt;/pre&gt;Of course it returns &lt;code&gt;Lwt.t&lt;/code&gt; since it may block; the returned value is the value of the event occurrence. You can make an event that occurs when any of several events occurs, so a thread can wait on several events at once: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;choose &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event list &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event&lt;/span&gt;
&lt;/pre&gt;When one event occurs, the thread is no longer waiting on the other events (in contrast to &lt;code&gt;Lwt.choose&lt;/code&gt;). Since synchronizing on a choice of events is a very common pattern, there's also &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;select &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event list &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a Lwt.t&lt;/span&gt;
&lt;/pre&gt;which is the same as &lt;code&gt;sync&lt;/code&gt; of &lt;code&gt;choose&lt;/code&gt;. Its meaning is very similar to &lt;code&gt;Unix.select&lt;/code&gt;: block until one of the events occurs.  A &lt;em&gt;channel&lt;/em&gt; is sort of like a zero-length queue: both reader and writer must synchronize on the channel at the same time to pass a value from one to the other: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;new_channel &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;send &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit event&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;receive &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event&lt;/span&gt;
&lt;/pre&gt;Both &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;receive&lt;/code&gt; are blocking operations, so they return &lt;code&gt;event&lt;/code&gt;s. Finally, there's a way to map the value of an event when it occurs: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;wrap &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;('&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b Lwt.t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b event&lt;/span&gt;
&lt;/pre&gt;The event &lt;code&gt;wrap e f&lt;/code&gt; occurs when &lt;code&gt;e&lt;/code&gt; occurs, with value &lt;code&gt;f v&lt;/code&gt; (where &lt;code&gt;v&lt;/code&gt; is the value returned by the occurrence of &lt;code&gt;e&lt;/code&gt;).  (Here's the full &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/src/lwt-equeue/lwt_event.mli&quot;&gt;interface&lt;/a&gt; of &lt;code&gt;Lwt_event&lt;/code&gt;. There are events for Unix file descriptor operations in &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/src/lwt-equeue/lwt_event_unix.mli&quot;&gt;&lt;code&gt;Lwt_event_unix&lt;/code&gt;&lt;/a&gt;.)&lt;br/&gt;
&lt;b&gt;Blocking queues with Lwt_event&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Now I want to reimplement blocking queues using these new primitives: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;create &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;add &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit Lwt.t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a Lwt_event.event&lt;/span&gt;
&lt;/pre&gt;The interface is similar. As before, &lt;code&gt;take&lt;/code&gt; is a blocking operation, but it returns an &lt;code&gt;event&lt;/code&gt; instead of &lt;code&gt;Lwt.t&lt;/code&gt; so we can combine it with other events using &lt;code&gt;choose&lt;/code&gt;. The new &lt;code&gt;add&lt;/code&gt; returns &lt;code&gt;Lwt.t&lt;/code&gt;, but this is an artifact: a thread calling &lt;code&gt;add&lt;/code&gt; won't actually block (we'll see why below). For this reason, &lt;code&gt;add&lt;/code&gt; doesn't need to return &lt;code&gt;event&lt;/code&gt;. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;htmlize-variable-name&quot;&gt;inch&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-variable-name&quot;&gt;ouch&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a channel&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; e t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; sync &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;send t.inch e&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; receive t.ouch
&lt;/pre&gt;A queue consists of two channels, one for adding items into the queue and one for taking them out. The functions implementing the external interface just send and receive on these channels. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;q &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.create &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;inch &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; new_channel &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;ouch &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; new_channel &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;To &lt;code&gt;create&lt;/code&gt; a queue, we make the channels and the underlying queue (we don't need to store it in the record; it will be hidden in a closure). We're going to have an internal thread to manage the queue; next we need some events for it to interact with the channels:&lt;br/&gt;
&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;add &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    wrap &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;receive inch&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;e &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.add e q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    wrap &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;send ouch &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.peek q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.take q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;Here &lt;code&gt;add&lt;/code&gt; receives an element from the input channel and adds it to the underlying queue; and &lt;code&gt;take&lt;/code&gt; sends the top element of the queue on the output channel. Keep in mind that these events don't occur (and the function passed to &lt;code&gt;wrap&lt;/code&gt; is not executed) until there's actually a thread synchronizing on the complementary event on the channel. We call &lt;code&gt;Queue.peek&lt;/code&gt; in &lt;code&gt;take&lt;/code&gt; because at the point that we offer to send an element on a channel, we have to come up with the element; but we don't want to take it off the underlying queue, because there might never be a thread synchronizing on the complementary event on the channel. (Maybe there should be a version of &lt;code&gt;send&lt;/code&gt; that takes a thunk?)&lt;br/&gt;
&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;evs &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Queue&lt;/span&gt;.is_empty q
      &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; add &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; add&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; take &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    select evs &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loop &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;loop &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;{&lt;/span&gt; inch &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; inch&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; ouch &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; ouch &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;Here's the internal thread. If the queue is empty all we can do is wait for an element to be added; if not, we wait for an element to be added or taken. Now we can see why the &lt;code&gt;add&lt;/code&gt; function of the external queue interface can't block: we always &lt;code&gt;select&lt;/code&gt; the &lt;code&gt;add&lt;/code&gt; event, so as soon as another thread wants to send an element on the input channel, the internal thread is available to receive it.&lt;br/&gt;
&lt;b&gt;Timeouts!&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Now, the punchline: we didn't build timeouts into the queue; still we can select between taking an element or timing out: &lt;/p&gt;&lt;pre&gt;select &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Lwt_event_queue&lt;/span&gt;.take q&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  wrap &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Lwt_event_unix&lt;/span&gt;.sleep timeout&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.fail &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;Failure &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;Much better.  Moreover, I think this queue implementation is easier to reason about (once you're comfortable with the CML primitives), even compared to our first version (without timeouts). The difference is that only the internal thread touches the state of the queue--in fact it's the only thread for which the state is even in scope! We don't need to worry conditions and signaling; we just offer an element on the output channel when one is available. This is only an inkling of the power of CML; the book &lt;a href=&quot;http://www.amazon.com/dp/0521714729&quot;&gt;Concurrent Programming in ML&lt;/a&gt; contains much more, including some large examples.
&lt;p&gt;Why is this style of concurrency not more common? I think there are several reasons: First, idiomatic CML programming requires very lightweight threads (you don't want a native thread, or even an OCaml bytecode thread, for every queue). Second, the &lt;code&gt;wrap&lt;/code&gt; combinator, essential for building complex events, requires higher-order functions, so there's no similarly concise translation into, say, Java. Finally, I think it's not widely appreciated that concurrent programming is useful without &lt;em&gt;parallel&lt;/em&gt; programming. The mutex approach works fine for parallel programming, while CML has &lt;a href=&quot;http://manticore.cs.uchicago.edu/papers/submitted09-parallel-cml.pdf&quot;&gt;only&lt;/a&gt; &lt;a href=&quot;http://clip.dia.fi.upm.es/Conferences/DAMP08/papers/7.pdf&quot;&gt;recently&lt;/a&gt; been implemented in a parallel setting. None of these reasons applies to Lwt programming; Concurrent ML is a good fit with Lwt.&lt;/p&gt;
&lt;p&gt;In an &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/02/equeue-compared-to-lwt.html&quot;&gt;earlier post&lt;/a&gt; I asserted (without much to back it up) that Ocamlnet's Equeue gives better low-level control over blocking than Lwt. The &lt;code&gt;Lwt_event&lt;/code&gt; and &lt;code&gt;Lwt_event_unix&lt;/code&gt; modules provide a similar degree of control, with a higher-level interface.&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/05/lwt-and-concurrent-ml.html</id><title type="text">Lwt and Concurrent ML</title><updated>2009-05-28T03:28:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-3-functional.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;In &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-2-rpc-over-http.html&quot;&gt;part 2&lt;/a&gt; of this series, we made a simple Sudoku game and connected it to a game server. In this final installment I want to revisit how we check that a board satisfies the Sudoku rules. There's a small change to the UI: instead of a &amp;quot;Check&amp;quot; button, the board is checked continuously as the player enters numbers; any conflicts are highlighted as before. Here's the &lt;a href=&quot;http://froc.googlecode.com/svn/examples/froc-dom/sudoku/index.html&quot;&gt;final result&lt;/a&gt;.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Let's review how we want checking to work: a cell is colored red if any other cell in the same row, column, or square (outlined in bold) contains the same number; otherwise the cell is colored white. Now take another look at the &lt;code&gt;check_board&lt;/code&gt; function from &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html&quot;&gt;part 1&lt;/a&gt;. Is it obvious that this code meets the specification? The function is essentially stateful, clearing all the cell colors then setting them red when it discovers a conflict. In fact, I had a bug in it related to state--I was clearing the background color in the &lt;code&gt;None&lt;/code&gt; arm of &lt;code&gt;check_set&lt;/code&gt;, so each checked constraint would overwrite the highlighting of the previous ones where they overlapped.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;It would be easier to convince ourselves that we'd gotten it right if the code looked more like the specification. What we want is a function that maps each cell and its &amp;quot;adjacent&amp;quot; cells (the ones in the same row, column, or square) to a boolean (true if the cell is highlighted). Abstracting from the DOM details, suppose a cell is an &lt;code&gt;int option&lt;/code&gt; and we have a function &lt;code&gt;adjacents i j&lt;/code&gt; that returns a list of cells adjacent to the cell at (i, j). Then the check function is just: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;highlighted&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; cell i j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  cell &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;List&lt;/span&gt;.mem cell &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;adjacents i j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So how do we hook this function into the UI? We could just call it for every cell, every time we get a change event for some cell. That seems like a lot of needless computation, since almost all the cells haven't changed. On the other hand, if we manually keep track of which cells might be affected by a change, our code is no longer obviously correct. It would be nice to have some kind of incremental update, like a spreadsheet.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;This is where &lt;em&gt;functional reactive programming&lt;/em&gt; comes in. The main idea is to write functions over &lt;em&gt;behaviors&lt;/em&gt;, or values that can change. If you change an input to a function, the output (another behavior) is automatically recomputed. The dependency bookkeeping is taken care of by the framework; we'll use the &lt;a href=&quot;http://code.google.com/p/froc/&quot;&gt;froc&lt;/a&gt; library.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;It turns out to be convenient to give behaviors a monadic interface. So we have a type &lt;code&gt;'a behavior&lt;/code&gt;; we turn a constant into a behavior with &lt;code&gt;return&lt;/code&gt;, and we use a behavior with &lt;code&gt;bind&lt;/code&gt;. We saw in &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-2-rpc-over-http.html&quot;&gt;part 2&lt;/a&gt; that the monadic interface of Lwt enables blocking: since &lt;code&gt;bind&lt;/code&gt; takes a function to apply to the result of a thread, the framework can wait until the thread has completed before applying it. With froc, the framework applies the function passed to &lt;code&gt;bind&lt;/code&gt; whenever the bound behavior changes. With both Lwt and froc you can think of a computation as a collection of dependencies rather than a linear sequence.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;There's another important piece of functional reactive programming: events. An &lt;code&gt;'a event&lt;/code&gt; in froc is a channel over which values of type &lt;code&gt;'a&lt;/code&gt; can be passed. You can connect froc events to DOM events to interact with the stateful world of the UI. The library includes several functions for working with events (e.g. mapping a function over an event stream) and in particular for mediating between behaviors and events, such as: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;hold &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a event &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a behavior
&lt;/pre&gt;which takes an initial value and an event channel, and returns a behavior that begins at the initial value then changes to each successive value that's sent on the channel, and &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;changes &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a behavior &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a event&lt;/span&gt;
&lt;/pre&gt;which takes a behavior and returns an event channel that has a value sent on it whenever the behavior changes.&lt;br/&gt;
&lt;p&gt;This all probably seems a bit abstract, so let's dive into the example code: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; Dom
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;d &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D&lt;/span&gt;.document

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; Froc
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Fd &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; Froc_dom
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/span&gt;
&lt;/pre&gt;We set up some constants we'll need below. The &lt;code&gt;Froc&lt;/code&gt; module contains the core FRP implementation, not tied to a particular UI toolkit; &lt;code&gt;Froc_dom&lt;/code&gt; contains functions that are specific to DOM programming (with the &lt;code&gt;Dom&lt;/code&gt; module we saw before). &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_cell&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;v &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;ev &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.make_event &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.hold v ev &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; v &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.send ev v &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; set&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;notify_e&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; e f &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.notify_e e &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
   &lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.Fail _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.Value v &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; f v&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;These are a couple of functions that really should be part of froc (and will be in the next version). The first makes a cell, which is a behavior (the &lt;code&gt;hold&lt;/code&gt; of an event channel) along with a function to set its value (which sends the value on the channel). It's like a &lt;code&gt;ref&lt;/code&gt; cell, but we can &lt;code&gt;bind&lt;/code&gt; it so changes are propagated. We'll have one of these for each square on the Sudoku board, but it is a generally useful construct.&lt;br/&gt;
&lt;p&gt;The second papers over a design error in the froc API: like with Lwt threads, a froc behavior or event value can be either a normal value or an exception (together, a &lt;em&gt;result&lt;/em&gt;). The &lt;code&gt;notify_e&lt;/code&gt; function sets a callback that's called when an event arrives on the channel, but most of the time we just want to ignore exceptional events. &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;attach_input_value&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i b &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  notify_e &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.changes b&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;v &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_value v&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;attach_backgroundColor&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; e b &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  notify_e
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.changes b&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;v &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; e&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_backgroundColor v&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;These are functions that should be part of &lt;code&gt;Froc_dom&lt;/code&gt;. To &lt;em&gt;attach&lt;/em&gt; a DOM element to a behavior means to update the DOM element whenever the behavior changes. But there are lots of ways to update a DOM element, and &lt;code&gt;Froc_dom&lt;/code&gt; doesn't include them all. (This design contrasts with that of &lt;a href=&quot;http://www.flapjax-lang.org/&quot;&gt;Flapjax&lt;/a&gt;, where you work with behaviors whose value is an entire DOM element. It's certainly possible to do this in froc, but more tedious because of the types.) &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;check_enabled&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; set_check_enabled&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; make_cell &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;Now we're in the application code. The &lt;code&gt;check_enabled&lt;/code&gt; cell controls whether checking is turned on--we'll see below what this is for, as you may have noticed that there is no such switch in the actual UI. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_board&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_input&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;input &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D.input&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;setAttribute &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_size 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_maxLength 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;style &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_border &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_padding &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;0px&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; set&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; make_cell None &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    attach_input_value input
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;cell &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
       &lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.return &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; Some v &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;string_of_int v&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;ev &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.map
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
         &lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;  &lt;span class=&quot;htmlize-keyword&quot;&gt;as&lt;/span&gt; v &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            Some &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt; (&lt;/span&gt;int_of_string v&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; None&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Fd&lt;/span&gt;.input_value_e input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    notify_e ev set&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; set&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;Here we make the game board much as we did in &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html&quot;&gt;part 1&lt;/a&gt;. The main difference is that instead of working directly with DOM input nodes, we connect each input to a cell of type &lt;code&gt;int option&lt;/code&gt;. The &lt;code&gt;attach_input&lt;/code&gt; call sets the value of the DOM input node whenever the cell changes, and the &lt;code&gt;notify_e&lt;/code&gt; call sets the cell whenever the input node changes. (This doesn't loop, because &lt;code&gt;Fd.input_value_e&lt;/code&gt; makes an event stream from the &amp;quot;onchange&amp;quot; events of the input, and &amp;quot;onchange&amp;quot; events are only sent when the user changes the input, not when it's changed from Javascript.) We take the stream of &lt;code&gt;string&lt;/code&gt;s and map it into a stream of &lt;code&gt;int option&lt;/code&gt;s, validating the string as we go.&lt;br/&gt;
&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;rows &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
        make_input &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;adjacents&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;adj&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; j&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;||&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;or&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;or&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;/&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;/&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;/&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;/&lt;/span&gt; 3&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;adjs&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; j&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; l &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;',&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 9&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; l
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; adjs &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'+&lt;/span&gt;1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; 0 l
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;l &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
              &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; adj i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;
              &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; rows.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;')&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;')&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
                cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;::&lt;/span&gt;l
              &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; l &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
            adjs i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'+&lt;/span&gt;1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; l &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    adjs 0 0 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;We make the game board as a matrix of inputs as before, but now each element of the matrix contains a cell (an &lt;code&gt;int option behavior&lt;/code&gt;), the function to set that cell, and the actual DOM input element. Next we set up the rule-checking. The &lt;code&gt;adjacents&lt;/code&gt; function returns a list of cells adjacent to the cell at &lt;code&gt;(i, j)&lt;/code&gt; (adjacent in the sense we discussed above). All my bugs when I wrote this example were in this function, but it clearly embodies the specification we're trying to meet: a cell is adjacent to the current cell if it is not the same cell and is in the same row, column, or square. (The loop would be clearer if we had &lt;code&gt;Array.foldi&lt;/code&gt;.)&lt;br/&gt;
&lt;pre&gt;  &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iteri rows &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;i row &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iteri row &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; _&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; input&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;adjs &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; adjacents i j &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      attach_backgroundColor input
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;check_enabled &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
         &lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.return &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-constant&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.bindN adjs &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;adjs &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                cell &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;v &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; v &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;List&lt;/span&gt;.mem v adjs
                  &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.return &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;F&lt;/span&gt;.return &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;))));&lt;/span&gt;
&lt;/pre&gt;This is the functional reactive core of the program. For each square on the board we compute essentially the &lt;code&gt;highlighted&lt;/code&gt; function above, but in monadic form (the &lt;code&gt;bindN&lt;/code&gt; function binds a list of behaviors at once), and attach the result to the background color of the input node. Because the set of adjacent cells does not depend on the value of the cells, we can hoist its computation out of the reactive part so it won't be recomputed every time a cell changes (and since dependency on a behavior is captured in the type of a function, the fact that this typechecks tells us it is safe to do!).&lt;br/&gt;
&lt;p&gt;That's it. The rest of the program is almost the same as before. (Here's the &lt;a href=&quot;http://code.google.com/p/froc/source/browse/#svn/trunk/examples/froc-dom/sudoku&quot;&gt;full code&lt;/a&gt;.) The one important change has to do with &lt;code&gt;check_enabled&lt;/code&gt;. In the reaction to cell changes, we consult &lt;code&gt;check_enabled&lt;/code&gt;, returning the unhighlighted color when it's false. Since we do this before binding the cells, a change to a cell causes no recomputation when &lt;code&gt;check_enabled&lt;/code&gt; is false. So we turn off &lt;code&gt;check_enabled&lt;/code&gt; while loading a new game board, saving a lot of needless recomputation that otherwise makes it annoyingly slow.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;It's interesting to compare functional reactive programming to the model-view-controller pattern. The point of MVC is to separate the changeable state (the model) from how it is displayed (the view). Although MVC is typically implemented with change events and state update, a view behaves as a pure function of the state (or can be made so by making the state of UI components explicit). So you could think of FRP as &amp;quot;automatic&amp;quot; MVC: you just write down dependencies (with &lt;code&gt;bind&lt;/code&gt;) and the framework manages events and state update. For small examples this may not seem like a big win, but FRP takes care of some complexities that tend to swamp MVC apps: managing dynamic dependencies (registering and unregistering event handlers in response to events) and maintaining coherence (i.e. functional behavior) over different event orders.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;I haven't yet written a serious application with froc, but so far I think it is awesome!&lt;br/&gt;
&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-3-functional.html</id><title type="text">Sudoku in ocamljs, part 3: functional reactive programming</title><updated>2009-05-12T04:51:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-2-rpc-over-http.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html&quot;&gt;Last time&lt;/a&gt; we made a simple user interface for Sudoku with the &lt;code&gt;Dom&lt;/code&gt; module of &lt;a href=&quot;http://code.google.com/p/ocamljs&quot;&gt;ocamljs&lt;/a&gt;. It isn't a very fun game though since there are no pre-filled numbers to constrain the board. So let's add a button to get a new game board; here's the &lt;a href=&quot;http://orpc2.googlecode.com/svn/examples/sudoku/index.html&quot;&gt;final result&lt;/a&gt;.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;I don't know much about &lt;a href=&quot;http://en.wikipedia.org/wiki/Algorithmics_of_sudoku&quot;&gt;generating Sudoku boards&lt;/a&gt;, but it seems like it might be slow to do it in the browser, so we'll do it on the server, and communicate to the server with OCaml function calls using the RPC over HTTP support in &lt;a href=&quot;http://code.google.com/p/orpc2&quot;&gt;orpc&lt;/a&gt;.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;The 5-minute monad&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;But first I'm going to give you a brief introduction to &lt;em&gt;monads&lt;/em&gt; (?!). Bear with me until I can explain why we need monads for Sudoku, or skip it if this is old hat to you. We'll transform the following fragment into monadic form: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 7 &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
bar &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;foo &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;First put it in &lt;em&gt;named form&lt;/em&gt; by &lt;code&gt;let&lt;/code&gt;-binding the result of the nested function application: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 7 &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;f &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; foo &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
bar f
&lt;/pre&gt;Then introduce two new functions, &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; x
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; x f &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; f x

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; return 7 &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
bind &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;foo &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;f &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
  bar f&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;These functions are a bit mysterious (although the name &amp;quot;bind&amp;quot; is suggestive of &lt;code&gt;let&lt;/code&gt;-binding), but we haven't changed the meaning of the fragment. Next we would like to enforce that the only way to use the result of &lt;code&gt;foo ()&lt;/code&gt; is by calling &lt;code&gt;bind&lt;/code&gt;. We can do that with an abstract type: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;bind  &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;('&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b t&lt;/span&gt;
&lt;/pre&gt;Taking &lt;code&gt;type 'a t = 'a&lt;/code&gt;, the definitions of &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; match this signature. So what have we accomplished? We've abstracted out the notion of &lt;em&gt;using the result of a computation&lt;/em&gt;. It turns out that there are many useful structures matching this signature (and satisfying &lt;a href=&quot;http://www.google.com/search?q=monad%20laws&quot;&gt;some equations&lt;/a&gt;), called monads. It's convenient that they all match the same signature, in part because we can mechanically convert ordinary code into monadic code, as we've done here, or even use a &lt;a href=&quot;http://www.cas.mcmaster.ca/~carette/pa_monad/&quot;&gt;syntax extension&lt;/a&gt; to do it for us.&lt;br/&gt;
&lt;b&gt;Lightweight threads in Javascript&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;One such useful structure is the &lt;a href=&quot;http://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; library for cooperative threads. You can write Lwt-threaded code by taking ordinary threaded code and converting it to monadic style. In Lwt, &lt;code&gt;'a t&lt;/code&gt; is the type of threads returning &lt;code&gt;'a&lt;/code&gt;. Then &lt;code&gt;bind t f&lt;/code&gt; calls &lt;code&gt;f&lt;/code&gt; on the value of the thread &lt;code&gt;t&lt;/code&gt; &lt;em&gt;once &lt;code&gt;t&lt;/code&gt; has finished&lt;/em&gt;, and &lt;code&gt;return x&lt;/code&gt; is an already-finished thread with value &lt;code&gt;x&lt;/code&gt;.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Lwt threads are cooperative: they run until they complete or block waiting on the result of another thread, but aren't ever preempted. It can be easier to reason about this kind of threading, because until you call &lt;code&gt;bind&lt;/code&gt;, there's no possibility of another thread disturbing any state you're working on.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Lwt threads are a great match for Javascript, which doesn't have preemptive threads (although plugins like &lt;a href=&quot;http://gears.google.com/&quot;&gt;Google Gears&lt;/a&gt; provide them), because they need no special support from the language except closures. Typically in Javascript you write a blocking computation as a series of callbacks. You're doing essentially the same thing with Lwt, but it's packaged up in a clean interface.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;Orpc for RPC over HTTP&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;The reason we care about threads in Javascript is that we want to make a blocking RPC call to the server to retrieve a Sudoku game board, without hanging the browser. We'll use orpc to generate stubs for the client and server. In the client the call returns an Lwt thread, so you need to call &lt;code&gt;bind&lt;/code&gt; to get the result. In the server it arrives as an ordinary procedure call.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;To use orpc you write down the signature of the RPC interface, in &lt;code&gt;Lwt&lt;/code&gt; and &lt;code&gt;Sync&lt;/code&gt; forms for the client and server. Orpc checks that the two forms are compatible, and generates the stubs. Here's our interface (&lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/examples/sudoku/proto.ml&quot;&gt;proto.ml&lt;/a&gt;): &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Sync &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;get_board &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; int option array array&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;get_board &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; int option array array Lwt.t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;The &lt;code&gt;get_board&lt;/code&gt; function returns a 9x9 array, each cell of which may contain &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Some k&lt;/code&gt; where &lt;code&gt;k&lt;/code&gt; is 1 to 9. We can't capture all these constraints in the type, but we get more static checking than if we were passing JSON or XML.&lt;br/&gt;
&lt;b&gt;Generating the board&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;On the &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/examples/sudoku/server.ml&quot;&gt;server&lt;/a&gt;, we implement a module that matches the &lt;code&gt;Sync&lt;/code&gt; signature. (You can see that I didn't actually implement any Sudoku-generating code, but took some fixed examples from Gnome Sudoku.) Then there's some boilerplate to set up a Netplex HTTP server and register the module at the &lt;code&gt;/sudoku&lt;/code&gt; path. It's pretty simple. The &lt;code&gt;Proto_js_srv&lt;/code&gt; module contains stubs generated by orpc from &lt;code&gt;proto.ml&lt;/code&gt;, and &lt;code&gt;Orpc_js_server&lt;/code&gt; is part of the orpc library.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;Using the board&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;The &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/examples/sudoku/sudoku.ml&quot;&gt;client&lt;/a&gt; is mostly unchanged from last time. There's a new button, &amp;quot;New game&amp;quot;, that makes the RPC call, then fills in the board from the result. &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/span&gt;
&lt;/pre&gt;The &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator is another name for &lt;code&gt;bind&lt;/code&gt;. If you aren't using &lt;a href=&quot;http://www.cas.mcmaster.ca/~carette/pa_monad/&quot;&gt;pa_monad&lt;/a&gt; (which we aren't here), it makes a sequence of &lt;code&gt;bind&lt;/code&gt;s easier to read. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Server &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;Proto_js_clnt&lt;/span&gt;.Lwt&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;with_client&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; f &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Orpc_js_client&lt;/span&gt;.create &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;/sudoku&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;This sets up the RPC interface, so calls on the &lt;code&gt;Server&lt;/code&gt; module become RPC calls to the server. The &lt;code&gt;Proto_js_client&lt;/code&gt; module contains stubs generated from &lt;code&gt;proto.ml&lt;/code&gt;, and &lt;code&gt;Orpc_js_client&lt;/code&gt; is part of the orpc library. (In the actual source you'll see that I faked this out in order to host the running example on Google Code--there's no way to run an OCaml server, so I randomly choose a canned response.) &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;get_board&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; rows _ &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  ignore
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Server&lt;/span&gt;.get_board &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;board &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 8 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 8 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; rows.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
          &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;style &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
          style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_backgroundColor &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; board.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_value &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
                cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_disabled &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; Some n &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_value &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;string_of_int n&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
                cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_disabled &lt;span class=&quot;htmlize-constant&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Lwt&lt;/span&gt;.return &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;This is the event handler for the &amp;quot;New game&amp;quot; button. We call &lt;code&gt;get_board&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; the result, then fill in the board. If there's a number in a cell we disable the input box so the player can't change it. Here's the &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/trunk/examples/sudoku&quot;&gt;full code&lt;/a&gt;.&lt;br/&gt;
&lt;p&gt;Doing AJAX programming with orpc and Lwt really shows off the power of compiling OCaml to Javascript. While &lt;a href=&quot;http://code.google.com/webtoolkit/&quot;&gt;Google Web Toolkit&lt;/a&gt; has a similar RPC mechanism (that generates stubs from Java interfaces), it's much clumsier to use, because you're still working at the level of callbacks rather than threads. Maybe you could translate Lwt to Java, but it would be painfully verbose without type inference.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;This monad stuff will come in handy again next time, when we'll revisit the problem of checking the Sudoku constraints on the board, using &lt;a href=&quot;http://code.google.com/p/froc&quot;&gt;froc&lt;/a&gt;.&lt;br/&gt;
&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-2-rpc-over-http.html</id><title type="text">Sudoku in ocamljs, part 2: RPC over HTTP</title><updated>2009-05-04T05:35:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;Let's make a Sudoku game with &lt;a href=&quot;http://code.google.com/p/ocamljs&quot;&gt;ocamljs&lt;/a&gt; and the &lt;a href=&quot;http://code.google.com/p/ocamljs/wiki/Dom&quot;&gt;&lt;code&gt;Dom&lt;/code&gt;&lt;/a&gt; library for programming the browser DOM. Like on the cooking shows, I have prepared the dish we're about to make beforehand; why don't you &lt;a href=&quot;http://ocamljs.googlecode.com/svn/examples/dom/sudoku/index.html&quot;&gt;taste it now&lt;/a&gt;? OK, it is not yet Sudoku, lacking the important ingredient of some starting numbers to guide the game--we'll come back to that next time. &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; Dom
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;d &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D&lt;/span&gt;.document
&lt;/pre&gt;We begin with some definitions. The &lt;code&gt;Dom&lt;/code&gt; module includes class types for much of the standard browser DOM, using the ocamljs facility for &lt;a href=&quot;http://code.google.com/p/ocamljs/wiki/Interfacing&quot;&gt;interfacing with Javascript objects&lt;/a&gt;. &lt;code&gt;Dom.document&lt;/code&gt; is the browser document object. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_board&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_input&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;input &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;D.input&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;setAttribute &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_size 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_maxLength 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;style &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_border &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_padding &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;0px&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;enforce_digit&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_value &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_value &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_onchange &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Ocamljs&lt;/span&gt;.jsfun enforce_digit&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    input &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;We construct the Sudoku board in several steps. First, we make an input box for each square. Notice that you can call DOM methods (e.g. &lt;code&gt;createElement&lt;/code&gt;) with OCaml object syntax. But what is the type of &lt;code&gt;createElement&lt;/code&gt;? The type of the object you get back depends on the tag name you pass in; OCaml has no type for that. So &lt;code&gt;createElement&lt;/code&gt; is declared to return &lt;code&gt;#element&lt;/code&gt; (that is, a subclass of &lt;code&gt;element&lt;/code&gt;). If you need only methods from &lt;code&gt;element&lt;/code&gt; then you usually don't need to ascribe a more-specific type, but in this case we need an &lt;code&gt;input&lt;/code&gt; node. (Static type checking with Javascript objects is therefore only advisory in some cases--if you ascribe the wrong type you can get a runtime error--but still better than nothing.)&lt;br/&gt;
&lt;p&gt;We next set some attributes, properties, and styles on the input box. Properties are manipulated with specially-named methods: &lt;code&gt;foo#_get_bar&lt;/code&gt; becomes &lt;code&gt;foo.bar&lt;/code&gt; in Javascript, and &lt;code&gt;foo#_set_bar baz&lt;/code&gt; becomes &lt;code&gt;foo.bar = baz&lt;/code&gt;. Finally we add a validation function to enforce that the input box contains at most a single digit. To set the &lt;code&gt;onchange&lt;/code&gt; handler, you need to wrap it in &lt;code&gt;Ocamljs.jsfun&lt;/code&gt;, because the calling convention of an ocamljs function is different from that of plain Javascript function (to accomodate partial application and tail recursion).&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;make_td&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i j input &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;td &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;style &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; td&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderStyle &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;solid&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderColor &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;widths&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
     &lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 0 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 2&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 0 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 2 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 1 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 0
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 5 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 1 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 6 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 0 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; 8 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 2
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; 0 &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; bottom&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; widths i &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; right&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; widths j &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; k &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; string_of_int k &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;px&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderTopWidth &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;px top&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderBottomWidth &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;px bottom&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderLeftWidth &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;px left&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_borderRightWidth &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;px right&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;td&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;appendChild input&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
    td &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
&lt;/pre&gt;Next we make a table cell for each square, containing the input box, with borders according to its position in the grid. Here we don't ascribe a type to the result of &lt;code&gt;createElement&lt;/code&gt; since we don't need any &lt;code&gt;td&lt;/code&gt;-specific methods.&lt;br/&gt;
&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;rows &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
        make_input &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;table &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  table&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;setAttribute &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;cellpadding&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;0px&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  table&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;setAttribute &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;cellspacing&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;0px&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;tbody &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;tbody&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;table&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;appendChild tbody&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iteri rows &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;i row &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;tr &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;createElement &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;tr&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iteri row &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;j cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;td &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; make_td i j cell &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;tr&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;appendChild td&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;
    ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;tbody&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;appendChild tr&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; table&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;Then we assemble the full board: make a 9 x 9 matrix of input boxes, make a table containing the input boxes, then return the matrix and table. Notice that we freely use the OCaml standard library. Here the &lt;code&gt;tbody&lt;/code&gt; is necessary for IE; the &lt;code&gt;cellpadding&lt;/code&gt; and &lt;code&gt;cellspacing&lt;/code&gt; don't work in IE for some reason that I have not tracked down. This raises an important point: the &lt;code&gt;Dom&lt;/code&gt; module is the thinnest possible wrapper over the actual DOM objects, and as such gives you no help with cross-browser compatibility. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;check_board&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; rows _ &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; rows.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_backgroundColor &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;check_set&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; set &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;seen &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.make 9 None &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iter set &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; rows.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_value &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &amp;quot;&amp;quot; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;
 &lt;/span&gt;       &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; v &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;n &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; int_of_string v &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; seen.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
              &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; None &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                  seen.&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&lt;/span&gt; 1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;-&lt;/span&gt; Some &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; Some &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;',&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;')&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
                  error i j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
                  error i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt; j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;')&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;check_row&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    check_set &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;check_column&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    check_set &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;j&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;check_square&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; i j &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Array&lt;/span&gt;.init 9 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;k &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;*&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;+&lt;/span&gt; k &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;mod&lt;/span&gt; 3&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;*&lt;/span&gt; 3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;+&lt;/span&gt; k &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;/&lt;/span&gt; 3&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
    check_set set &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;

  &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iter rows &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;row &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;ArrayLabels&lt;/span&gt;.iter row &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;cell &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      cell&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_get_style&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_backgroundColor &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 8 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt; check_row i &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 8 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt; check_column j &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 2 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;htmlize-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;htmlize-keyword&quot;&gt;to&lt;/span&gt; 2 &lt;span class=&quot;htmlize-keyword&quot;&gt;do&lt;/span&gt;
      check_square i j
    &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;htmlize-constant&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;Now we define a function to check that the Sudoku constraints are satisfied: that no row, column, or heavy-lined square has more than one occurrence of a digit. If more than one digit occurs then we color all occurrences red. The only ocamljs-specific parts here are getting the cell contents (with &lt;code&gt;_get_value&lt;/code&gt;) and setting the background color style. However, it's worth noticing the algorithm: we imperatively clear the error states for all cells, then set error states as we check each constraint. I'll revisit this in a later post about functional reactive programming. &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; table&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; make_board &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;check &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;getElementById &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;check&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  check&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_onclick &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Ocamljs&lt;/span&gt;.jsfun &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;check_board rows&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;board &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;getElementById &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;board&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  ignore &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;appendChild table&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;htmlize-type&quot;&gt;D&lt;/span&gt;.window&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;_set_onload &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Ocamljs&lt;/span&gt;.jsfun onload&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;Finally we put the pieces together: make the board, insert it into the DOM, call &lt;code&gt;check_board&lt;/code&gt; when the Check button is clicked, and call this setup code once the document has been loaded. See the &lt;a href=&quot;http://code.google.com/p/ocamljs/source/browse/#svn/trunk/examples/dom/sudoku&quot;&gt;full source&lt;/a&gt; for build files.&lt;br/&gt;
&lt;p&gt;By writing this in OCaml rather than directly in Javascript, we've gained the assurance of static type checking; we get to use OCaml's syntax, pattern matching, and standard library; we have a &lt;a href=&quot;http://math.andrej.com/2009/04/09/pythons-lambda-is-broken/&quot;&gt;for loop that's not broken&lt;/a&gt;. On the flip side we have to worry about type ascription and &lt;code&gt;Ocamljs.jsfun&lt;/code&gt;. If you don't already think that OCaml is a better language than Javascript, this won't convince you. But perhaps the followup posts, in which I'll show how to use RPC over HTTP with &lt;a href=&quot;http://code.google.com/p/orpc2/&quot;&gt;orpc&lt;/a&gt; and functional reactive programming with &lt;a href=&quot;http://code.google.com/p/froc/&quot;&gt;froc&lt;/a&gt;, will tip the scales for you.&lt;br/&gt;
&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html</id><title type="text">Sudoku in ocamljs, part 1: DOM programming</title><updated>2009-04-27T05:30:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/04/functional-reactive-ajax-in-ocaml.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">Yesterday I released three related projects which I've been working on for a long time:
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/ocamljs&quot;&gt;&lt;b&gt;ocamljs&lt;/b&gt;&lt;/a&gt;, a Javascript backend for ocamlc, along with some libraries for web programming&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/orpc2&quot;&gt;&lt;b&gt;orpc&lt;/b&gt;&lt;/a&gt;, a tool for generating RPC stubs from OCaml signatures, either ONC RPC for use with Ocamlnet's RPC implementation, or RPC over HTTP for use with ocamljs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/froc&quot;&gt;&lt;b&gt;froc&lt;/b&gt;&lt;/a&gt;, a library for functional reactive programming that works with ocamljs&lt;/li&gt;
&lt;/ul&gt;
The idea of all this is to build a platform for client-side web programming like &lt;a href=&quot;http://code.google.com/webtoolkit/&quot;&gt;Google Web Toolkit&lt;/a&gt; (but better, of course :). There is still a lot of work to get there, but already we use ocamljs and orpc for production work at &lt;a href=&quot;http://skydeck.com/&quot;&gt;Skydeck&lt;/a&gt;. In my next few posts I'll work through some examples using ocamljs, orpc, and froc:
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/04/sudoku-in-ocamljs-part-1-dom.html&quot;&gt;part 1: DOM programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-2-rpc-over-http.html&quot;&gt;part 2: RPC over HTTP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/05/sudoku-in-ocamljs-part-3-functional.html&quot;&gt;part 3: functional reactive programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/04/functional-reactive-ajax-in-ocaml.html</id><title type="text">Monadic functional reactive AJAX in OCaml</title><updated>2009-04-23T17:28:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/02/equeue-compared-to-lwt.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;I feel like taking a break from Camlp4, so in this post I'll take a look at two libraries for asynchronous networking programming in OCaml: &lt;a href=&quot;http://projects.camlcity.org/projects/dl/ocamlnet-2.2.9/doc/html-main/Equeue_intro.html&quot;&gt;Equeue&lt;/a&gt; and &lt;a href=&quot;http://www.ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt;. Each provides cooperative multithreading and asynchronous access to networking calls; each has protocol implementations built on top of it (e.g. Nethttpd for Equeue and Ocsigen's HTTP implementation for of Lwt). So why would you want to use one over the other? Let's start with an overview of each.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;Equeue&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;An Equeue &lt;em&gt;event system&lt;/em&gt; comprises a queue of events and a set of event handlers. A running event system just pulls events off the queue and passes them to the event handlers. You can think of a group of related handlers as a thread (the thread is blocked until one of its handlers is called; when the handler returns the thread yields) but there is no particular data structure tying them together.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Unixqueue&lt;/code&gt; module specializes Equeue to the case where the source of events is the Unix &lt;code&gt;select&lt;/code&gt; call. It adds the idea of &lt;em&gt;resources&lt;/em&gt;, which are operations that may cause an event. For example, the operation &lt;code&gt;Wait_in&lt;/code&gt; on some file descriptor can cause the event &lt;code&gt;Input_arrived&lt;/code&gt; for that descriptor. A resource also has an associated timeout (the &lt;code&gt;Timeout&lt;/code&gt; event fires if the timeout is exceeded). &lt;code&gt;Unixqueue&lt;/code&gt; also adds a way to group resources and handlers; a group can be removed from the event system with one call, so everything associated with a thread can be cleaned up at once.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;On top of the low-level event queue mechanism, Equeue builds &lt;em&gt;engines&lt;/em&gt;, which package up some event handlers and some internal state with a particular interface: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;t engine_state &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; `Working &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;of&lt;/span&gt; int
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; `Done &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;t
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; `Error &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;of&lt;/span&gt; exn
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; `Aborted
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;t &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; engine &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;t engine_state&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;request_notification&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; bool&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;event_system&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Unixqueue.event_system&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;An engine runs for a while, then finishes with some value, fails with an exception, or becomes aborted. Code that's interested in the result of an engine can use &lt;code&gt;request_notification&lt;/code&gt; to find out when the state of the engine has changed.&lt;br/&gt;
&lt;p&gt;Equeue provides a number of engines for networking tasks (such as connecting to a socket), and also for hooking engines together in various ways. Maybe the most interesting one (when comparing to Lwt at least) is: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;['&lt;/span&gt;a&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;seq_engine&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;a &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;engine &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;('&lt;/span&gt;a &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;b &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;engine&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;['&lt;/span&gt;b&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; engine
&lt;/pre&gt;which feeds the result of one engine into a function that creates another engine. Does this look familiar?&lt;br/&gt;
&lt;b&gt;Lwt&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Lwt provides no equivalent to Equeue's low-level event handling. But an Lwt thread is quite similar to an Equeue engine, in that it runs for a while then finishes successfully with a value or fails with an exception (there is no aborted state). However, the type &lt;code&gt;'a Lwt.t&lt;/code&gt; of threads returning values of type &lt;code&gt;'a&lt;/code&gt; is abstract; to implement your own thread you must build it out of the functions provided by Lwt. Here are some important ones: &lt;/p&gt;&lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;fail &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;exn &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;/pre&gt;You create an already-terminated thread with a value or exception with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; respectively. (Equeue has &lt;code&gt;epsilon_engine&lt;/code&gt; which does essentially the same thing.) &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;wait &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;unit &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;wakeup &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;wakeup_exn &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; exn &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; unit&lt;/span&gt;
&lt;/pre&gt;These functions give you a way to make threads that return only after some event occurs. A thread created with &lt;code&gt;wait&lt;/code&gt; is blocked until woken either with a value or an exception. Any threads using its value block until it's woken. But how does a thread use another thread's value? &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;bind &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;('&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;a &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b t&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;b t&lt;/span&gt;
&lt;/pre&gt;This function feeds the result of one thread into a function that creates another thread, just like Equeue's &lt;code&gt;seq_engine&lt;/code&gt; above. The important thing is that the value may not be available yet. In that case the function you give as the second argument is added to a notification list and called when the value arrives. This is similar to Equeue's &lt;code&gt;request_notification&lt;/code&gt;, except that with Lwt notification is entirely under the hood: asking to be notified and getting the value of the thread are the same operation.&lt;br/&gt;
&lt;p&gt;(Maybe you noticed that the type &lt;code&gt;Lwt.t&lt;/code&gt; together with the functions &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; form a monad. It would appear that the same is true of Equeue's &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;epsilon_engine&lt;/code&gt;, and &lt;code&gt;seq_engine&lt;/code&gt;, although I haven't checked that they satisfy the monad laws.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Lwt_unix&lt;/code&gt; module provides a set of Unix I/O functions that match many of the ordinary ones in the &lt;code&gt;Unix&lt;/code&gt; module, but return &lt;code&gt;Lwt.t&lt;/code&gt; values (i.e. threads). In order to use the value you have to bind the thread, and possibly block until the value arrives.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;Comparison&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Lwt is a very beautiful library. The monadic interface encourages you to think about interacting threads in terms of values and dependencies, rather than states and callbacks. Lwt code can be very concise, and with the help of &lt;a href=&quot;http://www.cas.mcmaster.ca/~carette/pa_monad/&quot;&gt;pa_monad&lt;/a&gt;, it can look pretty much just like straight-line code. Equeue engines require more machinery to implement (in particular, &lt;code&gt;request_notification&lt;/code&gt;, although the &lt;code&gt;engine_mixin&lt;/code&gt; class helps with that), and this increased overhead makes it less convenient to use threads in a fine-grained way.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Lwt is particularly nice with exception handling. In most cases, if a thread raises an exception it will be converted to a failing thread, rather than escaping the thread machinery (as would happen in an Equeue engine if you don't explicitly catch the exception). Unfortunately there are places this doesn't work (in order to support constant-space tail calls), which can be surprising.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Equeue, on the other hand, gives you much better low-level control. Lwt gives you the monadic equivalent of a blocking threads interface: you get a &lt;code&gt;read&lt;/code&gt; call that blocks until data is ready. Equeue separates notification of events from the actual I/O operations, so if you want to do something other than read when data is ready you can. You can also remove a resource, to indicate that you're no longer interested in its events. With Lwt once a thread is waiting to read, it keeps waiting until data is ready or the channel is aborted (using &lt;code&gt;Lwt_unix.abort&lt;/code&gt;). This covers the common case where you want to close the connection on a timeout, but more complicated things are harder. In addition, since you always care about timeouts when doing network programming, it's convenient that Equeue builds them into the resource interface.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Equeue may be more efficient in low-level ways: for instance, if you're going to repeatedly read a socket you can leave the resource and handler in the event system; in Lwt every &lt;code&gt;read&lt;/code&gt; adds a new action (the Lwt equivalent of a handler). But I bet this doesn't matter almost all the time.&lt;br/&gt;
&lt;/p&gt;&lt;b&gt;So which one?&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Lwt definitely wins on clarity, simplicity, and concision for higher-level coding. Equeue wins if you need low-level control, or possibly if you need the absolute most performance.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Another factor, however, is that Equeue works with the rest of Ocamlnet, and in particular the ONC RPC implementation and the awesome Netplex server framework. For this reason I've adapted Lwt to run on top of Equeue, in the &lt;a href=&quot;http://code.google.com/p/orpc2/source/browse/#svn/trunk/src/lwt-equeue&quot;&gt;lwt-equeue&lt;/a&gt; library that comes with &lt;a href=&quot;http://code.google.com/p/orpc2/&quot;&gt;orpc&lt;/a&gt;. (I hope to do another orpc release soon with the latest version of lwt-equeue; in the meantime you can try the trunk version.) With lwt-equeue it's straightforward to mix Lwt and Equeue code, so you can use each when it's most appropriate.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;(By the way, &lt;a href=&quot;http://portal.acm.org/citation.cfm?id=1411304.1411307&quot;&gt;J&amp;eacute;r&amp;ocirc;me Vouillon's ML Workshop paper on Lwt&lt;/a&gt; is really nice; it explains some tricky details of the implementation.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Next time back to Camlp4.&lt;br/&gt;
&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/02/equeue-compared-to-lwt.html</id><title type="text">Equeue compared to Lwt</title><updated>2009-02-10T07:43:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-4-consuming-ocaml.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">It's easy to think of Camlp4 as just &amp;quot;defmacro on steroids&amp;quot;; that is, just a tool for syntax extension, but it is really a box of independently-useful tools. As we've seen, Camlp4 can be used purely for code generation; in this post I'll describe a tool that uses it purely for code consumption: a (minimal, broken) version of &lt;a href=&quot;http://www.cs.ru.nl/~tews/otags/&quot;&gt;otags&lt;/a&gt;:
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Camlp4.PreCast&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;M &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Camlp4OCamlRevisedParser&lt;/span&gt;.Make&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;Syntax&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;N &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Camlp4OCamlParser&lt;/span&gt;.Make&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;Syntax&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
We're going to call the OCaml parser directly. These functor applications are used only for their effect (which is to fill in an empty grammer with OCaml cases); ordinarily they would be called as part of Camlp4's dynamic loading process. Recall that the original syntax parser is an extension of the revised parser, so we need both, in this order.
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;files &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;do_fn&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; fn &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;st &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Stream&lt;/span&gt;.of_channel &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;open_in fn&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;str_item &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Syntax&lt;/span&gt;.parse_implem &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;Loc&lt;/span&gt;.mk fn&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; st &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;str_items &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Ast&lt;/span&gt;.list_of_str_item str_item &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;tags &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;List&lt;/span&gt;.fold_right do_str_item str_items &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  files &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;fn&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; tags&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)::!&lt;/span&gt;files
&lt;/pre&gt;
We'll call &lt;code&gt;do_fn&lt;/code&gt; for each filename on the command line. The &lt;code&gt;Syntax.parse_implem&lt;/code&gt; function takes a &lt;code&gt;Loc.t&lt;/code&gt; and a stream, and parses the stream into a &lt;code&gt;str_item&lt;/code&gt;. (The initial &lt;code&gt;Loc.t&lt;/code&gt; just provides the filename so later locations can refer to it, for error messages etc.) Now, recall that even though we got back a single &lt;code&gt;str_item&lt;/code&gt;, it can contain several definitions (collected with &lt;code&gt;StSem&lt;/code&gt;). We use &lt;code&gt;Ast.list_of_str_item&lt;/code&gt; to get an ordinary list, then accumulate tags into &lt;code&gt;files&lt;/code&gt;.
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;do_str_item&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; si tags &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; si &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
 &lt;span class=&quot;htmlize-comment&quot;&gt;(* | &amp;lt;:str_item&amp;lt; let $rec:_$ $bindings$ &amp;gt;&amp;gt; -&amp;gt; *)&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Ast&lt;/span&gt;.StVal &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; bindings&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;bindings &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Ast&lt;/span&gt;.list_of_binding bindings &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;htmlize-type&quot;&gt;List&lt;/span&gt;.fold_right do_binding bindings tags
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; tags
&lt;/pre&gt;
We'll only consider value bindings. The commented-out &lt;code&gt;str_item&lt;/code&gt; quotation doesn't work (run it through Camlp4 to see why--I'm not sure where the extra &lt;code&gt;StSem&lt;/code&gt;/&lt;code&gt;StNil&lt;/code&gt; come from), so we fall back to an explicit constructor. (The &lt;code&gt;rec&lt;/code&gt; antiquotation matches a flag controlling whether an &lt;code&gt;StVal&lt;/code&gt; is a &lt;code&gt;let rec&lt;/code&gt; or just a &lt;code&gt;let&lt;/code&gt;; here we don't care.) Now we have an &lt;code&gt;Ast.binding&lt;/code&gt;, which again can contain several bindings (collected with &lt;code&gt;BiAnd&lt;/code&gt;) so we call &lt;code&gt;Ast.list_of_bindings&lt;/code&gt;.
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;do_binding&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; bi tags &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-keyword&quot;&gt;match&lt;/span&gt; bi &lt;span class=&quot;htmlize-keyword&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;@&lt;/span&gt;loc&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;lid&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;lid&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;_&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;line &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Loc&lt;/span&gt;.start_line loc &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;off &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Loc&lt;/span&gt;.start_off loc &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;pre &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;let &amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;^&lt;/span&gt; lid &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; lid&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; line&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt; off&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)::&lt;/span&gt;tags
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; tags
&lt;/pre&gt;
We're going to generate an &lt;code&gt;etags&lt;/code&gt;-format file, where each definition consists of a prefix of the line in the source, the tag itself, the line number, and the character offset. If you look in the parser you'll see that the left side of a binding can be any pattern (as you'd expect), but we only handle the case where it's a single identifier; the &lt;code&gt;lid&lt;/code&gt; antiquotation extracts it as a string. The line number and character offset are easy to find from the location of the binding (see &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4/Sig.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4/Sig.ml&lt;/a&gt; for the &lt;code&gt;Loc&lt;/code&gt; functions), which we get with &lt;code&gt;@loc&lt;/code&gt;. The prefix is problematic: the location of the binding does not include the &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt; part, and anyway what we really want is everything from the beginning of the line. Doable but not so instructive of Camlp4, so we just tack on a &lt;code&gt;&amp;quot;let &amp;quot;&lt;/code&gt; prefix (so this doesn't work for &lt;code&gt;and&lt;/code&gt; or if there is whitespace).
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;print_tags&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; files &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;ch &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; open_out &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;TAGS&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;htmlize-type&quot;&gt;ListLabels&lt;/span&gt;.iter files &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; tags&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;Printf&lt;/span&gt;.fprintf ch &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;\012\n%s,%d\n&amp;quot;&lt;/span&gt; fn 0&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;htmlize-type&quot;&gt;ListLabels&lt;/span&gt;.iter tags &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; tag&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; line&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; off&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;Printf&lt;/span&gt;.fprintf ch &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;%s\127%s\001%d,%d\n&amp;quot;&lt;/span&gt; pre tag line off&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
Generating the tags file is straightforward, following the description at the bottom of the &lt;a href=&quot;http://www.cs.ru.nl/~tews/otags/README&quot;&gt;otags README&lt;/a&gt;. (The &lt;code&gt;0&lt;/code&gt; is supposed to be the length of the tag data, but my Emacs doesn't seem to care.) We put the pieces together with &lt;code&gt;Arg&lt;/code&gt;:
&lt;pre&gt;
&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;htmlize-type&quot;&gt;Arg&lt;/span&gt;.parse &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[]&lt;/span&gt; do_fn &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;otags: fn1 [fn2 ...]&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
print_tags &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;!&lt;/span&gt;files
&lt;/pre&gt;
and finally, a Makefile:
&lt;pre&gt;
&lt;span class=&quot;htmlize-makefile-targets&quot;&gt;otags&lt;/span&gt;: otags.ml
&lt;span class=&quot;htmlize-pesche-tab&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;htmlize-makefile-shell&quot;&gt;ocamlc \
&lt;/span&gt;&lt;span class=&quot;htmlize-pesche-tab&quot;&gt;        &lt;/span&gt;  -pp camlp4of \
&lt;span class=&quot;htmlize-pesche-tab&quot;&gt;        &lt;/span&gt;  -o otags \
&lt;span class=&quot;htmlize-pesche-tab&quot;&gt;        &lt;/span&gt;  -I +camlp4 -I +camlp4/Camlp4Parsers \
&lt;span class=&quot;htmlize-pesche-tab&quot;&gt;        &lt;/span&gt;  dynlink.cma camlp4fulllib.cma otags.ml
&lt;/pre&gt;
We could improve this in many ways (error-handling, patterns, types, etc.); clearly we can't replicate otags in a few dozen lines. But Camlp4 takes care of a lot of the hard work. Next time, maybe, an actual syntax extension.</content><id>http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-4-consuming-ocaml.html</id><title type="text">Reading Camlp4, part 4: consuming OCaml ASTs</title><updated>2009-01-28T06:09:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry><entry><link href="http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-3-quotations-in.html" rel="alternate"/><contributor><uri>http://ambassadortothecomputers.blogspot.com/feeds/posts/default?alt=rss</uri><name>ambassadortothecomputers</name></contributor><content type="html">&lt;p&gt;(I set myself the goal of posting every week, but the &lt;a href=&quot;http://skydeck.com/blog/announcements/yourcellphoneonline/&quot;&gt;latest Skydeck release&lt;/a&gt; has kept me busy, and it turned out I didn't understand the following as well as I thought.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;After seeing the examples of Camlp4 quotations in my &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-2-quotations_04.html&quot;&gt;last post&lt;/a&gt;, you may wonder: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;what are all the quotations (&lt;code&gt;str_item&lt;/code&gt;, &lt;code&gt;ctyp&lt;/code&gt;, etc.)?&lt;/li&gt;
&lt;li&gt;what are all the antiquotations (&lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;`str&lt;/code&gt;, etc.)?&lt;/li&gt;
&lt;li&gt;which antiquotations are allowed where?&lt;/li&gt;
&lt;/ul&gt;To answer these questions, we're going to look at how quotations are implemented in Camlp4. We'll need to learn a little about Camlp4's extensible parsers, and look at the OCaml parser in Camlp4.&lt;br/&gt;
&lt;b&gt;Parsing OCaml&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;A small complication is that there is more than one concrete syntax for OCaml in Camlp4: the &lt;em&gt;original&lt;/em&gt; (i.e. normal OCaml syntax) and &lt;em&gt;revised&lt;/em&gt; syntaxes. The original syntax parser is given as an extension of the revised syntax one. So we'll begin in &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml&lt;/a&gt; (line 588 in the 3.10.2 source):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;    &lt;span class=&quot;htmlize-variable-name&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt; RIGHTA
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-comment&quot;&gt;(* ... *)&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e1 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; SELF&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e2 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; SELF&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; SELF &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e2&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e3&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;You can read the parser more or less as a BNF grammar. This code defines a nonterminal &lt;code&gt;expr&lt;/code&gt; by giving a bunch of cases. The cases are grouped together into &lt;em&gt;levels&lt;/em&gt;, which can be labeled and given an associativity (that's what &lt;code&gt;&amp;quot;top&amp;quot;&lt;/code&gt; and &lt;code&gt;NONASSOC&lt;/code&gt; are). Levels are used to indicate the precedence of operators, and also to provide hooks into the parser for extending it; for our purpose here you can skip over them.&lt;br/&gt;
&lt;p&gt;You can read a case like a pattern match: match the stuff to the left of the arrow, return the stuff to the right. (What's being matched is a stream of tokens from the lexer.) A parser pattern can contain literal strings like &lt;code&gt;&amp;quot;if&amp;quot;&lt;/code&gt;, backquoted data constructors like &lt;code&gt;`INT&lt;/code&gt; (which can carry additional data), nonterminals, and some special keywords like &lt;code&gt;SELF&lt;/code&gt;. You can bind variables using ordinary pattern-matching syntax within token literals, and use &lt;code&gt;x = y&lt;/code&gt; syntax to bind the result of a call to a nonterminal.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;The right side is a piece of AST representing what was parsed, and in most cases it is given &lt;em&gt;as a quotation&lt;/em&gt;. This is pretty confusing, because often the left and right sides of a case look very similar, and you can't tell what AST node is produced. However, it gives us lots of examples of tricky quotations, and since we have already seen how to expand quotations we can deal with it. (If you're curious how Camlp4 is written using itself see &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/boot/&quot;&gt;camlp4/boot&lt;/a&gt;.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Focusing on the &lt;code&gt;if&lt;/code&gt; case: the keywords &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; are parsed with an expression after each (at least we know that's the syntax of normal OCaml, and that gives a clue to what &lt;code&gt;SELF&lt;/code&gt; means: parse the current nonterminal); the expressions are bound to a variables; then the pieces are put together into an &lt;code&gt;ExIfe&lt;/code&gt; AST node.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;(Some other special keywords you'll see are &lt;code&gt;OPT&lt;/code&gt;, which makes the next item optional, and &lt;code&gt;LIST0&lt;/code&gt;/&lt;code&gt;LIST1&lt;/code&gt;, which parse a list of items separated by the token after &lt;code&gt;SEP&lt;/code&gt;. &lt;code&gt;LIST1&lt;/code&gt; means there must be at least one item.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;OCaml allows you to leave off the &lt;code&gt;else&lt;/code&gt; part; where is the code for that? Turns out this is not allowed in revised syntax, and the original syntax overrides this part of the parser. Take a look at &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4OCamlParser.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4Parsers/Camlp4OCamlParser.ml&lt;/a&gt; (line 292):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;    &lt;span class=&quot;htmlize-variable-name&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;LEVEL &lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-comment&quot;&gt;(* ... *)&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e1 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; SELF&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e2 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; expr LEVEL &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e3 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; expr LEVEL &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e2&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e3&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e1 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; SELF&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; e2 &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; expr LEVEL &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e1&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e2&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;(Notice how the &lt;code&gt;expr&lt;/code&gt; definition is qualified with the level in the revised grammar where it should slot in.)&lt;br/&gt;
&lt;b&gt;Quotations and antiquotations&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Hopefully that is enough about parsing to muddle through; let's move on to quotations. Here's another piece of the revised parser (line 670)--these are still cases of &lt;code&gt;expr&lt;/code&gt;:&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; `QUOTATION x &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Quotation&lt;/span&gt;.expand _loc x &lt;span class=&quot;htmlize-type&quot;&gt;Quotation&lt;/span&gt;.&lt;span class=&quot;htmlize-type&quot;&gt;DynAst&lt;/span&gt;.expr_tag
&lt;/pre&gt;The &lt;code&gt;`QUOTATION&lt;/code&gt; token contains a record including the body of the quotation and the tag. The record is passed off to the &lt;code&gt;Quotation&lt;/code&gt; module to be expanded. The actual expansion happens in &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml&lt;/a&gt;. Looking to the bottom of that file, there are several lines like:&lt;br/&gt;
&lt;pre&gt;  add_quotation &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;sig_item&amp;quot;&lt;/span&gt; sig_item_quot &lt;span class=&quot;htmlize-type&quot;&gt;ME&lt;/span&gt;.meta_sig_item &lt;span class=&quot;htmlize-type&quot;&gt;MP&lt;/span&gt;.meta_sig_item&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;This installs a quotation expander for the &lt;code&gt;sig_item&lt;/code&gt; tag. The expander parses the quotation starting at the &lt;code&gt;sig_item_quot&lt;/code&gt; nonterminal in the parser, then runs the result through the antiquotation expander (see below). (The last two arguments to &lt;code&gt;add_quotation&lt;/code&gt; have to do with the context where a quotation appears: inside a pattern you get &lt;code&gt;PaFoo&lt;/code&gt; nodes while inside an expression you get &lt;code&gt;ExBar&lt;/code&gt; nodes.) So we can answer one of the questions posed at the beginning: what are all the quotation tags? We can see here that there is a quotation for each type in &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/?content-type=text/plain&quot;&gt;camlp4/Camlp4/Camlp4Ast.partial.ml&lt;/a&gt;.&lt;br/&gt;
&lt;p&gt;Now let's look at antiquotations, which are more complicated (line 671):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; `ANTIQUOT &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;anti&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;as&lt;/span&gt; n&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; s &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;anti&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;mk_anti &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;expr&amp;quot;&lt;/span&gt; n s&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;The &lt;code&gt;`ANTIQUOT&lt;/code&gt; token contains the tag and the body again (and the parser can choose a case based on the tag). The &lt;code&gt;anti&lt;/code&gt; antiquotation creates a special AST node to hold the body of the antiquotation; each type in the AST has a constructor (&lt;code&gt;ExAnt&lt;/code&gt;, &lt;code&gt;TyAnt&lt;/code&gt;, etc.) for this purpose. The &lt;code&gt;mk_anti&lt;/code&gt; function adds another tag, which is not always the same as the one we parsed; the &lt;code&gt;~c&lt;/code&gt; argument adds a suffix giving the context where the antiquotation appeared.&lt;br/&gt;
&lt;p&gt;There are two places where antiquotations are interpreted. First, in &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml&lt;/a&gt; (line 89):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;`int&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; string_of_int &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;This is one of a bunch of cases in a map over the syntax tree. It handles antiquotations like &lt;code&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;`&lt;span class=&quot;htmlize-variable-name&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, which turns into an &lt;code&gt;ExInt&lt;/code&gt;. You can also see cases here for the &lt;code&gt;anti&lt;/code&gt; antiquotations, and some things to do with &lt;code&gt;list&lt;/code&gt; antiquotations we haven't seen yet (more on this below).&lt;br/&gt;
&lt;p&gt;Things that don't match these cases are handled when the AST is pretty-printed. Let's look at &lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4/Printers/OCaml.ml?content-type=text/plain&quot;&gt;camlp4/Camlp4/Printers/OCaml.ml&lt;/a&gt; (line 510):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;int&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; o&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;#&lt;/span&gt;numeric f s &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;This case handles antiquotations like &lt;code&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;int&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. Again, this produces an &lt;code&gt;ExInt&lt;/code&gt;, but you give it a string instead of an int.&lt;br/&gt;
&lt;b&gt;What we have learned&lt;/b&gt;&lt;br/&gt;
&lt;p&gt;Teaching a person to fish is fine, unless that person starves while trying to finish their PhD in theoretical pescatology. But I hope that you can see how we might go about answering the remaining questions--what are all the antiquotations, and where are they allowed--by examining all the &lt;code&gt;`ANTIQUOT&lt;/code&gt; cases in the parser and puzzling out where they get expanded.&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;Let's look at a particular example, by way of addressing the &lt;a href=&quot;http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-2-quotations_04.html#comments&quot;&gt;comment&lt;/a&gt; Nicolas Pouillard (aka Ertai) made on the last post. He points out that the final &lt;code&gt;McOr&lt;/code&gt; in &lt;code&gt;of_string&lt;/code&gt; can go outside the antiquotation. How could we learn this from the Camlp4 code? Let's find where the antiquotation is expanded, starting at the point where the &lt;code&gt;function&lt;/code&gt; keyword is parsed (&lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4OCamlParser.ml?content-type=text/plain&quot;&gt;Camlp4OCamlParser.ml&lt;/a&gt; line 299):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; a &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; match_case &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;a&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;(the right side is revised syntax) which uses &lt;code&gt;match_case&lt;/code&gt; (line 350):&lt;br/&gt;
&lt;pre&gt;    &lt;span class=&quot;htmlize-variable-name&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; OPT &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;;&lt;/span&gt; l &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; LIST1 match_case0 SEP &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Ast&lt;/span&gt;.mcOr_of_list l &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;You might think that &lt;code&gt;match_case0&lt;/code&gt; parses a single case, but let's check (&lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4OCamlRevisedParser.ml?content-type=text/plain&quot;&gt;Camlp4OCamlRevisedParser.ml&lt;/a&gt; line 778):&lt;br/&gt;
&lt;pre&gt;    &lt;span class=&quot;htmlize-variable-name&quot;&gt;match_case0&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; `ANTIQUOT &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;match_case&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;list&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;as&lt;/span&gt; n&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; s &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;anti&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;mk_anti &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;match_case&amp;quot;&lt;/span&gt; n s&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; `ANTIQUOT &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;anti&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;as&lt;/span&gt; n&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;)&lt;/span&gt; s &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;anti&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;mk_anti &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;match_case&amp;quot;&lt;/span&gt; n s&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;We're interested in the second case for the moment: here's the antiquotation with no tag used in &lt;code&gt;of_string&lt;/code&gt;. So the list of cases is returned by &lt;code&gt;match_case0&lt;/code&gt; (as an &lt;code&gt;McAnt&lt;/code&gt; with &lt;code&gt;match_case&lt;/code&gt; as its tag) and more cases can be parsed following it.&lt;br/&gt;
&lt;p&gt;(Now we can see a justification for a puzzling design decision in the AST: instead of collecting match cases in a list, it collects them with &lt;code&gt;McOr&lt;/code&gt; nodes. Many arrangements of &lt;code&gt;McOr&lt;/code&gt; nodes correspond to the same list of cases. As the above possibility shows, this is useful: an antiquotation can return zero, one, or several match cases, and we don't have to worry about splicing them into the list. On the other hand, it makes consuming the AST a little more complicated.)&lt;br/&gt;
&lt;/p&gt;&lt;p&gt;We can go one step further: if we use the &lt;code&gt;list&lt;/code&gt; antiquotation, the first case in &lt;code&gt;match_case0&lt;/code&gt; returns an antiquotation with tag &lt;code&gt;listmatch_case&lt;/code&gt;, and we get the following expansion (&lt;a href=&quot;http://camlcvs.inria.fr/cgi-bin/cvsweb/~checkout~/ocaml/camlp4/Camlp4Parsers/Camlp4QuotationCommon.ml?content-type=text/plain&quot;&gt;Camlp4QuotationCommon.ml&lt;/a&gt; line 117):&lt;br/&gt;
&lt;/p&gt;&lt;pre&gt;            &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;listmatch_case&amp;quot;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;Ast&lt;/span&gt;.mcOr_of_list &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;e&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;So our final &lt;code&gt;of_string&lt;/code&gt; becomes: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;htmlize-function-name&quot;&gt;of_string&lt;/span&gt;&lt;span class=&quot;htmlize-variable-name&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-keyword&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;list&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;htmlize-type&quot;&gt;List&lt;/span&gt;.map
        &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;match_case&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;`&lt;span class=&quot;htmlize-variable-name&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;c&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt;
        cons&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;
  &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; invalid_arg &lt;span class=&quot;htmlize-string&quot;&gt;&amp;quot;bad string&amp;quot;&lt;/span&gt;
&lt;/pre&gt;Can we do something similar with the generation of the variant type? No, as it turns out. In the revised syntax, the arms of a variant are given inside square brackets, so we can say: &lt;pre&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-governing&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;htmlize-type&quot;&gt;t &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;list&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;List.map &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;htmlize-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;htmlize-variable-name&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;ctyp&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;uid&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;htmlize-type&quot;&gt; &lt;/span&gt;&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; cons&lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;htmlize-tuareg-font-lock-operator&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;But in the original syntax, without at least one constructor to make clear that we're defining a variant, there's no context to interpret a list, and this is reflected in the parser, which doesn't allow a &lt;code&gt;list&lt;/code&gt; antiquotation there. This kind of problem is apparently why the revised syntax was introduced.&lt;br/&gt;
&lt;p&gt;So far I've talked only about generating OCaml code; next time I'll cover how to use Camlp4 to consume OCaml, and build a simple code analysis tool.&lt;br/&gt;
&lt;/p&gt;</content><id>http://ambassadortothecomputers.blogspot.com/2009/01/reading-camlp4-part-3-quotations-in.html</id><title type="text">Reading Camlp4, part 3: quotations in depth</title><updated>2009-01-22T22:18:00-00:00</updated><author><email>noreply@blogger.com (Jake Donham)</email><name>ambassadortothecomputers</name></author></entry></feed>