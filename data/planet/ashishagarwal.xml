<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://ashishagarwal.org/tag/ocaml/feed/</id><title type="text">ashishagarwal</title><updated>2023-06-07T05:45:50-00:00</updated><entry><link href="http://ashishagarwal.org/2012/09/11/functional-big-data-genomics/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;br/&gt;
High-throughput genomic sequencing is characterized by large diverse datasets and numerous analysis methods. It is normal for an individual bioinformatician to work with thousands of data files and employ hundreds of distinct computations during the course of a single project. This problem is magnified in &amp;ldquo;core facilities&amp;rdquo;, which support multiple researchers working on diverse projects. Most investigators use ad hoc methods to manage this complexity with dire consequences: analyses frequently fail to meet the scientific mandate of reproducibility; improved analysis methods are often not considered because recomputing all downstream steps would be overwhelming; hard drives and CPUs are used sub-optimally; and, in some cases, raw data is lost.&lt;/p&gt;
&lt;p&gt;We describe HITSCORE, an OCaml software stack that operates all computational aspects of the Genomics Core Facility at New York University&amp;rsquo;s Center for Genomics and Systems Biology. HITSCORE has been in production use for one year, and was implemented quickly by less than two programmers following design advice from several biologists. A simple domain specific language (DSL) enables generating type safe database bindings and GUI components, and greatly eases updates and migration of our data model. We found a multi-lingual stack too burdensome in a small team setting, and credit OCaml for fulfilling the needs of our full application stack. It has good database bindings, excels at encoding complex domain logic, and now allows construction of rich websites due to the Ocsigen web programming framework. Higher level libraries for distributed computing would be a welcome improvement.&lt;/p&gt;
&lt;p&gt;The opportunity to build this system did not stem directly from any strength of functional programming or OCaml. It was necessary for a person with credibility amongst biologists to champion its development, and this credibility took several years to build. Rapid development appears to be the single most important factor in allaying doubts about using a lesser known language, and we will briefly describe our experiences in bringing OCaml to several high profile projects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2012/09/Functional-Big-Data-Genomics-CUFP2012.pdf&quot; class=&quot;pdf&quot;&gt;Download slides&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.youtube.com/watch?feature=plcp&amp;amp;v=02YykaSMP0I&quot; class=&quot;television&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;br/&gt;
Ashish Agarwal, Sebastien Mondet, Paul Scheid, Aviv Madar, Richard Bonneau, Jane Carlton, Kristin C. Gunsalus. Functional Big-Data Genomics. &lt;em&gt;&lt;a href=&quot;http://cufp.org/conference/2012&quot;&gt;Commercial Users of Functional Programming 2012&lt;/a&gt;&lt;/em&gt;, Copenhagen, Denmark, Sep 15, 2012.&lt;/p&gt;
</content><id>http://ashishagarwal.org/2012/09/11/functional-big-data-genomics/</id><title type="text">Functional Big-Data Genomics</title><updated>2012-09-11T20:11:51-00:00</updated><author><name>ashishagarwal</name></author></entry><entry><link href="http://ashishagarwal.org/2012/09/10/biocaml/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;br/&gt;
Biology is an increasingly computational discipline due to rapid advances in experimental techniques, especially DNA sequencing, that are generating data at unprecedented rates. The computational techniques needed range from the complex (.e.g algorithms, distributed computing) to the simple (e.g. scripting, parsing), and there are hundreds of thousands of Biologists now involved in computing. We propose that OCaml can serve virtually the full spectrum of computational tasks needed by Biologists, improving both programmer productivity and computational efficiency. To support this end, we have developed Biocaml.&lt;/p&gt;
&lt;p&gt;Biocaml aims to be a standard library for the Biology domain. We provide features that are needed in a broad range of applications and avoid including overly specialized methods. The current feature set can be split into 3 broad categories: stream parsing/printing of many data formats, data structures for genomics, and access to public data repositories. We will demonstrate how some complex calculations can be performed quite easily with the current API, and describe our efforts to make a uniform API with comprehensive documentation. Finally, there is a BioX library for X equal to any programming language. The most widely used is BioPerl, and we will compare Biocaml with these alternatives.&lt;/p&gt;
&lt;p&gt;Biocaml and other OCaml libraries have now been successfully used in multiple high-profile Biology projects (e.g. modENCODE, ENCODE, NYU&amp;rsquo;s Genomics Core Facility, and others). Some time will be spent discussing the social aspect of bringing a novel language to the Biology community. We will attempt to elucidate strategies that are successful and those that are not. In particular, it will be argued that discussions regarding programming language choices need to be more scientific.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2012/09/biocaml-OUD2012.pdf&quot; class=&quot;pdf&quot;&gt;Download slides&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=rzrqcTWc2V8&amp;amp;feature=plcp&quot; class=&quot;television&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;br/&gt;
Ashish Agarwal, Sebastien Mondet, Philippe Veber, Christophe Troestler, Francois Berenger. Biocaml: The OCaml Bioinformatics Library. &lt;em&gt;&lt;a href=&quot;http://oud.ocaml.org&quot;&gt;OCaml Users and Developers Meeting 2012&lt;/a&gt;&lt;/em&gt;, Copenhagen, Denmark, Sep 14, 2012.&lt;/p&gt;
</content><id>http://ashishagarwal.org/2012/09/10/biocaml/</id><title type="text">Biocaml: The OCaml Bioinformatics Library</title><updated>2012-09-10T20:11:38-00:00</updated><author><name>ashishagarwal</name></author></entry><entry><link href="http://ashishagarwal.org/2012/06/29/ibm-pl-day/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Biology is an increasingly computational discipline. Rapid advances in experimental techniques, especially DNA sequencing, are generating data at exponentially increasing rates. Aside from the algorithmic challenges this poses, researchers must manage large volumes and innumerable varieties of data, run computational jobs on an HPC cluster, and track the inputs/outputs of the numerous computational tools they employ. Here we describe a software stack fully implemented in OCaml that operates the Genomics Core Facility at NYU&amp;rsquo;s Center for Genomics and Systems Biology.&lt;/p&gt;
&lt;p&gt;We define a domain specific language (DSL) that allows us to easily describe the data we need to track. More importantly, the DSL approach provides us with code generation capabilities. From a single description, we generate PostgreSQL schema definitions, OCaml bindings to the database, and web pages and forms for end-users to interact with the database. Strong type safety is provided at each stage. Database bindings check properties not expressible in SQL, and web pages, forms, and links are validated at compile time by the Ocsigen framework. Since the entire stack depends on this single data description, rapid updates are easy; the compiler informs us of all necessary changes.&lt;/p&gt;
&lt;p&gt;The application launches compute intensive jobs on a high-performance compute (HPC) cluster, requiring consideration of concurrency and fault-tolerance. We have implemented what we call a &amp;ldquo;flow&amp;rdquo; monad that combines error and thread monads. Errors are modeled with polymorphic variants, which get arranged automatically into a hierarchical structure from lower level system calls to high level functions. The net result is extremely precise information in the case of any failures and reasonably straightforward concurrency management.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2012/06/IBM_PL_Day_2012.pdf&quot; class=&quot;pdf&quot;&gt;Download slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;br/&gt;
Sebastien Mondet, Ashish Agarwal, Paul Scheid, Aviv Madar, Richard Bonneau, Jane Carlton, Kristin C. Gunsalus. Managing and Analyzing Big-Data in Genomics. &lt;em&gt;&lt;a href=&quot;http://researcher.watson.ibm.com/researcher/view_project.php?id=3198&quot;&gt;IBM Programming Languages Day 2012&lt;/a&gt;&lt;/em&gt;, Hawthorne, NY, June 28, 2012.&lt;/p&gt;
</content><id>http://ashishagarwal.org/2012/06/29/ibm-pl-day/</id><title type="text">Managing and Analyzing Big-Data in Genomics</title><updated>2012-06-29T17:18:00-00:00</updated><author><name>ashishagarwal</name></author></entry><entry><link href="http://ashishagarwal.org/2010/04/21/logit-release/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://github.com/agarwal/logit&quot;&gt;http://github.com/agarwal/logit&lt;/a&gt;&lt;/p&gt;
</content><id>http://ashishagarwal.org/2010/04/21/logit-release/</id><title type="text">logit – a simple tool to date-stamp files into a log directory</title><updated>2010-04-21T18:18:02-00:00</updated><author><name>ashishagarwal</name></author></entry><entry><link href="http://ashishagarwal.org/2010/03/27/iccs2010/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;When solving machine learning problems, there is currently little automated support for easily experimenting with alternative statistical models or solution strategies. This is because this activity often requires expertise from several di&amp;iuml;&amp;not;&amp;euro;erent &amp;iuml;&amp;not;&amp;#129;elds (e.g., statistics, optimization, linear algebra), and the level of formalism required for automation is much higher than for a human solving problems on paper. We present a system toward addressing these issues, which we achieve by (1) formalizing a type theory for probability and optimization, and (2) providing an interactive rewrite system for applying problem reformulation theorems. Automating solution strategies this way enables not only manual experimentation but also higher-level, automated activities, such as autotuning.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1016/j.procs.2010.04.205&quot; class=&quot;html&quot;&gt;Download from publisher&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2010/06/ICCS_2010_Talk.pdf&quot; class=&quot;pdf&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;div style=&quot;width:425px&quot;&gt;&lt;object width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=iccs2010talk-101219124801-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=iccs-2010-talk&amp;amp;userName=agarwal1975&quot;/&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed name=&quot;__sse6242390&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=iccs2010talk-101219124801-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=iccs-2010-talk&amp;amp;userName=agarwal1975&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;br/&gt;
Sooraj Bhat, Ashish Agarwal, Alexander Gray, Richard Vuduc (2010). Toward Interactive Statistical Modeling, In &lt;em&gt;Procedia Computer Science, International Conference on Computational Science ICCS 2010&lt;/em&gt;, &lt;strong&gt;1&lt;/strong&gt;(1): 1892-1838.&lt;/p&gt;
</content><id>http://ashishagarwal.org/2010/03/27/iccs2010/</id><title type="text">Toward Interactive Statistical Modeling</title><updated>2010-03-27T22:39:22-00:00</updated><author><name>ashishagarwal</name></author></entry><entry><link href="http://ashishagarwal.org/2010/01/18/automating-mp-transformations/" rel="alternate"/><contributor><uri>http://ashishagarwal.org/tag/ocaml/feed/</uri><name>ashishagarwal</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Mathematical programs (MPs) are a class of constrained optimization problems that include linear, mixed-integer, and disjunctive programs. Strategies for solving MPs rely heavily on various transformations between these subclasses, but most are not automated because MP theory does not presently treat programs as syntactic objects. In this work, we present the &amp;iuml;&amp;not;&amp;#129;rst syntactic de&amp;iuml;&amp;not;&amp;#129;nition of MP and of some widely used MP transformations, most notably the big-M and convex hull methods for converting disjunctive constraints. We use an embedded OCaml DSL on problems from chemical process engineering and operations research to compare our automated transformations to existing technology&amp;acirc;&amp;euro;&amp;rdquo;&amp;iuml;&amp;not;&amp;#129;nding that no one technique is always best&amp;acirc;&amp;euro;&amp;rdquo;and also to manual reformulations&amp;acirc;&amp;euro;&amp;rdquo;&amp;iuml;&amp;not;&amp;#129;nding that our mechanizations are comparable to human experts. This work enables higher-level solution strategies that can use these transformations as subroutines.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://dx.doi.org/10.1007/978-3-642-11503-5_12&quot; class=&quot;html&quot;&gt;Download from publisher&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2010/06/Preprint_PADL2010.pdf&quot; class=&quot;pdf&quot;&gt;Download preprint&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2010/03/padl2010-code.tar.gz&quot; class=&quot;zip&quot;&gt;Associated code&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://ashishagarwal.org/wp-content/uploads/2010/03/padl2010_talk.pdf&quot; class=&quot;pdf&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;div style=&quot;width:425px&quot;&gt;&lt;object width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=padl2010talk-101219123908-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=padl-2010-talk&amp;amp;userName=agarwal1975&quot;/&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed name=&quot;__sse6242291&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=padl2010talk-101219123908-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=padl-2010-talk&amp;amp;userName=agarwal1975&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;br/&gt;
Ashish Agarwal, Sooraj Bhat, Alexander Gray, Ignacio E. Grossmann (2010). Automating Mathematical Program Transformations, in &lt;em&gt;Proceedings of the 12th International Symposium on Practical Aspects of Declarative Languages, PADL 2010&lt;/em&gt;, Vol 5937 of &lt;em&gt;Lecture Notes in Computer Science&lt;/em&gt;, pp. 134-148.&lt;/p&gt;
</content><id>http://ashishagarwal.org/2010/01/18/automating-mp-transformations/</id><title type="text">Automating Mathematical Program Transformations</title><updated>2010-01-18T19:13:17-00:00</updated><author><name>ashishagarwal</name></author></entry></feed>