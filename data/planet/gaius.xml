<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://gaius.tech/category/ocaml/feed/</id><title type="text">gaius</title><updated>2023-06-30T05:47:26-00:00</updated><entry><link href="https://gaius.tech/2019/02/10/learning-a-new-language/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;Generally, every program I write, regardless of what useful thing it actually does, and regardless of what programming language it is written in, has to do certain things, which usually includes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Importing a library&lt;/b&gt; and calling functions contained within that library&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Handling datatypes&lt;/b&gt; such as converting between strings and integers, and knowing when this is implicit or explicit, how dates and times work, and so on&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Getting command line parameters&lt;/b&gt; or &lt;b&gt;parsing a configuration file&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Writing log messages&lt;/b&gt; such as to files or &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/sd_journal_print.html#&quot;&gt;the system log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Handling errors and exceptions&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Connecting to services&lt;/b&gt; such as a database, a REST API, a &lt;a href=&quot;https://kafka.apache.org&quot;&gt;message bus&lt;/a&gt; etc&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reading and writing files&lt;/b&gt; to the disk, or to &lt;a href=&quot;https://azure.microsoft.com/en-gb/services/storage/blobs/&quot;&gt;blob storage&lt;/a&gt; or &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/python/blobstore/&quot;&gt;whatever it&amp;rsquo;s called&lt;/a&gt; this week&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Spawning threads and processes&lt;/b&gt; and communicating between them&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Building a package&lt;/b&gt; whether that&amp;rsquo;s a self-contained binary, an RPM, an OCI container, whatever is native to that language and the platform&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s easy to find examples of most of these things using resources such as &lt;a href=&quot;http://rosettacode.org/wiki/Rosetta_Code&quot;&gt;Rosetta Code&lt;/a&gt; and my first real program will be a horrific cut and paste mess &amp;ndash; but it will get me started and I&amp;rsquo;ll soon refine it and absorb the idiomatic patterns of the language and soon be writing fluently in it, and knowing my way around the ecosystem, what libraries are available, which are the strengths and weaknesses of the language, the libraries, the community and so on. Once you have done this a few times it becomes easy and you can stop worrying so much about being a &amp;ldquo;language X programmer&amp;rdquo; and concentrate on the important stuff, which is the problem domain you are working in. &lt;/p&gt;
</content><id>https://gaius.tech/2019/02/10/learning-a-new-language/</id><title type="text">Learning a New Language</title><updated>2019-02-10T10:55:04-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2018/07/29/not-learning-is-a-skill-too/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;To be successful in tech, it&amp;rsquo;s well known that you must keep your skills up to date. The onus is on each individual to do this, no-one will do it for you, and companies that provide ongoing personal development are few and far between. Many companies would rather &lt;a href=&quot;https://www.theregister.co.uk/2018/02/06/ibm_retracts_agreed_voluntary_redundancies/&quot;&gt;&amp;ldquo;remix our skills&amp;rdquo;&lt;/a&gt;, which means laying off workers with one skill (on statutory minimum terms) and hiring people with the new skill. Which is short-termist in the extreme; the new workers are no better than the old, they just happened to enter the workforce later, and the churn means there is no accumulation of institutional knowledge. If you were one of the newer workers, why would you voluntarily step onto this treadmill and if you were a client, why would you hire such a firm when it provides no value-add over just hiring the staff you need yourself? Anyway, I digress.&lt;/p&gt;
&lt;p&gt;It is clear that C++11 was a enormous improvement over C++98. The list of &lt;a href=&quot;https://smartbear.com/blog/develop/the-biggest-changes-in-c11-and-why-you-should-care/&quot;&gt;new features&lt;/a&gt; is vast and all-encompassing, yet at the same time, backwards compatibility is preserved. You can have all the benefits of the new while preserving investment in the old (&amp;ldquo;legacy&amp;rdquo;). Upgrading your skills to C++11 was a very obvious thing to do, and because of the smooth transition, you could make quick wins as you brought yourself up to speed. That is just one example of the sort of thing I am talking about. You still need to put the effort in to learn it and seek out opportunities to use it, but the path from the old to the new is straightforward and there are early and frequent rewards along the way, and from there to C++14, 17, 20&amp;hellip;&lt;/p&gt;
&lt;p&gt;But I look around the current technology landscape and I see things that are only incremental improvements on existing programming languages or technologies and yet require a clean break with the past, which in practice means not only learning the new thing, but also rebuilding the ecosystem and tooling around it, porting/re-writing all the code, encountering all new bugs and edge cases, rediscovering the design patterns or new idioms in the language. The extent to which the new technology is &amp;ldquo;better&amp;rdquo; is dwarfed by the effort taken to use it, so where is the improved productivity coming from? Every project consists of either learning the language as you go, or maintaining and extending something written by someone who was learning the language as they went, perhaps gambling on getting in on the ground floor of the next big thing. But things only get big if people stick with them is the paradox!&lt;/p&gt;
&lt;p&gt;So I am pretty comfortable with my decision to mostly ignore lots of new things, including but not limited to Go, Rust, Julia, &lt;a href=&quot;https://blogs.msdn.microsoft.com/devops/2018/07/18/protecting-our-users-from-the-npm-eslint-package-breach/&quot;&gt;Node.js&lt;/a&gt;, Perl6 in favour of deepening my skills in C++, R, Python and pushing into new problem domains (e.g. &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;ML/AI&lt;/a&gt;) with my tried and trusted tools. When something comes along that is a big enough leap forward over any of them, of course I&amp;rsquo;ll jump &amp;ndash; just like I did when I learnt Java in 1995 and was getting paid for it the same year! I had a lot of fun with OCaml and Haskell too, but neither gained significant traction in the end, also &lt;a href=&quot;https://gaiustech.wordpress.com/2011/06/15/scala-quickstart-for-oracle-dbas/&quot;&gt;Scala&lt;/a&gt;. I don&amp;rsquo;t see anything on the horizon, all the cutting edge stuff is appearing as &lt;a href=&quot;https://devblogs.nvidia.com/seven-things-numba/&quot;&gt;libraries&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/C++20&quot;&gt;features&lt;/a&gt; for my &amp;ldquo;big 3&amp;rdquo; while the newer ecosystems are scrambling to backfill their capabilities and will probably never match the breadth and depth, before falling out of fashion and fading away. I&amp;rsquo;ll be interested in any comments arguing why I&amp;rsquo;m wrong to discount them, or any pointers to things that &lt;i&gt;are&lt;/i&gt; sufficiently advanced to be worth taking a closer look at.&lt;/p&gt;
</content><id>https://gaius.tech/2018/07/29/not-learning-is-a-skill-too/</id><title type="text">Not-learning is a skill too</title><updated>2018-07-29T12:23:30-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2014/12/28/2014/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;So, how was 2014 for me, in tech at least? Pretty good. It has been quite an interesting experience adapting to an all-proprietary tech stack (database, language, IDE, job scheduler) but I feel I am finally getting a grip on how all the moving parts hang together and how the sum is greater than the whole of the parts. So, professionally, I&amp;rsquo;m pretty happy and I find out early next year how happy they are with me &lt;img src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; alt=&quot;&amp;#128578;&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;systemd&lt;/code&gt; farce has prompted me, after nearly 20 years, to look at alternatives to Debian for my personal Unix(-like). Candidates for a replacement so far are &lt;a href=&quot;http://www.dragonflybsd.org/&quot;&gt;DragonFly&lt;/a&gt;, &lt;a href=&quot;http://minix3.org/&quot;&gt;Minix3&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/software/hurd/hurd/running/debian.html&quot;&gt;Debian/HURD&lt;/a&gt;, tho&amp;rsquo; I have to wonder how viable the latter is. The Debian project simply doesn&amp;rsquo;t have the manpower to maintain two parallel distros, once &lt;code&gt;systemd&lt;/code&gt; has fully infected Linux. Windows 95 called, it wants its registry back. I have these running in VMs to kick the tyres right now. But more and more of my scarce time for personal projects is taken up with &lt;a href=&quot;http://www.theregister.co.uk/2011/11/30/bbc_micro_model_b_30th_anniversary/&quot;&gt;BBC Micro&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Atari_ST&quot;&gt;Atari ST&lt;/a&gt; stuff now anyway&amp;hellip;&lt;/p&gt;
&lt;p&gt;Speaking of the Beeb, &lt;a href=&quot;http://www.elitedangerous.com/&quot;&gt;Elite: Dangerous&lt;/a&gt; is available now. I have to admit I was skeptical that it would ever ship, and I&amp;rsquo;ll hold my hand up to say I was wrong about that, good work Braben. However I won&amp;rsquo;t be playing. The lack of a single player mode is the deal breaker for me &amp;ndash; you can play single-player but you are forced to participate in the shared universe, which runs in real time. But in a game I want the universe to stop when I&amp;rsquo;m not there and resume where I left off whether that&amp;rsquo;s an hour later or a month. And consider this: I bought my copy of the original Elite, in 1984, with pocket money I&amp;rsquo;d saved. Acornsoft ceased to exist as a separate entity in 1986 as &lt;a href=&quot;http://www.nytimes.com/1984/07/03/business/warner-sells-atari-to-tramiel.html&quot;&gt;the bottom dropped out&lt;/a&gt; of the home computer market. But I still play it in 2014, on original hardware. Should something happen to the servers owned and operated by Frontier, what happens to online-only Elite?&lt;/p&gt;
&lt;p&gt;Nothing to report on the &lt;a href=&quot;https://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; front. I&amp;rsquo;m still into it, but just haven&amp;rsquo;t had time to do much on &lt;a href=&quot;http://gaiustech.github.io/ociml/manpage.html&quot;&gt;OCI*ML&lt;/a&gt;. As I said previously, I had gotten it to the point at which it was useful for the work I was doing at the time. Features such as handling BLOBs are still outstanding, maybe I will have a chance to add that (and find a way to do it without my company claiming the IP). I&amp;rsquo;d like to maintain my connection to the OCaml community, because you never know&amp;hellip; And I need to get properly up to speed on &lt;a href=&quot;http://www.drdobbs.com/cpp/the-c14-standard-what-you-need-to-know/240169034&quot;&gt;C++14&lt;/a&gt;, again to keep options open. (&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/farewell-dr-dobbs/240169421&quot;&gt;RIP Dr Dobbs&lt;/a&gt;). Will I ever return to the world of Oracle? I won&amp;rsquo;t rule it out but what I am doing now is a radically different way of thinking about databases and the applications that run on them; a few years of this can only strengthen my database and development career long term.&lt;/p&gt;
&lt;p&gt;My prediction in wider tech in 2015 is this is the make-or-break year, either &lt;em&gt;something is done&lt;/em&gt; about impossible-to-secure HTTP, SMTP and TCP/IP networks, or the public massively disengages from online services in general, sticking only to those websites with a) a good track record of security and b) an even better track record of making things right financially and logistically when their customers are impacted by a breach.&lt;/p&gt;
</content><id>https://gaius.tech/2014/12/28/2014/</id><title type="text">2014</title><updated>2014-12-28T10:40:51-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2013/08/30/real-world-ocaml/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;In the course of my work with OCaml I have traditionally resisted using anything other than &amp;ldquo;pure&amp;rdquo; OCaml, and the facilities of the underlying OS. So rather than &lt;a href=&quot;http://omake.metaprl.org/index.html&quot;&gt;OMake&lt;/a&gt; or &lt;a href=&quot;http://oasis.forge.ocamlcore.org&quot;&gt;OASIS&lt;/a&gt; I just used plain, old-fashioned Makefiles. For package management, I relied on &lt;a href=&quot;https://wiki.debian.org/Apt&quot;&gt;APT&lt;/a&gt; on Debian and &lt;a href=&quot;http://www.macports.org&quot;&gt;MacPorts&lt;/a&gt; on OSX. And I avoided both &lt;a href=&quot;http://batteries.forge.ocamlcore.org&quot;&gt;Batteries&lt;/a&gt; and &lt;a href=&quot;http://janestreet.github.io&quot;&gt;Core&lt;/a&gt;. No so much out of a fear of &amp;ldquo;backing the wrong horse&amp;rdquo; but just to make whatever I did as portable and easy to adopt as possible. And also, in the early days, I didn&amp;rsquo;t really &lt;a href=&quot;http://stackoverflow.com/q/3889117/447514&quot;&gt;know&lt;/a&gt; enough to choose anyway, and I wanted to work with the raw language rather than a high-level framework. Sort of like you can &lt;a href=&quot;https://gaiustech.wordpress.com/2011/08/03/ocaml-bindings-for-coherence-with-swig/&quot;&gt;learn to program MFC without ever really learning C++&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;But now &lt;a href=&quot;https://realworldocaml.org/&quot;&gt;Real World OCaml&lt;/a&gt; (which I have on &lt;a href=&quot;http://www.amazon.co.uk/Real-World-OCaml-Functional-programming/dp/144932391X&quot;&gt;pre-order&lt;/a&gt;) is in final draft, and spent some of yesterday getting my Debian and OSX environments &lt;a href=&quot;https://realworldocaml.org/beta3/en/html/installation.html&quot;&gt;set up for it&lt;/a&gt;&amp;dagger;. One quirk I quickly found is that both have &lt;code&gt;pkgconfig&lt;/code&gt; as a prereq, which for whatever reason, neither system had already, and that&amp;rsquo;s not mentioned on the page, maybe everyone else has it by default. I have a bunch of OCaml stuff in-flight at the moment &amp;ndash; OCI*ML test suite and new features, some playing with &lt;a href=&quot;http://projecteuler.net&quot;&gt;Project Euler&lt;/a&gt; (solved &lt;del&gt;15&lt;/del&gt;16 problems at time of writing) and now working my way through this (trying not to skip to &lt;a href=&quot;https://realworldocaml.org/beta3/en/html/foreign-function-interface.html&quot;&gt;FFI&lt;/a&gt; which is a keen interest of mine, obviously!). That&amp;rsquo;s on top of playing with Oracle 12c, and I have barely started properly playing with C++11 new features yet! &lt;/p&gt;
&lt;p&gt;&amp;dagger; Links to the draft of the book will stop working at some point I expect&amp;hellip;&lt;/p&gt;
</content><id>https://gaius.tech/2013/08/30/real-world-ocaml/</id><title type="text">Real World OCaml</title><updated>2013-08-30T15:26:15-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2013/08/17/strange-datetime-problem/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;While working on my unit tests, I came across a sporadic failure in inserting and selecting Datetimes to the database, so I wrote a quick test harness to see what&amp;rsquo;s going on:&lt;/p&gt;
&lt;pre class=&quot;brush: fsharp; title: ; notranslate&quot;&gt;
open Ociml
open Printf

let () = 
  let lda =  oralogon &amp;quot;ociml_test/ociml_test&amp;quot; in
  let sth = oraopen lda in
  for i = 0 to 100 do
    orasql sth &amp;quot;truncate table test_date&amp;quot;;
    let d = (Datetime (localtime (Random.float (time() *. 2.)))) in
    oraparse sth &amp;quot;insert into test_date values (:1)&amp;quot;;
    orabind sth (Pos 1) d;
    oraexec sth;
    oracommit lda;
    orasql sth &amp;quot;select * from test_date&amp;quot;;
    let rs = orafetch sth in
    match (rs.(0) = d) with
    |true -&amp;gt; print_endline (sprintf &amp;quot;Inserted %s, got %s, OK&amp;quot; (orastring d) (orastring rs.(0)))
    |false -&amp;gt; print_endline (sprintf &amp;quot;Inserted %s, got %s &amp;lt;-------- FAIL&amp;quot; (orastring d) (orastring rs.(0)))
  done
&lt;/pre&gt;
&lt;p&gt;This fails about 3% of the time, for reasons I cannot fathom, there seems to be no correlation with summer time. Here&amp;rsquo;s a set of results incase anyone else can figure it out:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; collapse: true; gutter: false; light: false; title: Result of running the above script; toolbar: true; notranslate&quot;&gt;

gaius@debian7:~/Projects/ociml$ o
        Objective Caml version 3.12.1

	OCI*ML 0.3 built against OCI 11.2

not connected &amp;gt; #use &amp;quot;tests/date_grinder.ml&amp;quot;;;
Inserted 31-Jul-1993 20:21:44, got 31-Jul-1993 20:21:44, OK
Inserted 01-Mar-2022 09:17:53, got 01-Mar-2022 09:17:53, OK
Inserted 18-Jan-1995 05:48:57, got 18-Jan-1995 05:48:57, OK
Inserted 24-Jul-2024 14:10:44, got 24-Jul-2024 14:10:44, OK
Inserted 12-Jan-1991 12:32:01, got 12-Jan-1991 12:32:01, OK
Inserted 03-Nov-2018 18:26:46, got 03-Nov-2018 18:26:46, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 08-Jan-2036 17:58:34, got 08-Jan-2036 17:58:34, OK
Inserted 31-May-2001 07:29:34, got 31-May-2001 07:29:34, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 07-Aug-1986 04:59:54, got 07-Aug-1986 04:59:54, OK
Inserted 08-Mar-2036 15:19:15, got 08-Mar-2036 15:19:15, OK
Inserted 23-Mar-1975 09:36:54, got 23-Mar-1975 09:36:54, OK
Inserted 26-Aug-1998 10:39:15, got 26-Aug-1998 10:39:15, OK
Inserted 23-Jan-1985 13:23:09, got 23-Jan-1985 13:23:09, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 02-Dec-2024 12:06:13, got 02-Dec-2024 12:06:13, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 20-Mar-1985 11:47:15, got 20-Mar-1985 11:47:15, OK
Inserted 25-Oct-1976 20:16:19, got 25-Oct-1976 20:16:19, OK
Inserted 29-Dec-1972 23:46:42, got 29-Dec-1972 23:46:42, OK
Inserted 17-Aug-1993 06:41:06, got 17-Aug-1993 06:41:06, OK
Inserted 26-Sep-2037 23:58:20, got 26-Sep-2037 23:58:20, OK
Inserted 15-Aug-1994 07:44:57, got 15-Aug-1994 07:44:57, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 13-Sep-2022 23:14:04, got 13-Sep-2022 23:14:04, OK
Inserted 23-Mar-2031 15:29:59, got 23-Mar-2031 15:29:59, OK
Inserted 27-Dec-1983 21:15:25, got 27-Dec-1983 21:15:25, OK
Inserted 29-Feb-2032 06:55:03, got 29-Feb-2032 06:55:03, OK
Inserted 17-Jan-2019 10:58:15, got 17-Jan-2019 10:58:15, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 09-Oct-2031 21:33:34, got 09-Oct-2031 21:33:34, OK
Inserted 21-Aug-2023 20:31:46, got 21-Aug-2023 20:31:46, OK
Inserted 20-Sep-1992 16:30:21, got 20-Sep-1992 16:30:21, OK
Inserted 11-Nov-1970 10:00:13, got 11-Nov-1970 09:00:13 &amp;lt;-------- FAIL
Inserted 24-Feb-1984 20:46:46, got 24-Feb-1984 20:46:46, OK
Inserted 19-May-2005 00:45:39, got 19-May-2005 00:45:39, OK
Inserted 22-Apr-1986 05:51:55, got 22-Apr-1986 05:51:55, OK
Inserted 10-Apr-1987 11:32:32, got 10-Apr-1987 11:32:32, OK
Inserted 28-May-2016 15:43:58, got 28-May-2016 15:43:58, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 11-Feb-2033 01:03:55, got 11-Feb-2033 01:03:55, OK
Inserted 10-Jul-2031 19:50:26, got 10-Jul-2031 19:50:26, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 23-Nov-1982 04:12:36, got 23-Nov-1982 04:12:36, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 11-May-2009 21:59:43, got 11-May-2009 21:59:43, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 07-Jun-2007 01:11:58, got 07-Jun-2007 01:11:58, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 14-Mar-2002 06:34:51, got 14-Mar-2002 06:34:51, OK
Inserted 09-Nov-2009 06:40:03, got 09-Nov-2009 06:40:03, OK
Inserted 30-Jul-2037 06:55:44, got 30-Jul-2037 06:55:44, OK
Inserted 26-Nov-2030 21:14:53, got 26-Nov-2030 21:14:53, OK
Inserted 05-Sep-1996 15:14:24, got 05-Sep-1996 15:14:24, OK
Inserted 07-Apr-1980 11:34:26, got 07-Apr-1980 11:34:26, OK
Inserted 02-Jan-2037 18:55:00, got 02-Jan-2037 18:55:00, OK
Inserted 14-Mar-1977 15:07:19, got 14-Mar-1977 15:07:19, OK
Inserted 16-Oct-1995 01:51:15, got 16-Oct-1995 01:51:15, OK
Inserted 04-Aug-1990 06:50:10, got 04-Aug-1990 06:50:10, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 23-May-2021 16:00:23, got 23-May-2021 16:00:23, OK
Inserted 17-Aug-1982 02:21:05, got 17-Aug-1982 02:21:05, OK
Inserted 27-Aug-2013 20:52:49, got 27-Aug-2013 20:52:49, OK
Inserted 13-Dec-2027 14:10:48, got 13-Dec-2027 14:10:48, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 29-Jun-2025 02:53:11, got 29-Jun-2025 02:53:11, OK
Inserted 24-Jul-2031 23:54:31, got 24-Jul-2031 23:54:31, OK
Inserted 15-Mar-1971 21:08:49, got 15-Mar-1971 20:08:49 &amp;lt;-------- FAIL
Inserted 27-Apr-1981 21:35:54, got 27-Apr-1981 21:35:54, OK
Inserted 22-Dec-2008 19:00:03, got 22-Dec-2008 19:00:03, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 11-Feb-1986 09:25:28, got 11-Feb-1986 09:25:28, OK
Inserted 24-Mar-1971 12:46:15, got 24-Mar-1971 11:46:15 &amp;lt;-------- FAIL
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 29-Sep-2016 04:41:02, got 29-Sep-2016 04:41:02, OK
Inserted 03-Dec-2000 09:58:00, got 03-Dec-2000 09:58:00, OK
Inserted 10-Dec-1991 18:08:10, got 10-Dec-1991 18:08:10, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 29-Oct-1999 04:17:24, got 29-Oct-1999 04:17:24, OK
Inserted 21-Oct-1988 14:15:16, got 21-Oct-1988 14:15:16, OK
Inserted 27-May-2022 04:21:34, got 27-May-2022 04:21:34, OK
Inserted 16-Oct-1982 05:25:39, got 16-Oct-1982 05:25:39, OK
Inserted 19-Nov-1998 14:57:54, got 19-Nov-1998 14:57:54, OK
Inserted 29-Jun-1975 10:06:11, got 29-Jun-1975 10:06:11, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 02-Jul-1996 03:08:55, got 02-Jul-1996 03:08:55, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 17-Jan-2016 17:46:01, got 17-Jan-2016 17:46:01, OK
Inserted 28-Feb-1993 16:57:25, got 28-Feb-1993 16:57:25, OK
Inserted 21-Dec-1977 16:54:30, got 21-Dec-1977 16:54:30, OK
Inserted 05-Mar-2003 12:58:52, got 05-Mar-2003 12:58:52, OK
Inserted 03-Jul-2023 17:06:21, got 03-Jul-2023 17:06:21, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
Inserted 06-Aug-1981 02:57:40, got 06-Aug-1981 02:57:40, OK
Inserted 17-Nov-1983 23:55:58, got 17-Nov-1983 23:55:58, OK
Inserted 17-Mar-1999 22:40:16, got 17-Mar-1999 22:40:16, OK
Inserted 04-Oct-2023 18:55:54, got 04-Oct-2023 18:55:54, OK
Inserted 28-Feb-1991 09:52:00, got 28-Feb-1991 09:52:00, OK
Inserted 13-Dec-1901 20:45:52, got 13-Dec-1901 20:45:52, OK
&lt;/pre&gt;
&lt;p&gt;The only thing I can see is that they&amp;rsquo;re near the Unix epoch, but why would that cause it to be exactly 1 hour out&amp;hellip;? The latest version of the code is &lt;a href=&quot;https://github.com/gaiustech/ociml&quot;&gt;up on Github&lt;/a&gt;. The underlying C code is in &lt;code&gt;oci_types.c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, at least this illustrates the value of soak-testing with randomly generated data &amp;ndash; I had never experienced this issue &amp;ldquo;in the wild&amp;rdquo;, not has it been reported. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Fixed! Was a double-application of &lt;code&gt;localtime&lt;/code&gt;. I never noticed it because at the company I was at when I wrote this, there was a policy of all machines everywhere in the world being in GMT all year round! The epoch thing was a red herring. I suppose the moral of the story is make sure your random data is really random&amp;hellip;&lt;/p&gt;
</content><id>https://gaius.tech/2013/08/17/strange-datetime-problem/</id><title type="text">Strange Datetime Problem</title><updated>2013-08-17T19:59:55-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2013/08/15/ociml-make-test/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;Before resuming feature implementation in &lt;a href=&quot;http://gaiustech.github.io/ociml/&quot;&gt;OCI*ML&lt;/a&gt; I thought I ought to tighten up the test suite a bit, so I have started on a &lt;code&gt;make test&lt;/code&gt; target, including some utilities for generating large test datasets, which should be useful elsewhere. In the process I uncovered a couple of bugs, which I also fixed. Once I&amp;rsquo;m happy with the level of coverage, I might even get around to doing LOBs&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png&quot;&gt;&lt;img src=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=640&amp;amp;h=292&quot; data-attachment-id=&quot;2274&quot; data-permalink=&quot;https://gaius.tech/2013/08/15/ociml-make-test/maketest/&quot; data-orig-file=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png&quot; data-orig-size=&quot;917,419&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;}&quot; data-image-title=&quot;maketest&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=300&quot; data-large-file=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=640&quot; alt=&quot;maketest&quot; width=&quot;640&quot; height=&quot;292&quot; class=&quot;aligncenter size-full wp-image-2274&quot; srcset=&quot;https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=640&amp;amp;h=292 640w, https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=150&amp;amp;h=69 150w, https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=300&amp;amp;h=137 300w, https://gaiustech.files.wordpress.com/2013/08/maketest.png?w=768&amp;amp;h=351 768w, https://gaiustech.files.wordpress.com/2013/08/maketest.png 917w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It feels pretty good to be stretching the old OCaml muscles again &lt;img src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; alt=&quot;&amp;#128578;&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot;/&gt;&lt;/p&gt;
</content><id>https://gaius.tech/2013/08/15/ociml-make-test/</id><title type="text">OCI*ML: Make Test</title><updated>2013-08-15T16:01:03-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2013/07/31/august/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;As of today I am on gardening leave, and I intend to spend the time productively (after taking a long-planned and well-deserved holiday next week!). In no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update this blog more regularly, I have some posts that I have been meaning to write but just never have the time. I have been updating my &lt;a href=&quot;http://gaiusdive.wordpress.com/&quot;&gt;other blog&lt;/a&gt; tho&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Some work on my sorely neglected Open Source stuff &amp;ndash; finally LOBs in &lt;a href=&quot;http://gaiustech.github.io/ociml/&quot;&gt;OCI*ML&lt;/a&gt;?? &lt;img src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; alt=&quot;&amp;#128578;&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;Get properly up to speed in a couple of new technologies, mainly &lt;a href=&quot;https://gaiustech.wordpress.com/2013/06/27/howto-install-oracle-12c-on-debian-wheezy/&quot;&gt;Oracle 12c&lt;/a&gt; and &lt;a href=&quot;http://www.stroustrup.com/C++11FAQ.html&quot;&gt;C++11&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Repair the stack of broken &lt;a href=&quot;http://www.nesta.org.uk/areas_of_work/creative_economy/assets/features/bbc_micro&quot;&gt;BBC Micros&lt;/a&gt; in the living room!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been offered redundancy before, and take a pretty philosophical view of it. I work for organizations, or groups within larger organizations, that push hard and take risks. When it works, it works very well &amp;ndash; this year I got a decent bonus, despite the company struggling (a matter of public record, not betraying any secrets!). And when it doesn&amp;rsquo;t, then it&amp;rsquo;s time to go.&lt;/p&gt;
</content><id>https://gaius.tech/2013/07/31/august/</id><title type="text">August</title><updated>2013-07-31T11:10:11-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2012/06/15/quick-histograms/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;Having come back to actively working on &lt;a href=&quot;http://gaiustech.github.com/ociml/&quot;&gt;OCI*ML&lt;/a&gt; recently, it&amp;rsquo;s time I cracked on with some more features (I have been promising &lt;a href=&quot;http://docs.oracle.com/cd/B28359_01/appdev.111/b28393/adlob_intro.htm#ADLOB001&quot;&gt;LOBs&lt;/a&gt; for a long time, sorry to anyone who&amp;rsquo;s still waiting). Just to get warmed up, inspired by &lt;a href=&quot;http://github.com/holman/spark&quot;&gt;spark&lt;/a&gt; I have added a quick histogram function, similar to &lt;a href=&quot;https://gaiustech.wordpress.com/2011/05/14/ocaml-as-a-sqlplus-replacement/&quot;&gt;quick query&lt;/a&gt; for interactive use. This requires a query of the form of a label and a number, for example a simple view:&lt;/p&gt;
&lt;pre class=&quot;brush: sql; title: ; wrap-lines: false; notranslate&quot;&gt;
SQL&amp;gt; create view v1 as
select object_type, count(1) as howmany from user_objects group by object_type;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png&quot;&gt;&lt;img src=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png?w=640&amp;amp;h=206&quot; data-attachment-id=&quot;2124&quot; data-permalink=&quot;https://gaius.tech/2012/06/15/quick-histograms/qh/&quot; data-orig-file=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png&quot; data-orig-size=&quot;1065,344&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;}&quot; data-image-title=&quot;qh&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png?w=300&quot; data-large-file=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png?w=640&quot; class=&quot;aligncenter size-full wp-image-2124&quot; title=&quot;qh&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;206&quot; srcset=&quot;https://gaiustech.files.wordpress.com/2012/06/qh.png?w=638&amp;amp;h=206 638w, https://gaiustech.files.wordpress.com/2012/06/qh.png?w=150&amp;amp;h=48 150w, https://gaiustech.files.wordpress.com/2012/06/qh.png?w=300&amp;amp;h=97 300w, https://gaiustech.files.wordpress.com/2012/06/qh.png?w=768&amp;amp;h=248 768w, https://gaiustech.files.wordpress.com/2012/06/qh.png?w=1024&amp;amp;h=331 1024w, https://gaiustech.files.wordpress.com/2012/06/qh.png 1065w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
The histogram automatically &lt;a href=&quot;http://pleac.sourceforge.net/pleac_ocaml/userinterfaces.html&quot;&gt;scales&lt;/a&gt; to the width of the current window.&lt;/p&gt;
&lt;p&gt;Also, I have been reading Jordan Mechner&amp;rsquo;s book &lt;em&gt;&lt;a href=&quot;http://www.amazon.co.uk/The-Making-Prince-Persia-ebook/dp/B005WUE6Q2/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1333205986&amp;amp;sr=1-1&quot;&gt;The Making Of Prince Of Persia&lt;/a&gt;&lt;/em&gt;&amp;dagger;. It&amp;rsquo;s both fascinating and inspiring. Just before that, I read &lt;em&gt;&lt;a href=&quot;http://www.amazon.co.uk/Future-Here-Platform-Studies-ebook/dp/B007V5BVJG/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1339795151&amp;amp;sr=1-1&quot;&gt;The Future Was Here&lt;/a&gt;&lt;/em&gt;, the story of the Commodore Amiga&amp;Dagger;. The book is made even more poignant by my Mac inexplicably showing the beach ball as I scroll through a simple web page, or the mighty RHEL servers at work being unable to keep up with my typing. The future is &lt;em&gt;still&lt;/em&gt; back in the 80s.&lt;/p&gt;
&lt;p&gt;&amp;dagger; The &lt;a href=&quot;http://github.com/jmechner/Prince-of-Persia-Apple-II&quot;&gt;original code&lt;/a&gt; is also on Github.&lt;/p&gt;
&lt;p&gt;&amp;Dagger; I have an &lt;a href=&quot;http://en.wikipedia.org/wiki/Amiga_500_Plus&quot;&gt;A500+&lt;/a&gt; on my desk right now, the best of them IMHO. I might write a post comparing it with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Atari_STE#STE_models&quot;&gt;Atari STE&lt;/a&gt;, and the &lt;a href=&quot;https://gaiustech.wordpress.com/2012/01/04/happy-new-year-2/&quot;&gt;BBC&lt;/a&gt; with the C64, in the cold light of day as an experienced adult. I have a fine collection of classic machines now, often acquired broken with the intention of repairing them myself. Another time-sink from OCaml work&amp;hellip;&lt;/p&gt;
</content><id>https://gaius.tech/2012/06/15/quick-histograms/</id><title type="text">Quick histograms</title><updated>2012-06-15T20:35:48-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2012/06/07/ocaml-4-beta/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://caml.inria.fr/pub/distrib/ocaml-4.00/&quot;&gt;OCaml 4 beta 2&lt;/a&gt; has been released, and so I quickly tested &lt;a href=&quot;http://gaiustech.github.com/ociml/&quot;&gt;OCI*ML&lt;/a&gt; with it. Only a couple of minor tweaks were necessary, due to the following &lt;a href=&quot;http://caml.inria.fr/pub/distrib/ocaml-4.00/notes/Changes&quot;&gt;changes&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some .cmi for toplevel internals that used to be installed in`&lt;code&gt;ocamlc -where`&lt;/code&gt; are now to be found in  &lt;code&gt;`ocamlc -where`/compiler-libs&lt;/code&gt;. Add &amp;ldquo;&lt;code&gt;-I +compiler-libs&lt;/code&gt;&amp;rdquo; where needed.&lt;/li&gt;
&lt;li&gt;Warning 28 is now enabled by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The impact of these was that the &lt;a href=&quot;https://gaiustech.wordpress.com/2011/05/28/ociml-minor-updates/&quot;&gt;toplevel prompt&lt;/a&gt; wasn&amp;rsquo;t working in the shell, and one non-fatal warning when compiling, so nothing that would have broken any code, but it&amp;rsquo;s good to be up-to-date. The necessary changes have been checked in on Github. &lt;/p&gt;
&lt;p&gt;Speaking of which, bearing in mind the &lt;a href=&quot;http://www.bbc.co.uk/news/technology-18338956&quot;&gt;LinkedIn d&amp;eacute;b&amp;agrave;cle&lt;/a&gt;, I have a &lt;a href=&quot;http://github.com/gaiustech/MkPasswd&quot;&gt;password generator&lt;/a&gt; too&amp;hellip;&lt;/p&gt;
</content><id>https://gaius.tech/2012/06/07/ocaml-4-beta/</id><title type="text">OCaml 4 beta</title><updated>2012-06-07T18:17:03-00:00</updated><author><name>gaius</name></author></entry><entry><link href="https://gaius.tech/2011/09/09/segmentation-faults-tap-and-eclipse/" rel="alternate"/><contributor><uri>https://gaius.tech/category/ocaml/feed/</uri><name>gaius</name></contributor><content type="html">&lt;p&gt;This is quite a neat trick. Consider:&lt;/p&gt;
&lt;pre class=&quot;brush: cpp; title: ; notranslate&quot;&gt;
#include &amp;lt;cstdlib&amp;gt;

int main(int argc, char** argv) {
  int* ptr = NULL;
  *ptr = 1;

  exit(EXIT_SUCCESS);
}
&lt;/pre&gt;
&lt;p&gt;Referencing that &lt;code&gt;NULL&lt;/code&gt; pointer obviously crashes straight away with a terse &lt;a href=&quot;http://en.wikipedia.org/wiki/Segmentation_fault&quot;&gt;segmentation fault&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png&quot;&gt;&lt;img src=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=640&quot; data-attachment-id=&quot;1719&quot; data-permalink=&quot;https://gaius.tech/2011/09/09/segmentation-faults-tap-and-eclipse/segfault1/&quot; data-orig-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png&quot; data-orig-size=&quot;665,463&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;}&quot; data-image-title=&quot;segfault1&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=300&quot; data-large-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=640&quot; alt=&quot;&quot; title=&quot;segfault1&quot; class=&quot;aligncenter size-full wp-image-1719&quot; srcset=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=640 640w, https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=150 150w, https://gaiustech.files.wordpress.com/2011/09/segfault1.png?w=300 300w, https://gaiustech.files.wordpress.com/2011/09/segfault1.png 665w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
By simply linking it with &lt;code&gt;libSegFault&lt;/code&gt;, which seems to be documented only &lt;a href=&quot;http://www.cygwin.com/ml/gdb/2007-06/msg00345.html&quot;&gt;very informally&lt;/a&gt;, but comes with &lt;a href=&quot;http://www.gnu.org/s/libc/&quot;&gt;glibc&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png&quot;&gt;&lt;img src=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=640&quot; data-attachment-id=&quot;1720&quot; data-permalink=&quot;https://gaius.tech/2011/09/09/segmentation-faults-tap-and-eclipse/segfault2/&quot; data-orig-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png&quot; data-orig-size=&quot;665,463&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;}&quot; data-image-title=&quot;segfault2&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=300&quot; data-large-file=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=640&quot; alt=&quot;&quot; title=&quot;segfault2&quot; class=&quot;aligncenter size-full wp-image-1720&quot; srcset=&quot;https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=640 640w, https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=150 150w, https://gaiustech.files.wordpress.com/2011/09/segfault2.png?w=300 300w, https://gaiustech.files.wordpress.com/2011/09/segfault2.png 665w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
Of course you could get all this by starting the program with &lt;a href=&quot;http://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_42.html&quot;&gt;gdb&lt;/a&gt; but this looks like a great technique for diagnosing crashes &amp;ldquo;in the wild&amp;rdquo;. Not that my code segfaults all the time, mind! After writing this, I found some more details on &lt;a href=&quot;http://stackoverflow.com/q/77005/447514&quot;&gt;Stack Overflow&lt;/a&gt;, including a good tip about &lt;code&gt;c++filt&lt;/code&gt;. Another useful utility is &lt;code&gt;&lt;a href=&quot;http://linux.die.net/man/1/addr2line&quot;&gt;addr2line&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also I am starting to incorporate &lt;code&gt;&lt;a href=&quot;http://testanything.org/wiki/index.php/Testing_with_C++#Testing_using_libtap.2B.2B&quot;&gt;libtap++&lt;/a&gt;&lt;/code&gt;, an implementation of the &lt;a href=&quot;http://testanything.org/wiki/index.php/TAP_at_IETF:_Draft_Standard#Introduction&quot;&gt;Test Anything Protocol&lt;/a&gt;, into my projects. C++ has &lt;a href=&quot;http://c2.com/cgi/wiki?StronglyTyped&quot;&gt;strong typing&lt;/a&gt;, at least stronger than plain C, which helps &lt;a href=&quot;https://gaiustech.wordpress.com/2011/04/25/and-while-im-on-the-subject/&quot;&gt;trap errors at compile time&lt;/a&gt; like in OCaml. But since I always write a test harness anyway, it makes sense to fall into line with the way everyone else does it, especially as I have ambitions for wider adoption of my bindings&amp;dagger;. &lt;s&gt;Presently there is &lt;a href=&quot;http://testanything.org/wiki/index.php/TAP_Producers&quot;&gt;no TAP producer for OCaml&lt;/a&gt;&lt;/s&gt;&amp;Dagger;, so at some point I will work on that too (or just bind to &lt;a href=&quot;https://github.com/zorgnax/libtap&quot;&gt;the C libtap&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;On the recommendation of a friend of mine who is a very experienced C++ programmer, I have been playing with &lt;a href=&quot;http://www.eclipse.org/cdt/&quot;&gt;Eclipse CDT&lt;/a&gt;, which is pretty nice for C/C++ but doesn&amp;rsquo;t deal well at all with mixed C++/OCaml projects, and &lt;a href=&quot;http://eclipsefp.github.com&quot;&gt;EclipseFP&lt;/a&gt; seems to have dropped support for OCaml at some point. I think I&amp;rsquo;ll try using it for just the &lt;code&gt;.so&lt;/code&gt; portion of my projects and stick with Emacs/&lt;code&gt;make&lt;/code&gt; for final integration with OCaml bindings, at least until I see if it really is more productive to do C++ in a full-blown &lt;a href=&quot;http://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;IDE&lt;/a&gt; versus good old &lt;a href=&quot;http://www.gnu.org/software/emacs/tour/&quot;&gt;Emacs&lt;/a&gt;. Also I&amp;rsquo;ve bought a copy of &lt;i&gt;&lt;a href=&quot;http://www.amazon.co.uk/Boost-C-Libraries-Boris-Schaling/dp/0982219199/ref=sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1315564879&amp;amp;sr=1-5&quot;&gt;The Boost C++ Libraries&lt;/a&gt;&lt;/i&gt;, again on the recommendation of my friend, that whatever I want, it&amp;rsquo;s probably already in &lt;a href=&quot;http://www.boost.org/&quot;&gt;Boost&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;1&quot;&gt;&amp;dagger; OPERATION FOOTHOLD&lt;br/&gt;
&amp;Dagger; See comments&lt;/font&gt;&lt;/p&gt;
</content><id>https://gaius.tech/2011/09/09/segmentation-faults-tap-and-eclipse/</id><title type="text">Segmentation Faults, TAP and Eclipse</title><updated>2011-09-09T11:14:41-00:00</updated><author><name>gaius</name></author></entry></feed>