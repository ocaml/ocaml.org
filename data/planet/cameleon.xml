<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://www.blogger.com/feeds/7617521785419311079/posts/default</id><title type="text">cameleon</title><updated>2023-06-07T05:45:50-00:00</updated><entry><link href="https://ocameleon.blogspot.com/2010/01/playing-with-annot-files.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/7617521785419311079/posts/default</uri><name>cameleon</name></contributor><content type="html">New commands are available in the OCaml mode of Chamo. They use the &lt;span style=&quot;color: rgb(51, 102, 102);font-family:courier new;&quot;&gt;.annot&lt;/span&gt; files generated by ocamlc. Here is a list of these commands. Default key bindings are shown between parenthesis.&lt;br/&gt;&lt;br/&gt;&lt;span style=&quot;color: rgb(51, 102, 255); font-weight: bold;font-family:courier new;&quot;&gt;ocaml_display_type_annot (A-t)&lt;/span&gt; already existed to display the type of the expression under the cursor. Now &lt;span style=&quot;font-weight: bold; color: rgb(51, 102, 255);font-family:courier new;&quot;&gt;ocaml_copy_type_annot (CA-t)&lt;/span&gt; does the same but also copies the type in the clipboard so that it can be easily pasted somewhere else, for example in a &lt;span style=&quot;color: rgb(51, 102, 102);font-family:courier new;&quot;&gt;.mli&lt;/span&gt; file. This prevents from having to launch a &lt;span style=&quot;color: rgb(51, 102, 102);font-family:courier new;&quot;&gt;ocamlc -i&lt;/span&gt; command to get the type.&lt;br/&gt;&lt;br/&gt;&lt;span style=&quot;color: rgb(51, 102, 255); font-weight: bold;font-family:courier new;&quot;&gt;ocaml_display_ident_annot (A-i)&lt;/span&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;&lt;/span&gt; displays the &amp;quot;ident&amp;quot; information, that is whether the identifier is local to the file or its fully qualified name if it is defined elsewhere. &lt;span style=&quot;font-weight: bold; color: rgb(51, 102, 255);font-family:courier new;&quot;&gt;ocaml_jump_to_local_def (A-j)&lt;/span&gt; does the same but if the ident is defined in the file, the cursor is positioned on the identifier definition.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span style=&quot;font-weight: bold; color: rgb(51, 102, 255);font-family:courier new;&quot;&gt;ocaml_display_call_annot (A-c)&lt;/span&gt; displays the &amp;quot;call&amp;quot; information, that is whether a function call is &amp;quot;tail&amp;quot; or &amp;quot;stack&amp;quot;. &lt;span style=&quot;font-weight: bold; color: rgb(51, 102, 255);font-family:courier new;&quot;&gt;ocaml_show_stack_calls (CA-c)&lt;/span&gt; highlights (or not) all the calls using the stack. This can be useful to check whether a function is tail-recursive. The screenshot below shows the result on the &lt;span style=&quot;color: rgb(51, 153, 153);font-family:courier new;&quot;&gt;List&lt;/span&gt; module.&lt;br/&gt;&lt;a href=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/S1hxkWOPSlI/AAAAAAAAAA8/ZuZjsQWDkJA/s1600-h/stack_calls.png&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/S1hxkWOPSlI/AAAAAAAAAA8/ZuZjsQWDkJA/s200/stack_calls.png&quot; style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 200px; height: 174px;&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;br/&gt;At last, &lt;span style=&quot;font-weight: bold; color: rgb(51, 102, 255);font-family:courier new;&quot;&gt;ocaml_expand_ext_idents (CA-x)&lt;/span&gt; prompts the user to replace each external identifier by its fully qualified identifier (except for idents from &lt;span style=&quot;font-family:courier new;&quot;&gt;Pervasives&lt;/span&gt;). I personnally use the &lt;span style=&quot;color: rgb(51, 102, 102);font-family:courier new;&quot;&gt;open&lt;/span&gt; directive only not to prefix record fields and constructors, but always use fully qualified identifiers. This command is useful when working on a code not written by me and full of &lt;span style=&quot;color: rgb(51, 102, 102);font-family:courier new;&quot;&gt;open&lt;/span&gt;'s at the beginning of a file.&lt;br/&gt;&lt;br/&gt;All these commands are available from revision 745 of the repository and in the nightly snapshot.</content><id>https://ocameleon.blogspot.com/2010/01/playing-with-annot-files.html</id><title type="text">Playing with .annot files</title><updated>2010-01-21T14:58:00-00:00</updated><author><name>Zoggy</name></author></entry><entry><link href="https://ocameleon.blogspot.com/2008/05/r-mode-in-chamo.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/7617521785419311079/posts/default</uri><name>cameleon</name></contributor><content type="html">A R mode is now available for Chamo, as a &lt;a href=&quot;http://home.gna.org/cameleon/snippets.en.html&quot;&gt;separate snippet&lt;/a&gt;. By now, this mode has only one key binding, to call the &amp;quot;r_eval&amp;quot; command. This command sends the contents of the active view to a background R process. The output of this process is displayed in the &amp;quot;outputs&amp;quot; window. Other commands can easily be defined the same way to interact with other programs (see &lt;a href=&quot;http://home.gna.org/cameleon/snippets/code_R_mode.html&quot;&gt;the details&lt;/a&gt;).&lt;br/&gt;&lt;br/&gt;If some text is selected in the view, then only this text is sent to the R process. Closing the R output tab in the &amp;quot;outputs&amp;quot; window closes the R process. When the &amp;quot;r_eval&amp;quot; command is executed again, a new process is created. If the command is executed and the R process is still running, then it is used and no other process is launched.&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/SCBvaxuVAVI/AAAAAAAAAAo/LOXoepGGYx8/s1600-h/r_mode.png&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/SCBvaxuVAVI/AAAAAAAAAAo/LOXoepGGYx8/s320/r_mode.png&quot; style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;</content><id>https://ocameleon.blogspot.com/2008/05/r-mode-in-chamo.html</id><title type="text">R mode in Chamo</title><updated>2008-05-06T14:37:00-00:00</updated><author><name>Zoggy</name></author></entry><entry><link href="https://ocameleon.blogspot.com/2008/04/ocamlbuild-support-in-chamo.html" rel="alternate"/><contributor><uri>http://www.blogger.com/feeds/7617521785419311079/posts/default</uri><name>cameleon</name></contributor><content type="html">The Chamo editor now includes some ocamlbuild support through the internal command &amp;quot;ocaml_build&amp;quot;: An ocamlbuild command is proposed to the user who can edit it and run it.&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;http://2.bp.blogspot.com/_RT8DPiBmxGY/SBiIKhuVATI/AAAAAAAAAAM/WBh5pChCVHw/s1600-h/ocamlbuild_asks.png&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img src=&quot;http://2.bp.blogspot.com/_RT8DPiBmxGY/SBiIKhuVATI/AAAAAAAAAAM/WBh5pChCVHw/s320/ocamlbuild_asks.png&quot; style=&quot;margin: 0pt 10px 10px 0pt; float: left; cursor: pointer;&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;The output of the command is displayed in a new &amp;quot;outputs&amp;quot; window, and is analyzed. In case of error (or warning considered as error), the editor displays, in the active view, the file where the error was found, and highlights the corresponding characters.&lt;br/&gt;&lt;br/&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/SBiIcxuVAUI/AAAAAAAAAAU/Y6lbWsiazv4/s1600-h/ocamlbuild_error.png&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img src=&quot;http://3.bp.blogspot.com/_RT8DPiBmxGY/SBiIcxuVAUI/AAAAAAAAAAU/Y6lbWsiazv4/s320/ocamlbuild_error.png&quot; style=&quot;margin: 0pt 10px 10px 0pt; float: left; cursor: pointer;&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;The command used to compile is kept associated to the file, so that it is proposed the next time the internal command &amp;quot;ocaml_build&amp;quot; is launch on the file. These associations are even stored on disk to be kept between two sessions of Chamo launched in the same directory.</content><id>https://ocameleon.blogspot.com/2008/04/ocamlbuild-support-in-chamo.html</id><title type="text">OCamlbuild support in Chamo</title><updated>2008-04-30T14:33:00-00:00</updated><author><name>Zoggy</name></author></entry></feed>