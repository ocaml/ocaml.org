type metadata = {
  slug : string;
  order : int option;
  title : string;
  description : string;
}
[@@deriving of_yaml]
(** This is more or less a stripped-down version of tutorial.ml.

    The opam documentation is temporarily hosted on ocaml.org.

    THIS WILL BE REMOVED WHEN THE OPAM DOCUMENTATION IS GENERATED BY THE
    DOCUMENTATION PIPELINE. Prerequisites: 1. odoc is able to generate manuals
    2. a package that holds the opam manual is created

    We intentionally keep this separate from the rest of the tutorials, to ease
    removal of the opam documentation.

    I know that this could be refactored / be a special kind of tutorial.ml.
    Don't do it. Leave this separate - we can remove it more easily this way
    when the time comes.

    If you absolutely must add more tool documentation temporarily directly on
    ocaml.org: Yes, go ahead and rename this. But keep in mind your long-term
    plan should be the this: moving the tool documentation to an opam package,
    so that the docs are built by the documentation pipeline for all versions of
    the tool. *)

type t = {
  title : string;
  slug : string;
  order : int;
  version : string;
  is_manpage : bool;
  description : string;
  toc : Utils.Toc.t list;
  body_md : string;
  body_html : string;
}
[@@deriving
  stable_record ~version:metadata
    ~remove:[ version; is_manpage; toc; body_md; body_html ]
    ~modify:[ order ],
    show { with_path = false }]

let decode (fpath, (head, body_md)) =
  let metadata = metadata_of_yaml head in
  let omd = Utils.Toc.doc_with_ids (Omd.of_string body_md) in
  let toc = Utils.Toc.toc ~start_level:2 ~max_level:4 omd in
  let body_html = Omd.to_html (Hilite.Md.transform omd) in
  let version = List.nth (Str.split (Str.regexp "/") fpath) 1 in
  let is_manpage = List.nth (Str.split (Str.regexp "/") fpath) 2 = "man" in
  metadata
  |> Result.map
       (of_metadata ~version ~is_manpage ~toc ~body_md ~body_html
          ~modify_order:(Option.value ~default:0))

let all () =
  Utils.map_files decode "opam_docs/*.md"
  |> List.sort (fun a b -> Int.compare a.order b.order)

let template () =
  Format.asprintf
    {|
type toc =
  { title : string
  ; href : string
  ; children : toc list
  }
type t =
  { version : string
  ; is_manpage : bool
  ; title : string
  ; slug : string
  ; order : int
  ; description : string
  ; body_md : string
  ; toc : toc list
  ; body_html : string
  }
  
let all = %a
|}
    (Fmt.brackets (Fmt.list pp ~sep:Fmt.semi))
    (all ())
