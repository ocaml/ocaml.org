{"pageProps":{"content":{"title":"Tutorials","pageDescription":"","tutorials":[{"title":"Up and Running with OCaml","slug":"up-and-running-with-ocaml","description":"Help you install OCaml, the Dune build system, and support for your favourite text editor or IDE.\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"getting-started","tl":0},"users":{"hd":"Beginner","tl":0},"body_md":"\nThis page will help you install OCaml, the Dune build system, and support for\nyour favourite text editor or IDE. These instructions work on Windows, Unix\nsystems like Linux, and macOS.\n\n## Installing OCaml\n\nThere are two procedures: one for Unix-like systems, and one for Windows.\n\n### For Linux and macOS\n\nWe will install OCaml using opam, the OCaml package manager.  We will also use\nopam when we wish to install third-party OCaml libraries.\n\n**For macOS**\n\n```\n# Homebrew\nbrew install opam\n\n# MacPort\nport install opam\n```\n\n**For Linux** the preferred way is to use your system's package manager on\nLinux (e.g `apt-get install opam` or similar). [Details of all installation\nmethods.](https://opam.ocaml.org/doc/Install.html)\n\nThen, we install an OCaml compiler:\n\n```\n# environment setup\nopam init\neval `opam env`\n\n# install given version of the compiler\nopam switch create 4.11.1\neval `opam env`\n```\n\nNow, OCaml is up and running:\n\n```\n$ which ocaml\n/Users/frank/.opam/4.11.1/bin/ocaml\n\n$ ocaml -version\nThe OCaml toplevel, version 4.11.1\n```\n\n**For either Linux or macOS** as an alternative, a binary distribution of opam is\navailable:\n\n```\nsh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)\n```\n\n### For Windows\n\nWe use the [OCaml for Windows](https://fdopen.github.io/opam-repository-mingw/)\ninstaller which comes in 32bit and 64bit versions. This installer gives you\nopam and OCaml installations all in one go. It is used from within a Cygwin\nenvironment, but the executables produced have no dependency on Cygwin at all.\n\n## The OCaml top level\n\nOCaml comes with two compilers: for native code, and for byte code. We shall\nuse one of those in a moment. But first, let's use OCaml's top level (sometimes\nknown as a REPL in other languages):\n\n```\n$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n\n```\n\nWe typed the phrase `1 + 2 * 3` and then signalled to OCaml that we had\nfinished by typing `;;` followed by the Enter key. OCaml calculated the\nresult, `7` and its type `int` and showed them to us. We exit by running the\nbuilt-in `exit` function with exit code 0:\n\n```\n$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n# exit 0;;\n$\n```\n\nThere are two ways to improve your experience with the OCaml top level: you can\ninstall the popular [`rlwrap`](https://github.com/hanslub42/rlwrap) on your\nsystem and invoke `rlwrap ocaml` instead of `ocaml` to get line-editing\nfacilities inside the OCaml top level, or you can install the alternative top\nlevel `utop` using opam:\n\n```\n$ opam install utop\n```\n\nWe run it by typing `utop` instead of `ocaml`. You can read more about\n[utop](https://github.com/ocaml-community/utop).\n\n## Installing the Dune build system\n\nDune is a build system for OCaml. It takes care of all the low level details of\nOCaml compilation. We install it with opam:\n\n```\n$ opam install dune\nThe following actions will be performed:\n  - install dune 2.7.1\n\n<><> Gathering sources ><><><><><><><><><><><><><><><><><><><><><><><><>\n[default] https://opam.ocaml.org/2.0.7/archives/dune.2.7.1+opam.tar.gz\ndownloaded\n\n<><> Processing actions <><><><><><><><><><><><><><><><><><><><><><><><>\n-> installed dune.2.7.1\nDone.\n```\n\n## A first project\n\nLet's begin the simplest project with Dune and OCaml. We create a new directory\nand ask `dune` to initialise a new project:\n\n```\n$ mkdir helloworld\n$ cd helloworld/\n$ dune init exe helloworld\nSuccess: initialized executable component named helloworld\n```\n\nBuilding our program is as simple as typing `dune build`:\n\n```\n$ dune build\nInfo: Creating file dune-project with this contents:\n| (lang dune 2.7)\nDone: 8/11 (jobs: 1)\n```\n\nWhen we change our program, we type `dune build` again to make a new\nexecutable. We can run the executable with `dune exec` (it's called\n`helloworld.exe` even when we're not using Windows):\n\n```\n$ dune exec ./helloworld.exe\nHello, World!        \n```\n\nLet's look at the contents of our new directory. Dune has added the\n`helloworld.ml` file, which is our OCaml program. It has also added our `dune`\nfile, which tells dune how to build the program, and a `_build` subdirectory,\nwhich is dune's working space.\n\n```\n$ ls\n_build\t\tdune\t\thelloworld.ml\n```\n\nThe `helloworld.exe` executable is stored inside the `_build/default` subdirectory, so\nit's easier to run with `dune exec`. To ship the executable, we can just copy\nit from inside `_build/default` to somewhere else.\n\nHere is the contents of the automatically-generated `dune` file. When we want\nto add components to your project, such as third-party libraries, we edit this\nfile.\n\n```\n(executable\n (name helloworld))\n```\n\n## Editor support for OCaml\n\nFor **Visual Studio Code**, and other editors support the Language Server\nProtocol, the OCaml language server can be installed with opam:\n\n```\n$ opam install ocaml-lsp-server\n```\n\nNow, we install the OCaml Platform Visual Studio Code extension from the Visual\nStudio Marketplace.\n\nUpon first loading an OCaml source file, you may be prompted to select the\ntoolchain in use: pick OCaml the version of OCaml you are using, e.g. 4.11.1\nfrom the list. Now, help is available by hovering over symbols in your program:\n\n![Visual Studio Code](/tutorials/vscode.png \"\")\n\n**On Windows**, we must launch Visual Studio Code from within the Cygwin window,\nrather than by clicking on its icon (otherwise, the language server will not be\nfound):\n\n```\n$ /cygdrive/c/Users/Frank\\ Smith/AppData/Local/Programs/Microsoft\\ VS\\ Code/Code.exe\n```\n\n**For Vim and Emacs**, install the [Merlin](https://github.com/ocaml/merlin)\nsystem using opam:\n\n```\n$ opam install merlin\n```\n\nThe installation procedure will print instructions on how to link Merlin with\nyour editor.\n\n**On Windows**, when using Vim, the default cygwin Vim will not work with\nMerlin. You will need install Vim separately. In addition to the usual\ninstructions printed when installing Merlin, you may need to set the PATH in\nVim:\n\n```\nlet $PATH .= \";\".substitute(system('opam config var bin'),'\\n$','','''')\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#installing-ocaml\">Installing OCaml</a>\n</li>\n<li><a href=\"#the-ocaml-top-level\">The OCaml top level</a>\n</li>\n<li><a href=\"#installing-the-dune-build-system\">Installing the Dune build system</a>\n</li>\n<li><a href=\"#a-first-project\">A first project</a>\n</li>\n<li><a href=\"#editor-support-for-ocaml\">Editor support for OCaml</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This page will help you install OCaml, the Dune build system, and support for\nyour favourite text editor or IDE. These instructions work on Windows, Unix\nsystems like Linux, and macOS.</p>\n<h2 id=\"installing-ocaml\">Installing OCaml</h2>\n<p>There are two procedures: one for Unix-like systems, and one for Windows.</p>\n<h3 id=\"for-linux-and-macos\">For Linux and macOS</h3>\n<p>We will install OCaml using opam, the OCaml package manager.  We will also use\nopam when we wish to install third-party OCaml libraries.</p>\n<p><strong>For macOS</strong></p>\n<pre><code># Homebrew\nbrew install opam\n\n# MacPort\nport install opam\n</code></pre>\n<p><strong>For Linux</strong> the preferred way is to use your system's package manager on\nLinux (e.g <code>apt-get install opam</code> or similar). <a href=\"https://opam.ocaml.org/doc/Install.html\">Details of all installation\nmethods.</a></p>\n<p>Then, we install an OCaml compiler:</p>\n<pre><code># environment setup\nopam init\neval `opam env`\n\n# install given version of the compiler\nopam switch create 4.11.1\neval `opam env`\n</code></pre>\n<p>Now, OCaml is up and running:</p>\n<pre><code>$ which ocaml\n/Users/frank/.opam/4.11.1/bin/ocaml\n\n$ ocaml -version\nThe OCaml toplevel, version 4.11.1\n</code></pre>\n<p><strong>For either Linux or macOS</strong> as an alternative, a binary distribution of opam is\navailable:</p>\n<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)\n</code></pre>\n<h3 id=\"for-windows\">For Windows</h3>\n<p>We use the <a href=\"https://fdopen.github.io/opam-repository-mingw/\">OCaml for Windows</a>\ninstaller which comes in 32bit and 64bit versions. This installer gives you\nopam and OCaml installations all in one go. It is used from within a Cygwin\nenvironment, but the executables produced have no dependency on Cygwin at all.</p>\n<h2 id=\"the-ocaml-top-level\">The OCaml top level</h2>\n<p>OCaml comes with two compilers: for native code, and for byte code. We shall\nuse one of those in a moment. But first, let's use OCaml's top level (sometimes\nknown as a REPL in other languages):</p>\n<pre><code>$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n\n</code></pre>\n<p>We typed the phrase <code>1 + 2 * 3</code> and then signalled to OCaml that we had\nfinished by typing <code>;;</code> followed by the Enter key. OCaml calculated the\nresult, <code>7</code> and its type <code>int</code> and showed them to us. We exit by running the\nbuilt-in <code>exit</code> function with exit code 0:</p>\n<pre><code>$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n# exit 0;;\n$\n</code></pre>\n<p>There are two ways to improve your experience with the OCaml top level: you can\ninstall the popular <a href=\"https://github.com/hanslub42/rlwrap\"><code>rlwrap</code></a> on your\nsystem and invoke <code>rlwrap ocaml</code> instead of <code>ocaml</code> to get line-editing\nfacilities inside the OCaml top level, or you can install the alternative top\nlevel <code>utop</code> using opam:</p>\n<pre><code>$ opam install utop\n</code></pre>\n<p>We run it by typing <code>utop</code> instead of <code>ocaml</code>. You can read more about\n<a href=\"https://github.com/ocaml-community/utop\">utop</a>.</p>\n<h2 id=\"installing-the-dune-build-system\">Installing the Dune build system</h2>\n<p>Dune is a build system for OCaml. It takes care of all the low level details of\nOCaml compilation. We install it with opam:</p>\n<pre><code>$ opam install dune\nThe following actions will be performed:\n  - install dune 2.7.1\n\n&lt;&gt;&lt;&gt; Gathering sources &gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;\n[default] https://opam.ocaml.org/2.0.7/archives/dune.2.7.1+opam.tar.gz\ndownloaded\n\n&lt;&gt;&lt;&gt; Processing actions &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;\n-&gt; installed dune.2.7.1\nDone.\n</code></pre>\n<h2 id=\"a-first-project\">A first project</h2>\n<p>Let's begin the simplest project with Dune and OCaml. We create a new directory\nand ask <code>dune</code> to initialise a new project:</p>\n<pre><code>$ mkdir helloworld\n$ cd helloworld/\n$ dune init exe helloworld\nSuccess: initialized executable component named helloworld\n</code></pre>\n<p>Building our program is as simple as typing <code>dune build</code>:</p>\n<pre><code>$ dune build\nInfo: Creating file dune-project with this contents:\n| (lang dune 2.7)\nDone: 8/11 (jobs: 1)\n</code></pre>\n<p>When we change our program, we type <code>dune build</code> again to make a new\nexecutable. We can run the executable with <code>dune exec</code> (it's called\n<code>helloworld.exe</code> even when we're not using Windows):</p>\n<pre><code>$ dune exec ./helloworld.exe\nHello, World!        \n</code></pre>\n<p>Let's look at the contents of our new directory. Dune has added the\n<code>helloworld.ml</code> file, which is our OCaml program. It has also added our <code>dune</code>\nfile, which tells dune how to build the program, and a <code>_build</code> subdirectory,\nwhich is dune's working space.</p>\n<pre><code>$ ls\n_build\t\tdune\t\thelloworld.ml\n</code></pre>\n<p>The <code>helloworld.exe</code> executable is stored inside the <code>_build/default</code> subdirectory, so\nit's easier to run with <code>dune exec</code>. To ship the executable, we can just copy\nit from inside <code>_build/default</code> to somewhere else.</p>\n<p>Here is the contents of the automatically-generated <code>dune</code> file. When we want\nto add components to your project, such as third-party libraries, we edit this\nfile.</p>\n<pre><code>(executable\n (name helloworld))\n</code></pre>\n<h2 id=\"editor-support-for-ocaml\">Editor support for OCaml</h2>\n<p>For <strong>Visual Studio Code</strong>, and other editors support the Language Server\nProtocol, the OCaml language server can be installed with opam:</p>\n<pre><code>$ opam install ocaml-lsp-server\n</code></pre>\n<p>Now, we install the OCaml Platform Visual Studio Code extension from the Visual\nStudio Marketplace.</p>\n<p>Upon first loading an OCaml source file, you may be prompted to select the\ntoolchain in use: pick OCaml the version of OCaml you are using, e.g. 4.11.1\nfrom the list. Now, help is available by hovering over symbols in your program:</p>\n<p><img src=\"/tutorials/vscode.png\" alt=\"Visual Studio Code\" title=\"\" /></p>\n<p><strong>On Windows</strong>, we must launch Visual Studio Code from within the Cygwin window,\nrather than by clicking on its icon (otherwise, the language server will not be\nfound):</p>\n<pre><code>$ /cygdrive/c/Users/Frank\\ Smith/AppData/Local/Programs/Microsoft\\ VS\\ Code/Code.exe\n</code></pre>\n<p><strong>For Vim and Emacs</strong>, install the <a href=\"https://github.com/ocaml/merlin\">Merlin</a>\nsystem using opam:</p>\n<pre><code>$ opam install merlin\n</code></pre>\n<p>The installation procedure will print instructions on how to link Merlin with\nyour editor.</p>\n<p><strong>On Windows</strong>, when using Vim, the default cygwin Vim will not work with\nMerlin. You will need install Vim separately. In addition to the usual\ninstructions printed when installing Merlin, you may need to set the PATH in\nVim:</p>\n<pre><code>let $PATH .= &quot;;&quot;.substitute(system('opam config var bin'),'\\n$','','''')\n</code></pre>\n"},{"title":"A First Hour with OCaml","slug":"a-first-hour-with-ocaml","description":"Discover the OCaml programming language in this longer tutorial that takes you from absolute beginner to someone who is able to write programs in OCaml.\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"getting-started","tl":0},"users":{"hd":"Beginner","tl":0},"body_md":"\nYou may follow along with this tutorial with just a basic OCaml installation,\nas described in [Up and Running](up_and_running.html).\n\nAlternatively, you may follow almost all of it by running OCaml in your browser\nusing [TryOCaml](https://try.ocamlpro.com), with no installation required!!!\n\n## Running OCaml code\n\nThe easiest way to get started is to run an interactive session in\nyour browser thanks to [TryOCaml](https://try.ocamlpro.com).\n\nTo install OCaml on your computer, see the [Install](/docs/install.html) documentation.\n\nTo quickly try small OCaml expressions, you can use an interactive\ntoplevel, or REPL (Read–Eval–Print Loop). The `ocaml` command provides\na very basic toplevel (you should install `rlwrap` through your system\npackage manager and run `rlwrap ocaml` to get history navigation).\n\nThe recommended alternative REPL [utop](https://github.com/diml/utop) may be\ninstalled through [OPAM](/docs/install.html#OPAM) or your system package\nmanager. It has the same basic interface but is much more convenient to use\n(history navigation, auto-completion, etc.).\n\nUse `;;` to indicate that you've finished entering each expression and prompt OCaml to evaluate it. Here is what running `ocaml` looks like:\n\n```console\n$ ocaml\n        OCaml version OCaml version 4.12.0\n\n# 1 + 1;;\n- : int = 2\n```\n\nThis is how running the same code looks when using `utop`:\n\n```console\n───────┬─────────────────────────────────────────────────────────────┬────\n       │ Welcome to utop version 2.7.0 (using OCaml version 4.12.0)! │     \n       └─────────────────────────────────────────────────────────────┘     \n\nType #utop_help for help about using utop.\n\n─( 10:12:16 )─< command 0 >───────────────────────────────────────────────\nutop # 1 + 1;;\n- : int = 2\n```\n\n## Comments\n\nOCaml comments are delimited by `(*` and `*)`, like this:\n\n```ocaml\n(* This is a single-line comment. *)\n\n(* This is a\n   multi-line\n   comment.\n*)\n```\n\nIn other words, the commenting convention is very similar to original C\n(`/* ... */`). There is no single-line comment syntax (like\n`# ...` in Python or `// ...` in C99/C++/Java).\n\nOCaml counts nested `(* ... *)` blocks, and this allows you to comment\nout regions of code very easily:\n\n```ocaml\n(* This code is broken ...\n\n(* Primality test. *)\nlet is_prime n =\n  (* note to self: ask about this on the mailing lists *) XXX\n\n*)\n```\n\n## Calling functions\n\nLet's say you've written a function — we'll call it `repeated` — which\ntakes a string `s` and a number `n`, and returns a new string which\ncontains original `s` repeated `n` times.\n\nIn most C-derived languages a call to this function will look like this:\n\n```C\nrepeated (\"hello\", 3)  /* this is C code */\n```\n\nThis means \"call the function `repeated` with two arguments, first\nargument the string hello and second argument the number 3\".\n\nOCaml, in common with other functional languages, writes and brackets\nfunction calls differently, and this is the cause of many mistakes. Here\nis the same function call in OCaml:\n\n```ocaml\nlet repeated a b = a ^ (Int.to_string b);;\nrepeated \"hello\" 3  (* this is OCaml code *)\n```\n\nNote — **no** brackets, and **no** comma between the arguments.\n\nThe syntax `repeated (\"hello\", 3)` **is** meaningful in OCaml. It means\n\"call the function `repeated` with ONE argument, that argument being a\n'pair' structure of two elements\". Of course that would be a mistake,\nbecause the `repeated` function is expecting two arguments, not one, and\nthe first argument should be a string, not a pair. But let's not worry\nabout pairs (\"tuples\") just yet. Instead, just remember that it's a\nmistake to put the brackets and commas in around function call\narguments.\n\nLet's have another function — `prompt_string` — which takes a string to\nprompt and returns the string entered by the user. We want to pass this\nstring into `repeated`. Here are the C and OCaml versions:\n\n```C\n/* C code: */\nrepeated (prompt_string (\"Name please: \"), 3)\n```\n\n```ocaml\nlet prompt_string p = \"\";;\n(* OCaml code: *)\nrepeated (prompt_string \"Name please: \") 3\n```\n\nTake a careful look at the bracketing and the missing comma. In the\nOCaml version, the brackets enclose the first argument of repeated\nbecause that argument is the result of another function call. In general\nthe rule is: \"bracket around the whole function call — don't put\nbrackets around the arguments to a function call\". Here are some more\nexamples:\n\n```ocaml\nlet f a b c = \"\";;\nlet g a = \"\";;\nlet f2 a = \"\";;\nlet g2 a b = \"\";;\nf 5 (g \"hello\") 3;;    (* f has three arguments, g has one argument *)\nf2 (g2 3 4)            (* f2 has one argument, g2 has two arguments *)\n```\n\n```ocaml\n# repeated (\"hello\", 3)     (* OCaml will spot the mistake *)\nLine 1, characters 10-22:\nError: This expression has type 'a * 'b\n       but an expression was expected of type string\n```\n\n## Defining a function\n\nWe all know how to define a function (or static method, in Java)\nin our existing languages. How do we do it in OCaml?\n\nThe OCaml syntax is pleasantly concise. Here's a function which takes\ntwo floating point numbers and calculates the average:\n\n```ocaml\nlet average a b =\n  (a +. b) /. 2.0\n```\n\nType this into the OCaml interactive toplevel (on Unix, type the command `ocaml`\nfrom the shell) and you'll see this:\n\n```ocaml\n# let average a b =\n    (a +. b) /. 2.0;;\nval average : float -> float -> float = <fun>\n```\n\nIf you look at the function definition closely, and also at what OCaml\nprints back at you, you'll have a number of questions:\n\n* What are those periods in `+.` and `/.` for?\n* What does `float -> float -> float` mean?\n\nI'll answer those questions in the next sections, but first I want to go\nand define the same function in C (the Java definition would be fairly\nsimilar to C), and hopefully that should raise even more questions.\nHere's our C version of `average`:\n\n```C\ndouble average (double a, double b)\n{\n  return (a + b) / 2;\n}\n```\n\nNow look at our much shorter OCaml definition above. Hopefully you'll be\nasking:\n\n* Why don't we have to define the types of `a` and `b` in the OCaml\n  version? How does OCaml know what the types are (indeed, *does*\n  OCaml know what the types are, or is OCaml completely dynamically\n  typed?).\n* In C, the `2` is implicitly converted into a `double`, can't OCaml\n  do the same thing?\n* What is the OCaml way to write `return`?\n\nOK, let's get some answers.\n\n* OCaml is a strongly *statically typed* language (in other words,\n  there's nothing dynamic going on between int, float and string).\n* OCaml uses *type inference* to work out the types, so you don't have\n  to.  If you use the OCaml interactive toplevel as above, then OCaml\n  will tell you\n  its inferred type for your function.\n* OCaml doesn't do any implicit casting. If you want a float, you have\n  to write `2.0` because `2` is an integer. OCaml does **no automatic\n  conversion** between int, float, string or any other type.\n* As a side-effect of type inference in OCaml, functions (including\n  operators) can't have overloaded definitions. OCaml defines `+` as\n  the *integer* addition function. To add floats, use `+.` (note the\n  trailing period). Similarly, use `-.`, `*.`, `/.` for other float\n  operations.\n* OCaml doesn't have a `return` keyword — the last expression in a\n  function becomes the result of the function automatically.\n\nWe will present more details in the following sections and chapters.\n\n## Basic types\n\nThe basic types in OCaml are:\n\n```text\nOCaml type  Range\n\nint         31-bit signed int (roughly +/- 1 billion) on 32-bit\n            processors, or 63-bit signed int on 64-bit processors\nfloat       IEEE double-precision floating point, equivalent to C's double\nbool        A boolean, written either 'true' or 'false'\nchar        An 8-bit character\nstring      A string\nunit        Written as ()\n```\n\nOCaml uses one of the bits in an `int` internally in order to be able to\nautomatically manage the memory use (garbage collection). This is why\nthe basic `int` is 31 bits, not 32 bits (63 bits if you're using a 64\nbit platform). In practice this isn't an issue except in a few\nspecialised cases. For example if you're counting things in a loop, then\nOCaml limits you to counting up to 1 billion instead of 2 billion. However if you need to do things\nsuch as processing 32 bit types (eg. you're writing crypto code or a\nnetwork stack), OCaml provides a `nativeint` type which matches the\nnative integer type for your platform.\n\nOCaml doesn't have a basic unsigned integer type, but you can get the\nsame effect using `nativeint`. OCaml doesn't have built-in single-precision \nfloating point numbers.\n\nOCaml provides a `char` type which is used for characters, written `'x'`\nfor example. Unfortunately the `char` type does not support Unicode or\nUTF-8, There are [comprehensive Unicode libraries](https://github.com/yoriyuki/Camomile)\nwhich provide this functionality.\n\nStrings are not just lists of characters. They have their own, more\nefficient internal representation. Strings are immutable.\n\nThe `unit` type is sort of like `void` in C, but we'll talk about it\nmore below.\n\n## Implicit vs. explicit casts\n\nIn C-derived languages ints get promoted to floats in certain\ncircumstances. For example if you write `1 + 2.5` then the first\nargument (which is an integer) is promoted to a floating point number,\nand the result is also a floating point number. It's as if you had\nwritten `((double) 1) + 2.5`, but all done implicitly.\n\nOCaml never does implicit casts like this. In OCaml, `1 + 2.5` is a type\nerror. The `+` operator in OCaml requires two ints as arguments, and\nhere we're giving it an int and a float, so it reports this error:\n\n```ocaml\n# 1 + 2.5;;\nLine 1, characters 5-8:\nError: This expression has type float but an expression was expected of type\n         int\n```\n\nTo add two floats together you need to use a different operator, `+.`\n(note the trailing period).\n\nOCaml doesn't promote ints to floats automatically so this is also an\nerror:\n\n```ocaml\n# 1 +. 2.5\nLine 1, characters 1-2:\nError: This expression has type int but an expression was expected of type\n         float\n  Hint: Did you mean `1.'?\n```\n\nHere OCaml is now complaining about the first argument.\n\nWhat if you actually want to add an integer and a floating point number\ntogether? (Say they are stored as `i` and `f`). In OCaml you need to\nexplicitly cast:\n\n```ocaml\nlet i = 1;;\nlet f = 2.0;;\nfloat_of_int i +. f\n```\n\n`float_of_int` is a function which takes an `int` and returns a `float`.\nThere are a whole load of these functions, called such things as\n`int_of_float`, `char_of_int`, `int_of_char`, `string_of_int` and so on,\nand they mostly do what you expect.\n\nSince converting an `int` to a `float` is a particularly common\noperation, the `float_of_int` function has a shorter alias: the above\nexample could simply have been written\n\n```ocaml\nfloat i +. f\n```\n\n(Note that it is perfectly valid in OCaml for a type and a\nfunction to have the same name.)\n\n### Is implicit or explicit casting better?\n\nYou might think that these explicit casts are ugly, time-consuming even,\nand you have a point, but there are at least two arguments in their\nfavour. Firstly, OCaml needs this explicit casting to be able to do type\ninference (see below), and type inference is such a wonderful\ntime-saving feature that it easily offsets the extra keyboarding of\nexplicit casts. Secondly, if you've spent time debugging C programs\nyou'll know that (a) implicit casts cause errors which are hard to find,\nand (b) much of the time you're sitting there trying to work out where\nthe implicit casts happen. Making the casts explicit helps you in\ndebugging. Thirdly, some casts (particularly int <-> float) are\nactually very expensive operations. You do yourself no favours by hiding\nthem.\n\n## Ordinary functions and recursive functions\n\nUnlike in C-derived languages, a function isn't recursive unless you\nexplicitly say so by using `let rec` instead of just `let`. Here's an\nexample of a recursive function:\n\n```ocaml\n# let rec range a b =\n    if a > b then []\n    else a :: range (a + 1) b\nval range : int -> int -> int list = <fun>\n```\n\nNotice that `range` calls itself.\n\nThe only difference between `let` and `let rec` is in the scoping of the\nfunction name. If the above function had been defined with just `let`,\nthen the call to `range` would have tried to look for an existing\n(previously defined) function called `range`, not the\ncurrently-being-defined function. Using `let` (without `rec`) allows you\nto re-define a value in terms of the previous definition. For example:\n\n```ocaml\n# let positive_sum a b = \n    let a = max a 0\n    and b = max b 0 in\n    a + b\nval positive_sum : int -> int -> int = <fun>\n```\n\nThis redefinition hides the previous \"bindings\" of `a` and `b` from the\nfunction definition. In some situations coders prefer this pattern to\nusing a new variable name (`let a_pos = max a 0`) as it makes the old\nbinding inaccessible, so that only the latest values of `a` and `b` are\naccessible.\n\nThere is no performance difference between functions defined using `let`\nand functions defined using `let rec`, so if you prefer you could always\nuse the `let rec` form and get the same semantics as C-like languages.\n\n## Types of functions\n\nBecause of type inference you will rarely if ever need to explicitly\nwrite down the type of your functions. However, OCaml often prints out\nwhat it thinks are the types of your functions, so you need to know the\nsyntax for this. For a function `f` which takes arguments `arg1`,\n`arg2`, ... `argn`, and returns type `rettype`, the compiler will print:\n\n```\nf : arg1 -> arg2 -> ... -> argn -> rettype\n```\n\nThe arrow syntax looks strange now, but when we come to so-called\n\"currying\" later you'll see why it was chosen. For now I'll just give\nyou some examples.\n\nOur function `repeated` which takes a string and an integer and returns\na string has type:\n\n```ocaml\n# repeated\n- : string -> int -> string = <fun>\n```\n\nOur function `average` which takes two floats and returns a float has\ntype:\n\n```ocaml\n# average\n- : float -> float -> float = <fun>\n```\n\nThe OCaml standard `int_of_char` casting function:\n\n```ocaml\n# int_of_char\n- : char -> int = <fun>\n```\n\nIf a function returns nothing (`void` for C and Java programmers), then\nwe write that it returns the `unit` type. Here, for instance, is the\nOCaml equivalent of C's *[fputc(3)](https://pubs.opengroup.org/onlinepubs/009695399/functions/fputc.html)*:\n\n```ocaml\n# output_char\n- : out_channel -> char -> unit = <fun>\n```\n\n### Polymorphic functions\n\nNow for something a bit stranger. What about a function which takes\n*anything* as an argument? Here's an odd function which takes an\nargument, but just ignores it and always returns 3:\n\n```ocaml\nlet give_me_a_three x = 3\n```\n\nWhat is the type of this function? In OCaml we use a special placeholder\nto mean \"any type you fancy\". It's a single quote character followed by\na letter. The type of the above function would normally be written:\n\n```ocaml\n# give_me_a_three\n- : 'a -> int = <fun>\n```\n\nwhere `'a` (pronounced alpha) really does mean any type. You can, for example, call this\nfunction as `give_me_a_three \"foo\"` or `give_me_a_three 2.0` and both\nare quite valid expressions in OCaml.\n\nIt won't be clear yet why polymorphic functions are useful, but they are\nvery useful and very common, and so we'll discuss them later on. (Hint:\npolymorphism is kind of like templates in C++ or generics in Java).\n\n## Type inference\n\nSo the theme of this tutorial is that functional languages have many\nreally cool features, and OCaml is a language which has all of these\nreally cool features stuffed into it at once, thus making it a very\npractical language for real programmers to use. But the odd thing is\nthat most of these cool features have nothing to do with \"functional\nprogramming\" at all. In fact, I've come to the first really cool\nfeature, and I still haven't talked about why functional programming is\ncalled \"functional\". Anyway, here's the first really cool feature: type\ninference.\n\nSimply put: you don't need to declare the types of your functions and\nvariables, because OCaml will just figure them out for you!\n\nIn addition OCaml goes on to check all your types match up (even across\ndifferent files).\n\nBut OCaml is also a practical language, and for this reason it contains\nbackdoors into the type system allowing you to bypass this checking on\nthe rare occasions that it is sensible to do this. Only gurus will\nprobably need to bypass the type checking.\n\nLet's go back to the `average` function which we typed into the OCaml\ninteractive toplevel:\n\n```ocaml\n# let average a b =\n    (a +. b) /. 2.0\nval average : float -> float -> float = <fun>\n```\n\nOCaml worked out all on its own that the function takes\ntwo `float` arguments and returns a `float`!\n\nHow did it do this? Firstly it looks at where `a` and `b` are used,\nnamely in the expression `(a +. b)`. Now, `+.` is itself a function\nwhich always takes two `float` arguments, so by simple deduction, `a`\nand `b` must both also have type `float`.\n\nSecondly, the `/.` function returns a `float`, and this is the same as\nthe return value of the `average` function, so `average` must return a\n`float`. The conclusion is that `average` has this type signature:\n\n```ocaml\n# average\n- : float -> float -> float = <fun>\n```\n\nType inference is obviously easy for such a short program, but it works\neven for large programs, and it's a major time-saving feature because it\nremoves a whole class of errors which cause segfaults,\n`NullPointerException`s and `ClassCastException`s in other languages (or\nimportant but often ignored runtime warnings).\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#running-ocaml-code\">Running OCaml code</a>\n</li>\n<li><a href=\"#comments\">Comments</a>\n</li>\n<li><a href=\"#calling-functions\">Calling functions</a>\n</li>\n<li><a href=\"#defining-a-function\">Defining a function</a>\n</li>\n<li><a href=\"#basic-types\">Basic types</a>\n</li>\n<li><a href=\"#implicit-vs-explicit-casts\">Implicit vs. explicit casts</a>\n</li>\n<li><a href=\"#ordinary-functions-and-recursive-functions\">Ordinary functions and recursive functions</a>\n</li>\n<li><a href=\"#types-of-functions\">Types of functions</a>\n</li>\n<li><a href=\"#type-inference\">Type inference</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>You may follow along with this tutorial with just a basic OCaml installation,\nas described in <a href=\"up_and_running.html\">Up and Running</a>.</p>\n<p>Alternatively, you may follow almost all of it by running OCaml in your browser\nusing <a href=\"https://try.ocamlpro.com\">TryOCaml</a>, with no installation required!!!</p>\n<h2 id=\"running-ocaml-code\">Running OCaml code</h2>\n<p>The easiest way to get started is to run an interactive session in\nyour browser thanks to <a href=\"https://try.ocamlpro.com\">TryOCaml</a>.</p>\n<p>To install OCaml on your computer, see the <a href=\"/docs/install.html\">Install</a> documentation.</p>\n<p>To quickly try small OCaml expressions, you can use an interactive\ntoplevel, or REPL (Read–Eval–Print Loop). The <code>ocaml</code> command provides\na very basic toplevel (you should install <code>rlwrap</code> through your system\npackage manager and run <code>rlwrap ocaml</code> to get history navigation).</p>\n<p>The recommended alternative REPL <a href=\"https://github.com/diml/utop\">utop</a> may be\ninstalled through <a href=\"/docs/install.html#OPAM\">OPAM</a> or your system package\nmanager. It has the same basic interface but is much more convenient to use\n(history navigation, auto-completion, etc.).</p>\n<p>Use <code>;;</code> to indicate that you've finished entering each expression and prompt OCaml to evaluate it. Here is what running <code>ocaml</code> looks like:</p>\n<pre><code class=\"language-console\">$ ocaml\n        OCaml version OCaml version 4.12.0\n\n# 1 + 1;;\n- : int = 2\n</code></pre>\n<p>This is how running the same code looks when using <code>utop</code>:</p>\n<pre><code class=\"language-console\">───────┬─────────────────────────────────────────────────────────────┬────\n       │ Welcome to utop version 2.7.0 (using OCaml version 4.12.0)! │     \n       └─────────────────────────────────────────────────────────────┘     \n\nType #utop_help for help about using utop.\n\n─( 10:12:16 )─&lt; command 0 &gt;───────────────────────────────────────────────\nutop # 1 + 1;;\n- : int = 2\n</code></pre>\n<h2 id=\"comments\">Comments</h2>\n<p>OCaml comments are delimited by <code>(*</code> and <code>*)</code>, like this:</p>\n<pre><code class=\"language-ocaml\">(* This is a single-line comment. *)\n\n(* This is a\n   multi-line\n   comment.\n*)\n</code></pre>\n<p>In other words, the commenting convention is very similar to original C\n(<code>/* ... */</code>). There is no single-line comment syntax (like\n<code># ...</code> in Python or <code>// ...</code> in C99/C++/Java).</p>\n<p>OCaml counts nested <code>(* ... *)</code> blocks, and this allows you to comment\nout regions of code very easily:</p>\n<pre><code class=\"language-ocaml\">(* This code is broken ...\n\n(* Primality test. *)\nlet is_prime n =\n  (* note to self: ask about this on the mailing lists *) XXX\n\n*)\n</code></pre>\n<h2 id=\"calling-functions\">Calling functions</h2>\n<p>Let's say you've written a function — we'll call it <code>repeated</code> — which\ntakes a string <code>s</code> and a number <code>n</code>, and returns a new string which\ncontains original <code>s</code> repeated <code>n</code> times.</p>\n<p>In most C-derived languages a call to this function will look like this:</p>\n<pre><code class=\"language-C\">repeated (&quot;hello&quot;, 3)  /* this is C code */\n</code></pre>\n<p>This means &quot;call the function <code>repeated</code> with two arguments, first\nargument the string hello and second argument the number 3&quot;.</p>\n<p>OCaml, in common with other functional languages, writes and brackets\nfunction calls differently, and this is the cause of many mistakes. Here\nis the same function call in OCaml:</p>\n<pre><code class=\"language-ocaml\">let repeated a b = a ^ (Int.to_string b);;\nrepeated &quot;hello&quot; 3  (* this is OCaml code *)\n</code></pre>\n<p>Note — <strong>no</strong> brackets, and <strong>no</strong> comma between the arguments.</p>\n<p>The syntax <code>repeated (&quot;hello&quot;, 3)</code> <strong>is</strong> meaningful in OCaml. It means\n&quot;call the function <code>repeated</code> with ONE argument, that argument being a\n'pair' structure of two elements&quot;. Of course that would be a mistake,\nbecause the <code>repeated</code> function is expecting two arguments, not one, and\nthe first argument should be a string, not a pair. But let's not worry\nabout pairs (&quot;tuples&quot;) just yet. Instead, just remember that it's a\nmistake to put the brackets and commas in around function call\narguments.</p>\n<p>Let's have another function — <code>prompt_string</code> — which takes a string to\nprompt and returns the string entered by the user. We want to pass this\nstring into <code>repeated</code>. Here are the C and OCaml versions:</p>\n<pre><code class=\"language-C\">/* C code: */\nrepeated (prompt_string (&quot;Name please: &quot;), 3)\n</code></pre>\n<pre><code class=\"language-ocaml\">let prompt_string p = &quot;&quot;;;\n(* OCaml code: *)\nrepeated (prompt_string &quot;Name please: &quot;) 3\n</code></pre>\n<p>Take a careful look at the bracketing and the missing comma. In the\nOCaml version, the brackets enclose the first argument of repeated\nbecause that argument is the result of another function call. In general\nthe rule is: &quot;bracket around the whole function call — don't put\nbrackets around the arguments to a function call&quot;. Here are some more\nexamples:</p>\n<pre><code class=\"language-ocaml\">let f a b c = &quot;&quot;;;\nlet g a = &quot;&quot;;;\nlet f2 a = &quot;&quot;;;\nlet g2 a b = &quot;&quot;;;\nf 5 (g &quot;hello&quot;) 3;;    (* f has three arguments, g has one argument *)\nf2 (g2 3 4)            (* f2 has one argument, g2 has two arguments *)\n</code></pre>\n<pre><code class=\"language-ocaml\"># repeated (&quot;hello&quot;, 3)     (* OCaml will spot the mistake *)\nLine 1, characters 10-22:\nError: This expression has type 'a * 'b\n       but an expression was expected of type string\n</code></pre>\n<h2 id=\"defining-a-function\">Defining a function</h2>\n<p>We all know how to define a function (or static method, in Java)\nin our existing languages. How do we do it in OCaml?</p>\n<p>The OCaml syntax is pleasantly concise. Here's a function which takes\ntwo floating point numbers and calculates the average:</p>\n<pre><code class=\"language-ocaml\">let average a b =\n  (a +. b) /. 2.0\n</code></pre>\n<p>Type this into the OCaml interactive toplevel (on Unix, type the command <code>ocaml</code>\nfrom the shell) and you'll see this:</p>\n<pre><code class=\"language-ocaml\"># let average a b =\n    (a +. b) /. 2.0;;\nval average : float -&gt; float -&gt; float = &lt;fun&gt;\n</code></pre>\n<p>If you look at the function definition closely, and also at what OCaml\nprints back at you, you'll have a number of questions:</p>\n<ul>\n<li>What are those periods in <code>+.</code> and <code>/.</code> for?\n</li>\n<li>What does <code>float -&gt; float -&gt; float</code> mean?\n</li>\n</ul>\n<p>I'll answer those questions in the next sections, but first I want to go\nand define the same function in C (the Java definition would be fairly\nsimilar to C), and hopefully that should raise even more questions.\nHere's our C version of <code>average</code>:</p>\n<pre><code class=\"language-C\">double average (double a, double b)\n{\n  return (a + b) / 2;\n}\n</code></pre>\n<p>Now look at our much shorter OCaml definition above. Hopefully you'll be\nasking:</p>\n<ul>\n<li>Why don't we have to define the types of <code>a</code> and <code>b</code> in the OCaml\nversion? How does OCaml know what the types are (indeed, <em>does</em>\nOCaml know what the types are, or is OCaml completely dynamically\ntyped?).\n</li>\n<li>In C, the <code>2</code> is implicitly converted into a <code>double</code>, can't OCaml\ndo the same thing?\n</li>\n<li>What is the OCaml way to write <code>return</code>?\n</li>\n</ul>\n<p>OK, let's get some answers.</p>\n<ul>\n<li>OCaml is a strongly <em>statically typed</em> language (in other words,\nthere's nothing dynamic going on between int, float and string).\n</li>\n<li>OCaml uses <em>type inference</em> to work out the types, so you don't have\nto.  If you use the OCaml interactive toplevel as above, then OCaml\nwill tell you\nits inferred type for your function.\n</li>\n<li>OCaml doesn't do any implicit casting. If you want a float, you have\nto write <code>2.0</code> because <code>2</code> is an integer. OCaml does <strong>no automatic\nconversion</strong> between int, float, string or any other type.\n</li>\n<li>As a side-effect of type inference in OCaml, functions (including\noperators) can't have overloaded definitions. OCaml defines <code>+</code> as\nthe <em>integer</em> addition function. To add floats, use <code>+.</code> (note the\ntrailing period). Similarly, use <code>-.</code>, <code>*.</code>, <code>/.</code> for other float\noperations.\n</li>\n<li>OCaml doesn't have a <code>return</code> keyword — the last expression in a\nfunction becomes the result of the function automatically.\n</li>\n</ul>\n<p>We will present more details in the following sections and chapters.</p>\n<h2 id=\"basic-types\">Basic types</h2>\n<p>The basic types in OCaml are:</p>\n<pre><code class=\"language-text\">OCaml type  Range\n\nint         31-bit signed int (roughly +/- 1 billion) on 32-bit\n            processors, or 63-bit signed int on 64-bit processors\nfloat       IEEE double-precision floating point, equivalent to C's double\nbool        A boolean, written either 'true' or 'false'\nchar        An 8-bit character\nstring      A string\nunit        Written as ()\n</code></pre>\n<p>OCaml uses one of the bits in an <code>int</code> internally in order to be able to\nautomatically manage the memory use (garbage collection). This is why\nthe basic <code>int</code> is 31 bits, not 32 bits (63 bits if you're using a 64\nbit platform). In practice this isn't an issue except in a few\nspecialised cases. For example if you're counting things in a loop, then\nOCaml limits you to counting up to 1 billion instead of 2 billion. However if you need to do things\nsuch as processing 32 bit types (eg. you're writing crypto code or a\nnetwork stack), OCaml provides a <code>nativeint</code> type which matches the\nnative integer type for your platform.</p>\n<p>OCaml doesn't have a basic unsigned integer type, but you can get the\nsame effect using <code>nativeint</code>. OCaml doesn't have built-in single-precision\nfloating point numbers.</p>\n<p>OCaml provides a <code>char</code> type which is used for characters, written <code>'x'</code>\nfor example. Unfortunately the <code>char</code> type does not support Unicode or\nUTF-8, There are <a href=\"https://github.com/yoriyuki/Camomile\">comprehensive Unicode libraries</a>\nwhich provide this functionality.</p>\n<p>Strings are not just lists of characters. They have their own, more\nefficient internal representation. Strings are immutable.</p>\n<p>The <code>unit</code> type is sort of like <code>void</code> in C, but we'll talk about it\nmore below.</p>\n<h2 id=\"implicit-vs-explicit-casts\">Implicit vs. explicit casts</h2>\n<p>In C-derived languages ints get promoted to floats in certain\ncircumstances. For example if you write <code>1 + 2.5</code> then the first\nargument (which is an integer) is promoted to a floating point number,\nand the result is also a floating point number. It's as if you had\nwritten <code>((double) 1) + 2.5</code>, but all done implicitly.</p>\n<p>OCaml never does implicit casts like this. In OCaml, <code>1 + 2.5</code> is a type\nerror. The <code>+</code> operator in OCaml requires two ints as arguments, and\nhere we're giving it an int and a float, so it reports this error:</p>\n<pre><code class=\"language-ocaml\"># 1 + 2.5;;\nLine 1, characters 5-8:\nError: This expression has type float but an expression was expected of type\n         int\n</code></pre>\n<p>To add two floats together you need to use a different operator, <code>+.</code>\n(note the trailing period).</p>\n<p>OCaml doesn't promote ints to floats automatically so this is also an\nerror:</p>\n<pre><code class=\"language-ocaml\"># 1 +. 2.5\nLine 1, characters 1-2:\nError: This expression has type int but an expression was expected of type\n         float\n  Hint: Did you mean `1.'?\n</code></pre>\n<p>Here OCaml is now complaining about the first argument.</p>\n<p>What if you actually want to add an integer and a floating point number\ntogether? (Say they are stored as <code>i</code> and <code>f</code>). In OCaml you need to\nexplicitly cast:</p>\n<pre><code class=\"language-ocaml\">let i = 1;;\nlet f = 2.0;;\nfloat_of_int i +. f\n</code></pre>\n<p><code>float_of_int</code> is a function which takes an <code>int</code> and returns a <code>float</code>.\nThere are a whole load of these functions, called such things as\n<code>int_of_float</code>, <code>char_of_int</code>, <code>int_of_char</code>, <code>string_of_int</code> and so on,\nand they mostly do what you expect.</p>\n<p>Since converting an <code>int</code> to a <code>float</code> is a particularly common\noperation, the <code>float_of_int</code> function has a shorter alias: the above\nexample could simply have been written</p>\n<pre><code class=\"language-ocaml\">float i +. f\n</code></pre>\n<p>(Note that it is perfectly valid in OCaml for a type and a\nfunction to have the same name.)</p>\n<h3 id=\"is-implicit-or-explicit-casting-better\">Is implicit or explicit casting better?</h3>\n<p>You might think that these explicit casts are ugly, time-consuming even,\nand you have a point, but there are at least two arguments in their\nfavour. Firstly, OCaml needs this explicit casting to be able to do type\ninference (see below), and type inference is such a wonderful\ntime-saving feature that it easily offsets the extra keyboarding of\nexplicit casts. Secondly, if you've spent time debugging C programs\nyou'll know that (a) implicit casts cause errors which are hard to find,\nand (b) much of the time you're sitting there trying to work out where\nthe implicit casts happen. Making the casts explicit helps you in\ndebugging. Thirdly, some casts (particularly int &lt;-&gt; float) are\nactually very expensive operations. You do yourself no favours by hiding\nthem.</p>\n<h2 id=\"ordinary-functions-and-recursive-functions\">Ordinary functions and recursive functions</h2>\n<p>Unlike in C-derived languages, a function isn't recursive unless you\nexplicitly say so by using <code>let rec</code> instead of just <code>let</code>. Here's an\nexample of a recursive function:</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n    if a &gt; b then []\n    else a :: range (a + 1) b\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Notice that <code>range</code> calls itself.</p>\n<p>The only difference between <code>let</code> and <code>let rec</code> is in the scoping of the\nfunction name. If the above function had been defined with just <code>let</code>,\nthen the call to <code>range</code> would have tried to look for an existing\n(previously defined) function called <code>range</code>, not the\ncurrently-being-defined function. Using <code>let</code> (without <code>rec</code>) allows you\nto re-define a value in terms of the previous definition. For example:</p>\n<pre><code class=\"language-ocaml\"># let positive_sum a b = \n    let a = max a 0\n    and b = max b 0 in\n    a + b\nval positive_sum : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>This redefinition hides the previous &quot;bindings&quot; of <code>a</code> and <code>b</code> from the\nfunction definition. In some situations coders prefer this pattern to\nusing a new variable name (<code>let a_pos = max a 0</code>) as it makes the old\nbinding inaccessible, so that only the latest values of <code>a</code> and <code>b</code> are\naccessible.</p>\n<p>There is no performance difference between functions defined using <code>let</code>\nand functions defined using <code>let rec</code>, so if you prefer you could always\nuse the <code>let rec</code> form and get the same semantics as C-like languages.</p>\n<h2 id=\"types-of-functions\">Types of functions</h2>\n<p>Because of type inference you will rarely if ever need to explicitly\nwrite down the type of your functions. However, OCaml often prints out\nwhat it thinks are the types of your functions, so you need to know the\nsyntax for this. For a function <code>f</code> which takes arguments <code>arg1</code>,\n<code>arg2</code>, ... <code>argn</code>, and returns type <code>rettype</code>, the compiler will print:</p>\n<pre><code>f : arg1 -&gt; arg2 -&gt; ... -&gt; argn -&gt; rettype\n</code></pre>\n<p>The arrow syntax looks strange now, but when we come to so-called\n&quot;currying&quot; later you'll see why it was chosen. For now I'll just give\nyou some examples.</p>\n<p>Our function <code>repeated</code> which takes a string and an integer and returns\na string has type:</p>\n<pre><code class=\"language-ocaml\"># repeated\n- : string -&gt; int -&gt; string = &lt;fun&gt;\n</code></pre>\n<p>Our function <code>average</code> which takes two floats and returns a float has\ntype:</p>\n<pre><code class=\"language-ocaml\"># average\n- : float -&gt; float -&gt; float = &lt;fun&gt;\n</code></pre>\n<p>The OCaml standard <code>int_of_char</code> casting function:</p>\n<pre><code class=\"language-ocaml\"># int_of_char\n- : char -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>If a function returns nothing (<code>void</code> for C and Java programmers), then\nwe write that it returns the <code>unit</code> type. Here, for instance, is the\nOCaml equivalent of C's <em><a href=\"https://pubs.opengroup.org/onlinepubs/009695399/functions/fputc.html\">fputc(3)</a></em>:</p>\n<pre><code class=\"language-ocaml\"># output_char\n- : out_channel -&gt; char -&gt; unit = &lt;fun&gt;\n</code></pre>\n<h3 id=\"polymorphic-functions\">Polymorphic functions</h3>\n<p>Now for something a bit stranger. What about a function which takes\n<em>anything</em> as an argument? Here's an odd function which takes an\nargument, but just ignores it and always returns 3:</p>\n<pre><code class=\"language-ocaml\">let give_me_a_three x = 3\n</code></pre>\n<p>What is the type of this function? In OCaml we use a special placeholder\nto mean &quot;any type you fancy&quot;. It's a single quote character followed by\na letter. The type of the above function would normally be written:</p>\n<pre><code class=\"language-ocaml\"># give_me_a_three\n- : 'a -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>where <code>'a</code> (pronounced alpha) really does mean any type. You can, for example, call this\nfunction as <code>give_me_a_three &quot;foo&quot;</code> or <code>give_me_a_three 2.0</code> and both\nare quite valid expressions in OCaml.</p>\n<p>It won't be clear yet why polymorphic functions are useful, but they are\nvery useful and very common, and so we'll discuss them later on. (Hint:\npolymorphism is kind of like templates in C++ or generics in Java).</p>\n<h2 id=\"type-inference\">Type inference</h2>\n<p>So the theme of this tutorial is that functional languages have many\nreally cool features, and OCaml is a language which has all of these\nreally cool features stuffed into it at once, thus making it a very\npractical language for real programmers to use. But the odd thing is\nthat most of these cool features have nothing to do with &quot;functional\nprogramming&quot; at all. In fact, I've come to the first really cool\nfeature, and I still haven't talked about why functional programming is\ncalled &quot;functional&quot;. Anyway, here's the first really cool feature: type\ninference.</p>\n<p>Simply put: you don't need to declare the types of your functions and\nvariables, because OCaml will just figure them out for you!</p>\n<p>In addition OCaml goes on to check all your types match up (even across\ndifferent files).</p>\n<p>But OCaml is also a practical language, and for this reason it contains\nbackdoors into the type system allowing you to bypass this checking on\nthe rare occasions that it is sensible to do this. Only gurus will\nprobably need to bypass the type checking.</p>\n<p>Let's go back to the <code>average</code> function which we typed into the OCaml\ninteractive toplevel:</p>\n<pre><code class=\"language-ocaml\"># let average a b =\n    (a +. b) /. 2.0\nval average : float -&gt; float -&gt; float = &lt;fun&gt;\n</code></pre>\n<p>OCaml worked out all on its own that the function takes\ntwo <code>float</code> arguments and returns a <code>float</code>!</p>\n<p>How did it do this? Firstly it looks at where <code>a</code> and <code>b</code> are used,\nnamely in the expression <code>(a +. b)</code>. Now, <code>+.</code> is itself a function\nwhich always takes two <code>float</code> arguments, so by simple deduction, <code>a</code>\nand <code>b</code> must both also have type <code>float</code>.</p>\n<p>Secondly, the <code>/.</code> function returns a <code>float</code>, and this is the same as\nthe return value of the <code>average</code> function, so <code>average</code> must return a\n<code>float</code>. The conclusion is that <code>average</code> has this type signature:</p>\n<pre><code class=\"language-ocaml\"># average\n- : float -&gt; float -&gt; float = &lt;fun&gt;\n</code></pre>\n<p>Type inference is obviously easy for such a short program, but it works\neven for large programs, and it's a major time-saving feature because it\nremoves a whole class of errors which cause segfaults,\n<code>NullPointerException</code>s and <code>ClassCastException</code>s in other languages (or\nimportant but often ignored runtime warnings).</p>\n"},{"title":"OCaml Programming Guidelines","slug":"ocaml-programming-guidelines","description":"Opinionated guidelines for writing OCaml code\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"getting-started","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}}},"body_md":"\nThis is a set of reasonable guidelines for formatting OCaml\nprograms—guidelines which reflect the consensus among veteran OCaml\nprogrammers. Nevertheless, all detailed notifications of possible errors\nor omissions will be noted with pleasure. To send your comments using\n[GitHub issues](https://github.com/ocaml/ocaml.org/issues?state=open).\n<br />\nOriginal translation from French: [Ruchira\nDatta](mailto:datta@math.berkeley.edu).\n\nThanks to all those who have already participated in the critique of\nthis page: Daniel de Rauglaudre, Luc Maranget, Jacques Garrigue, Damien\nDoligez, Xavier Leroy, Bruno Verlyck, Bruno Petazzoni, Francois Maltey,\nBasile Starynkevitch, Toby Moth, Pierre Lescanne.\n\n## General guidelines to write programs\n###  Be simple and readable\nThe time you spend typing the programs is negligible compared to the\ntime spent reading them. That's the reason why you save a lot of time if\nyou work hard to optimize readability.\n\nAll the time you are \"wasting\" to get a simpler program today, will\nreturn a hundred times in the future during the uncountably many\nmodifications and readings of the program (starting with the first\ndebugging).\n\n> \n> **Writing programs law**: A program is written once, modified ten\n> times, and read 100 times. So simplify its writing, always keep future\n> modifications in mind, and never jeopardize readability.\n> \n\n## Program formatting guidelines\n###  Lexical conventions\n> \n> **Pseudo spaces law**: never hesitate to separate words of your\n> programs with spaces; the space bar is the easiest key to find on the\n> keyboard, press it as often as necessary!\n> \n\n####  Delimiters\nA space should always follow a delimiter symbol, and spaces should\nsurround operator symbols. It has been a great step forward in\ntypography to separate words by spaces to make written texts easier to\nread. Do the same in your programs if you want them to be readable.\n\n####  How to write pairs\nA tuple is parenthesized and the commas therein (delimiters) are each\nfollowed by a space: `(1, 2)`, `let   triplet = (x, y, z)`...\n\n* **Commonly accepted exceptions**:\n    * **Definition of the components of a pair**: In place of\n `let (x, y) =       ...`, you can write `let x, y = ...`.\n\n> **Justification**: The point is to define several values\n> simultaneously, not to construct a tuple. Moreover, the\n> pattern is set off nicely between `let` and `=`.\n\n- **Matching several values simultaneously**: It's okay to omit\n  parentheses around n-tuples when matching several values\n  simultaneously.\n\n        match x, y with\n        | 1, _ -> ...\n        | x, 1 -> ...\n        | x, y -> ...\n\n  > **Justification**: The point is to match several values in\n  > parallel, not to construct a tuple. Moreover, the expressions\n  > being matched are set off by `match` and `with`, while the\n  > patterns are set off nicely by `|` and `->`.\n\n\n####  How to write lists\nWrite `x :: l` with spaces around the `::` (since `::` is an infix\noperator, hence surrounded by spaces) and `[1; 2; 3]` (since `;` is a\ndelimiter, hence followed by a space).\n\n####  How to write operator symbols\nBe careful to keep operator symbols well separated by spaces: not only\nwill your formulas be more readable, but you will avoid confusion with\nmulti-character operators. (Obvious exceptions to this rule: the symbols\n`!` and `.` are not separated from their arguments.)<br />\nExample: write `x + 1` or `x + !y`.\n\n \n> **Justification**: If you left out the spaces then `x+1` would be\n> understood, but `x+!y` would change its meaning since `+!` would\n> be interpreted as a multi-character operator.\n> \n> **Criticism**: The absence of spaces around an operator improves the\n> readability of formulas when you use it to reflect the relative\n> precedences of operators. For example `x*y + 2*z` makes it very\n> obvious that multiplication takes precedence over addition.\n> \n> **Response**: This is a bad idea, a chimera, because nothing in the\n> language ensures that the spaces properly reflect the meaning of the\n> formula. For example `x * z-1` means `(x * z) - 1`, and not\n> `x * (z - 1)` as the proposed interpretation of spaces would seem to\n> suggest. Besides, the problem of multi-character symbols would keep\n> you from using this convention in a uniform way: you couldn't leave\n> out the spaces around the multiplication to write `x*!y + 2*!z`.\n> Finally, this playing with the spaces is a subtle and flimsy\n> convention, a subliminal message which is difficult to grasp on\n> reading. If you want to make the precedences obvious, use the\n> expressive means brought to you by the language: write parentheses.\n> \n> **Additional justification**: Systematically surrounding operators\n> with spaces simplify the treatment of infix operators which are no\n> more a complex particular case; in effect, whereas you can write `(+)`\n> without spaces, you evidently cannot write `(*)` since `(*` is read as\n> the beginning of a comment. You must write at least one space as in\n> “`( *)`”, although an extra space after `*` is definitively preferable\n> if you want to avoid that `*)` could be read, in some contexts, as the\n> end of a comment. All those difficulties are easily avoided if you\n> adopt the simple rule proposed here: keep operator symbols well\n> separated by spaces.<br />\n> In fact you will quickly feel that this rule is not so difficult to\n> follow: the space bar is the greatest and best situated key of the\n> keyboard, it is the easiest to enter and you cannot miss it!\n\n\n####  How to write long character strings\nIndent long character strings with the convention in force at that line\nplus an indication of string continuation at the end of each line (a `\\`\ncharacter at the end of the line that omits white spaces on the\nbeginning of next line):\n<!-- $MDX skip -->\n```ocaml\nlet universal_declaration =\n  \"-1- Programs are born and remain free and equal under the law;\\n\\\n   distinctions can only be based on the common good.\" in\n  ...\n```\n\n## Indentation of programs\n> \n> **Landin's pseudo law**: Treat the indentation of your programs as if\n> it determines the meaning of your programs.\n> \n\nI would add to this law: carefully treat the indentation of programs\nbecause in some cases it really gives the meaning of the program!\n\nThe indentation of programs is an art which excites many strong\nopinions. Here several indentation styles are given which are drawn from\nexperience and which have not been severely criticized.\n\nWhen a justification for the adopted style has seemed obvious to me, I\nhave indicated it. On the other hand, criticisms are also noted.\n\nSo each time, you have to choose between the different styles\nsuggested.<br />\n The only absolute rule is the first below.\n\n###  Consistency of indentation\nChoose a generally accepted style of indentation, then use it\nsystematically throughout the whole application.\n\n###  Width of the page\nThe page is 80 columns wide.\n\n> **Justification**: This width makes it possible to read the code on\n> all displays and to print it in a legible font on a standard sheet.\n \n\n###  Height of the page\nA function should always fit within one screenful (of about 70 lines),\nor in exceptional cases two, at the very most three. To go beyond this\nis unreasonable.\n\n \n> **Justification**: When a function goes beyond one screenful, it's\n> time to divide it into subproblems and handle them independently.\n> Beyond a screenful, one gets lost in the code. The indentation is not\n> readable and is difficult to keep correct.\n\n\n###  How much to indent\nThe change in indentation between successive lines of the program is\ngenerally 1 or 2 spaces. Pick an amount to indent and stick with it\nthroughout the program.\n\n###  Using tab stops\nUsing the tab character (ASCII character 9) is absolutely *not*\nrecommended.\n\n\n> **Justification**: Between one display and another, the indentation of\n> the program changes completely; it can also become completely wrong,\n> if the programmer used both tabulations and spaces to indent the\n> program.\n> \n> **Criticism**: The purpose of using tabulations is just to allow the\n> readers of the program to indent more or less by changing the tabs\n> stops. The overall indentation remains correct and the reader is glad\n> to easily customize the indentation amount.\n> \n> **Answer**: It seems almost impossible to use this method since you\n> should always use tabulations to indent, which is hard and unnatural.\n \n\n###  How to indent global `let ... ;;` definitions\nThe body of a function defined globally in a module is generally\nindented normally. However, it's okay to treat this case specially to\nset off the definition better.\n\nWith a regular indentation of 1 or 2 spaces:\n\n<!-- $MDX skip -->\n```ocaml\nlet f x = function\n  | C ->\n  | D ->\n  ...\n\nlet g x =\n  let tmp =\n    match x with\n    | C -> 1\n    | x -> 0 in\n  tmp + 1\n```\n> \n> **Justification**: No exception to the amount of indentation.\n> \n\nOther conventions are acceptable, for example:\n\n* The body is left-justified in the case of pattern-matching.\n\n<!-- $MDX skip -->\n```ocaml\nlet f x = function\n| C ->\n| D ->\n...\n```\n> \n> **Justification**: The vertical bars separating the patterns stop\n> when the definition is done, so it's still easy to pass on to the\n> following definition.\n> \n> **Criticism**: An unpleasant exception to the normal indentation.\n> \n\n\n* The body is justified just under the name of the defined function.\n\n<!-- $MDX skip -->\n```ocaml\nlet f x =\n    let tmp = ... in\n    try g x with\n    | Not_found ->\n    ...\n```\n> \n> **Justification**: The first line of the definition is set off\n> nicely, so it's easier to pass from definition to definition.\n> \n> **Criticism**: You run into the right margin too quickly.\n> \n\n\n###  How to indent `let ... in` constructs\nThe expression following a definition introduced by `let` is indented to\nthe same level as the keyword `let`, and the keyword `in` which\nintroduces it is written at the end of the line:\n\n<!-- $MDX skip -->\n```ocaml\nlet expr1 = ... in\nexpr1 + expr1\n```\n\nIn the case of a series of `let` definitions, the preceding rule implies\nthat these definitions should be placed at the same indentation level:\n\n<!-- $MDX skip -->\n```ocaml\nlet expr1 = ... in\nlet n = ... in\n...\n```\n> \n> **Justification**: It is suggested that a series of “let ... in”\n> constructs is analogous to a set of assumptions in a mathematical\n> text, whence the same indentation level for all the assumptions.\n> \n\nVariation: some write the keyword `in` alone on one line to set apart\nthe final expression of the computation:\n\n<!-- $MDX skip -->\n```ocaml\nlet e1 = ... in\nlet e2 = ... in\nlet new_expr =\n  let e1' = derive_expression e1\n  and e2' = derive_expression e2 in\n  Add_expression e1' e2'\nin\nMult_expression (new_expr, new_expr)\n```\n> \n> **Criticism**: Lack of consistency.\n> \n\n###  How to indent `if ... then   ... else ... `\n####  Multiple branches\nWrite conditions with multiple branches at the same level of\nindentation:\n\n<!-- $MDX skip -->\n```ocaml\nif cond1 ...\nif cond2 ...\nif cond3 ...\n```\n> \n> **Justification**: Analogous treatment to pattern-matching clauses,\n> all aligned to the same tab stop.\n> \n\nIf the sizes of the conditions and the expressions allow, write for\nexample:\n\n<!-- $MDX skip -->\n```ocaml\nif cond1 then e1 else\nif cond2 then e2 else\nif cond3 then e3 else\ne4\n\n```\nIf expressions in the branches of multiple conditions have to be\nenclosed (when they include statements for instance), write:\n\n<!-- $MDX skip -->\n```ocaml\nif cond then begin\n    e1\n  end else\nif cond2 then begin\n    e2\n  end else\nif cond3 then ...\n```\nSome suggest another method for multiple conditionals, starting each\nline by the keyword `else`:\n\n<!-- $MDX skip -->\n```ocaml\nif cond1 ...\nelse if cond2 ...\nelse if cond3 ...\n```\n> \n> **Justification**: `elsif` is a keyword in many languages, so use\n> indentation and `else if` to bring it to mind. Moreover, you do not\n> have to look to the end of line to know whether the condition is\n> continued or another test is performed.\n> \n> **Criticism**: Lack of consistency in the treatment of all the\n> conditions. Why a special case for the first condition?\n> \n\nYet again, choose your style and use it systematically.\n\n####  Single branches\nSeveral styles are possible for single branches, according to the size\nof the expressions in question and especially the presence of `begin`\n`end` or `(` `)` delimiters for these expressions.\n\nIn the case of delimiting the branches of a conditional, several styles\nare used:\n\n> `(` at end of line:\n> \n> ```ocaml\n> if cond then (\n>   e1\n> ) else (\n>   e2\n> )\n> ```\n> Or alternatively first `begin` at beginning of line:\n> \n> ```ocaml\n> if cond then\n>   begin\n>     e1\n>   end else begin\n>     e2\n>   end\n> ```\n\nIn fact the indentation of conditionals depends on the sizes of the\nexpressions which make them up.\n\n> \n> If `cond`, `e1` and `e2` are small, simply write them on one line:\n> \n> ```ocaml\n> if cond then e1 else e2\n> ```\n> If the expressions making up a conditional are purely functional\n> (without side effects), we advocate binding them within the\n> conditional with `let e = ... in` when they're too big to fit on a\n> line.\n> \n> > \n> > **Justification**: This way you get back the simple indentation on\n> > one line which is the most readable. As a side benefit, the naming\n> > acts as an aid to comprehension.\n> > \n> \n> So now we consider the case in which the expressions in question do\n> have side effects, which keeps us from simply binding them with a\n> `let e = ... in`.\n> \n> > \n> > If `e1` and `cond` are small, but `e2` large:\n> > \n> > ```ocaml\n> > if cond then e1 else\n> >   e2\n> > ```\n> > \n> > If `e1` and `cond` are large and `e2` small:\n> > \n> > ```ocaml\n> > if cond then\n> >   e1\n> > else e2\n> > ```\n> > \n> > If all the expressions are large:\n> > \n> > ```ocaml\n> > if cond then\n> >   e1\n> > else\n> >   e2\n> > ```\n> > \n> > If there are `( )` delimiters:\n> > \n> > ```ocaml\n> > if cond then (\n> >   e1\n> > ) else (\n> >   e2\n> > )\n> > ```\n> > \n> > A mixture where `e1` requires `( )` but `e2` is small:\n> > \n> > ```ocaml\n> > if cond then (\n> >     e1\n> > ) else e2\n> > ```\n\n###  How to indent pattern-matching constructs\n####  General principles\nAll the pattern-matching clauses are introduced by a vertical bar,\n*including* the first one.\n\n> \n> **Criticism**: The first vertical bar is not mandatory: hence, there\n> is no need to write it.\n> \n> **Answer to criticism**: If you omit the first bar the indentation\n> seems unnatural : the first case gets an indentation that is greater\n> than a normal new line would necessitate. It is thus a useless\n> exception to the correct indentation rule. It also insists not to use\n> the same syntax for the whole set of clauses, writing the first clause\n> as an exception with a slightly different syntax. Last, aesthetic\n> value is doubtful (some people would say “awful” instead of\n> “doubtful”).\n> \n\nAlign all the pattern-matching clauses at the level of the vertical bar\nwhich begins each clause, *including* the first one.\n\nIf an expression in a clause is too large to fit on the line, you must\nbreak the line immediately after the arrow of the corresponding clause.\nThen indent normally, starting from the beginning of the pattern of the\nclause.\n\nArrows of pattern matching clauses should not be aligned.\n\n####  `match` or `try`\nFor a `match` or a `try` align the clauses with the beginning of the\nconstruct:\n\n<!-- $MDX skip -->\n```ocaml\nmatch lam with\n| Abs (x, body) -> 1 + size_lambda body\n| App (lam1, lam2) -> size_lambda lam1 + size_lambda lam2\n| Var v -> 1\n\ntry f x with\n| Not_found -> ...\n| Failure \"not yet implemented\" -> ...\n```\nPut the keyword `with` at the end of the line. If the preceding\nexpression extends beyond one line, put `with` on a line by itself:\n\n<!-- $MDX skip -->\n```ocaml\ntry\n  let y = f x in\n  if ...\nwith\n| Not_found -> ...\n| Failure \"not yet implemented\" -> ...\n```\n> \n> **Justification**: The keyword `with`, on a line by itself shows that\n> the program enters the pattern matching part of the construct.\n> \n\n####  Indenting expressions inside clauses\nIf the expression on the right of the pattern matching arrow is too\nlarge, cut the line after the arrow.\n\n<!-- $MDX skip -->\n```ocaml\nmatch lam with\n| Abs (x, body) ->\n   1 + size_lambda body\n| App (lam1, lam2) ->\n   size_lambda lam1 + size_lambda lam2\n| Var v ->\n```\nSome programmers generalize this rule to all clauses, as soon as one\nexpressions overflows. They will then indent the last clause like this:\n\n<!-- $MDX skip -->\n```ocaml\n| Var v ->\n   1\n```\nOther programmers go one step further and apply this rule systematically\nto any clause of any pattern matching.\n\n<!-- $MDX skip -->\n```ocaml\nlet rec fib = function\n  | 0 ->\n     1\n  | 1 ->\n     1\n  | n ->\n     fib (n - 1) + fib ( n - 2)\n```\n> \n> **Criticism**: May be not compact enough; for simple pattern matchings\n> (or simple clauses in complex matchings), the rule does not add any\n> good to readability.\n> \n> **Justification**: I don't see any good reason for this rule, unless\n> you are paid proportionally to the number of lines of code: in this\n> case use this rule to get more money without adding more bugs in your\n> OCaml programs!\n> \n\n####  Pattern matching in anonymous functions\nSimilarly to `match` or `try`, pattern matching of anonymous functions,\nstarting by `function`, are indented with respect to the `function`\nkeyword:\n\n<!-- $MDX skip -->\n```ocaml\nmap\n  (function\n   | Abs (x, body) -> 1 + size_lambda 0 body\n   | App (lam1, lam2) -> size_lambda (size_lambda 0 lam1) lam2\n   | Var v -> 1)\n  lambda_list\n```\n####  Pattern matching in named functions\nPattern-matching in functions defined by `let` or `let rec` gives rise\nto several reasonable styles which obey the preceding rules for pattern\nmatching (the one for anonymous functions being evidently excepted). See\nabove for recommended styles.\n\n<!-- $MDX skip -->\n```ocaml\nlet rec size_lambda accu = function\n  | Abs (x, body) -> size_lambda (succ accu) body\n  | App (lam1, lam2) -> size_lambda (size_lambda accu lam1) lam2\n  | Var v -> succ accu\n\nlet rec size_lambda accu = function\n| Abs (x, body) -> size_lambda (succ accu) body\n| App (lam1, lam2) -> size_lambda (size_lambda accu lam1) lam2\n| Var v -> succ accu\n```\n###  Bad indentation of pattern-matching constructs\n####  No *beastly* indentation of functions and case analyses.\nThis consists in indenting normally under the keyword `match` or\n`function` which has previously been pushed to the right. Don't write:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec f x = function\n              | [] -> ...\n              ...\n```\nbut choose to indent the line under the `let` keyword:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec f x = function\n  | [] -> ...\n  ...\n```\n> \n> **Justification**: You bump into the margin. The aesthetic value is\n> doubtful...\n> \n\n####  No *beastly* alignment of the `->` symbols in pattern-matching clauses.\nCareful alignment of the arrows of a pattern matching is considered bad\npractice, as exemplify in the following fragment:\n\n<!-- $MDX skip -->\n```ocaml\nlet f = function\n  | C1          -> 1\n  | Long_name _ -> 2\n  | _           -> 3\n```\n> \n> **Justification**: This makes it harder to maintain the program (the\n> addition of a supplementary case can lead the indentations of all the\n> lines to change and so ... we often give up alignment at that time,\n> then it is better not to align the arrows in the first place!).\n> \n\n###  How to indent function calls\n####  Indentation to the function's name:\nNo problem arises except for functions with many arguments&mdash;or very\ncomplicated arguments as well&mdash;which can't fit on the same line. You\nmust indent the expressions with respect to the name of the function (1\nor 2 spaces according to the chosen convention). Write small arguments\non the same line, and change lines at the start of an argument.\n\nAs far as possible, avoid arguments which consist of complex\nexpressions: in these cases define the “large” argument by a `let`\nconstruction.\n\n> \n> **Justification**: No indentation problem; if the name given to the\n> expressions is meaningful, the code is more readable as well.\n> \n> **Additional justification**: If the evaluation of the arguments\n> produces side effects, the `let` binding is in fact necessary to\n> explicitly define the order of evaluation.\n> \n\n####  Naming complex arguments:\nIn place of\n\n<!-- $MDX skip -->\n```ocaml\nlet temp =\n  f x y z\n    “large\n    expression”\n    “other large\n    expression” in\n...\n```\nwrite\n\n<!-- $MDX skip -->\n```ocaml\nlet t =\n  “large\n  expression”\nand u =\n  “other large\n  expression” in\nlet temp =\n  f x y z t u in\n...\n```\n####  Naming anonymous functions:\nIn the case of an iterator whose argument is a complex function, define\nthe function by a `let` binding as well. In place of\n\n<!-- $MDX skip -->\n```ocaml\nList.map\n  (function x ->\n    blabla\n    blabla\n    blabla)\n  l\n```\nwrite\n\n<!-- $MDX skip -->\n```ocaml\nlet f x =\n  blabla\n  blabla\n  blabla in\nList.map f l\n```\n> \n> **Justification**: Much clearer, in particular if the name given to\n> the function is meaningful.\n> \n\n###  How to indent operations\nWhen an operator takes complex arguments, or in the presence of multiple\ncalls to the same operator, start the next the line with the operator,\nand don't indent the rest of the operation. For example:\n\n<!-- $MDX skip -->\n```ocaml\nx + y + z\n+ t + u\n```\n> \n> **Justification**: When the operator starts the line, it is clear that\n> the operation continues on this line.\n> \n\nIn the case of a “large expression” in such an operation sequence,\nto define the “large expression” with the help of a `let in`\nconstruction is preferable to having to indent the line. In place of\n\n<!-- $MDX skip -->\n```ocaml\nx + y + z\n+ “large\n  expression”\n```\nwrite\n\n<!-- $MDX skip -->\n```ocaml\nlet t =\n  “large\n   expression” in\nx + y + z + t\n```\nYou most certainly must bind those expressions too large to be written\nin one operation in the case of a combination of operators. In place of\nthe unreadable expression\n\n<!-- $MDX skip -->\n```ocaml\n(x + y + z * t)\n/ (“large\n    expression”)\n```\nwrite\n\n<!-- $MDX skip -->\n```ocaml\nlet u =\n  “large\n  expression” in\n(x + y + z * t) / u\n```\nThese guidelines extend to all operators. For example:\n\n<!-- $MDX skip -->\n```ocaml\nlet u =\n  “large\n  expression” in\nx :: y\n:: z + 1 :: t :: u\n```\n## Programming guidelines\n###  How to program\n> \n> *Always put your handiwork back on the bench,<br />\n>  and then polish it and re-polish it.*\n> \n\n####  Write simple and clear programs\nWhen this is done, reread, simplify and clarify. At every stage of\ncreation, use your head!\n\n####  Subdivide your programs into little functions\nSmall functions are easier to master.\n\n####  Factor out snippets of repeated code by defining them in separate functions\nThe sharing of code obtained in this way facilitates maintenance since\nevery correction or improvement automatically spreads throughout the\nprogram. Besides, the simple act of isolating and naming a snippet of\ncode sometimes lets you identify an unsuspected feature.\n\n####  Never copy-paste code when programming\nPasting code almost surely indicates introducing a default of code\nsharing and neglecting to identify and write a useful auxiliary\nfunction; hence, it means that some code sharing is lost in the program.\nLosing code sharing implies that you will have more problems afterwards\nfor maintenance: a bug in the pasted code has to be corrected at each\noccurrence of the bug in each copy of the code!\n\nMoreover, it is difficult to identify that the same set of 10 lines of\ncode is repeated 20 times throughout the program. By contrast, if an\nauxiliary function defines those 10 lines, it is fairly easy to see and\nfind where those lines are used: that's simply where the function is\ncalled. If code is copy-pasted all over the place then the program is\nmore difficult to understand.\n\nIn conclusion, copy-pasting code leads to programs that are more\ndifficult to read and more difficult to maintain: it has to be banished.\n\n###  How to comment programs\n####  Don't hesitate to comment when there's a difficulty\n####  If there's no difficulty, there's no point in commenting\n####  Avoid comments in the bodies of functions\n####  Prefer one comment at the beginning of the function...\n...which explains how the algorithm that is used works. Once more, if\nthere is no difficulty, there is no point in commenting.\n\n####  Avoid nocuous comments\nA *nocuous* comment is a comment that does not add any value, i.e. no\nnon-trivial information. The nocuous comment is evidently not of\ninterest; it is a nuisance since it uselessly distracts the reader. It\nis often used to fulfill some strange criteria related to the so-called\n*software metrology*, for instance the ratio *number of comments* /\n*number of lines of code* that perfectly measures a ratio that I don't\nknow the theoretical or practical interpretation. Absolutely avoid\nnocuous comments.\n\nAn example of what to avoid: the following comment uses technical words\nand is thus masquerade into a real comment when it has no additional\ninformation of interest;\n\n<!-- $MDX skip -->\n```ocaml\n(*\n  Function print_lambda:\n  print a lambda-expression given as argument.\n\n  Arguments: lam, any lambda-expression.\n  Returns: nothing.\n\n  Remark: print_lambda can only be used for its side effect.\n*)\nlet rec print_lambda lam =\n  match lam with\n  | Var s -> printf \"%s\" s\n  | Abs l -> printf \"\\\\ %a\" print_lambda l\n  | App (l1, l2) ->\n     printf \"(%a %a)\" print_lambda l1 print_lambda l2\n```\n####  Usage in module interface\nThe function's usage must appear in the interface of the module which\nexports it, not in the program which implements it. Choose comments as\nin the OCaml system's interface modules, which will subsequently allow\nthe documentation of the interface module to be extracted automatically\nif need be.\n\n####  Use assertions\nUse assertions as much as possible: they let you avoid verbose comments,\nwhile allowing a useful verification upon execution.\n\nFor example, the conditions for the arguments of a function to be valid\nare usefully verified by assertions.\n\n<!-- $MDX skip -->\n```ocaml\nlet f x =\n  assert (x >= 0);\n  ...\n```\nNote as well that an assertion is often preferable to a comment because\nit's more trustworthy: an assertion is forced to be pertinent because it\nis verified upon each execution, while a comment can quickly become\nobsolete and then becomes actually detrimental to the comprehension of\nthe program.\n\n####  Comments line by line in imperative code\nWhen writing difficult code, and particularly in case of highly\nimperative code with a lot of memory modifications (physical mutations\nin data structures), it is sometime mandatory to comment inside the body\nof functions to explain the implementation of the algorithm encoded\nhere, or to follow successive modifications of invariants that the\nfunction must maintain. Once more, if there is some difficulty\ncommenting is mandatory, for each program line if necessary.\n\n###  How to choose identifiers\nIt's hard to choose identifiers whose name evokes the meaning of the\ncorresponding portion of the program. This is why you must devote\nparticular care to this, emphasizing clarity and regularity of\nnomenclature.\n\n####  Don't use abbreviations for global names\nGlobal identifiers (including especially the names of functions) can be\nlong, because it's important to understand what purpose they serve far\nfrom their definition.\n\n####  Separate words by underscores: (`int_of_string`, not `intOfString`)\nCase modifications are meaningful in OCaml: in effect capitalized words\nare reserved for constructors and module names in OCaml; in contrast\nregular variables (functions or identifiers) must start by a lowercase\nletter. Those rules prevent proper usage of case modification for words\nseparation in identifiers: the first word starts the identifier, hence\nit must be lower case and it is forbidden to choose `IntOfString` as the\nname of a function.\n\n####  Always give the same name to function arguments which have the same meaning\nIf necessary, make this nomenclature explicit in a comment at the top of\nthe file); if there are several arguments with the same meaning then\nattach numeral suffixes to them.\n\n####  Local identifiers can be brief, and should be reused from one function to another\nThis augments regularity of style. Avoid using identifiers whose\nappearance can lead to confusion such as `l` or `O`, easy to confuse\nwith `1` and `0`.\n\nExample:\n\n<!-- $MDX skip -->\n```ocaml\nlet add_expression expr1 expr2 = ...\nlet print_expression expr = ...\n```\nAn exception to the recommendation not to use capitalization to separate\nwords within identifiers is tolerated in the case of interfacing with\nexisting libraries which use this naming convention: this lets OCaml\nusers of the library to orient themselves in the original library\ndocumentation more easily.\n\n###  When to use parentheses within an expression\nParentheses are meaningful: they indicate the necessity of using an\nunusual precedence. So they should be used wisely and not sprinkled\nrandomly throughout programs. To this end, you should know the usual\nprecedences, that is, the combinations of operations which do not\nrequire parentheses. Quite fortunately this is not complicated if you\nknow a little mathematics or strive to follow the following rules:\n\n####  Arithmetic operators: the same rules as in mathematics\nFor example: `1 + 2 * x` means `1 + (2 * x)`.\n\n####  Function application: the same rules as those in mathematics for usage of *trigonometric functions*\nIn mathematics you write `sin x` to mean `sin (x)`. In the same way\n`sin x + cos x` means `(sin x) + (cos x)` not `sin (x + (cos x))`. Use\nthe same conventions in OCaml: write `f x + g x` to mean\n`(f x) + (g x)`.<br />\nThis convention generalizes **to all (infix) operators**: `f x :: g x`\nmeans `(f x) :: (g x)`, `f x @ g x` means `(f x) @ (g x)`, and\n`failwith s ^ s'` means `(failwith s) ^ s'`, *not* `failwith (s ^ s')`.\n\n####  Comparisons and boolean operators\nComparisons are infix operators, so the preceding rules apply. This is\nwhy `f x < g x` means `(f x) < (g x)`. For type reasons (no other\nsensible interpretation) the expression `f x < x + 2` means\n`(f x) < (x + 2)`. In the same way `f x < x + 2 && x > 3` means\n`((f x) < (x + 2)) && (x > 3)`.\n\n####  The relative precedences of the boolean operators are those of mathematics\nAlthough mathematicians have a tendency to overuse parens in this case,\nthe boolean “or” operator is analogous to addition and the “and”\nto multiplication. So, just as `1 + 2 * x` means `1 + (2 * x)`,\n`true || false && x` means `true || (false && x)`.\n\n###  How to delimit constructs in programs\nWhen it is necessary to delimit syntactic constructs in programs, use as\ndelimiters the keywords `begin` and `end` rather than parentheses.\nHowever using parentheses is acceptable if you do it in a consistent,\nthat is, systematic, way.\n\nThis explicit delimiting of constructs essentially concerns\npattern-matching constructs or sequences embedded within\n`if then     else` constructs.\n\n####  `match` construct in a `match` construct\nWhen a `match ... with` or `try ... with` construct appears in a\npattern-matching clause, it is absolutely necessary to delimit this\nembedded construct (otherwise subsequent clauses of the enclosing\npattern-matching construct will automatically be associated with the\nenclosed pattern-matching construct). For example:\n\n<!-- $MDX skip -->\n```ocaml\nmatch x with\n| 1 ->\n  begin match y with\n  | ...\n  end\n| 2 ->\n...\n```\n####  Sequences inside branches of `if`\nIn the same way, a sequence which appears in the `then` or `else` part\nof a conditional must be delimited:\n\n<!-- $MDX skip -->\n```ocaml\nif cond then begin\n  e1;\n  e2\nend else begin\n  e3;\n  e4\nend\n```\n###  How to use modules\n####  Subdividing into modules\nYou must subdivide your programs into coherent modules.\n\nFor each module, you must explicitly write an interface.\n\nFor each interface, you must document the things defined by the module:\nfunctions, types, exceptions, etc.\n\n####  Opening modules\nAvoid `open` directives, using instead the qualified identifier\nnotation. Thus you will prefer short but meaningful module names.\n\n> \n> **Justification**: The use of unqualified identifiers is ambiguous and\n> gives rise to difficult-to-detect semantic errors.\n> \n\n<!-- $MDX skip -->\n```ocaml\nlet lim = String.length name - 1 in\n...\nlet lim = Array.length v - 1 in\n...\n... List.map succ ...\n... Array.map succ ...\n```\n####  When to use open modules rather than leaving them closed\nYou can consider it normal to open a module which modifies the\nenvironment, and brings other versions of an important set of functions.\nFor example, the `Format` module provides automatically indented\nprinting. This module redefines the usual printing functions\n`print_string`, `print_int`, `print_float`, etc. So when you use\n`Format`, open it systematically at the top of the file.<br />\nIf you don't open `Format` you could miss the qualification of a\nprinting function, and this could be perfectly silent, since many of\n`Format`'s functions have a counterpart in the default environment\n(`Pervasives`). Mixing printing functions from `Format` and `Pervasives`\nleads to subtle bugs in the display, that are difficult to trace. For\ninstance:\n\n<!-- $MDX skip -->\n```ocaml\nlet f () =\n  Format.print_string \"Hello World!\"; print_newline ()\n```\nis bogus since it does not call `Format.print_newline` to flush the\npretty-printer queue and output `\"Hello World!\"`. Instead\n`\"Hello World!\"` is stuck into the pretty-printer queue, while\n`Pervasives.print_newline` outputs a carriage return on the standard\noutput ... If `Format` is printing on a file and standard output is the\nterminal, the user will have a bad time finding that a carriage return\nis missing in the file (and the display of material on the file is\nstrange, since boxes that should be closed by `Format.print_newline` are\nstill open), while a spurious carriage return appeared on the screen!\n\nFor the same reason, open large libraries such as the one with\narbitrary-precision integers so as not to burden the program which uses\nthem.\n\n<!-- $MDX skip -->\n```ocaml\nopen Num\n\nlet rec fib n =\n  if n <= 2 then Int 1 else fib (n - 1) +/ fib (n - 2)\n```\n> \n> **Justification**: The program would be less readable if you had to\n> qualify all the identifiers.\n> \n\nIn a program where type definitions are shared, it is good to gather\nthese definitions into one or more module(s) without implementations\n(containing only types). Then it's acceptable to systematically open the\nmodule which exports the shared type definitions.\n\n###  Pattern-matching\n####  Never be afraid of over-using pattern-matching!\n####  On the other hand, be careful to avoid non-exhaustive pattern-matching constructs\nComplete them with care, without using a “catch-all” clause such as\n`| _ -> ...` or `| x -> ...` when it's possible to do without it (for\nexample when matching a concrete type defined within the program). See\nalso the next section: compiler warnings.\n\n###  Compiler warnings\nCompiler warnings are meant to prevent potential errors; this is why you\nabsolutely must heed them and correct your programs if compiling them\nproduces such warnings. Besides, programs whose compilation produces\nwarnings have an odor of amateurism which certainly doesn't suit your\nown work!\n\n####  Pattern-matching warnings\nWarnings about pattern-matching must be treated with the upmost care:\n\n* Those concerning useless clauses should of course be eliminated.\n\n\n* For non-exhaustive pattern-matching you must complete the\n corresponding pattern-matching construct, without adding a default\n case “catch-all”, such as `| _ -> ... `, but with an explicit\n list of the constructors not examined by the rest of the construct,\n for example `| Cn _ | Cn1 _ -> ... `.\n\n> \n> **Justification**: It's not really any more complicated to write\n> it this way, and this allows the program to evolve more safely. In\n> effect the addition of a new constructor to the datatype being\n> matched will produce an alert anew, which will allow the\n> programmer to add a clause corresponding to the new constructor if\n> that is warranted. On the contrary, the “catch-all” clause\n> will make the function compile silently and it might be thought\n> that the function is correct as the new constructor will be\n> handled by the default case.\n> \n\n\n* Non-exhaustive pattern-matches induced by clauses with guards must\n also be corrected. A typical case consists in suppressing a\n redundant guard.\n\n####  De-structuring `let` bindings\n\\[Translator's note: a “de-structuring `let` binding” is one which\nbinds several names to several expressions simultaneously. You pack all\nthe names you want bound into a collection such as a tuple or a list,\nand you correspondingly pack all the expressions into a collective\nexpression. When the `let` binding is evaluated, it unpacks the\ncollections on both sides and binds each expression to its corresponding\nname. For example, `let x, y = 1, 2` is a de-structuring `let` binding\nwhich performs both the bindings `let x = 1` and `let y = 2`\nsimultaneously.\\]<br />\nThe `let` binding is not limited to simple identifier definitions: you\ncan use it with more complex or simpler patterns. For instance\n\n* `let` with complex patterns:<br />\n `let [x; y] as l = ...`<br />\n simultaneously defines a list `l` and its two elements `x` and `y`.\n* `let` with simple pattern:<br />\n `let _ = ...` does not define anything, it just evaluate the\n expression on the right hand side of the `=` symbol.\n\n####  The de-structuring `let` must be exhaustive\nOnly use de-structuring `let` bindings in the case where the\npattern-matching is exhaustive (the pattern can never fail to match).\nTypically, you will thus be limited to definitions of product types\n(tuples or records) or definitions of variant type with a single case.\nIn any other case, you should use an explicit `match   ... with`\nconstruct.\n\n* `let ... in`: de-structuring `let` that give a warning must be\n replaced by an explicit pattern matching. For instance, instead of\n `let [x; y] as l = List.map succ     (l1 @ l2) in expression` write:\n\n<!-- $MDX skip -->\n```ocaml\nmatch List.map succ (l1 @ l2) with\n| [x; y] as l -> expression\n| _ -> assert false\n```\n\n\n* Global definition with de-structuring lets should be rewritten with\n explicit pattern matching and tuples:\n\n<!-- $MDX skip -->\n```ocaml\nlet x, y, l =\n  match List.map succ (l1 @ l2) with\n  | [x; y] as l -> x, y, l\n  | _ -> assert false\n```\n\n\n> \n> **Justification**: There is no way to make the pattern-matching\n> exhaustive if you use general de-structuring `let` bindings.\n> \n\n####  Sequence warnings and `let _ = ...`\nWhen the compiler emits a warning about the type of an expression in a\nsequence, you have to explicitly indicate that you want to ignore the\nresult of this expression. To this end:\n\n* use a vacuous binding and suppress the sequence warning of\n\n<!-- $MDX skip -->\n```ocaml\nList.map f l;\nprint_newline ()\n```\nwrite\n<!-- $MDX skip -->\n```ocaml\nlet _ = List.map f l in\nprint_newline ()\n```\n\n\n* you can also use the predefined function `ignore : 'a     -> unit`\n that ignores its argument to return `unit`.\n\n<!-- $MDX skip -->\n```ocaml\nignore (List.map f l);\nprint_newline ()\n```\n\n\n* In any case, the best way to suppress this warning is to understand\n why it is emitted by the compiler: the compiler warns you because\n your code computes a result that is useless since this result is\n just deleted after computation. Hence, if useful at all, this\n computation is performed only for its side-effects; hence it should\n return unit.<br />\n Most of the time, the warning indicates the use of the wrong\n function, a probable confusion between the side-effect only version\n of a function (which is a procedure whose result is irrelevant) with\n its functional counterpart (whose result is meaningful).<br />\n In the example mentioned above, the first situation prevailed, and\n the programmer should have called `iter` instead of `map`, and\n simply write\n\n<!-- $MDX skip -->\n```ocaml\nList.iter f l;\nprint_newline ()\n```\nIn actual programs, the suitable (side-effect only) function may not\nexist and has to be written: very often, a careful separation of the\nprocedural part from the functional part of the function at hand\nelegantly solves the problem, and the resulting program just looks\nbetter afterwards! For instance, you would turn the problematic\ndefinition:\n<!-- $MDX skip -->\n```ocaml\nlet add x y =\n  if x > 1 then print_int x;\n  print_newline ();\n  x + y;;\n```\ninto the clearer separate definitions and change old calls to `add`\naccordingly.\n\n\n\nIn any case, use the `let _ = ...` construction exactly in those cases\nwhere you want to ignore a result. Don't systematically replace\nsequences with this construction.\n\n> \n> **Justification**: Sequences are much clearer! Compare `e1; e2; e3` to\n> \n> ```ocaml\n> let _ = e1 in\n> let _ = e2 in\n> e3\n> ```\n\n###  The `hd` and `tl` functions\nDon't use the `hd` and `tl` functions, but pattern-match the list\nargument explicitly.\n\n> \n> **Justification**: This is just as brief as and much clearer than\n> using `hd` and `tl` which must of necessity be protected by\n> `try... with...` to catch the exception which might be raised by these\n> functions.\n> \n\n###  Loops\n####  `for` loops\nTo simply traverse an array or a string, use a `for` loop.\n\n<!-- $MDX skip -->\n```ocaml\nfor i = 0 to Array.length v - 1 do\n  ...\ndone\n```\nIf the loop is complex or returns a result, use a recursive function.\n\n<!-- $MDX skip -->\n```ocaml\nlet find_index e v =\n  let rec loop i =\n    if i >= Array.length v then raise Not_found else\n    if v.(i) = e then i else loop (i + 1) in\n  loop 0;;\n```\n> \n> **Justification**: The recursive function lets you code any loop\n> whatsoever simply, even a complex one, for example with multiple exit\n> points or with strange index steps (steps depending on a data value\n> for example).\n> \n> Besides, the recursive loop avoids the use of mutables whose value can\n> be modified in any part of the body of the loop whatsoever (or even\n> outside): on the contrary the recursive loop explicitly takes as\n> arguments the values susceptible to change during the recursive calls.\n> \n\n####  `while` loops\n> \n> **While loops law**: Beware: usually a while loop is wrong, unless its\n> loop invariant has been explicitly written.\n> \n\nThe main use of the `while` loop is the infinite loop\n`while true do     ...`. You get out of it through an exception,\ngenerally on termination of the program.\n\nOther `while` loops are hard to use, unless they come from canned\nprograms from algorithms courses where they were proved.\n\n> \n> **Justification**: `while` loops require one or more mutables in order\n> that the loop condition change value and the loop finally terminate.\n> To prove their correctness, you must therefore discover the loop\n> invariants, an interesting but difficult sport.\n> \n\n###  Exceptions\nDon't be afraid to define your own exceptions in your programs, but on\nthe other hand use as much as possible the exceptions predefined by the\nsystem. For example, every search function which fails should raise the\npredefined exception `Not_found`. Be careful to handle the exceptions\nwhich may be raised by a function call with the help of a\n`try ... with`.\n\nHandling all exceptions by `try     ... with _ ->` is usually reserved\nfor the main function of the program. If you need to catch all\nexceptions to maintain an invariant of an algorithm, be careful to name\nthe exception and re-raise it, after having reset the invariant.\nTypically:\n<!-- $MDX skip -->\n```ocaml\nlet ic = open_in ...\nand oc = open_out ... in\ntry\n  treatment ic oc;\n  close_in ic; close_out oc\nwith x -> close_in ic; close_out oc; raise x\n```\n> \n> **Justification**: `try ... with _     ->` silently catches all\n> exceptions, even those which have nothing to do with the computation\n> at hand (for example an interruption will be captured and the\n> computation will continue anyway!).\n> \n\n###  Data structures\nOne of the great strengths of OCaml is the power of the data structures\nwhich can be defined and the simplicity of manipulating them. So you\nmust take advantage of this to the fullest extent; don't hesitate to\ndefine your own data structures. In particular, don't systematically\nrepresent enumerations by whole numbers, nor enumerations with two cases\nby booleans. Examples:\n\n```ocaml\ntype figure =\n   | Triangle | Square | Circle | Parallelogram\ntype convexity =\n   | Convex | Concave | Other\ntype type_of_definition =\n   | Recursive | Non_recursive\n```\n> \n> **Justification**: A boolean value often prevents intuitive\n> understanding of the corresponding code. For example, if\n> `type_of_definition` is coded by a boolean, what does `true` signify?\n> A “normal” definition (that is, non-recursive) or a recursive\n> definition?\n> \n> In the case of an enumerated type encode by an integer, it is very\n> difficult to limit the range of acceptable integers: one must define\n> construction functions that will ensure the mandatory invariants of\n> the program (and verify afterwards that no values has been built\n> directly), or add assertions in the program and guards in pattern\n> matchings. This is not good practice, when the definition of a sum\n> type elegantly solves this problem, with the additional benefit of\n> firing the full power of pattern matching and compiler's verifications\n> of exhaustiveness.\n> \n> **Criticism**: For binary enumerations, one can systematically define\n> predicates whose names carry the semantics of the boolean that\n> implements the type. For instance, we can adopt the convention that a\n> predicate ends by the letter `p`. Then, in place of defining a new sum\n> type for `type_of_definition`, we will use a predicate function\n> `recursivep` that returns true if the definition is recursive.\n> \n> **Answer**: This method is specific to binary enumeration and cannot\n> be easily extended; moreover it is not well suited to pattern\n> matching. For instance, for definitions encoded by\n> `| Let of bool * string * expression` a typical pattern matching would\n> look like:\n> \n> ```ocaml\n> | Let (_, v, e) as def ->\n>    if recursivep def then code_for_recursive_case\n>    else code_for_non_recursive_case\n> ```\n> \n> or, if `recursivep` can be applied to booleans:\n> \n> ```ocaml\n> | Let (b, v, e) ->\n>    if recursivep b then code_for_recursive_case\n>    else code_for_non_recursive_case\n> ```\n> \n> contrast with an explicit encoding:\n> \n> ```ocaml\n> | Let (Recursive, v, e) -> code_for_recursive_case\n> | Let (Non_recursive, v, e) -> code_for_non_recursive_case\n> ```\n> \n> The difference between the two programs is subtle and you may think\n> that this is just a matter of taste; however the explicit encoding is\n> definitively more robust to modifications and fits better with the\n> language.\n> \n\n*A contrario*, it is not necessary to systematically define new types\nfor boolean flags, when the interpretation of constructors `true` and\n`false` is clear. The usefulness of the definition of the following\ntypes is then questionable:\n<!-- $MDX skip -->\n```ocaml\ntype switch = On | Off\ntype bit = One | Zero\n```\nThe same objection is admissible for enumerated types represented as\nintegers, when those integers have an evident interpretation with\nrespect to the data to be represented.\n\n###  When to use mutables\nMutable values are useful and sometimes indispensable to simple and\nclear programming. Nevertheless, you must use them with discernment:\nOCaml's normal data structures are immutable. They are to be preferred\nfor the clarity and safety of programming which they allow.\n\n###  Iterators\nOCaml's iterators are a powerful and useful feature. However you should\nnot overuse them, nor *a contrario* neglect them: they are provided to\nyou by libraries and have every chance of being correct and\nwell-thought-out by the author of the library. So it's useless to\nreinvent them.\n\nSo write\n<!-- $MDX skip -->\n```ocaml\nlet square_elements elements = List.map square elements\n```\nrather than:\n<!-- $MDX skip -->\n```ocaml\nlet rec square_elements = function\n  | [] -> []\n  | elem :: elements -> square elem :: square_elements elements\n```\nOn the other hand avoid writing:\n<!-- $MDX skip -->\n```ocaml\nlet iterator f x l =\n  List.fold_right (List.fold_left f) [List.map x l] l\n```\neven though you get:\n<!-- $MDX skip -->\n```ocaml\n  let iterator f x l =\n    List.fold_right (List.fold_left f) [List.map x l] l;;\n  iterator (fun l x -> x :: l) (fun l -> List.rev l) [[1; 2; 3]]\n```\nIn case of express need, you must be careful to add an explanatory\ncomment: in my opinion it's absolutely necessary!\n\n###  How to optimize programs\n> \n> **Pseudo law of optimization**: No optimization *a priori*.<br />\n>  No optimization *a posteriori* either.\n> \n\nAbove all program simply and clearly. Don't start optimizing until the\nprogram bottleneck has been identified (in general a few routines). Then\noptimization consists above all of changing *the complexity* of the\nalgorithm used. This often happens through redefining the data\nstructures being manipulated and completely rewriting the part of the\nprogram which poses a problem.\n\n> \n> **Justification**: Clarity and correctness of programs take\n> precedence. Besides, in a substantial program, it is practically\n> impossible to identify *a priori* the parts of the program whose\n> efficiency is of prime importance.\n> \n\n###  How to choose between classes and modules\nYou should use OCaml classes when you need inheritance, that is,\nincremental refinement of data and their functionality.\n\nYou should use conventional data structures (in particular, variant\ntypes) when you need pattern-matching.\n\nYou should use modules when the data structures are fixed and their\nfunctionality is equally fixed or it's enough to add new functions in\nthe programs which use them.\n\n###  Clarity of OCaml code\nThe OCaml language includes powerful constructs which allow simple and\nclear programming. The main problem to obtain crystal clear programs it\nto use them appropriately.\n\nThe language features numerous programming styles (or programming\nparadigms): imperative programming (based on the notion of state and\nassignment), functional programming (based on the notion of function,\nfunction results, and calculus), object oriented programming (based of\nthe notion of objects encapsulating a state and some procedures or\nmethods that can modify the state). The first work of the programmer is\nto choose the programming paradigm that fits the best the problem at\nhand. When using one of those programming paradigms, the difficulty is\nto use the language construct that expresses in the most natural and\neasiest way the computation that implements the algorithm.\n\n####  Style dangers\nConcerning programming styles, one can usually observe the two\nsymmetrical problematic behaviors: on the one hand, the “all\nimperative” way (*systematic* usage of loops and assignment), and on\nthe other hand the “purely functional” way (*never* use loops nor\nassignments); the “100% object” style will certainly appear in the\nnext future, but (fortunately) it is too new to be discussed here.\n\n* **The “Too much imperative” danger**:\n    * It is a bad idea to use imperative style to code a function that\n is *naturally* recursive. For instance, to compute the length of\n a list, you should not write:\n<!-- $MDX skip -->\n```ocaml\nlet list_length l =\n  let l = ref l in\n  let res = ref 0 in\n  while !l <> [] do\n    incr res; l := List.tl !l\n  done;\n  !res;;\n```\nin place of the following recursive function, so simple and\nclear:\n<!-- $MDX skip -->\n```ocaml\nlet rec list_length = function\n  | [] -> 0\n  | _ :: l -> 1 + list_length l\n```\n(For those that would contest the equivalence of those two\nversions, see the [note below](#Imperativeandfunctionalversionsoflistlength)).\n\n\n* Another common “over imperative error” in the imperative world is\n  not to systematically choose the simple `for` loop to iter on the\n  element of a vector, but instead to use a complex `while` loop, with\n  one or two references (too many useless assignments, too many\n  opportunity for errors).\n\n* This category of programmer feels that the `mutable` keyword in\n  the record type definitions should be implicit.\n\n* **The “Too much functional” danger**:\n    * The programmer that adheres to this dogma avoids\n using arrays and assignment. In the most severe case, one\n observes a complete denial of writing any imperative\n construction, even in case it is evidently the most elegant way\n to solve the problem.\n    * Characteristic symptoms: systematic rewriting of `for` loops\n with recursive functions, usage of lists in contexts where\n imperative data structures seem to be mandatory to anyone,\n passing numerous global parameters of the problem to every\n functions, even if a global reference would be perfect to avoid\n these spurious parameters that are mainly invariants that must\n be passed all over the place.\n    * This programmer feels that the `mutable` keyword in the record\n type definitions should be suppressed from the language.\n\n####  OCaml code generally considered unreadable\nThe OCaml language includes powerful constructs which allow simple and\nclear programming. However the power of these constructs also lets you\nwrite uselessly complicated code, to the point where you get a perfectly\nunreadable program.\n\nHere are a number of known ways:\n\n* Use useless (hence novice for readability) `if then else`, as in\n<!-- $MDX skip -->\n```ocaml\nlet flush_ps () =\n  if not !psused then psused := true\n```\nor (more subtle)\n<!-- $MDX skip -->\n```ocaml\nlet sync b =\n  if !last_is_dvi <> b then last_is_dvi := b\n```\n\n\n* Code one construct with another. For example code a `let ... in` by\n the application of an anonymous function to an argument. You would\n write<br />\n<!-- $MDX skip -->\n```ocaml\n(fun x y -> x + y)\n   e1 e2\n```\ninstead of simply writing\n<!-- $MDX skip -->\n```ocaml\nlet x = e1\nand y = e2 in\nx + y\n```\n\n\n* Systematically code sequences with `let in` bindings.\n\n\n* Mix computations and side effects, particularly in function calls.\n Recall that the order of evaluation of arguments in a function call\n is unspecified, which implies that you must not mix side effects and\n computations in function calls. However, when there is only one\n argument you might take advantage of this to perform a side effect\n within the argument, which is extremely troublesome for the reader\n albeit without danger to the program semantics. To be absolutely\n forbidden.\n\n\n* Misuse of iterators and higher-order functions (i.e. over- or\n under-use). For example it's better to use `List.map` or\n `List.iter` than to write their equivalents in-line using specific\n recursive functions of your own. Even worse, you don't use\n `List.map` or `List.iter` but write their equivalents in terms of\n `List.fold_right` and `List.fold_left`.\n\n\n* Another efficient way to write unreadable code is to mix all or some\n of these methods. For example:\n<!-- $MDX skip -->\n```ocaml\n(fun u -> print_string \"world\"; print_string u)\n  (let temp = print_string \"Hello\"; \"!\" in\n   ((fun x -> print_string x; flush stdout) \" \";\n    temp));;\n```\n\n\nIf you naturally write the program `print_string \"Hello world!\"` in this\nway, you can without a doubt submit your work to the [Obfuscated OCaml\nContest](mailto:Pierre.Weis@inria.fr).\n\n## Managing program development\nWe give here tips from veteran OCaml programmers, which have served in\ndeveloping the compilers which are good examples of large complex\nprograms developed by small teams.\n\n###  How to edit programs\nMany developers nurture a kind of veneration towards the Emacs editor\n(gnu-emacs in general) which they use to write their programs. The\neditor interfaces well with the language since it is capable of syntax\ncoloring OCaml source code (rendering different categories of words in\ncolor, coloring keywords for example).\n\nThe following two commands are considered indispensable:\n\n* `CTRL-C-CTRL-C` or `Meta-X compile`: launches re-compilation from\n within the editor (using the `make` command).\n* `` CTRL-X-` ``: puts the cursor in the file and at the exact place\n where the OCaml compiler has signaled an error.\n\nDevelopers describe thus how to use these features: `CTRL-C-CTRL-C`\ncombination recompiles the whole application; in case of errors, a\nsuccession of `` CTRL-X-` `` commands permits correction of all the\nerrors signaled; the cycle begins again with a new re-compilation\nlaunched by `CTRL-C-CTRL-C`.\n\n####  Other emacs tricks\nThe `ESC-/` command (dynamic-abbrev-expand) automatically completes the\nword in front of the cursor with one of the words present in one of the\nfiles being edited. Thus this lets you always choose meaningful\nidentifiers without the tedium of having to type extended names in your\nprograms: the `ESC-/` easily completes the identifier after typing the\nfirst letters. In case it brings up the wrong completion, each\nsubsequent `ESC-/` proposes an alternate completion.\n\nUnder Unix, the `CTRL-C-CTRL-C` or `Meta-X     compile` combination,\nfollowed by `` CTRL-X-` `` is also used to find all occurrences of a\ncertain string in a OCaml program. Instead of launching `make` to\nrecompile, you launch the `grep` command; then all the “error\nmessages” from `grep` are compatible with the `` CTRL-X-` `` usage\nwhich automatically takes you to the file and the place where the string\nis found.\n\n###  How to edit with the interactive system\nUnder Unix: use the line editor `ledit` which offers great editing\ncapabilities “à la emacs” (including `ESC-/`!), as well as a history\nmechanism which lets you retrieve previously typed commands and even\nretrieve commands from one session in another. `ledit` is written in\nOCaml and can be freely down-loaded\n[here](ftp://ftp.inria.fr/INRIA/Projects/cristal/caml-light/bazar-ocaml/ledit.tar.gz).\n\n###  How to compile\nThe `make` utility is indispensable for managing the compilation and\nre-compilation of programs. Sample `make` files can be found on [The\nHump](https://caml.inria.fr//cgi-bin/hump.en.cgi). You can also consult\nthe `Makefiles` for the OCaml compilers.\n\n###  How to develop as a team: version control\nUsers of the [Git](https://git-scm.com/) software version control system\nnever run out of good things to say about the productivity gains it\nbrings. This system supports managing development by a team of\nprogrammers while imposing consistency among them, and also maintains a\nlog of changes made to the software.<br />\n Git also supports simultaneous development by several teams, possibly\ndispersed among several sites linked on the Net.\n\nAn anonymous Git read-only mirror [contains the working sources of the\nOCaml compilers](https://github.com/ocaml/ocaml), and the sources of\nother software related to OCaml.\n\n##  Notes\n###  Imperative and functional versions of `list_length`\nThe two versions of `list_length` are not completely equivalent in term\nof complexity, since the imperative version uses a constant amount of\nstack room to execute, whereas the functional version needs to store\nreturn addresses of suspended recursive calls (whose maximum number is\nequal to the length of the list argument). If you want to retrieve a\nconstant space requirement to run the functional program you just have\nto write a function that is recursive in its tail (or *tail-rec*), that\nis a function that just ends by a recursive call (which is not the case\nhere since a call to `+` has to be perform after the recursive call has\nreturned). Just use an accumulator for intermediate results, as in:\n<!-- $MDX skip -->\n```ocaml\nlet list_length l =\n  let rec loop accu = function\n    | [] -> accu\n    | _ :: l -> loop (accu + 1) l in\n  loop 0 l\n```\nThis way, you get a program that has the same computational properties\nas the imperative program with the additional clarity and natural\nlook of an algorithm that performs pattern matching and recursive\ncalls to handle an argument that belongs to a recursive sum data type.\n\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#general-guidelines-to-write-programs\">General guidelines to write programs</a>\n</li>\n<li><a href=\"#program-formatting-guidelines\">Program formatting guidelines</a>\n</li>\n<li><a href=\"#indentation-of-programs\">Indentation of programs</a>\n</li>\n<li><a href=\"#programming-guidelines\">Programming guidelines</a>\n</li>\n<li><a href=\"#managing-program-development\">Managing program development</a>\n</li>\n<li><a href=\"#notes\">Notes</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This is a set of reasonable guidelines for formatting OCaml\nprograms—guidelines which reflect the consensus among veteran OCaml\nprogrammers. Nevertheless, all detailed notifications of possible errors\nor omissions will be noted with pleasure. To send your comments using\n<a href=\"https://github.com/ocaml/ocaml.org/issues?state=open\">GitHub issues</a>.\n<br />\nOriginal translation from French: <a href=\"mailto:datta@math.berkeley.edu\">Ruchira\nDatta</a>.</p>\n<p>Thanks to all those who have already participated in the critique of\nthis page: Daniel de Rauglaudre, Luc Maranget, Jacques Garrigue, Damien\nDoligez, Xavier Leroy, Bruno Verlyck, Bruno Petazzoni, Francois Maltey,\nBasile Starynkevitch, Toby Moth, Pierre Lescanne.</p>\n<h2 id=\"general-guidelines-to-write-programs\">General guidelines to write programs</h2>\n<h3 id=\"be-simple-and-readable\">Be simple and readable</h3>\n<p>The time you spend typing the programs is negligible compared to the\ntime spent reading them. That's the reason why you save a lot of time if\nyou work hard to optimize readability.</p>\n<p>All the time you are &quot;wasting&quot; to get a simpler program today, will\nreturn a hundred times in the future during the uncountably many\nmodifications and readings of the program (starting with the first\ndebugging).</p>\n<blockquote>\n<p><strong>Writing programs law</strong>: A program is written once, modified ten\ntimes, and read 100 times. So simplify its writing, always keep future\nmodifications in mind, and never jeopardize readability.</p>\n</blockquote>\n<h2 id=\"program-formatting-guidelines\">Program formatting guidelines</h2>\n<h3 id=\"lexical-conventions\">Lexical conventions</h3>\n<blockquote>\n<p><strong>Pseudo spaces law</strong>: never hesitate to separate words of your\nprograms with spaces; the space bar is the easiest key to find on the\nkeyboard, press it as often as necessary!</p>\n</blockquote>\n<h4 id=\"delimiters\">Delimiters</h4>\n<p>A space should always follow a delimiter symbol, and spaces should\nsurround operator symbols. It has been a great step forward in\ntypography to separate words by spaces to make written texts easier to\nread. Do the same in your programs if you want them to be readable.</p>\n<h4 id=\"how-to-write-pairs\">How to write pairs</h4>\n<p>A tuple is parenthesized and the commas therein (delimiters) are each\nfollowed by a space: <code>(1, 2)</code>, <code>let   triplet = (x, y, z)</code>...</p>\n<ul>\n<li><strong>Commonly accepted exceptions</strong>:\n<ul>\n<li><strong>Definition of the components of a pair</strong>: In place of\n<code>let (x, y) =       ...</code>, you can write <code>let x, y = ...</code>.\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Justification</strong>: The point is to define several values\nsimultaneously, not to construct a tuple. Moreover, the\npattern is set off nicely between <code>let</code> and <code>=</code>.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>Matching several values simultaneously</strong>: It's okay to omit\nparentheses around n-tuples when matching several values\nsimultaneously.</p>\n<pre><code>  match x, y with\n  | 1, _ -&gt; ...\n  | x, 1 -&gt; ...\n  | x, y -&gt; ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The point is to match several values in\nparallel, not to construct a tuple. Moreover, the expressions\nbeing matched are set off by <code>match</code> and <code>with</code>, while the\npatterns are set off nicely by <code>|</code> and <code>-&gt;</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"how-to-write-lists\">How to write lists</h4>\n<p>Write <code>x :: l</code> with spaces around the <code>::</code> (since <code>::</code> is an infix\noperator, hence surrounded by spaces) and <code>[1; 2; 3]</code> (since <code>;</code> is a\ndelimiter, hence followed by a space).</p>\n<h4 id=\"how-to-write-operator-symbols\">How to write operator symbols</h4>\n<p>Be careful to keep operator symbols well separated by spaces: not only\nwill your formulas be more readable, but you will avoid confusion with\nmulti-character operators. (Obvious exceptions to this rule: the symbols\n<code>!</code> and <code>.</code> are not separated from their arguments.)<br />\nExample: write <code>x + 1</code> or <code>x + !y</code>.</p>\n<blockquote>\n<p><strong>Justification</strong>: If you left out the spaces then <code>x+1</code> would be\nunderstood, but <code>x+!y</code> would change its meaning since <code>+!</code> would\nbe interpreted as a multi-character operator.</p>\n<p><strong>Criticism</strong>: The absence of spaces around an operator improves the\nreadability of formulas when you use it to reflect the relative\nprecedences of operators. For example <code>x*y + 2*z</code> makes it very\nobvious that multiplication takes precedence over addition.</p>\n<p><strong>Response</strong>: This is a bad idea, a chimera, because nothing in the\nlanguage ensures that the spaces properly reflect the meaning of the\nformula. For example <code>x * z-1</code> means <code>(x * z) - 1</code>, and not\n<code>x * (z - 1)</code> as the proposed interpretation of spaces would seem to\nsuggest. Besides, the problem of multi-character symbols would keep\nyou from using this convention in a uniform way: you couldn't leave\nout the spaces around the multiplication to write <code>x*!y + 2*!z</code>.\nFinally, this playing with the spaces is a subtle and flimsy\nconvention, a subliminal message which is difficult to grasp on\nreading. If you want to make the precedences obvious, use the\nexpressive means brought to you by the language: write parentheses.</p>\n<p><strong>Additional justification</strong>: Systematically surrounding operators\nwith spaces simplify the treatment of infix operators which are no\nmore a complex particular case; in effect, whereas you can write <code>(+)</code>\nwithout spaces, you evidently cannot write <code>(*)</code> since <code>(*</code> is read as\nthe beginning of a comment. You must write at least one space as in\n“<code>( *)</code>”, although an extra space after <code>*</code> is definitively preferable\nif you want to avoid that <code>*)</code> could be read, in some contexts, as the\nend of a comment. All those difficulties are easily avoided if you\nadopt the simple rule proposed here: keep operator symbols well\nseparated by spaces.<br />\nIn fact you will quickly feel that this rule is not so difficult to\nfollow: the space bar is the greatest and best situated key of the\nkeyboard, it is the easiest to enter and you cannot miss it!</p>\n</blockquote>\n<h4 id=\"how-to-write-long-character-strings\">How to write long character strings</h4>\n<p>Indent long character strings with the convention in force at that line\nplus an indication of string continuation at the end of each line (a <code>\\</code>\ncharacter at the end of the line that omits white spaces on the\nbeginning of next line):</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let universal_declaration =\n  &quot;-1- Programs are born and remain free and equal under the law;\\n\\\n   distinctions can only be based on the common good.&quot; in\n  ...\n</code></pre>\n<h2 id=\"indentation-of-programs\">Indentation of programs</h2>\n<blockquote>\n<p><strong>Landin's pseudo law</strong>: Treat the indentation of your programs as if\nit determines the meaning of your programs.</p>\n</blockquote>\n<p>I would add to this law: carefully treat the indentation of programs\nbecause in some cases it really gives the meaning of the program!</p>\n<p>The indentation of programs is an art which excites many strong\nopinions. Here several indentation styles are given which are drawn from\nexperience and which have not been severely criticized.</p>\n<p>When a justification for the adopted style has seemed obvious to me, I\nhave indicated it. On the other hand, criticisms are also noted.</p>\n<p>So each time, you have to choose between the different styles\nsuggested.<br />\nThe only absolute rule is the first below.</p>\n<h3 id=\"consistency-of-indentation\">Consistency of indentation</h3>\n<p>Choose a generally accepted style of indentation, then use it\nsystematically throughout the whole application.</p>\n<h3 id=\"width-of-the-page\">Width of the page</h3>\n<p>The page is 80 columns wide.</p>\n<blockquote>\n<p><strong>Justification</strong>: This width makes it possible to read the code on\nall displays and to print it in a legible font on a standard sheet.</p>\n</blockquote>\n<h3 id=\"height-of-the-page\">Height of the page</h3>\n<p>A function should always fit within one screenful (of about 70 lines),\nor in exceptional cases two, at the very most three. To go beyond this\nis unreasonable.</p>\n<blockquote>\n<p><strong>Justification</strong>: When a function goes beyond one screenful, it's\ntime to divide it into subproblems and handle them independently.\nBeyond a screenful, one gets lost in the code. The indentation is not\nreadable and is difficult to keep correct.</p>\n</blockquote>\n<h3 id=\"how-much-to-indent\">How much to indent</h3>\n<p>The change in indentation between successive lines of the program is\ngenerally 1 or 2 spaces. Pick an amount to indent and stick with it\nthroughout the program.</p>\n<h3 id=\"using-tab-stops\">Using tab stops</h3>\n<p>Using the tab character (ASCII character 9) is absolutely <em>not</em>\nrecommended.</p>\n<blockquote>\n<p><strong>Justification</strong>: Between one display and another, the indentation of\nthe program changes completely; it can also become completely wrong,\nif the programmer used both tabulations and spaces to indent the\nprogram.</p>\n<p><strong>Criticism</strong>: The purpose of using tabulations is just to allow the\nreaders of the program to indent more or less by changing the tabs\nstops. The overall indentation remains correct and the reader is glad\nto easily customize the indentation amount.</p>\n<p><strong>Answer</strong>: It seems almost impossible to use this method since you\nshould always use tabulations to indent, which is hard and unnatural.</p>\n</blockquote>\n<h3 id=\"how-to-indent-global-let---definitions\">How to indent global <code>let ... ;;</code> definitions</h3>\n<p>The body of a function defined globally in a module is generally\nindented normally. However, it's okay to treat this case specially to\nset off the definition better.</p>\n<p>With a regular indentation of 1 or 2 spaces:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f x = function\n  | C -&gt;\n  | D -&gt;\n  ...\n\nlet g x =\n  let tmp =\n    match x with\n    | C -&gt; 1\n    | x -&gt; 0 in\n  tmp + 1\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: No exception to the amount of indentation.</p>\n</blockquote>\n<p>Other conventions are acceptable, for example:</p>\n<ul>\n<li>The body is left-justified in the case of pattern-matching.\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f x = function\n| C -&gt;\n| D -&gt;\n...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The vertical bars separating the patterns stop\nwhen the definition is done, so it's still easy to pass on to the\nfollowing definition.</p>\n<p><strong>Criticism</strong>: An unpleasant exception to the normal indentation.</p>\n</blockquote>\n<ul>\n<li>The body is justified just under the name of the defined function.\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f x =\n    let tmp = ... in\n    try g x with\n    | Not_found -&gt;\n    ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The first line of the definition is set off\nnicely, so it's easier to pass from definition to definition.</p>\n<p><strong>Criticism</strong>: You run into the right margin too quickly.</p>\n</blockquote>\n<h3 id=\"how-to-indent-let--in-constructs\">How to indent <code>let ... in</code> constructs</h3>\n<p>The expression following a definition introduced by <code>let</code> is indented to\nthe same level as the keyword <code>let</code>, and the keyword <code>in</code> which\nintroduces it is written at the end of the line:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let expr1 = ... in\nexpr1 + expr1\n</code></pre>\n<p>In the case of a series of <code>let</code> definitions, the preceding rule implies\nthat these definitions should be placed at the same indentation level:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let expr1 = ... in\nlet n = ... in\n...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: It is suggested that a series of “let ... in”\nconstructs is analogous to a set of assumptions in a mathematical\ntext, whence the same indentation level for all the assumptions.</p>\n</blockquote>\n<p>Variation: some write the keyword <code>in</code> alone on one line to set apart\nthe final expression of the computation:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let e1 = ... in\nlet e2 = ... in\nlet new_expr =\n  let e1' = derive_expression e1\n  and e2' = derive_expression e2 in\n  Add_expression e1' e2'\nin\nMult_expression (new_expr, new_expr)\n</code></pre>\n<blockquote>\n<p><strong>Criticism</strong>: Lack of consistency.</p>\n</blockquote>\n<h3 id=\"how-to-indent-if--then----else--\">How to indent <code>if ... then   ... else ... </code></h3>\n<h4 id=\"multiple-branches\">Multiple branches</h4>\n<p>Write conditions with multiple branches at the same level of\nindentation:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if cond1 ...\nif cond2 ...\nif cond3 ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: Analogous treatment to pattern-matching clauses,\nall aligned to the same tab stop.</p>\n</blockquote>\n<p>If the sizes of the conditions and the expressions allow, write for\nexample:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if cond1 then e1 else\nif cond2 then e2 else\nif cond3 then e3 else\ne4\n\n</code></pre>\n<p>If expressions in the branches of multiple conditions have to be\nenclosed (when they include statements for instance), write:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if cond then begin\n    e1\n  end else\nif cond2 then begin\n    e2\n  end else\nif cond3 then ...\n</code></pre>\n<p>Some suggest another method for multiple conditionals, starting each\nline by the keyword <code>else</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if cond1 ...\nelse if cond2 ...\nelse if cond3 ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: <code>elsif</code> is a keyword in many languages, so use\nindentation and <code>else if</code> to bring it to mind. Moreover, you do not\nhave to look to the end of line to know whether the condition is\ncontinued or another test is performed.</p>\n<p><strong>Criticism</strong>: Lack of consistency in the treatment of all the\nconditions. Why a special case for the first condition?</p>\n</blockquote>\n<p>Yet again, choose your style and use it systematically.</p>\n<h4 id=\"single-branches\">Single branches</h4>\n<p>Several styles are possible for single branches, according to the size\nof the expressions in question and especially the presence of <code>begin</code>\n<code>end</code> or <code>(</code> <code>)</code> delimiters for these expressions.</p>\n<p>In the case of delimiting the branches of a conditional, several styles\nare used:</p>\n<blockquote>\n<p><code>(</code> at end of line:</p>\n<pre><code class=\"language-ocaml\">if cond then (\n  e1\n) else (\n  e2\n)\n</code></pre>\n<p>Or alternatively first <code>begin</code> at beginning of line:</p>\n<pre><code class=\"language-ocaml\">if cond then\n  begin\n    e1\n  end else begin\n    e2\n  end\n</code></pre>\n</blockquote>\n<p>In fact the indentation of conditionals depends on the sizes of the\nexpressions which make them up.</p>\n<blockquote>\n<p>If <code>cond</code>, <code>e1</code> and <code>e2</code> are small, simply write them on one line:</p>\n<pre><code class=\"language-ocaml\">if cond then e1 else e2\n</code></pre>\n<p>If the expressions making up a conditional are purely functional\n(without side effects), we advocate binding them within the\nconditional with <code>let e = ... in</code> when they're too big to fit on a\nline.</p>\n<blockquote>\n<p><strong>Justification</strong>: This way you get back the simple indentation on\none line which is the most readable. As a side benefit, the naming\nacts as an aid to comprehension.</p>\n</blockquote>\n<p>So now we consider the case in which the expressions in question do\nhave side effects, which keeps us from simply binding them with a\n<code>let e = ... in</code>.</p>\n<blockquote>\n<p>If <code>e1</code> and <code>cond</code> are small, but <code>e2</code> large:</p>\n<pre><code class=\"language-ocaml\">if cond then e1 else\n  e2\n</code></pre>\n<p>If <code>e1</code> and <code>cond</code> are large and <code>e2</code> small:</p>\n<pre><code class=\"language-ocaml\">if cond then\n  e1\nelse e2\n</code></pre>\n<p>If all the expressions are large:</p>\n<pre><code class=\"language-ocaml\">if cond then\n  e1\nelse\n  e2\n</code></pre>\n<p>If there are <code>( )</code> delimiters:</p>\n<pre><code class=\"language-ocaml\">if cond then (\n  e1\n) else (\n  e2\n)\n</code></pre>\n<p>A mixture where <code>e1</code> requires <code>( )</code> but <code>e2</code> is small:</p>\n<pre><code class=\"language-ocaml\">if cond then (\n    e1\n) else e2\n</code></pre>\n</blockquote>\n</blockquote>\n<h3 id=\"how-to-indent-pattern-matching-constructs\">How to indent pattern-matching constructs</h3>\n<h4 id=\"general-principles\">General principles</h4>\n<p>All the pattern-matching clauses are introduced by a vertical bar,\n<em>including</em> the first one.</p>\n<blockquote>\n<p><strong>Criticism</strong>: The first vertical bar is not mandatory: hence, there\nis no need to write it.</p>\n<p><strong>Answer to criticism</strong>: If you omit the first bar the indentation\nseems unnatural : the first case gets an indentation that is greater\nthan a normal new line would necessitate. It is thus a useless\nexception to the correct indentation rule. It also insists not to use\nthe same syntax for the whole set of clauses, writing the first clause\nas an exception with a slightly different syntax. Last, aesthetic\nvalue is doubtful (some people would say “awful” instead of\n“doubtful”).</p>\n</blockquote>\n<p>Align all the pattern-matching clauses at the level of the vertical bar\nwhich begins each clause, <em>including</em> the first one.</p>\n<p>If an expression in a clause is too large to fit on the line, you must\nbreak the line immediately after the arrow of the corresponding clause.\nThen indent normally, starting from the beginning of the pattern of the\nclause.</p>\n<p>Arrows of pattern matching clauses should not be aligned.</p>\n<h4 id=\"match-or-try\"><code>match</code> or <code>try</code></h4>\n<p>For a <code>match</code> or a <code>try</code> align the clauses with the beginning of the\nconstruct:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match lam with\n| Abs (x, body) -&gt; 1 + size_lambda body\n| App (lam1, lam2) -&gt; size_lambda lam1 + size_lambda lam2\n| Var v -&gt; 1\n\ntry f x with\n| Not_found -&gt; ...\n| Failure &quot;not yet implemented&quot; -&gt; ...\n</code></pre>\n<p>Put the keyword <code>with</code> at the end of the line. If the preceding\nexpression extends beyond one line, put <code>with</code> on a line by itself:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">try\n  let y = f x in\n  if ...\nwith\n| Not_found -&gt; ...\n| Failure &quot;not yet implemented&quot; -&gt; ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The keyword <code>with</code>, on a line by itself shows that\nthe program enters the pattern matching part of the construct.</p>\n</blockquote>\n<h4 id=\"indenting-expressions-inside-clauses\">Indenting expressions inside clauses</h4>\n<p>If the expression on the right of the pattern matching arrow is too\nlarge, cut the line after the arrow.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match lam with\n| Abs (x, body) -&gt;\n   1 + size_lambda body\n| App (lam1, lam2) -&gt;\n   size_lambda lam1 + size_lambda lam2\n| Var v -&gt;\n</code></pre>\n<p>Some programmers generalize this rule to all clauses, as soon as one\nexpressions overflows. They will then indent the last clause like this:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">| Var v -&gt;\n   1\n</code></pre>\n<p>Other programmers go one step further and apply this rule systematically\nto any clause of any pattern matching.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec fib = function\n  | 0 -&gt;\n     1\n  | 1 -&gt;\n     1\n  | n -&gt;\n     fib (n - 1) + fib ( n - 2)\n</code></pre>\n<blockquote>\n<p><strong>Criticism</strong>: May be not compact enough; for simple pattern matchings\n(or simple clauses in complex matchings), the rule does not add any\ngood to readability.</p>\n<p><strong>Justification</strong>: I don't see any good reason for this rule, unless\nyou are paid proportionally to the number of lines of code: in this\ncase use this rule to get more money without adding more bugs in your\nOCaml programs!</p>\n</blockquote>\n<h4 id=\"pattern-matching-in-anonymous-functions\">Pattern matching in anonymous functions</h4>\n<p>Similarly to <code>match</code> or <code>try</code>, pattern matching of anonymous functions,\nstarting by <code>function</code>, are indented with respect to the <code>function</code>\nkeyword:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">map\n  (function\n   | Abs (x, body) -&gt; 1 + size_lambda 0 body\n   | App (lam1, lam2) -&gt; size_lambda (size_lambda 0 lam1) lam2\n   | Var v -&gt; 1)\n  lambda_list\n</code></pre>\n<h4 id=\"pattern-matching-in-named-functions\">Pattern matching in named functions</h4>\n<p>Pattern-matching in functions defined by <code>let</code> or <code>let rec</code> gives rise\nto several reasonable styles which obey the preceding rules for pattern\nmatching (the one for anonymous functions being evidently excepted). See\nabove for recommended styles.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec size_lambda accu = function\n  | Abs (x, body) -&gt; size_lambda (succ accu) body\n  | App (lam1, lam2) -&gt; size_lambda (size_lambda accu lam1) lam2\n  | Var v -&gt; succ accu\n\nlet rec size_lambda accu = function\n| Abs (x, body) -&gt; size_lambda (succ accu) body\n| App (lam1, lam2) -&gt; size_lambda (size_lambda accu lam1) lam2\n| Var v -&gt; succ accu\n</code></pre>\n<h3 id=\"bad-indentation-of-pattern-matching-constructs\">Bad indentation of pattern-matching constructs</h3>\n<h4 id=\"no-beastly-indentation-of-functions-and-case-analyses\">No <em>beastly</em> indentation of functions and case analyses.</h4>\n<p>This consists in indenting normally under the keyword <code>match</code> or\n<code>function</code> which has previously been pushed to the right. Don't write:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec f x = function\n              | [] -&gt; ...\n              ...\n</code></pre>\n<p>but choose to indent the line under the <code>let</code> keyword:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec f x = function\n  | [] -&gt; ...\n  ...\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: You bump into the margin. The aesthetic value is\ndoubtful...</p>\n</blockquote>\n<h4 id=\"no-beastly-alignment-of-the---symbols-in-pattern-matching-clauses\">No <em>beastly</em> alignment of the <code>-&gt;</code> symbols in pattern-matching clauses.</h4>\n<p>Careful alignment of the arrows of a pattern matching is considered bad\npractice, as exemplify in the following fragment:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f = function\n  | C1          -&gt; 1\n  | Long_name _ -&gt; 2\n  | _           -&gt; 3\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: This makes it harder to maintain the program (the\naddition of a supplementary case can lead the indentations of all the\nlines to change and so ... we often give up alignment at that time,\nthen it is better not to align the arrows in the first place!).</p>\n</blockquote>\n<h3 id=\"how-to-indent-function-calls\">How to indent function calls</h3>\n<h4 id=\"indentation-to-the-functions-name\">Indentation to the function's name:</h4>\n<p>No problem arises except for functions with many arguments—or very\ncomplicated arguments as well—which can't fit on the same line. You\nmust indent the expressions with respect to the name of the function (1\nor 2 spaces according to the chosen convention). Write small arguments\non the same line, and change lines at the start of an argument.</p>\n<p>As far as possible, avoid arguments which consist of complex\nexpressions: in these cases define the “large” argument by a <code>let</code>\nconstruction.</p>\n<blockquote>\n<p><strong>Justification</strong>: No indentation problem; if the name given to the\nexpressions is meaningful, the code is more readable as well.</p>\n<p><strong>Additional justification</strong>: If the evaluation of the arguments\nproduces side effects, the <code>let</code> binding is in fact necessary to\nexplicitly define the order of evaluation.</p>\n</blockquote>\n<h4 id=\"naming-complex-arguments\">Naming complex arguments:</h4>\n<p>In place of</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let temp =\n  f x y z\n    “large\n    expression”\n    “other large\n    expression” in\n...\n</code></pre>\n<p>write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let t =\n  “large\n  expression”\nand u =\n  “other large\n  expression” in\nlet temp =\n  f x y z t u in\n...\n</code></pre>\n<h4 id=\"naming-anonymous-functions\">Naming anonymous functions:</h4>\n<p>In the case of an iterator whose argument is a complex function, define\nthe function by a <code>let</code> binding as well. In place of</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">List.map\n  (function x -&gt;\n    blabla\n    blabla\n    blabla)\n  l\n</code></pre>\n<p>write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f x =\n  blabla\n  blabla\n  blabla in\nList.map f l\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: Much clearer, in particular if the name given to\nthe function is meaningful.</p>\n</blockquote>\n<h3 id=\"how-to-indent-operations\">How to indent operations</h3>\n<p>When an operator takes complex arguments, or in the presence of multiple\ncalls to the same operator, start the next the line with the operator,\nand don't indent the rest of the operation. For example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">x + y + z\n+ t + u\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: When the operator starts the line, it is clear that\nthe operation continues on this line.</p>\n</blockquote>\n<p>In the case of a “large expression” in such an operation sequence,\nto define the “large expression” with the help of a <code>let in</code>\nconstruction is preferable to having to indent the line. In place of</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">x + y + z\n+ “large\n  expression”\n</code></pre>\n<p>write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let t =\n  “large\n   expression” in\nx + y + z + t\n</code></pre>\n<p>You most certainly must bind those expressions too large to be written\nin one operation in the case of a combination of operators. In place of\nthe unreadable expression</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(x + y + z * t)\n/ (“large\n    expression”)\n</code></pre>\n<p>write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let u =\n  “large\n  expression” in\n(x + y + z * t) / u\n</code></pre>\n<p>These guidelines extend to all operators. For example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let u =\n  “large\n  expression” in\nx :: y\n:: z + 1 :: t :: u\n</code></pre>\n<h2 id=\"programming-guidelines\">Programming guidelines</h2>\n<h3 id=\"how-to-program\">How to program</h3>\n<blockquote>\n<p><em>Always put your handiwork back on the bench,<br />\nand then polish it and re-polish it.</em></p>\n</blockquote>\n<h4 id=\"write-simple-and-clear-programs\">Write simple and clear programs</h4>\n<p>When this is done, reread, simplify and clarify. At every stage of\ncreation, use your head!</p>\n<h4 id=\"subdivide-your-programs-into-little-functions\">Subdivide your programs into little functions</h4>\n<p>Small functions are easier to master.</p>\n<h4 id=\"factor-out-snippets-of-repeated-code-by-defining-them-in-separate-functions\">Factor out snippets of repeated code by defining them in separate functions</h4>\n<p>The sharing of code obtained in this way facilitates maintenance since\nevery correction or improvement automatically spreads throughout the\nprogram. Besides, the simple act of isolating and naming a snippet of\ncode sometimes lets you identify an unsuspected feature.</p>\n<h4 id=\"never-copy-paste-code-when-programming\">Never copy-paste code when programming</h4>\n<p>Pasting code almost surely indicates introducing a default of code\nsharing and neglecting to identify and write a useful auxiliary\nfunction; hence, it means that some code sharing is lost in the program.\nLosing code sharing implies that you will have more problems afterwards\nfor maintenance: a bug in the pasted code has to be corrected at each\noccurrence of the bug in each copy of the code!</p>\n<p>Moreover, it is difficult to identify that the same set of 10 lines of\ncode is repeated 20 times throughout the program. By contrast, if an\nauxiliary function defines those 10 lines, it is fairly easy to see and\nfind where those lines are used: that's simply where the function is\ncalled. If code is copy-pasted all over the place then the program is\nmore difficult to understand.</p>\n<p>In conclusion, copy-pasting code leads to programs that are more\ndifficult to read and more difficult to maintain: it has to be banished.</p>\n<h3 id=\"how-to-comment-programs\">How to comment programs</h3>\n<h4 id=\"dont-hesitate-to-comment-when-theres-a-difficulty\">Don't hesitate to comment when there's a difficulty</h4>\n<h4 id=\"if-theres-no-difficulty-theres-no-point-in-commenting\">If there's no difficulty, there's no point in commenting</h4>\n<h4 id=\"avoid-comments-in-the-bodies-of-functions\">Avoid comments in the bodies of functions</h4>\n<h4 id=\"prefer-one-comment-at-the-beginning-of-the-function\">Prefer one comment at the beginning of the function...</h4>\n<p>...which explains how the algorithm that is used works. Once more, if\nthere is no difficulty, there is no point in commenting.</p>\n<h4 id=\"avoid-nocuous-comments\">Avoid nocuous comments</h4>\n<p>A <em>nocuous</em> comment is a comment that does not add any value, i.e. no\nnon-trivial information. The nocuous comment is evidently not of\ninterest; it is a nuisance since it uselessly distracts the reader. It\nis often used to fulfill some strange criteria related to the so-called\n<em>software metrology</em>, for instance the ratio <em>number of comments</em> /\n<em>number of lines of code</em> that perfectly measures a ratio that I don't\nknow the theoretical or practical interpretation. Absolutely avoid\nnocuous comments.</p>\n<p>An example of what to avoid: the following comment uses technical words\nand is thus masquerade into a real comment when it has no additional\ninformation of interest;</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(*\n  Function print_lambda:\n  print a lambda-expression given as argument.\n\n  Arguments: lam, any lambda-expression.\n  Returns: nothing.\n\n  Remark: print_lambda can only be used for its side effect.\n*)\nlet rec print_lambda lam =\n  match lam with\n  | Var s -&gt; printf &quot;%s&quot; s\n  | Abs l -&gt; printf &quot;\\\\ %a&quot; print_lambda l\n  | App (l1, l2) -&gt;\n     printf &quot;(%a %a)&quot; print_lambda l1 print_lambda l2\n</code></pre>\n<h4 id=\"usage-in-module-interface\">Usage in module interface</h4>\n<p>The function's usage must appear in the interface of the module which\nexports it, not in the program which implements it. Choose comments as\nin the OCaml system's interface modules, which will subsequently allow\nthe documentation of the interface module to be extracted automatically\nif need be.</p>\n<h4 id=\"use-assertions\">Use assertions</h4>\n<p>Use assertions as much as possible: they let you avoid verbose comments,\nwhile allowing a useful verification upon execution.</p>\n<p>For example, the conditions for the arguments of a function to be valid\nare usefully verified by assertions.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f x =\n  assert (x &gt;= 0);\n  ...\n</code></pre>\n<p>Note as well that an assertion is often preferable to a comment because\nit's more trustworthy: an assertion is forced to be pertinent because it\nis verified upon each execution, while a comment can quickly become\nobsolete and then becomes actually detrimental to the comprehension of\nthe program.</p>\n<h4 id=\"comments-line-by-line-in-imperative-code\">Comments line by line in imperative code</h4>\n<p>When writing difficult code, and particularly in case of highly\nimperative code with a lot of memory modifications (physical mutations\nin data structures), it is sometime mandatory to comment inside the body\nof functions to explain the implementation of the algorithm encoded\nhere, or to follow successive modifications of invariants that the\nfunction must maintain. Once more, if there is some difficulty\ncommenting is mandatory, for each program line if necessary.</p>\n<h3 id=\"how-to-choose-identifiers\">How to choose identifiers</h3>\n<p>It's hard to choose identifiers whose name evokes the meaning of the\ncorresponding portion of the program. This is why you must devote\nparticular care to this, emphasizing clarity and regularity of\nnomenclature.</p>\n<h4 id=\"dont-use-abbreviations-for-global-names\">Don't use abbreviations for global names</h4>\n<p>Global identifiers (including especially the names of functions) can be\nlong, because it's important to understand what purpose they serve far\nfrom their definition.</p>\n<h4 id=\"separate-words-by-underscores-intofstring-not-intofstring\">Separate words by underscores: (<code>int_of_string</code>, not <code>intOfString</code>)</h4>\n<p>Case modifications are meaningful in OCaml: in effect capitalized words\nare reserved for constructors and module names in OCaml; in contrast\nregular variables (functions or identifiers) must start by a lowercase\nletter. Those rules prevent proper usage of case modification for words\nseparation in identifiers: the first word starts the identifier, hence\nit must be lower case and it is forbidden to choose <code>IntOfString</code> as the\nname of a function.</p>\n<h4 id=\"always-give-the-same-name-to-function-arguments-which-have-the-same-meaning\">Always give the same name to function arguments which have the same meaning</h4>\n<p>If necessary, make this nomenclature explicit in a comment at the top of\nthe file); if there are several arguments with the same meaning then\nattach numeral suffixes to them.</p>\n<h4 id=\"local-identifiers-can-be-brief-and-should-be-reused-from-one-function-to-another\">Local identifiers can be brief, and should be reused from one function to another</h4>\n<p>This augments regularity of style. Avoid using identifiers whose\nappearance can lead to confusion such as <code>l</code> or <code>O</code>, easy to confuse\nwith <code>1</code> and <code>0</code>.</p>\n<p>Example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let add_expression expr1 expr2 = ...\nlet print_expression expr = ...\n</code></pre>\n<p>An exception to the recommendation not to use capitalization to separate\nwords within identifiers is tolerated in the case of interfacing with\nexisting libraries which use this naming convention: this lets OCaml\nusers of the library to orient themselves in the original library\ndocumentation more easily.</p>\n<h3 id=\"when-to-use-parentheses-within-an-expression\">When to use parentheses within an expression</h3>\n<p>Parentheses are meaningful: they indicate the necessity of using an\nunusual precedence. So they should be used wisely and not sprinkled\nrandomly throughout programs. To this end, you should know the usual\nprecedences, that is, the combinations of operations which do not\nrequire parentheses. Quite fortunately this is not complicated if you\nknow a little mathematics or strive to follow the following rules:</p>\n<h4 id=\"arithmetic-operators-the-same-rules-as-in-mathematics\">Arithmetic operators: the same rules as in mathematics</h4>\n<p>For example: <code>1 + 2 * x</code> means <code>1 + (2 * x)</code>.</p>\n<h4 id=\"function-application-the-same-rules-as-those-in-mathematics-for-usage-of-trigonometric-functions\">Function application: the same rules as those in mathematics for usage of <em>trigonometric functions</em></h4>\n<p>In mathematics you write <code>sin x</code> to mean <code>sin (x)</code>. In the same way\n<code>sin x + cos x</code> means <code>(sin x) + (cos x)</code> not <code>sin (x + (cos x))</code>. Use\nthe same conventions in OCaml: write <code>f x + g x</code> to mean\n<code>(f x) + (g x)</code>.<br />\nThis convention generalizes <strong>to all (infix) operators</strong>: <code>f x :: g x</code>\nmeans <code>(f x) :: (g x)</code>, <code>f x @ g x</code> means <code>(f x) @ (g x)</code>, and\n<code>failwith s ^ s'</code> means <code>(failwith s) ^ s'</code>, <em>not</em> <code>failwith (s ^ s')</code>.</p>\n<h4 id=\"comparisons-and-boolean-operators\">Comparisons and boolean operators</h4>\n<p>Comparisons are infix operators, so the preceding rules apply. This is\nwhy <code>f x &lt; g x</code> means <code>(f x) &lt; (g x)</code>. For type reasons (no other\nsensible interpretation) the expression <code>f x &lt; x + 2</code> means\n<code>(f x) &lt; (x + 2)</code>. In the same way <code>f x &lt; x + 2 &amp;&amp; x &gt; 3</code> means\n<code>((f x) &lt; (x + 2)) &amp;&amp; (x &gt; 3)</code>.</p>\n<h4 id=\"the-relative-precedences-of-the-boolean-operators-are-those-of-mathematics\">The relative precedences of the boolean operators are those of mathematics</h4>\n<p>Although mathematicians have a tendency to overuse parens in this case,\nthe boolean “or” operator is analogous to addition and the “and”\nto multiplication. So, just as <code>1 + 2 * x</code> means <code>1 + (2 * x)</code>,\n<code>true || false &amp;&amp; x</code> means <code>true || (false &amp;&amp; x)</code>.</p>\n<h3 id=\"how-to-delimit-constructs-in-programs\">How to delimit constructs in programs</h3>\n<p>When it is necessary to delimit syntactic constructs in programs, use as\ndelimiters the keywords <code>begin</code> and <code>end</code> rather than parentheses.\nHowever using parentheses is acceptable if you do it in a consistent,\nthat is, systematic, way.</p>\n<p>This explicit delimiting of constructs essentially concerns\npattern-matching constructs or sequences embedded within\n<code>if then     else</code> constructs.</p>\n<h4 id=\"match-construct-in-a-match-construct\"><code>match</code> construct in a <code>match</code> construct</h4>\n<p>When a <code>match ... with</code> or <code>try ... with</code> construct appears in a\npattern-matching clause, it is absolutely necessary to delimit this\nembedded construct (otherwise subsequent clauses of the enclosing\npattern-matching construct will automatically be associated with the\nenclosed pattern-matching construct). For example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match x with\n| 1 -&gt;\n  begin match y with\n  | ...\n  end\n| 2 -&gt;\n...\n</code></pre>\n<h4 id=\"sequences-inside-branches-of-if\">Sequences inside branches of <code>if</code></h4>\n<p>In the same way, a sequence which appears in the <code>then</code> or <code>else</code> part\nof a conditional must be delimited:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if cond then begin\n  e1;\n  e2\nend else begin\n  e3;\n  e4\nend\n</code></pre>\n<h3 id=\"how-to-use-modules\">How to use modules</h3>\n<h4 id=\"subdividing-into-modules\">Subdividing into modules</h4>\n<p>You must subdivide your programs into coherent modules.</p>\n<p>For each module, you must explicitly write an interface.</p>\n<p>For each interface, you must document the things defined by the module:\nfunctions, types, exceptions, etc.</p>\n<h4 id=\"opening-modules\">Opening modules</h4>\n<p>Avoid <code>open</code> directives, using instead the qualified identifier\nnotation. Thus you will prefer short but meaningful module names.</p>\n<blockquote>\n<p><strong>Justification</strong>: The use of unqualified identifiers is ambiguous and\ngives rise to difficult-to-detect semantic errors.</p>\n</blockquote>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let lim = String.length name - 1 in\n...\nlet lim = Array.length v - 1 in\n...\n... List.map succ ...\n... Array.map succ ...\n</code></pre>\n<h4 id=\"when-to-use-open-modules-rather-than-leaving-them-closed\">When to use open modules rather than leaving them closed</h4>\n<p>You can consider it normal to open a module which modifies the\nenvironment, and brings other versions of an important set of functions.\nFor example, the <code>Format</code> module provides automatically indented\nprinting. This module redefines the usual printing functions\n<code>print_string</code>, <code>print_int</code>, <code>print_float</code>, etc. So when you use\n<code>Format</code>, open it systematically at the top of the file.<br />\nIf you don't open <code>Format</code> you could miss the qualification of a\nprinting function, and this could be perfectly silent, since many of\n<code>Format</code>'s functions have a counterpart in the default environment\n(<code>Pervasives</code>). Mixing printing functions from <code>Format</code> and <code>Pervasives</code>\nleads to subtle bugs in the display, that are difficult to trace. For\ninstance:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f () =\n  Format.print_string &quot;Hello World!&quot;; print_newline ()\n</code></pre>\n<p>is bogus since it does not call <code>Format.print_newline</code> to flush the\npretty-printer queue and output <code>&quot;Hello World!&quot;</code>. Instead\n<code>&quot;Hello World!&quot;</code> is stuck into the pretty-printer queue, while\n<code>Pervasives.print_newline</code> outputs a carriage return on the standard\noutput ... If <code>Format</code> is printing on a file and standard output is the\nterminal, the user will have a bad time finding that a carriage return\nis missing in the file (and the display of material on the file is\nstrange, since boxes that should be closed by <code>Format.print_newline</code> are\nstill open), while a spurious carriage return appeared on the screen!</p>\n<p>For the same reason, open large libraries such as the one with\narbitrary-precision integers so as not to burden the program which uses\nthem.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Num\n\nlet rec fib n =\n  if n &lt;= 2 then Int 1 else fib (n - 1) +/ fib (n - 2)\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The program would be less readable if you had to\nqualify all the identifiers.</p>\n</blockquote>\n<p>In a program where type definitions are shared, it is good to gather\nthese definitions into one or more module(s) without implementations\n(containing only types). Then it's acceptable to systematically open the\nmodule which exports the shared type definitions.</p>\n<h3 id=\"pattern-matching\">Pattern-matching</h3>\n<h4 id=\"never-be-afraid-of-over-using-pattern-matching\">Never be afraid of over-using pattern-matching!</h4>\n<h4 id=\"on-the-other-hand-be-careful-to-avoid-non-exhaustive-pattern-matching-constructs\">On the other hand, be careful to avoid non-exhaustive pattern-matching constructs</h4>\n<p>Complete them with care, without using a “catch-all” clause such as\n<code>| _ -&gt; ...</code> or <code>| x -&gt; ...</code> when it's possible to do without it (for\nexample when matching a concrete type defined within the program). See\nalso the next section: compiler warnings.</p>\n<h3 id=\"compiler-warnings\">Compiler warnings</h3>\n<p>Compiler warnings are meant to prevent potential errors; this is why you\nabsolutely must heed them and correct your programs if compiling them\nproduces such warnings. Besides, programs whose compilation produces\nwarnings have an odor of amateurism which certainly doesn't suit your\nown work!</p>\n<h4 id=\"pattern-matching-warnings\">Pattern-matching warnings</h4>\n<p>Warnings about pattern-matching must be treated with the upmost care:</p>\n<ul>\n<li>\n<p>Those concerning useless clauses should of course be eliminated.</p>\n</li>\n<li>\n<p>For non-exhaustive pattern-matching you must complete the\ncorresponding pattern-matching construct, without adding a default\ncase “catch-all”, such as <code>| _ -&gt; ... </code>, but with an explicit\nlist of the constructors not examined by the rest of the construct,\nfor example <code>| Cn _ | Cn1 _ -&gt; ... </code>.</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Justification</strong>: It's not really any more complicated to write\nit this way, and this allows the program to evolve more safely. In\neffect the addition of a new constructor to the datatype being\nmatched will produce an alert anew, which will allow the\nprogrammer to add a clause corresponding to the new constructor if\nthat is warranted. On the contrary, the “catch-all” clause\nwill make the function compile silently and it might be thought\nthat the function is correct as the new constructor will be\nhandled by the default case.</p>\n</blockquote>\n<ul>\n<li>Non-exhaustive pattern-matches induced by clauses with guards must\nalso be corrected. A typical case consists in suppressing a\nredundant guard.\n</li>\n</ul>\n<h4 id=\"de-structuring-let-bindings\">De-structuring <code>let</code> bindings</h4>\n<p>[Translator's note: a “de-structuring <code>let</code> binding” is one which\nbinds several names to several expressions simultaneously. You pack all\nthe names you want bound into a collection such as a tuple or a list,\nand you correspondingly pack all the expressions into a collective\nexpression. When the <code>let</code> binding is evaluated, it unpacks the\ncollections on both sides and binds each expression to its corresponding\nname. For example, <code>let x, y = 1, 2</code> is a de-structuring <code>let</code> binding\nwhich performs both the bindings <code>let x = 1</code> and <code>let y = 2</code>\nsimultaneously.]<br />\nThe <code>let</code> binding is not limited to simple identifier definitions: you\ncan use it with more complex or simpler patterns. For instance</p>\n<ul>\n<li><code>let</code> with complex patterns:<br />\n<code>let [x; y] as l = ...</code><br />\nsimultaneously defines a list <code>l</code> and its two elements <code>x</code> and <code>y</code>.\n</li>\n<li><code>let</code> with simple pattern:<br />\n<code>let _ = ...</code> does not define anything, it just evaluate the\nexpression on the right hand side of the <code>=</code> symbol.\n</li>\n</ul>\n<h4 id=\"the-de-structuring-let-must-be-exhaustive\">The de-structuring <code>let</code> must be exhaustive</h4>\n<p>Only use de-structuring <code>let</code> bindings in the case where the\npattern-matching is exhaustive (the pattern can never fail to match).\nTypically, you will thus be limited to definitions of product types\n(tuples or records) or definitions of variant type with a single case.\nIn any other case, you should use an explicit <code>match   ... with</code>\nconstruct.</p>\n<ul>\n<li><code>let ... in</code>: de-structuring <code>let</code> that give a warning must be\nreplaced by an explicit pattern matching. For instance, instead of\n<code>let [x; y] as l = List.map succ     (l1 @ l2) in expression</code> write:\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match List.map succ (l1 @ l2) with\n| [x; y] as l -&gt; expression\n| _ -&gt; assert false\n</code></pre>\n<ul>\n<li>Global definition with de-structuring lets should be rewritten with\nexplicit pattern matching and tuples:\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let x, y, l =\n  match List.map succ (l1 @ l2) with\n  | [x; y] as l -&gt; x, y, l\n  | _ -&gt; assert false\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: There is no way to make the pattern-matching\nexhaustive if you use general de-structuring <code>let</code> bindings.</p>\n</blockquote>\n<h4 id=\"sequence-warnings-and-let---\">Sequence warnings and <code>let _ = ...</code></h4>\n<p>When the compiler emits a warning about the type of an expression in a\nsequence, you have to explicitly indicate that you want to ignore the\nresult of this expression. To this end:</p>\n<ul>\n<li>use a vacuous binding and suppress the sequence warning of\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">List.map f l;\nprint_newline ()\n</code></pre>\n<p>write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let _ = List.map f l in\nprint_newline ()\n</code></pre>\n<ul>\n<li>you can also use the predefined function <code>ignore : 'a     -&gt; unit</code>\nthat ignores its argument to return <code>unit</code>.\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">ignore (List.map f l);\nprint_newline ()\n</code></pre>\n<ul>\n<li>In any case, the best way to suppress this warning is to understand\nwhy it is emitted by the compiler: the compiler warns you because\nyour code computes a result that is useless since this result is\njust deleted after computation. Hence, if useful at all, this\ncomputation is performed only for its side-effects; hence it should\nreturn unit.<br />\nMost of the time, the warning indicates the use of the wrong\nfunction, a probable confusion between the side-effect only version\nof a function (which is a procedure whose result is irrelevant) with\nits functional counterpart (whose result is meaningful).<br />\nIn the example mentioned above, the first situation prevailed, and\nthe programmer should have called <code>iter</code> instead of <code>map</code>, and\nsimply write\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">List.iter f l;\nprint_newline ()\n</code></pre>\n<p>In actual programs, the suitable (side-effect only) function may not\nexist and has to be written: very often, a careful separation of the\nprocedural part from the functional part of the function at hand\nelegantly solves the problem, and the resulting program just looks\nbetter afterwards! For instance, you would turn the problematic\ndefinition:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let add x y =\n  if x &gt; 1 then print_int x;\n  print_newline ();\n  x + y;;\n</code></pre>\n<p>into the clearer separate definitions and change old calls to <code>add</code>\naccordingly.</p>\n<p>In any case, use the <code>let _ = ...</code> construction exactly in those cases\nwhere you want to ignore a result. Don't systematically replace\nsequences with this construction.</p>\n<blockquote>\n<p><strong>Justification</strong>: Sequences are much clearer! Compare <code>e1; e2; e3</code> to</p>\n<pre><code class=\"language-ocaml\">let _ = e1 in\nlet _ = e2 in\ne3\n</code></pre>\n</blockquote>\n<h3 id=\"the-hd-and-tl-functions\">The <code>hd</code> and <code>tl</code> functions</h3>\n<p>Don't use the <code>hd</code> and <code>tl</code> functions, but pattern-match the list\nargument explicitly.</p>\n<blockquote>\n<p><strong>Justification</strong>: This is just as brief as and much clearer than\nusing <code>hd</code> and <code>tl</code> which must of necessity be protected by\n<code>try... with...</code> to catch the exception which might be raised by these\nfunctions.</p>\n</blockquote>\n<h3 id=\"loops\">Loops</h3>\n<h4 id=\"for-loops\"><code>for</code> loops</h4>\n<p>To simply traverse an array or a string, use a <code>for</code> loop.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">for i = 0 to Array.length v - 1 do\n  ...\ndone\n</code></pre>\n<p>If the loop is complex or returns a result, use a recursive function.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let find_index e v =\n  let rec loop i =\n    if i &gt;= Array.length v then raise Not_found else\n    if v.(i) = e then i else loop (i + 1) in\n  loop 0;;\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: The recursive function lets you code any loop\nwhatsoever simply, even a complex one, for example with multiple exit\npoints or with strange index steps (steps depending on a data value\nfor example).</p>\n<p>Besides, the recursive loop avoids the use of mutables whose value can\nbe modified in any part of the body of the loop whatsoever (or even\noutside): on the contrary the recursive loop explicitly takes as\narguments the values susceptible to change during the recursive calls.</p>\n</blockquote>\n<h4 id=\"while-loops\"><code>while</code> loops</h4>\n<blockquote>\n<p><strong>While loops law</strong>: Beware: usually a while loop is wrong, unless its\nloop invariant has been explicitly written.</p>\n</blockquote>\n<p>The main use of the <code>while</code> loop is the infinite loop\n<code>while true do     ...</code>. You get out of it through an exception,\ngenerally on termination of the program.</p>\n<p>Other <code>while</code> loops are hard to use, unless they come from canned\nprograms from algorithms courses where they were proved.</p>\n<blockquote>\n<p><strong>Justification</strong>: <code>while</code> loops require one or more mutables in order\nthat the loop condition change value and the loop finally terminate.\nTo prove their correctness, you must therefore discover the loop\ninvariants, an interesting but difficult sport.</p>\n</blockquote>\n<h3 id=\"exceptions\">Exceptions</h3>\n<p>Don't be afraid to define your own exceptions in your programs, but on\nthe other hand use as much as possible the exceptions predefined by the\nsystem. For example, every search function which fails should raise the\npredefined exception <code>Not_found</code>. Be careful to handle the exceptions\nwhich may be raised by a function call with the help of a\n<code>try ... with</code>.</p>\n<p>Handling all exceptions by <code>try     ... with _ -&gt;</code> is usually reserved\nfor the main function of the program. If you need to catch all\nexceptions to maintain an invariant of an algorithm, be careful to name\nthe exception and re-raise it, after having reset the invariant.\nTypically:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let ic = open_in ...\nand oc = open_out ... in\ntry\n  treatment ic oc;\n  close_in ic; close_out oc\nwith x -&gt; close_in ic; close_out oc; raise x\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: <code>try ... with _     -&gt;</code> silently catches all\nexceptions, even those which have nothing to do with the computation\nat hand (for example an interruption will be captured and the\ncomputation will continue anyway!).</p>\n</blockquote>\n<h3 id=\"data-structures\">Data structures</h3>\n<p>One of the great strengths of OCaml is the power of the data structures\nwhich can be defined and the simplicity of manipulating them. So you\nmust take advantage of this to the fullest extent; don't hesitate to\ndefine your own data structures. In particular, don't systematically\nrepresent enumerations by whole numbers, nor enumerations with two cases\nby booleans. Examples:</p>\n<pre><code class=\"language-ocaml\">type figure =\n   | Triangle | Square | Circle | Parallelogram\ntype convexity =\n   | Convex | Concave | Other\ntype type_of_definition =\n   | Recursive | Non_recursive\n</code></pre>\n<blockquote>\n<p><strong>Justification</strong>: A boolean value often prevents intuitive\nunderstanding of the corresponding code. For example, if\n<code>type_of_definition</code> is coded by a boolean, what does <code>true</code> signify?\nA “normal” definition (that is, non-recursive) or a recursive\ndefinition?</p>\n<p>In the case of an enumerated type encode by an integer, it is very\ndifficult to limit the range of acceptable integers: one must define\nconstruction functions that will ensure the mandatory invariants of\nthe program (and verify afterwards that no values has been built\ndirectly), or add assertions in the program and guards in pattern\nmatchings. This is not good practice, when the definition of a sum\ntype elegantly solves this problem, with the additional benefit of\nfiring the full power of pattern matching and compiler's verifications\nof exhaustiveness.</p>\n<p><strong>Criticism</strong>: For binary enumerations, one can systematically define\npredicates whose names carry the semantics of the boolean that\nimplements the type. For instance, we can adopt the convention that a\npredicate ends by the letter <code>p</code>. Then, in place of defining a new sum\ntype for <code>type_of_definition</code>, we will use a predicate function\n<code>recursivep</code> that returns true if the definition is recursive.</p>\n<p><strong>Answer</strong>: This method is specific to binary enumeration and cannot\nbe easily extended; moreover it is not well suited to pattern\nmatching. For instance, for definitions encoded by\n<code>| Let of bool * string * expression</code> a typical pattern matching would\nlook like:</p>\n<pre><code class=\"language-ocaml\">| Let (_, v, e) as def -&gt;\n   if recursivep def then code_for_recursive_case\n   else code_for_non_recursive_case\n</code></pre>\n<p>or, if <code>recursivep</code> can be applied to booleans:</p>\n<pre><code class=\"language-ocaml\">| Let (b, v, e) -&gt;\n   if recursivep b then code_for_recursive_case\n   else code_for_non_recursive_case\n</code></pre>\n<p>contrast with an explicit encoding:</p>\n<pre><code class=\"language-ocaml\">| Let (Recursive, v, e) -&gt; code_for_recursive_case\n| Let (Non_recursive, v, e) -&gt; code_for_non_recursive_case\n</code></pre>\n<p>The difference between the two programs is subtle and you may think\nthat this is just a matter of taste; however the explicit encoding is\ndefinitively more robust to modifications and fits better with the\nlanguage.</p>\n</blockquote>\n<p><em>A contrario</em>, it is not necessary to systematically define new types\nfor boolean flags, when the interpretation of constructors <code>true</code> and\n<code>false</code> is clear. The usefulness of the definition of the following\ntypes is then questionable:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">type switch = On | Off\ntype bit = One | Zero\n</code></pre>\n<p>The same objection is admissible for enumerated types represented as\nintegers, when those integers have an evident interpretation with\nrespect to the data to be represented.</p>\n<h3 id=\"when-to-use-mutables\">When to use mutables</h3>\n<p>Mutable values are useful and sometimes indispensable to simple and\nclear programming. Nevertheless, you must use them with discernment:\nOCaml's normal data structures are immutable. They are to be preferred\nfor the clarity and safety of programming which they allow.</p>\n<h3 id=\"iterators\">Iterators</h3>\n<p>OCaml's iterators are a powerful and useful feature. However you should\nnot overuse them, nor <em>a contrario</em> neglect them: they are provided to\nyou by libraries and have every chance of being correct and\nwell-thought-out by the author of the library. So it's useless to\nreinvent them.</p>\n<p>So write</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let square_elements elements = List.map square elements\n</code></pre>\n<p>rather than:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec square_elements = function\n  | [] -&gt; []\n  | elem :: elements -&gt; square elem :: square_elements elements\n</code></pre>\n<p>On the other hand avoid writing:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let iterator f x l =\n  List.fold_right (List.fold_left f) [List.map x l] l\n</code></pre>\n<p>even though you get:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">  let iterator f x l =\n    List.fold_right (List.fold_left f) [List.map x l] l;;\n  iterator (fun l x -&gt; x :: l) (fun l -&gt; List.rev l) [[1; 2; 3]]\n</code></pre>\n<p>In case of express need, you must be careful to add an explanatory\ncomment: in my opinion it's absolutely necessary!</p>\n<h3 id=\"how-to-optimize-programs\">How to optimize programs</h3>\n<blockquote>\n<p><strong>Pseudo law of optimization</strong>: No optimization <em>a priori</em>.<br />\nNo optimization <em>a posteriori</em> either.</p>\n</blockquote>\n<p>Above all program simply and clearly. Don't start optimizing until the\nprogram bottleneck has been identified (in general a few routines). Then\noptimization consists above all of changing <em>the complexity</em> of the\nalgorithm used. This often happens through redefining the data\nstructures being manipulated and completely rewriting the part of the\nprogram which poses a problem.</p>\n<blockquote>\n<p><strong>Justification</strong>: Clarity and correctness of programs take\nprecedence. Besides, in a substantial program, it is practically\nimpossible to identify <em>a priori</em> the parts of the program whose\nefficiency is of prime importance.</p>\n</blockquote>\n<h3 id=\"how-to-choose-between-classes-and-modules\">How to choose between classes and modules</h3>\n<p>You should use OCaml classes when you need inheritance, that is,\nincremental refinement of data and their functionality.</p>\n<p>You should use conventional data structures (in particular, variant\ntypes) when you need pattern-matching.</p>\n<p>You should use modules when the data structures are fixed and their\nfunctionality is equally fixed or it's enough to add new functions in\nthe programs which use them.</p>\n<h3 id=\"clarity-of-ocaml-code\">Clarity of OCaml code</h3>\n<p>The OCaml language includes powerful constructs which allow simple and\nclear programming. The main problem to obtain crystal clear programs it\nto use them appropriately.</p>\n<p>The language features numerous programming styles (or programming\nparadigms): imperative programming (based on the notion of state and\nassignment), functional programming (based on the notion of function,\nfunction results, and calculus), object oriented programming (based of\nthe notion of objects encapsulating a state and some procedures or\nmethods that can modify the state). The first work of the programmer is\nto choose the programming paradigm that fits the best the problem at\nhand. When using one of those programming paradigms, the difficulty is\nto use the language construct that expresses in the most natural and\neasiest way the computation that implements the algorithm.</p>\n<h4 id=\"style-dangers\">Style dangers</h4>\n<p>Concerning programming styles, one can usually observe the two\nsymmetrical problematic behaviors: on the one hand, the “all\nimperative” way (<em>systematic</em> usage of loops and assignment), and on\nthe other hand the “purely functional” way (<em>never</em> use loops nor\nassignments); the “100% object” style will certainly appear in the\nnext future, but (fortunately) it is too new to be discussed here.</p>\n<ul>\n<li><strong>The “Too much imperative” danger</strong>:\n<ul>\n<li>It is a bad idea to use imperative style to code a function that\nis <em>naturally</em> recursive. For instance, to compute the length of\na list, you should not write:\n</li>\n</ul>\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let list_length l =\n  let l = ref l in\n  let res = ref 0 in\n  while !l &lt;&gt; [] do\n    incr res; l := List.tl !l\n  done;\n  !res;;\n</code></pre>\n<p>in place of the following recursive function, so simple and\nclear:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec list_length = function\n  | [] -&gt; 0\n  | _ :: l -&gt; 1 + list_length l\n</code></pre>\n<p>(For those that would contest the equivalence of those two\nversions, see the <a href=\"#Imperativeandfunctionalversionsoflistlength\">note below</a>).</p>\n<ul>\n<li>\n<p>Another common “over imperative error” in the imperative world is\nnot to systematically choose the simple <code>for</code> loop to iter on the\nelement of a vector, but instead to use a complex <code>while</code> loop, with\none or two references (too many useless assignments, too many\nopportunity for errors).</p>\n</li>\n<li>\n<p>This category of programmer feels that the <code>mutable</code> keyword in\nthe record type definitions should be implicit.</p>\n</li>\n<li>\n<p><strong>The “Too much functional” danger</strong>:</p>\n<ul>\n<li>The programmer that adheres to this dogma avoids\nusing arrays and assignment. In the most severe case, one\nobserves a complete denial of writing any imperative\nconstruction, even in case it is evidently the most elegant way\nto solve the problem.\n</li>\n<li>Characteristic symptoms: systematic rewriting of <code>for</code> loops\nwith recursive functions, usage of lists in contexts where\nimperative data structures seem to be mandatory to anyone,\npassing numerous global parameters of the problem to every\nfunctions, even if a global reference would be perfect to avoid\nthese spurious parameters that are mainly invariants that must\nbe passed all over the place.\n</li>\n<li>This programmer feels that the <code>mutable</code> keyword in the record\ntype definitions should be suppressed from the language.\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ocaml-code-generally-considered-unreadable\">OCaml code generally considered unreadable</h4>\n<p>The OCaml language includes powerful constructs which allow simple and\nclear programming. However the power of these constructs also lets you\nwrite uselessly complicated code, to the point where you get a perfectly\nunreadable program.</p>\n<p>Here are a number of known ways:</p>\n<ul>\n<li>Use useless (hence novice for readability) <code>if then else</code>, as in\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let flush_ps () =\n  if not !psused then psused := true\n</code></pre>\n<p>or (more subtle)</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let sync b =\n  if !last_is_dvi &lt;&gt; b then last_is_dvi := b\n</code></pre>\n<ul>\n<li>Code one construct with another. For example code a <code>let ... in</code> by\nthe application of an anonymous function to an argument. You would\nwrite<br />\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(fun x y -&gt; x + y)\n   e1 e2\n</code></pre>\n<p>instead of simply writing</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let x = e1\nand y = e2 in\nx + y\n</code></pre>\n<ul>\n<li>\n<p>Systematically code sequences with <code>let in</code> bindings.</p>\n</li>\n<li>\n<p>Mix computations and side effects, particularly in function calls.\nRecall that the order of evaluation of arguments in a function call\nis unspecified, which implies that you must not mix side effects and\ncomputations in function calls. However, when there is only one\nargument you might take advantage of this to perform a side effect\nwithin the argument, which is extremely troublesome for the reader\nalbeit without danger to the program semantics. To be absolutely\nforbidden.</p>\n</li>\n<li>\n<p>Misuse of iterators and higher-order functions (i.e. over- or\nunder-use). For example it's better to use <code>List.map</code> or\n<code>List.iter</code> than to write their equivalents in-line using specific\nrecursive functions of your own. Even worse, you don't use\n<code>List.map</code> or <code>List.iter</code> but write their equivalents in terms of\n<code>List.fold_right</code> and <code>List.fold_left</code>.</p>\n</li>\n<li>\n<p>Another efficient way to write unreadable code is to mix all or some\nof these methods. For example:</p>\n</li>\n</ul>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(fun u -&gt; print_string &quot;world&quot;; print_string u)\n  (let temp = print_string &quot;Hello&quot;; &quot;!&quot; in\n   ((fun x -&gt; print_string x; flush stdout) &quot; &quot;;\n    temp));;\n</code></pre>\n<p>If you naturally write the program <code>print_string &quot;Hello world!&quot;</code> in this\nway, you can without a doubt submit your work to the <a href=\"mailto:Pierre.Weis@inria.fr\">Obfuscated OCaml\nContest</a>.</p>\n<h2 id=\"managing-program-development\">Managing program development</h2>\n<p>We give here tips from veteran OCaml programmers, which have served in\ndeveloping the compilers which are good examples of large complex\nprograms developed by small teams.</p>\n<h3 id=\"how-to-edit-programs\">How to edit programs</h3>\n<p>Many developers nurture a kind of veneration towards the Emacs editor\n(gnu-emacs in general) which they use to write their programs. The\neditor interfaces well with the language since it is capable of syntax\ncoloring OCaml source code (rendering different categories of words in\ncolor, coloring keywords for example).</p>\n<p>The following two commands are considered indispensable:</p>\n<ul>\n<li><code>CTRL-C-CTRL-C</code> or <code>Meta-X compile</code>: launches re-compilation from\nwithin the editor (using the <code>make</code> command).\n</li>\n<li><code>CTRL-X-`</code>: puts the cursor in the file and at the exact place\nwhere the OCaml compiler has signaled an error.\n</li>\n</ul>\n<p>Developers describe thus how to use these features: <code>CTRL-C-CTRL-C</code>\ncombination recompiles the whole application; in case of errors, a\nsuccession of <code>CTRL-X-`</code> commands permits correction of all the\nerrors signaled; the cycle begins again with a new re-compilation\nlaunched by <code>CTRL-C-CTRL-C</code>.</p>\n<h4 id=\"other-emacs-tricks\">Other emacs tricks</h4>\n<p>The <code>ESC-/</code> command (dynamic-abbrev-expand) automatically completes the\nword in front of the cursor with one of the words present in one of the\nfiles being edited. Thus this lets you always choose meaningful\nidentifiers without the tedium of having to type extended names in your\nprograms: the <code>ESC-/</code> easily completes the identifier after typing the\nfirst letters. In case it brings up the wrong completion, each\nsubsequent <code>ESC-/</code> proposes an alternate completion.</p>\n<p>Under Unix, the <code>CTRL-C-CTRL-C</code> or <code>Meta-X     compile</code> combination,\nfollowed by <code>CTRL-X-`</code> is also used to find all occurrences of a\ncertain string in a OCaml program. Instead of launching <code>make</code> to\nrecompile, you launch the <code>grep</code> command; then all the “error\nmessages” from <code>grep</code> are compatible with the <code>CTRL-X-`</code> usage\nwhich automatically takes you to the file and the place where the string\nis found.</p>\n<h3 id=\"how-to-edit-with-the-interactive-system\">How to edit with the interactive system</h3>\n<p>Under Unix: use the line editor <code>ledit</code> which offers great editing\ncapabilities “à la emacs” (including <code>ESC-/</code>!), as well as a history\nmechanism which lets you retrieve previously typed commands and even\nretrieve commands from one session in another. <code>ledit</code> is written in\nOCaml and can be freely down-loaded\n<a href=\"ftp://ftp.inria.fr/INRIA/Projects/cristal/caml-light/bazar-ocaml/ledit.tar.gz\">here</a>.</p>\n<h3 id=\"how-to-compile\">How to compile</h3>\n<p>The <code>make</code> utility is indispensable for managing the compilation and\nre-compilation of programs. Sample <code>make</code> files can be found on <a href=\"https://caml.inria.fr//cgi-bin/hump.en.cgi\">The\nHump</a>. You can also consult\nthe <code>Makefiles</code> for the OCaml compilers.</p>\n<h3 id=\"how-to-develop-as-a-team-version-control\">How to develop as a team: version control</h3>\n<p>Users of the <a href=\"https://git-scm.com/\">Git</a> software version control system\nnever run out of good things to say about the productivity gains it\nbrings. This system supports managing development by a team of\nprogrammers while imposing consistency among them, and also maintains a\nlog of changes made to the software.<br />\nGit also supports simultaneous development by several teams, possibly\ndispersed among several sites linked on the Net.</p>\n<p>An anonymous Git read-only mirror <a href=\"https://github.com/ocaml/ocaml\">contains the working sources of the\nOCaml compilers</a>, and the sources of\nother software related to OCaml.</p>\n<h2 id=\"notes\">Notes</h2>\n<h3 id=\"imperative-and-functional-versions-of-listlength\">Imperative and functional versions of <code>list_length</code></h3>\n<p>The two versions of <code>list_length</code> are not completely equivalent in term\nof complexity, since the imperative version uses a constant amount of\nstack room to execute, whereas the functional version needs to store\nreturn addresses of suspended recursive calls (whose maximum number is\nequal to the length of the list argument). If you want to retrieve a\nconstant space requirement to run the functional program you just have\nto write a function that is recursive in its tail (or <em>tail-rec</em>), that\nis a function that just ends by a recursive call (which is not the case\nhere since a call to <code>+</code> has to be perform after the recursive call has\nreturned). Just use an accumulator for intermediate results, as in:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let list_length l =\n  let rec loop accu = function\n    | [] -&gt; accu\n    | _ :: l -&gt; loop (accu + 1) l in\n  loop 0 l\n</code></pre>\n<p>This way, you get a program that has the same computational properties\nas the imperative program with the additional clarity and natural\nlook of an algorithm that performs pattern matching and recursive\ncalls to handle an argument that belongs to a recursive sum data type.</p>\n"},{"title":"Compiling OCaml Projects","slug":"compiling-ocaml-projects","description":"An introduction to the OCaml compiler tools for building OCaml projects as well as the most common build tools\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"getting-started","tl":0},"users":{"hd":"Intermediate","tl":0},"body_md":"\nThis tutorial explains how to compile your OCaml programs into executable form.\nIt addresses, in turn:\n\n1. The compilation commands `ocamlc` and `ocamlopt` provided with OCaml. It is\n   useful to learn these commands to understand OCaml's compilation model.\n\n1. The `ocamlfind` front-end to the compiler, which saves you from worrying\n   about where libraries have been installed on your particular system. \n\n1. Automatic build systems for OCaml, such as `dune`, which release us from\n   details of compiler command invocation, so we never touch `ocamlc`,\n   `ocamlopt`, or even `ocamlfind`.\n\nIn our [up and running tutorial](up_and_running.html) we jumped straight to using\nthe automated build system `dune`. Now we shall look under the hood.\n\n## Compilation basics\n\nIn this section, we will first see how to compile a simple program using\nonly `ocamlc` or `ocamlopt`. Then we will see how to use libraries and how\nto take advantage of the\n[findlib](https://projects.camlcity.org/projects/findlib.html)\nsystem, which provides the `ocamlfind` command.\n\n### The ocamlc and ocamlopt compilers\n\nOCaml comes with two compilers: `ocamlc` is the bytecode compiler, and\n`ocamlopt` is the native code compiler. If you don't know which one to use, use\n`ocamlopt` since it provides executables that are faster than bytecode.\n\nLet's assume that our program `program` has two source files,\n`module1.ml` and `module2.ml`. We will compile them to native code,\nusing `ocamlopt`. For now, we also assume that they do not use any other\nlibrary than the standard library, which is automatically loaded. You\ncan compile the program in one single step:\n\n```shell\nocamlopt -o program module1.ml module2.ml\n```\n\nThe compiler produces an executable named `program` or `program.exe`. The order\nof the source files matters, and so `module1.ml` cannot depend upon things that\nare defined in `module2.ml`.\n\nThe OCaml distribution is shipped with the standard library, plus several other\nlibraries. There are also a large number of third-party libraries, for a wide\nrange of applications, from networking to graphics. You should understand the\nfollowing:\n\n1. The OCaml compilers know where the standard library is and use it\n   systematically (try: `ocamlc -where`). You don't have to worry much about\n   it.\n\n1. The other libraries that ship with the OCaml distribution (str, unix, etc.)\n   are installed in the same directory as the standard library.\n\n1. Third-party libraries may be installed in various places, and even a given\n   library can be installed in different places from one system to another.\n\nIf your program uses the unix library in addition to the standard library, for\nexample, the command line would be:\n\n```shell\nocamlopt -o program unix.cmxa module1.ml module2.ml\n```\n\nNote that `.cmxa` is the extension of native code libraries, while `.cma` is\nthe extension of bytecode libraries. The file `unix.cmxa` is found because it\nis always installed at the same place as the standard library, and this\ndirectory is in the library search path.\n\nIf your program depends upon third-party libraries, you must pass them on the\ncommand line. You must also indicate the libraries on which these libraries\ndepend. You must also pass the -I option to `ocamlopt` for each directory where\nthey may be found. This becomes complicated, and this information is\ninstallation dependent. So we will use `ocamlfind` instead, which does these\njobs for us.\n\n###  Using the ocamlfind front-end\n\nThe `ocamlfind` front-end is often used for compiling programs that use\nthird-party OCaml libraries. Library authors themselves make their library\ninstallable with `ocamlfind` as well. You can install `ocamlfind` using the\nopam package manager, by typing `opam install ocamlfind`.\n\nLet's assume that all the libraries you want to use have been installed\nproperly with ocamlfind. You can see which libraries are available in your\nsystem by typing:\n\n```shell\nocamlfind list\n```\n\nThis shows the list of package names, with their versions. Note that most\nopam packages install software using ocamlfind, so your list of ocamlfind\nlibraries will be somewhat similar to your list of installed opam packages\nobtained by `opam list`.\n\nThe command for compiling our program using package `pkg` will be:\n\n```shell\nocamlfind ocamlopt -o program -linkpkg -package pkg module1.ml module2.ml\n```\n\nMultiple packages may be specified using commas e.g `pkg1,pkg2`. Ocamlfind\nknows how to find any files `ocamlopt` may need from the package, for example\n`.cmxa` implementation files or `.cmi` interface files, because they have been\npackaged together and installed at a known location by ocamlfind. We need only\nthe name `pkg` to refer to them all - ocamlfind does the rest.\n\nNote that you can compile the files separately. This is useful if\nyou want to recompile only some parts of the programs. Here are the\nequivalent commands that perform a separate compilation of the source\nfiles and link them together in a final step:\n\n```shell\nocamlfind ocamlopt -c -package pkg module1.ml\nocamlfind ocamlopt -c -package pkg module2.ml\nocamlfind ocamlopt -o program -linkpkg -package pkg module1.cmx module2.cmx\n```\n\nSeparate compilation (one command for `module1.ml`, another for `module2.ml`\nand another to link the final output) is usually not performed manually but\nonly when using an automated build system that will take care of recompiling\nonly what it necessary.\n\n## Interlude: making a custom toplevel\n\nOCaml provides another tool `ocamlmktop` to make an interactive toplevel with\nlibraries accessible. For example:\n\n```shell\nocamlmktop -o toplevel unix.cma module1.ml module2.ml\n```\n\nWe run `toplevel` and get an OCaml toplevel with modules `Unix`, `Module1`, and\n`Module2` all available, allowing us to experiment interactively with our\nprogram.\n\nOCamlfind also supports `ocamlmktop`:\n\n```shell\nocamlfind ocamlmktop -o toplevel unix.cma -package pkg module1.ml module2.ml\n```\n\n## Dune: an automated build system\n\nThe most popular modern system for building OCaml projects is\n[dune](https://dune.readthedocs.io/en/stable/) which may be installed with\n`opam install dune`. It allows one to build OCaml projects from a simple\ndescription of their elements. For example, the dune file for our project might\nlook like this:\n\n```scheme\n;; our example project\n(executable\n  (name program)\n  (libraries unix pkg))\n```\n\nThe dune [quick-start\nguide](https://dune.readthedocs.io/en/latest/quick-start.html) shows you how to\nwrite such description files for more complicated situations, and how to\nstructure, build, and run dune projects. \n\n## Other build systems\n\n- [OMake](https://github.com/ocaml-omake/omake) Another OCaml build system.\n- [GNU make](https://www.gnu.org/software/make/) GNU make can build anything, including OCaml. May be used in conjunction with [OCamlmakefile](https://github.com/mmottl/ocaml-makefile)\n- [Oasis](https://github.com/ocaml/oasis) Generates a configure, build, and install system from a specification.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#compilation-basics\">Compilation basics</a>\n</li>\n<li><a href=\"#interlude-making-a-custom-toplevel\">Interlude: making a custom toplevel</a>\n</li>\n<li><a href=\"#dune-an-automated-build-system\">Dune: an automated build system</a>\n</li>\n<li><a href=\"#other-build-systems\">Other build systems</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This tutorial explains how to compile your OCaml programs into executable form.\nIt addresses, in turn:</p>\n<ol>\n<li>\n<p>The compilation commands <code>ocamlc</code> and <code>ocamlopt</code> provided with OCaml. It is\nuseful to learn these commands to understand OCaml's compilation model.</p>\n</li>\n<li>\n<p>The <code>ocamlfind</code> front-end to the compiler, which saves you from worrying\nabout where libraries have been installed on your particular system.</p>\n</li>\n<li>\n<p>Automatic build systems for OCaml, such as <code>dune</code>, which release us from\ndetails of compiler command invocation, so we never touch <code>ocamlc</code>,\n<code>ocamlopt</code>, or even <code>ocamlfind</code>.</p>\n</li>\n</ol>\n<p>In our <a href=\"up_and_running.html\">up and running tutorial</a> we jumped straight to using\nthe automated build system <code>dune</code>. Now we shall look under the hood.</p>\n<h2 id=\"compilation-basics\">Compilation basics</h2>\n<p>In this section, we will first see how to compile a simple program using\nonly <code>ocamlc</code> or <code>ocamlopt</code>. Then we will see how to use libraries and how\nto take advantage of the\n<a href=\"https://projects.camlcity.org/projects/findlib.html\">findlib</a>\nsystem, which provides the <code>ocamlfind</code> command.</p>\n<h3 id=\"the-ocamlc-and-ocamlopt-compilers\">The ocamlc and ocamlopt compilers</h3>\n<p>OCaml comes with two compilers: <code>ocamlc</code> is the bytecode compiler, and\n<code>ocamlopt</code> is the native code compiler. If you don't know which one to use, use\n<code>ocamlopt</code> since it provides executables that are faster than bytecode.</p>\n<p>Let's assume that our program <code>program</code> has two source files,\n<code>module1.ml</code> and <code>module2.ml</code>. We will compile them to native code,\nusing <code>ocamlopt</code>. For now, we also assume that they do not use any other\nlibrary than the standard library, which is automatically loaded. You\ncan compile the program in one single step:</p>\n<pre><code class=\"language-shell\">ocamlopt -o program module1.ml module2.ml\n</code></pre>\n<p>The compiler produces an executable named <code>program</code> or <code>program.exe</code>. The order\nof the source files matters, and so <code>module1.ml</code> cannot depend upon things that\nare defined in <code>module2.ml</code>.</p>\n<p>The OCaml distribution is shipped with the standard library, plus several other\nlibraries. There are also a large number of third-party libraries, for a wide\nrange of applications, from networking to graphics. You should understand the\nfollowing:</p>\n<ol>\n<li>\n<p>The OCaml compilers know where the standard library is and use it\nsystematically (try: <code>ocamlc -where</code>). You don't have to worry much about\nit.</p>\n</li>\n<li>\n<p>The other libraries that ship with the OCaml distribution (str, unix, etc.)\nare installed in the same directory as the standard library.</p>\n</li>\n<li>\n<p>Third-party libraries may be installed in various places, and even a given\nlibrary can be installed in different places from one system to another.</p>\n</li>\n</ol>\n<p>If your program uses the unix library in addition to the standard library, for\nexample, the command line would be:</p>\n<pre><code class=\"language-shell\">ocamlopt -o program unix.cmxa module1.ml module2.ml\n</code></pre>\n<p>Note that <code>.cmxa</code> is the extension of native code libraries, while <code>.cma</code> is\nthe extension of bytecode libraries. The file <code>unix.cmxa</code> is found because it\nis always installed at the same place as the standard library, and this\ndirectory is in the library search path.</p>\n<p>If your program depends upon third-party libraries, you must pass them on the\ncommand line. You must also indicate the libraries on which these libraries\ndepend. You must also pass the -I option to <code>ocamlopt</code> for each directory where\nthey may be found. This becomes complicated, and this information is\ninstallation dependent. So we will use <code>ocamlfind</code> instead, which does these\njobs for us.</p>\n<h3 id=\"using-the-ocamlfind-front-end\">Using the ocamlfind front-end</h3>\n<p>The <code>ocamlfind</code> front-end is often used for compiling programs that use\nthird-party OCaml libraries. Library authors themselves make their library\ninstallable with <code>ocamlfind</code> as well. You can install <code>ocamlfind</code> using the\nopam package manager, by typing <code>opam install ocamlfind</code>.</p>\n<p>Let's assume that all the libraries you want to use have been installed\nproperly with ocamlfind. You can see which libraries are available in your\nsystem by typing:</p>\n<pre><code class=\"language-shell\">ocamlfind list\n</code></pre>\n<p>This shows the list of package names, with their versions. Note that most\nopam packages install software using ocamlfind, so your list of ocamlfind\nlibraries will be somewhat similar to your list of installed opam packages\nobtained by <code>opam list</code>.</p>\n<p>The command for compiling our program using package <code>pkg</code> will be:</p>\n<pre><code class=\"language-shell\">ocamlfind ocamlopt -o program -linkpkg -package pkg module1.ml module2.ml\n</code></pre>\n<p>Multiple packages may be specified using commas e.g <code>pkg1,pkg2</code>. Ocamlfind\nknows how to find any files <code>ocamlopt</code> may need from the package, for example\n<code>.cmxa</code> implementation files or <code>.cmi</code> interface files, because they have been\npackaged together and installed at a known location by ocamlfind. We need only\nthe name <code>pkg</code> to refer to them all - ocamlfind does the rest.</p>\n<p>Note that you can compile the files separately. This is useful if\nyou want to recompile only some parts of the programs. Here are the\nequivalent commands that perform a separate compilation of the source\nfiles and link them together in a final step:</p>\n<pre><code class=\"language-shell\">ocamlfind ocamlopt -c -package pkg module1.ml\nocamlfind ocamlopt -c -package pkg module2.ml\nocamlfind ocamlopt -o program -linkpkg -package pkg module1.cmx module2.cmx\n</code></pre>\n<p>Separate compilation (one command for <code>module1.ml</code>, another for <code>module2.ml</code>\nand another to link the final output) is usually not performed manually but\nonly when using an automated build system that will take care of recompiling\nonly what it necessary.</p>\n<h2 id=\"interlude-making-a-custom-toplevel\">Interlude: making a custom toplevel</h2>\n<p>OCaml provides another tool <code>ocamlmktop</code> to make an interactive toplevel with\nlibraries accessible. For example:</p>\n<pre><code class=\"language-shell\">ocamlmktop -o toplevel unix.cma module1.ml module2.ml\n</code></pre>\n<p>We run <code>toplevel</code> and get an OCaml toplevel with modules <code>Unix</code>, <code>Module1</code>, and\n<code>Module2</code> all available, allowing us to experiment interactively with our\nprogram.</p>\n<p>OCamlfind also supports <code>ocamlmktop</code>:</p>\n<pre><code class=\"language-shell\">ocamlfind ocamlmktop -o toplevel unix.cma -package pkg module1.ml module2.ml\n</code></pre>\n<h2 id=\"dune-an-automated-build-system\">Dune: an automated build system</h2>\n<p>The most popular modern system for building OCaml projects is\n<a href=\"https://dune.readthedocs.io/en/stable/\">dune</a> which may be installed with\n<code>opam install dune</code>. It allows one to build OCaml projects from a simple\ndescription of their elements. For example, the dune file for our project might\nlook like this:</p>\n<pre><code class=\"language-scheme\">;; our example project\n(executable\n  (name program)\n  (libraries unix pkg))\n</code></pre>\n<p>The dune <a href=\"https://dune.readthedocs.io/en/latest/quick-start.html\">quick-start\nguide</a> shows you how to\nwrite such description files for more complicated situations, and how to\nstructure, build, and run dune projects.</p>\n<h2 id=\"other-build-systems\">Other build systems</h2>\n<ul>\n<li><a href=\"https://github.com/ocaml-omake/omake\">OMake</a> Another OCaml build system.\n</li>\n<li><a href=\"https://www.gnu.org/software/make/\">GNU make</a> GNU make can build anything, including OCaml. May be used in conjunction with <a href=\"https://github.com/mmottl/ocaml-makefile\">OCamlmakefile</a>\n</li>\n<li><a href=\"https://github.com/ocaml/oasis\">Oasis</a> Generates a configure, build, and install system from a specification.\n</li>\n</ul>\n"},{"title":"Data Types and Matching","slug":"data-types-and-matching","description":"Learn to build custom types and write function to process this data\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\nIn this tutorial we learn how to build our own types in OCaml, and how to write\nfunctions which process this new data.\n\n## Built-in compound types\n\nWe have already seen simple data types such as `int`, `float`, `string`, and\n`bool`.  Let's recap the built-in compound data types we can use in OCaml to\ncombine such values. First, we have lists which are ordered collections of any\nnumber of elements of like type:\n\n```ocaml\n# []\n- : 'a list = []\n# [1; 2; 3]\n- : int list = [1; 2; 3]\n# [[1; 2]; [3; 4]; [5; 6]]\n- : int list list = [[1; 2]; [3; 4]; [5; 6]]\n# [false; true; false]\n- : bool list = [false; true; false]\n```\n\nNext, we have tuples, which collect a fixed number of elements together:\n\n```ocaml\n# (5.0, 6.5)\n- : float * float = (5., 6.5)\n# (true, 0.0, 0.45, 0.73, \"french blue\")\n- : bool * float * float * float * string =\n(true, 0., 0.45, 0.73, \"french blue\")\n```\n\nWe have records, which are like labeled tuples. They are defined by writing a\ntype definition giving a name for the record, and names for each of its fields,\nand their types:\n\n```ocaml\n# type point = {x : float; y : float}\ntype point = { x : float; y : float; }\n# let a = {x = 5.0; y = 6.5}\nval a : point = {x = 5.; y = 6.5}\n# type colour = {websafe : bool; r : float; g : float; b : float; name : string}\ntype colour = {\n  websafe : bool;\n  r : float;\n  g : float;\n  b : float;\n  name : string;\n}\n# let b = {websafe = true; r = 0.0; g = 0.45; b = 0.73; name = \"french blue\"}\nval b : colour =\n  {websafe = true; r = 0.; g = 0.45; b = 0.73; name = \"french blue\"}\n```\n\nA record must contain all fields:\n\n```ocaml\n# let c = {name = \"puce\"}\nLine 1, characters 9-24:\nError: Some record fields are undefined: websafe r g b\n```\n\nRecords may be mutable:\n\n```ocaml\n# type person =\n  {first_name : string;\n   surname : string;\n   mutable age : int}\ntype person = { first_name : string; surname : string; mutable age : int; }\n# let birthday p =\n  p.age <- p.age + 1\nval birthday : person -> unit = <fun>\n```\n\nAnother mutable compound data type is the fixed-length array which, just as a\nlist, must contain elements of like type. However, its elements may be accessed\nin constant time:\n\n```ocaml\n# let arr = [|1; 2; 3|]\nval arr : int array = [|1; 2; 3|]\n# arr.(0)\n- : int = 1\n# arr.(0) <- 0\n- : unit = ()\n# arr\n- : int array = [|0; 2; 3|]\n```\n\nIn this tutorial, we will define our own compound data types, using the `type`\nkeyword, and some of these built-in structures as building blocks.\n\n## A simple custom type\n\nWe can define a new data type `colour` which can take one of four values.\n\n```ocaml env=colours\ntype colour = Red | Green | Blue | Yellow\n```\n\nOur new type is called `colour`, and has four *constructors* `Red`, `Green`,\n`Blue` and `Yellow`. The name of the type must begin with a lower case letter,\nand the names of the constructors with upper case letters. We can use our new\ntype anywhere a built-in type could be used:\n\n```ocaml env=colours\n# let additive_primaries = (Red, Green, Blue)\nval additive_primaries : colour * colour * colour = (Red, Green, Blue)\n# let pattern = [(1, Red); (3, Green); (1, Red); (2, Green)]\nval pattern : (int * colour) list =\n  [(1, Red); (3, Green); (1, Red); (2, Green)]\n```\n\nNotice the types inferred by OCaml for these expressions. We can pattern-match\non our new type, just as with any built-in type:\n\n```ocaml env=colours\n# let example c =\n  match c with\n  | Red -> \"rose\"\n  | Green -> \"grass\"\n  | Blue -> \"sky\"\n  | Yellow -> \"banana\"\nval example : colour -> string = <fun>\n```\n\nNotice the type of the function includes the name of our new type `colour`. We\ncan make the function shorter and elide its parameter `c` by using the\nalternative `function` keyword which allows direct matching:\n\n```ocaml env=colours\n# let example = function\n  | Red -> \"rose\"\n  | Green -> \"grass\"\n  | Blue -> \"sky\"\n  | Yellow -> \"banana\"\nval example : colour -> string = <fun>\n```\n\nWe can match on more than one case at a time too:\n\n```ocaml env=colours\n# let rec is_primary = function\n  | Red | Green | Blue -> true\n  | _ -> false\nval is_primary : colour -> bool = <fun>\n```\n\n## Constructors with data\n\nEach constructor in a data type can carry additional information with it. Let's\nextend our `colour` type to allow arbitrary RGB triples, each element begin a\nnumber from 0 (no colour) to 1 (full colour): \n\n```ocaml env=colours\n# type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\ntype colour = Red | Green | Blue | Yellow | RGB of float * float * float\n\n# [Red; Blue; RGB (0.5, 0.65, 0.12)]\n- : colour list = [Red; Blue; RGB (0.5, 0.65, 0.12)]\n```\n\nTypes, just like functions, may be recursively-defined. We extend our data type\nto allow mixing of colours:\n\n```ocaml env=colours\n# type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\n  | Mix of float * colour * colour\ntype colour =\n    Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\n  | Mix of float * colour * colour\n# Mix (0.5, Red, Mix (0.5, Blue, Green))\n- : colour = Mix (0.5, Red, Mix (0.5, Blue, Green))\n```\n\nHere is a function over our new `colour` data type:\n\n```ocaml env=colours\n# let rec rgb_of_colour = function\n  | Red -> (1.0, 0.0, 0.0)\n  | Green -> (0.0, 1.0, 0.0)\n  | Blue -> (0.0, 0.0, 1.0)\n  | Yellow -> (1.0, 1.0, 0.0)\n  | RGB (r, g, b) -> (r, g, b)\n  | Mix (p, a, b) ->\n      let (r1, g1, b1) = rgb_of_colour a in\n      let (r2, g2, b2) = rgb_of_colour b in\n      let mix x y = x *. p +. y *. (1.0 -. p) in\n        (mix r1 r2, mix g1 g2, mix b1 b2)\nval rgb_of_colour : colour -> float * float * float = <fun>\n```\n\nWe can use records directly in the data type instead to label our components:\n\n```ocaml env=colours\n# type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of {r : float; g : float; b : float}\n  | Mix of {proportion : float; c1 : colour; c2 : colour}\ntype colour =\n    Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of { r : float; g : float; b : float; }\n  | Mix of { proportion : float; c1 : colour; c2 : colour; }\n```\n\n## Example: trees\n\nData types may be polymorphic as well as recursive. Here is an OCaml data type\nfor a binary tree carrying any kind of data:\n\n```ocaml env=trees\n# type 'a tree =\n  | Leaf\n  | Node of 'a tree * 'a * 'a tree\ntype 'a tree = Leaf | Node of 'a tree * 'a * 'a tree\n# let t =\n    Node (Node (Leaf, 1, Leaf), 2, Node (Node (Leaf, 3, Leaf), 4, Leaf))\nval t : int tree =\n  Node (Node (Leaf, 1, Leaf), 2, Node (Node (Leaf, 3, Leaf), 4, Leaf))\n```\n\nNotice that we give the type parameter `'a` before the type name (if there is\nmore than one, we write `('a, 'b)` etc).  A `Leaf` holds no information,\njust like an empty list. A `Node` holds a left tree, a value of type `'a`\nand a right tree. In our example, we built an integer tree, but any type can be\nused. Now we can write recursive and polymorphic functions over these trees, by\npattern matching on our new constructors:\n\n```ocaml env=trees\n# let rec total = function\n  | Leaf -> 0\n  | Node (l, x, r) -> total l + x + total r\nval total : int tree -> int = <fun>\n# let rec flip = function\n  | Leaf -> Leaf\n  | Node (l, x, r) -> Node (flip r, x, flip l)\nval flip : 'a tree -> 'a tree = <fun>\n```\n\nHere, `flip` is polymorphic while `total` operates only on trees of type `int\ntree`. Let's try our new functions out:\n\n```ocaml env=trees\n# let all = total t\nval all : int = 10\n# let flipped = flip t\nval flipped : int tree =\n  Node (Node (Leaf, 4, Node (Leaf, 3, Leaf)), 2, Node (Leaf, 1, Leaf))\n# t = flip flipped\n- : bool = true\n```\n\nInstead of integers, we could build a tree of key-value pairs. Then, if we\ninsist that the keys are unique and that a smaller key is always left of a\nlarger key, we have a data structure for dictionaries which performs better\nthan a simple list of pairs. It is known as a *binary search tree*:\n\n```ocaml env=trees\n# let rec insert (k, v) = function\n  | Leaf -> Node (Leaf, (k, v), Leaf)\n  | Node (l, (k', v'), r) ->\n      if k < k' then Node (insert (k, v) l, (k', v'), r) \n      else if k > k' then Node (l, (k', v'), insert (k, v) r)\n      else Node (l, (k, v), r)\nval insert : 'a * 'b -> ('a * 'b) tree -> ('a * 'b) tree = <fun>\n```\n\nSimilar functions can be written to look up values in a dictionary, to convert\na list of pairs to or from a tree dictionary and so on.\n\n## Example: mathematical expressions\n\nWe wish to represent simple mathematical expressions like `n * (x + y)` and\nmultiply them out symbolically to get `n * x + n * y`.\n\nLet's define a type for these expressions:\n\n```ocaml env=expr\ntype expr =\n  | Plus of expr * expr        (* a + b *)\n  | Minus of expr * expr       (* a - b *)\n  | Times of expr * expr       (* a * b *)\n  | Divide of expr * expr      (* a / b *)\n  | Var of string              (* \"x\", \"y\", etc. *)\n```\n\nThe expression `n * (x + y)` would be written:\n\n```ocaml env=expr\n# Times (Var \"n\", Plus (Var \"x\", Var \"y\"))\n- : expr = Times (Var \"n\", Plus (Var \"x\", Var \"y\"))\n```\n\nLet's write a function which prints out `Times (Var \"n\", Plus (Var \"x\", Var\n\"y\"))` as something more like `n * (x + y)`.\n\n```ocaml env=expr\n# let rec to_string e =\n  match e with\n  | Plus (left, right) ->\n     \"(\" ^ to_string left ^ \" + \" ^ to_string right ^ \")\"\n  | Minus (left, right) ->\n     \"(\" ^ to_string left ^ \" - \" ^ to_string right ^ \")\"\n  | Times (left, right) ->\n   \"(\" ^ to_string left ^ \" * \" ^ to_string right ^ \")\"\n  | Divide (left, right) ->\n   \"(\" ^ to_string left ^ \" / \" ^ to_string right ^ \")\"\n  | Var v -> v\nval to_string : expr -> string = <fun>\n# let print_expr e =\n  print_endline (to_string e)\nval print_expr : expr -> unit = <fun>\n```\n\n(The `^` operator concatenates strings). We separate the function into two so\nthat our `to_string` function is usable in other contexts. Here's the\n`print_expr` function in action:\n\n```ocaml env=expr\n# print_expr (Times (Var \"n\", Plus (Var \"x\", Var \"y\")))\n(n * (x + y))\n- : unit = ()\n```\n\nWe can write a function to multiply out expressions of the form `n * (x + y)`\nor `(x + y) * n` and for this we will use a nested pattern:\n\n```ocaml env=expr\n# let rec multiply_out e =\n  match e with\n  | Times (e1, Plus (e2, e3)) ->\n     Plus (Times (multiply_out e1, multiply_out e2),\n           Times (multiply_out e1, multiply_out e3))\n  | Times (Plus (e1, e2), e3) ->\n     Plus (Times (multiply_out e1, multiply_out e3),\n           Times (multiply_out e2, multiply_out e3))\n  | Plus (left, right) ->\n     Plus (multiply_out left, multiply_out right)\n  | Minus (left, right) ->\n     Minus (multiply_out left, multiply_out right)\n  | Times (left, right) ->\n     Times (multiply_out left, multiply_out right)\n  | Divide (left, right) ->\n     Divide (multiply_out left, multiply_out right)\n  | Var v -> Var v\nval multiply_out : expr -> expr = <fun>\n```\n\nHere it is in action:\n\n```ocaml env=expr\n# print_expr (multiply_out (Times (Var \"n\", Plus (Var \"x\", Var \"y\"))))\n((n * x) + (n * y))\n- : unit = ()\n```\n\nHow does the `multiply_out` function work? The key is in the first two\npatterns. The first pattern is `Times (e1, Plus (e2, e3))` which matches\nexpressions of the form `e1 * (e2 + e3)`. Now look at the right hand side of\nthis first pattern match, and convince yourself that it is the equivalent of\n`(e1 * e2) + (e1 * e3)`. The second pattern does the same thing, except for\nexpressions of the form `(e1 + e2) * e3`.\n\nThe remaining patterns don't change the form of the expression, but they\ncrucially *do* call the `multiply_out` function recursively on their\nsubexpressions. This ensures that all subexpressions within the expression get\nmultiplied out too (if you only wanted to multiply out the very top level of an\nexpression, then you could replace all the remaining patterns with a simple `e\n-> e` rule).\n\nCan we do the reverse (i.e. factorizing out common subexpressions)? We can!\n(But it's a bit more complicated). The following version only works for the top\nlevel expression. You could certainly extend it to cope with all levels of an\nexpression and more complex cases:\n\n```ocaml env=expr\n# let factorize e =\n  match e with\n  | Plus (Times (e1, e2), Times (e3, e4)) when e1 = e3 ->\n     Times (e1, Plus (e2, e4))\n  | Plus (Times (e1, e2), Times (e3, e4)) when e2 = e4 ->\n     Times (Plus (e1, e3), e4)\n  | e -> e\nval factorize : expr -> expr = <fun>\n# factorize (Plus (Times (Var \"n\", Var \"x\"),\n                   Times (Var \"n\", Var \"y\")))\n- : expr = Times (Var \"n\", Plus (Var \"x\", Var \"y\"))\n```\n\nThe factorize function above introduces another couple of features. You can add\nwhat are known as *guards* to each pattern match. A guard is the conditional\nwhich follows the `when`, and it means that the pattern match only happens if\nthe pattern matches *and* the condition in the `when`-clause is satisfied.\n\n<!-- $MDX skip -->\n```ocaml\nmatch value with\n| pattern [ when condition ] -> result\n| pattern [ when condition ] -> result\n  ...\n```\n\nThe second feature is the `=` operator which tests for \"structural equality\"\nbetween two expressions. That means it goes recursively into each expression\nchecking they're exactly the same at all levels down.\n\nAnother feature which is useful when we build more complicated nested patterns\nis the `as` keyword, which can be used to name part of an expression. For\nexample:\n\n<!-- $MDX skip -->\n```ocaml\nName (\"/DeviceGray\" | \"/DeviceRGB\" | \"/DeviceCMYK\") as n -> n\n\nNode (l, ((k, _) as pair), r) when k = k' -> Some pair\n```\n\n## Mutually recursive data types\n\nData types may be mutually-recursive when declared with `and`:\n\n```ocaml\ntype t = A | B of t' and t' = C | D of t\n```\n\nOne common use for mutually-recursive data types is to *decorate* a tree, by\nadding information to each node using mutually-recursive types, one of which is\na tuple or record. For example:\n\n```ocaml\ntype t' = Int of int | Add of t * t\nand t = {annotation : string; data : t'}\n```\n\nValues of such mutually-recursive data type are manipulated by accompanying\nmutually-recursive functions:\n\n```ocaml\n# let rec sum_t' = function\n  | Int i -> i\n  | Add (i, i') -> sum_t i + sum_t i'\n  and sum_t {annotation; data} =\n    if annotation <> \"\" then Printf.printf \"Touching %s\\n\" annotation;\n    sum_t' data\nval sum_t' : t' -> int = <fun>\nval sum_t : t -> int = <fun>\n```\n\n## A note on tupled constructors\n\nThere is a difference between `RGB of float * float * float` and `RGB of (float\n* float * float)`. The first is a constructor with three pieces of data\nassociated with it, the second is a constructor with one tuple associated with\nit. There are two ways this matters: the memory layout differs between the two\n(a tuple is an extra indirection), and the ability to create or match using a\ntuple:\n\n```ocaml\n# type t = T of int * int\ntype t = T of int * int\n\n# type t2 = T2 of (int * int)\ntype t2 = T2 of (int * int)\n\n# let pair = (1, 2)\nval pair : int * int = (1, 2)\n\n# T2 pair\n- : t2 = T2 (1, 2)\n\n# T pair\nLine 1, characters 1-7:\nError: The constructor T expects 2 argument(s),\n       but is applied here to 1 argument(s)\n\n# match T2 (1, 2) with T2 x -> fst x\n- : int = 1\n\n# match T (1, 2) with T x -> fst x\nLine 1, characters 21-24:\nError: The constructor T expects 2 argument(s),\n       but is applied here to 1 argument(s)\n```\n\nNote, however, that OCaml allows us to use the always-matching `_` in either\nversion:\n\n```ocaml\n# match T2 (1, 2) with T2 _ -> 0\n- : int = 0\n\n# match T (1, 2) with T _ -> 0\n- : int = 0\n```\n\n## Types and modules\n\nOften, a module will provide a single type and operations on that type. For\nexample, a module for a file format like PNG might have the following `png.mli`\ninterface:\n\n<!-- $MDX skip -->\n```ocaml\ntype t\n\nval of_file : filename -> t\n\nval to_file : t -> filename -> unit\n\nval flip_vertical : t -> t\n\nval flip_horizontal : t -> t\n\nval rotate : float -> t -> t\n```\n\nTraditionally, we name the type `t`. In the program using this library, it\nwould then be `Png.t` which is shorter, reads better than `Png.png`, and avoids\nconfusion if the library also defines other types.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#built-in-compound-types\">Built-in compound types</a>\n</li>\n<li><a href=\"#a-simple-custom-type\">A simple custom type</a>\n</li>\n<li><a href=\"#constructors-with-data\">Constructors with data</a>\n</li>\n<li><a href=\"#example-trees\">Example: trees</a>\n</li>\n<li><a href=\"#example-mathematical-expressions\">Example: mathematical expressions</a>\n</li>\n<li><a href=\"#mutually-recursive-data-types\">Mutually recursive data types</a>\n</li>\n<li><a href=\"#a-note-on-tupled-constructors\">A note on tupled constructors</a>\n</li>\n<li><a href=\"#types-and-modules\">Types and modules</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>In this tutorial we learn how to build our own types in OCaml, and how to write\nfunctions which process this new data.</p>\n<h2 id=\"built-in-compound-types\">Built-in compound types</h2>\n<p>We have already seen simple data types such as <code>int</code>, <code>float</code>, <code>string</code>, and\n<code>bool</code>.  Let's recap the built-in compound data types we can use in OCaml to\ncombine such values. First, we have lists which are ordered collections of any\nnumber of elements of like type:</p>\n<pre><code class=\"language-ocaml\"># []\n- : 'a list = []\n# [1; 2; 3]\n- : int list = [1; 2; 3]\n# [[1; 2]; [3; 4]; [5; 6]]\n- : int list list = [[1; 2]; [3; 4]; [5; 6]]\n# [false; true; false]\n- : bool list = [false; true; false]\n</code></pre>\n<p>Next, we have tuples, which collect a fixed number of elements together:</p>\n<pre><code class=\"language-ocaml\"># (5.0, 6.5)\n- : float * float = (5., 6.5)\n# (true, 0.0, 0.45, 0.73, &quot;french blue&quot;)\n- : bool * float * float * float * string =\n(true, 0., 0.45, 0.73, &quot;french blue&quot;)\n</code></pre>\n<p>We have records, which are like labeled tuples. They are defined by writing a\ntype definition giving a name for the record, and names for each of its fields,\nand their types:</p>\n<pre><code class=\"language-ocaml\"># type point = {x : float; y : float}\ntype point = { x : float; y : float; }\n# let a = {x = 5.0; y = 6.5}\nval a : point = {x = 5.; y = 6.5}\n# type colour = {websafe : bool; r : float; g : float; b : float; name : string}\ntype colour = {\n  websafe : bool;\n  r : float;\n  g : float;\n  b : float;\n  name : string;\n}\n# let b = {websafe = true; r = 0.0; g = 0.45; b = 0.73; name = &quot;french blue&quot;}\nval b : colour =\n  {websafe = true; r = 0.; g = 0.45; b = 0.73; name = &quot;french blue&quot;}\n</code></pre>\n<p>A record must contain all fields:</p>\n<pre><code class=\"language-ocaml\"># let c = {name = &quot;puce&quot;}\nLine 1, characters 9-24:\nError: Some record fields are undefined: websafe r g b\n</code></pre>\n<p>Records may be mutable:</p>\n<pre><code class=\"language-ocaml\"># type person =\n  {first_name : string;\n   surname : string;\n   mutable age : int}\ntype person = { first_name : string; surname : string; mutable age : int; }\n# let birthday p =\n  p.age &lt;- p.age + 1\nval birthday : person -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Another mutable compound data type is the fixed-length array which, just as a\nlist, must contain elements of like type. However, its elements may be accessed\nin constant time:</p>\n<pre><code class=\"language-ocaml\"># let arr = [|1; 2; 3|]\nval arr : int array = [|1; 2; 3|]\n# arr.(0)\n- : int = 1\n# arr.(0) &lt;- 0\n- : unit = ()\n# arr\n- : int array = [|0; 2; 3|]\n</code></pre>\n<p>In this tutorial, we will define our own compound data types, using the <code>type</code>\nkeyword, and some of these built-in structures as building blocks.</p>\n<h2 id=\"a-simple-custom-type\">A simple custom type</h2>\n<p>We can define a new data type <code>colour</code> which can take one of four values.</p>\n<pre><code class=\"language-ocaml\">type colour = Red | Green | Blue | Yellow\n</code></pre>\n<p>Our new type is called <code>colour</code>, and has four <em>constructors</em> <code>Red</code>, <code>Green</code>,\n<code>Blue</code> and <code>Yellow</code>. The name of the type must begin with a lower case letter,\nand the names of the constructors with upper case letters. We can use our new\ntype anywhere a built-in type could be used:</p>\n<pre><code class=\"language-ocaml\"># let additive_primaries = (Red, Green, Blue)\nval additive_primaries : colour * colour * colour = (Red, Green, Blue)\n# let pattern = [(1, Red); (3, Green); (1, Red); (2, Green)]\nval pattern : (int * colour) list =\n  [(1, Red); (3, Green); (1, Red); (2, Green)]\n</code></pre>\n<p>Notice the types inferred by OCaml for these expressions. We can pattern-match\non our new type, just as with any built-in type:</p>\n<pre><code class=\"language-ocaml\"># let example c =\n  match c with\n  | Red -&gt; &quot;rose&quot;\n  | Green -&gt; &quot;grass&quot;\n  | Blue -&gt; &quot;sky&quot;\n  | Yellow -&gt; &quot;banana&quot;\nval example : colour -&gt; string = &lt;fun&gt;\n</code></pre>\n<p>Notice the type of the function includes the name of our new type <code>colour</code>. We\ncan make the function shorter and elide its parameter <code>c</code> by using the\nalternative <code>function</code> keyword which allows direct matching:</p>\n<pre><code class=\"language-ocaml\"># let example = function\n  | Red -&gt; &quot;rose&quot;\n  | Green -&gt; &quot;grass&quot;\n  | Blue -&gt; &quot;sky&quot;\n  | Yellow -&gt; &quot;banana&quot;\nval example : colour -&gt; string = &lt;fun&gt;\n</code></pre>\n<p>We can match on more than one case at a time too:</p>\n<pre><code class=\"language-ocaml\"># let rec is_primary = function\n  | Red | Green | Blue -&gt; true\n  | _ -&gt; false\nval is_primary : colour -&gt; bool = &lt;fun&gt;\n</code></pre>\n<h2 id=\"constructors-with-data\">Constructors with data</h2>\n<p>Each constructor in a data type can carry additional information with it. Let's\nextend our <code>colour</code> type to allow arbitrary RGB triples, each element begin a\nnumber from 0 (no colour) to 1 (full colour):</p>\n<pre><code class=\"language-ocaml\"># type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\ntype colour = Red | Green | Blue | Yellow | RGB of float * float * float\n\n# [Red; Blue; RGB (0.5, 0.65, 0.12)]\n- : colour list = [Red; Blue; RGB (0.5, 0.65, 0.12)]\n</code></pre>\n<p>Types, just like functions, may be recursively-defined. We extend our data type\nto allow mixing of colours:</p>\n<pre><code class=\"language-ocaml\"># type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\n  | Mix of float * colour * colour\ntype colour =\n    Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of float * float * float\n  | Mix of float * colour * colour\n# Mix (0.5, Red, Mix (0.5, Blue, Green))\n- : colour = Mix (0.5, Red, Mix (0.5, Blue, Green))\n</code></pre>\n<p>Here is a function over our new <code>colour</code> data type:</p>\n<pre><code class=\"language-ocaml\"># let rec rgb_of_colour = function\n  | Red -&gt; (1.0, 0.0, 0.0)\n  | Green -&gt; (0.0, 1.0, 0.0)\n  | Blue -&gt; (0.0, 0.0, 1.0)\n  | Yellow -&gt; (1.0, 1.0, 0.0)\n  | RGB (r, g, b) -&gt; (r, g, b)\n  | Mix (p, a, b) -&gt;\n      let (r1, g1, b1) = rgb_of_colour a in\n      let (r2, g2, b2) = rgb_of_colour b in\n      let mix x y = x *. p +. y *. (1.0 -. p) in\n        (mix r1 r2, mix g1 g2, mix b1 b2)\nval rgb_of_colour : colour -&gt; float * float * float = &lt;fun&gt;\n</code></pre>\n<p>We can use records directly in the data type instead to label our components:</p>\n<pre><code class=\"language-ocaml\"># type colour =\n  | Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of {r : float; g : float; b : float}\n  | Mix of {proportion : float; c1 : colour; c2 : colour}\ntype colour =\n    Red\n  | Green\n  | Blue\n  | Yellow\n  | RGB of { r : float; g : float; b : float; }\n  | Mix of { proportion : float; c1 : colour; c2 : colour; }\n</code></pre>\n<h2 id=\"example-trees\">Example: trees</h2>\n<p>Data types may be polymorphic as well as recursive. Here is an OCaml data type\nfor a binary tree carrying any kind of data:</p>\n<pre><code class=\"language-ocaml\"># type 'a tree =\n  | Leaf\n  | Node of 'a tree * 'a * 'a tree\ntype 'a tree = Leaf | Node of 'a tree * 'a * 'a tree\n# let t =\n    Node (Node (Leaf, 1, Leaf), 2, Node (Node (Leaf, 3, Leaf), 4, Leaf))\nval t : int tree =\n  Node (Node (Leaf, 1, Leaf), 2, Node (Node (Leaf, 3, Leaf), 4, Leaf))\n</code></pre>\n<p>Notice that we give the type parameter <code>'a</code> before the type name (if there is\nmore than one, we write <code>('a, 'b)</code> etc).  A <code>Leaf</code> holds no information,\njust like an empty list. A <code>Node</code> holds a left tree, a value of type <code>'a</code>\nand a right tree. In our example, we built an integer tree, but any type can be\nused. Now we can write recursive and polymorphic functions over these trees, by\npattern matching on our new constructors:</p>\n<pre><code class=\"language-ocaml\"># let rec total = function\n  | Leaf -&gt; 0\n  | Node (l, x, r) -&gt; total l + x + total r\nval total : int tree -&gt; int = &lt;fun&gt;\n# let rec flip = function\n  | Leaf -&gt; Leaf\n  | Node (l, x, r) -&gt; Node (flip r, x, flip l)\nval flip : 'a tree -&gt; 'a tree = &lt;fun&gt;\n</code></pre>\n<p>Here, <code>flip</code> is polymorphic while <code>total</code> operates only on trees of type <code>int tree</code>. Let's try our new functions out:</p>\n<pre><code class=\"language-ocaml\"># let all = total t\nval all : int = 10\n# let flipped = flip t\nval flipped : int tree =\n  Node (Node (Leaf, 4, Node (Leaf, 3, Leaf)), 2, Node (Leaf, 1, Leaf))\n# t = flip flipped\n- : bool = true\n</code></pre>\n<p>Instead of integers, we could build a tree of key-value pairs. Then, if we\ninsist that the keys are unique and that a smaller key is always left of a\nlarger key, we have a data structure for dictionaries which performs better\nthan a simple list of pairs. It is known as a <em>binary search tree</em>:</p>\n<pre><code class=\"language-ocaml\"># let rec insert (k, v) = function\n  | Leaf -&gt; Node (Leaf, (k, v), Leaf)\n  | Node (l, (k', v'), r) -&gt;\n      if k &lt; k' then Node (insert (k, v) l, (k', v'), r) \n      else if k &gt; k' then Node (l, (k', v'), insert (k, v) r)\n      else Node (l, (k, v), r)\nval insert : 'a * 'b -&gt; ('a * 'b) tree -&gt; ('a * 'b) tree = &lt;fun&gt;\n</code></pre>\n<p>Similar functions can be written to look up values in a dictionary, to convert\na list of pairs to or from a tree dictionary and so on.</p>\n<h2 id=\"example-mathematical-expressions\">Example: mathematical expressions</h2>\n<p>We wish to represent simple mathematical expressions like <code>n * (x + y)</code> and\nmultiply them out symbolically to get <code>n * x + n * y</code>.</p>\n<p>Let's define a type for these expressions:</p>\n<pre><code class=\"language-ocaml\">type expr =\n  | Plus of expr * expr        (* a + b *)\n  | Minus of expr * expr       (* a - b *)\n  | Times of expr * expr       (* a * b *)\n  | Divide of expr * expr      (* a / b *)\n  | Var of string              (* &quot;x&quot;, &quot;y&quot;, etc. *)\n</code></pre>\n<p>The expression <code>n * (x + y)</code> would be written:</p>\n<pre><code class=\"language-ocaml\"># Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;))\n- : expr = Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;))\n</code></pre>\n<p>Let's write a function which prints out <code>Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;))</code> as something more like <code>n * (x + y)</code>.</p>\n<pre><code class=\"language-ocaml\"># let rec to_string e =\n  match e with\n  | Plus (left, right) -&gt;\n     &quot;(&quot; ^ to_string left ^ &quot; + &quot; ^ to_string right ^ &quot;)&quot;\n  | Minus (left, right) -&gt;\n     &quot;(&quot; ^ to_string left ^ &quot; - &quot; ^ to_string right ^ &quot;)&quot;\n  | Times (left, right) -&gt;\n   &quot;(&quot; ^ to_string left ^ &quot; * &quot; ^ to_string right ^ &quot;)&quot;\n  | Divide (left, right) -&gt;\n   &quot;(&quot; ^ to_string left ^ &quot; / &quot; ^ to_string right ^ &quot;)&quot;\n  | Var v -&gt; v\nval to_string : expr -&gt; string = &lt;fun&gt;\n# let print_expr e =\n  print_endline (to_string e)\nval print_expr : expr -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>(The <code>^</code> operator concatenates strings). We separate the function into two so\nthat our <code>to_string</code> function is usable in other contexts. Here's the\n<code>print_expr</code> function in action:</p>\n<pre><code class=\"language-ocaml\"># print_expr (Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;)))\n(n * (x + y))\n- : unit = ()\n</code></pre>\n<p>We can write a function to multiply out expressions of the form <code>n * (x + y)</code>\nor <code>(x + y) * n</code> and for this we will use a nested pattern:</p>\n<pre><code class=\"language-ocaml\"># let rec multiply_out e =\n  match e with\n  | Times (e1, Plus (e2, e3)) -&gt;\n     Plus (Times (multiply_out e1, multiply_out e2),\n           Times (multiply_out e1, multiply_out e3))\n  | Times (Plus (e1, e2), e3) -&gt;\n     Plus (Times (multiply_out e1, multiply_out e3),\n           Times (multiply_out e2, multiply_out e3))\n  | Plus (left, right) -&gt;\n     Plus (multiply_out left, multiply_out right)\n  | Minus (left, right) -&gt;\n     Minus (multiply_out left, multiply_out right)\n  | Times (left, right) -&gt;\n     Times (multiply_out left, multiply_out right)\n  | Divide (left, right) -&gt;\n     Divide (multiply_out left, multiply_out right)\n  | Var v -&gt; Var v\nval multiply_out : expr -&gt; expr = &lt;fun&gt;\n</code></pre>\n<p>Here it is in action:</p>\n<pre><code class=\"language-ocaml\"># print_expr (multiply_out (Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;))))\n((n * x) + (n * y))\n- : unit = ()\n</code></pre>\n<p>How does the <code>multiply_out</code> function work? The key is in the first two\npatterns. The first pattern is <code>Times (e1, Plus (e2, e3))</code> which matches\nexpressions of the form <code>e1 * (e2 + e3)</code>. Now look at the right hand side of\nthis first pattern match, and convince yourself that it is the equivalent of\n<code>(e1 * e2) + (e1 * e3)</code>. The second pattern does the same thing, except for\nexpressions of the form <code>(e1 + e2) * e3</code>.</p>\n<p>The remaining patterns don't change the form of the expression, but they\ncrucially <em>do</em> call the <code>multiply_out</code> function recursively on their\nsubexpressions. This ensures that all subexpressions within the expression get\nmultiplied out too (if you only wanted to multiply out the very top level of an\nexpression, then you could replace all the remaining patterns with a simple <code>e -&gt; e</code> rule).</p>\n<p>Can we do the reverse (i.e. factorizing out common subexpressions)? We can!\n(But it's a bit more complicated). The following version only works for the top\nlevel expression. You could certainly extend it to cope with all levels of an\nexpression and more complex cases:</p>\n<pre><code class=\"language-ocaml\"># let factorize e =\n  match e with\n  | Plus (Times (e1, e2), Times (e3, e4)) when e1 = e3 -&gt;\n     Times (e1, Plus (e2, e4))\n  | Plus (Times (e1, e2), Times (e3, e4)) when e2 = e4 -&gt;\n     Times (Plus (e1, e3), e4)\n  | e -&gt; e\nval factorize : expr -&gt; expr = &lt;fun&gt;\n# factorize (Plus (Times (Var &quot;n&quot;, Var &quot;x&quot;),\n                   Times (Var &quot;n&quot;, Var &quot;y&quot;)))\n- : expr = Times (Var &quot;n&quot;, Plus (Var &quot;x&quot;, Var &quot;y&quot;))\n</code></pre>\n<p>The factorize function above introduces another couple of features. You can add\nwhat are known as <em>guards</em> to each pattern match. A guard is the conditional\nwhich follows the <code>when</code>, and it means that the pattern match only happens if\nthe pattern matches <em>and</em> the condition in the <code>when</code>-clause is satisfied.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match value with\n| pattern [ when condition ] -&gt; result\n| pattern [ when condition ] -&gt; result\n  ...\n</code></pre>\n<p>The second feature is the <code>=</code> operator which tests for &quot;structural equality&quot;\nbetween two expressions. That means it goes recursively into each expression\nchecking they're exactly the same at all levels down.</p>\n<p>Another feature which is useful when we build more complicated nested patterns\nis the <code>as</code> keyword, which can be used to name part of an expression. For\nexample:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">Name (&quot;/DeviceGray&quot; | &quot;/DeviceRGB&quot; | &quot;/DeviceCMYK&quot;) as n -&gt; n\n\nNode (l, ((k, _) as pair), r) when k = k' -&gt; Some pair\n</code></pre>\n<h2 id=\"mutually-recursive-data-types\">Mutually recursive data types</h2>\n<p>Data types may be mutually-recursive when declared with <code>and</code>:</p>\n<pre><code class=\"language-ocaml\">type t = A | B of t' and t' = C | D of t\n</code></pre>\n<p>One common use for mutually-recursive data types is to <em>decorate</em> a tree, by\nadding information to each node using mutually-recursive types, one of which is\na tuple or record. For example:</p>\n<pre><code class=\"language-ocaml\">type t' = Int of int | Add of t * t\nand t = {annotation : string; data : t'}\n</code></pre>\n<p>Values of such mutually-recursive data type are manipulated by accompanying\nmutually-recursive functions:</p>\n<pre><code class=\"language-ocaml\"># let rec sum_t' = function\n  | Int i -&gt; i\n  | Add (i, i') -&gt; sum_t i + sum_t i'\n  and sum_t {annotation; data} =\n    if annotation &lt;&gt; &quot;&quot; then Printf.printf &quot;Touching %s\\n&quot; annotation;\n    sum_t' data\nval sum_t' : t' -&gt; int = &lt;fun&gt;\nval sum_t : t -&gt; int = &lt;fun&gt;\n</code></pre>\n<h2 id=\"a-note-on-tupled-constructors\">A note on tupled constructors</h2>\n<p>There is a difference between <code>RGB of float * float * float</code> and `RGB of (float</p>\n<ul>\n<li>float * float)`. The first is a constructor with three pieces of data\nassociated with it, the second is a constructor with one tuple associated with\nit. There are two ways this matters: the memory layout differs between the two\n(a tuple is an extra indirection), and the ability to create or match using a\ntuple:\n</li>\n</ul>\n<pre><code class=\"language-ocaml\"># type t = T of int * int\ntype t = T of int * int\n\n# type t2 = T2 of (int * int)\ntype t2 = T2 of (int * int)\n\n# let pair = (1, 2)\nval pair : int * int = (1, 2)\n\n# T2 pair\n- : t2 = T2 (1, 2)\n\n# T pair\nLine 1, characters 1-7:\nError: The constructor T expects 2 argument(s),\n       but is applied here to 1 argument(s)\n\n# match T2 (1, 2) with T2 x -&gt; fst x\n- : int = 1\n\n# match T (1, 2) with T x -&gt; fst x\nLine 1, characters 21-24:\nError: The constructor T expects 2 argument(s),\n       but is applied here to 1 argument(s)\n</code></pre>\n<p>Note, however, that OCaml allows us to use the always-matching <code>_</code> in either\nversion:</p>\n<pre><code class=\"language-ocaml\"># match T2 (1, 2) with T2 _ -&gt; 0\n- : int = 0\n\n# match T (1, 2) with T _ -&gt; 0\n- : int = 0\n</code></pre>\n<h2 id=\"types-and-modules\">Types and modules</h2>\n<p>Often, a module will provide a single type and operations on that type. For\nexample, a module for a file format like PNG might have the following <code>png.mli</code>\ninterface:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">type t\n\nval of_file : filename -&gt; t\n\nval to_file : t -&gt; filename -&gt; unit\n\nval flip_vertical : t -&gt; t\n\nval flip_horizontal : t -&gt; t\n\nval rotate : float -&gt; t -&gt; t\n</code></pre>\n<p>Traditionally, we name the type <code>t</code>. In the program using this library, it\nwould then be <code>Png.t</code> which is shorter, reads better than <code>Png.png</code>, and avoids\nconfusion if the library also defines other types.</p>\n"},{"title":"Functional Programming","slug":"functional-programming","description":"A guide to functional programming in OCaml\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## What is functional programming?\nWe've got quite far into the tutorial, yet we haven't really considered\n**functional programming**. All of the features given so far - rich data\ntypes, pattern matching, type inference, nested functions - you could\nimagine could exist in a kind of \"super C\" language. These are Cool\nFeatures certainly, and make your code concise, easy to read, and have\nfewer bugs, but they actually have very little to do with functional\nprogramming. In fact my argument is going to be that the reason that\nfunctional languages are so great is *not* because of functional\nprogramming, but because we've been stuck with C-like languages for\nyears and in the meantime the cutting edge of programming has moved on\nconsiderably. So while we were writing\n`struct { int type; union { ... } }` for the umpteenth time, ML and\nHaskell programmers had safe variants and pattern matching on datatypes.\nWhile we were being careful to `free` all our `malloc`s, there have been\nlanguages with garbage collectors able to outperform hand-coding since\nthe 80s.\n\nWell, after that I'd better tell you what functional programming is\nanyhow.\n\nThe basic, and not very enlightening definition is this: in a\n**functional language**, **functions** are first-class citizens.\n\nLot of words there that don't really make much sense. So let's have an\nexample:\n\n```ocaml\n# let double x = x * 2 in\n    List.map double [1; 2; 3]\n- : int list = [2; 4; 6]\n```\n\nIn this example, I've first defined a nested function called `double`\nwhich takes an argument `x` and returns `x * 2`. Then `map` calls\n`double` on each element of the given list (`[1; 2; 3]`) to produce the\nresult: a list with each number doubled.\n\n`map` is known as a **higher-order function** (HOF). Higher-order\nfunctions are just a fancy way of saying that the function takes a\nfunction as one of its arguments. So far so simple. If you're familiar\nwith C/C++ then this looks like passing a function pointer around.\n\n**Closures** are functions which carry around some of the \"environment\"\nin which they were defined. In particular, a closure can reference\nvariables which were available at the point of its definition. Let's\ngeneralise the function above so that now we can take any list of\nintegers and multiply each element by an arbitrary value `n`:\n\n```ocaml\n# let multiply n list =\n    let f x = n * x in\n      List.map f list\nval multiply : int -> int list -> int list = <fun>\n```\n\nHence:\n\n```ocaml\n# multiply 2 [1; 2; 3]\n- : int list = [2; 4; 6]\n# multiply 5 [1; 2; 3]\n- : int list = [5; 10; 15]\n```\n\nThe important point to note about the `multiply` function is the nested\nfunction `f`. This is a closure. Look at how `f` uses the value of `n`\nwhich isn't actually passed as an explicit argument to `f`. Instead `f`\npicks it up from its environment - it's an argument to the `multiply`\nfunction and hence available within this function.\n\nThis might sound straightforward, but let's look a bit closer at that\ncall to map: `List.map f list`.\n\n`map` is defined in the `List` module, far away from the current code.\nIn other words, we're passing `f` into a module defined \"a long time\nago, in a galaxy far far away\". For all we know that code might pass `f`\nto other modules, or save a reference to `f` somewhere and call it\nlater. Whether it does this or not, the closure will ensure that `f`\nalways has access back to its parental environment, and to `n`.\n\nHere's a real example from lablgtk. This is actually a method on a class\n(we haven't talked about classes and objects yet, but just think of it\nas a function definition for now).\n\n<!-- $MDX skip -->\n```ocaml\nclass html_skel obj = object (self)\n  ...\n  ...\n  method save_to_channel chan =\n    let receiver_fn content =\n      output_string chan content;\n      true\n    in\n      save obj receiver_fn\n  ...\nend\n```\nFirst of all you need to know that the `save` function called at the end\nof the method takes as its second argument a function (`receiver_fn`).\nIt repeatedly calls `receiver_fn` with snippets of text from the widget\nthat it's trying to save.\n\nNow look at the definition of `receiver_fn`. This function is a closure\nalright because it keeps a reference to `chan` from its environment.\n\n## Partial function applications and currying\nLet's define a plus function which just adds two integers:\n\n```ocaml\n# let plus a b =\n    a + b\nval plus : int -> int -> int = <fun>\n```\nSome questions for people asleep at the back of the class.\n\n1. What is `plus`?\n1. What is `plus 2 3`?\n1. What is `plus 2`?\n\nQuestion 1 is easy. `plus` is a function, it takes two arguments which\nare integers and it returns an integer. We write its type like this:\n\n```ocaml\n# plus\n- : int -> int -> int = <fun>\n```\nQuestion 2 is even easier. `plus 2 3` is a number, the integer `5`. We\nwrite its value and type like this:\n\n```ocaml\n# 5\n- : int = 5\n```\nBut what about question 3? It looks like `plus 2` is a mistake, a bug.\nIn fact, however, it isn't. If we type this into the OCaml toplevel, it\ntells us:\n\n```ocaml\n# plus 2\n- : int -> int = <fun>\n```\nThis isn't an error. It's telling us that `plus 2` is in fact a\n*function*, which takes an `int` and returns an `int`. What sort of\nfunction is this? We experiment by first of all giving this mysterious\nfunction a name (`f`), and then trying it out on a few integers to see\nwhat it does:\n\n```ocaml\n# let f = plus 2\nval f : int -> int = <fun>\n# f 10\n- : int = 12\n# f 15\n- : int = 17\n# f 99\n- : int = 101\n```\nIn engineering this is sufficient [proof by example](humor_proof.html)\nfor us to state that `plus 2` is the function which adds 2 to things.\n\nGoing back to the original definition, let's \"fill in\" the first\nargument (`a`) setting it to 2 to get:\n\n<!-- $MDX skip -->\n```ocaml\nlet plus 2 b =       (* This is not real OCaml code! *)\n  2 + b\n```\nYou can kind of see, I hope, why `plus 2` is the function which adds 2\nto things.\n\nLooking at the types of these expressions we may be able to see some\nrationale for the strange `->` arrow notation used for function types:\n\n```ocaml\n# plus\n- : int -> int -> int = <fun>\n# plus 2\n- : int -> int = <fun>\n# plus 2 3\n- : int = 5\n```\nThis process is called **currying** (or perhaps it's called\n**uncurrying**, I never was really sure which was which). It is called\nthis after Haskell Curry who did some important stuff related to the\nlambda calculus. Since I'm trying to avoid entering into the mathematics\nbehind OCaml because that makes for a very boring and irrelevant\ntutorial, I won't go any further on the subject. You can find much more\ninformation about currying if it interests you by [doing a search on\nGoogle](https://www.google.com/search?q=currying \"https://www.google.com/search?q=currying\").\n\nRemember our `double` and `multiply` functions from earlier on?\n`multiply` was defined as this:\n\n```ocaml\n# let multiply n list =\n  let f x = n * x in\n    List.map f list\nval multiply : int -> int list -> int list = <fun>\n```\nWe can now define `double`, `triple` &amp;c functions very easily just like\nthis:\n\n```ocaml\n# let double = multiply 2\nval double : int list -> int list = <fun>\n# let triple = multiply 3\nval triple : int list -> int list = <fun>\n```\nThey really are functions, look:\n\n```ocaml\n# double [1; 2; 3]\n- : int list = [2; 4; 6]\n# triple [1; 2; 3]\n- : int list = [3; 6; 9]\n```\n\nYou can also use partial application directly (without the intermediate\n`f` function) like this:\n\n```ocaml\n# let multiply n = List.map (( * ) n)\nval multiply : int -> int list -> int list = <fun>\n# let double = multiply 2\nval double : int list -> int list = <fun>\n# let triple = multiply 3\nval triple : int list -> int list = <fun>\n# double [1; 2; 3]\n- : int list = [2; 4; 6]\n# triple [1; 2; 3]\n- : int list = [3; 6; 9]\n```\n\nIn the example above, `(( * ) n)` is the partial application of the `( * )`\n(times) function. Note the extra spaces needed so that OCaml doesn't\nthink `(*` starts a comment.\n\nYou can put infix operators into brackets to make functions. Here's an\nidentical definition of the `plus` function as before:\n\n```ocaml\n# let plus = ( + )\nval plus : int -> int -> int = <fun>\n# plus 2 3\n- : int = 5\n```\nHere's some more currying fun:\n\n```ocaml\n# List.map (plus 2) [1; 2; 3]\n- : int list = [3; 4; 5]\n# let list_of_functions = List.map plus [1; 2; 3]\nval list_of_functions : (int -> int) list = [<fun>; <fun>; <fun>]\n```\n\n##  What is functional programming good for?\nFunctional programming, like any good programming technique, is a useful\ntool in your armoury for solving some classes of problems. It's very\ngood for callbacks, which have multiple uses from GUIs through to\nevent-driven loops. It's great for expressing generic algorithms.\n`List.map` is really a generic algorithm for applying functions over any\ntype of list. Similarly you can define generic functions over trees.\nCertain types of numerical problems can be solved more quickly with\nfunctional programming (for example, numerically calculating the\nderivative of a mathematical function).\n\n##  Pure and impure functional programming\nA **pure function** is one without any **side-effects**. A side-effect\nreally means that the function keeps some sort of hidden state inside\nit. `strlen` is a good example of a pure function in C. If you call\n`strlen` with the same string, it always returns the same length. The\noutput of `strlen` (the length) only depends on the inputs (the string)\nand nothing else. Many functions in C are, unfortunately, impure. For\nexample, `malloc` - if you call it with the same number, it certainly\nwon't return the same pointer to you. `malloc`, of course, relies on a\nhuge amount of hidden internal state (objects allocated on the heap, the\nallocation method in use, grabbing pages from the operating system,\netc.).\n\nML-derived languages like OCaml are \"mostly pure\". They allow\nside-effects through things like references and arrays, but by and large\nmost of the code you'll write will be pure functional because they\nencourage this thinking. Haskell, another functional language, is pure\nfunctional. OCaml is therefore more practical because writing impure\nfunctions is sometimes useful.\n\nThere are various theoretical advantages of having pure functions. One\nadvantage is that if a function is pure, then if it is called several\ntimes with the same arguments, the compiler only needs to actually call\nthe function once. A good example in C is:\n\n```C\nfor (i = 0; i < strlen (s); ++i)\n  {\n    // Do something which doesn't affect s.\n  }\n```\nIf naively compiled, this loop is O(n<sup>2</sup>) because `strlen (s)`\nis called each time and `strlen` needs to iterate over the whole of `s`.\nIf the compiler is smart enough to work out that `strlen` is pure\nfunctional *and* that `s` is not updated in the loop, then it can remove\nthe redundant extra calls to `strlen` and make the loop O(n). Do\ncompilers really do this? In the case of `strlen` yes, in other cases,\nprobably not.\n\nConcentrating on writing small pure functions allows you to construct\nreusable code using a bottom-up approach, testing each small function as\nyou go along. The current fashion is for carefully planning your\nprograms using a top-down approach, but in the author's opinion this\noften results in projects failing.\n\n##  Strictness vs laziness\nC-derived and ML-derived languages are strict. Haskell and Miranda are\nnon-strict, or lazy, languages. OCaml is strict by default but allows a\nlazy style of programming where it is needed.\n\nIn a strict language, arguments to functions are always evaluated first,\nand the results are then passed to the function. For example in a strict\nlanguage, the call `give_me_a_three (1/0)` is always going to result in\na divide-by-zero error:\n\n```ocaml\n# let give_me_a_three _ = 3\nval give_me_a_three : 'a -> int = <fun>\n# give_me_a_three (1/0)\nException: Division_by_zero.\n```\n\nIf you've programmed in any conventional language, this is just how\nthings work, and you'd be surprised that things could work any other\nway.\n\nIn a lazy language, something stranger happens. Arguments to functions\nare only evaluated if the function actually uses them. Remember that the\n`give_me_a_three` function throws away its argument and always returns a\n3? Well in a lazy language, the above call would *not* fail because\n`give_me_a_three` never looks at its first argument, so the first\nargument is never evaluated, so the division by zero doesn't happen.\n\nLazy languages also let you do really odd things like defining an\ninfinitely long list. Provided you don't actually try to iterate over\nthe whole list this works (say, instead, that you just try to fetch the\nfirst 10 elements).\n\nOCaml is a strict language, but has a `Lazy` module that lets you write\nlazy expressions. Here's an example. First we create a lazy expression\nfor `1/0`:\n\n```ocaml\n# let lazy_expr = lazy (1 / 0)\nval lazy_expr : int lazy_t = <lazy>\n```\n\nNotice the type of this lazy expression is `int lazy_t`.\n\nBecause `give_me_a_three` takes `'a` (any type) we can pass this lazy\nexpression into the function:\n\n```ocaml\n# give_me_a_three lazy_expr\n- : int = 3\n```\n\nTo evaluate a lazy expression, you must use the `Lazy.force` function:\n\n```ocaml\n# Lazy.force lazy_expr\nException: Division_by_zero.\n```\n\n##  Boxed vs. unboxed types\nOne term which you'll hear a lot when discussing functional languages is\n\"boxed\". I was very confused when I first heard this term, but in fact\nthe distinction between boxed and unboxed types is quite simple if\nyou've used C, C++ or Java before (in Perl, everything is boxed).\n\nThe way to think of a boxed object is to think of an object which has\nbeen allocated on the heap using `malloc` in C (or equivalently `new` in\nC++), and/or is referred to through a pointer. Take a look at this\nexample C program:\n\n```C\n#include <stdio.h>\n\nvoid\nprintit (int *ptr)\n{\n  printf (\"the number is %d\\n\", *ptr);\n}\n\nvoid\nmain ()\n{\n  int a = 3;\n  int *p = &a;\n\n  printit (p);\n}\n```\n\nThe variable `a` is allocated on the stack, and is quite definitely\nunboxed.\n\nThe function `printit` takes a boxed integer and prints it.\n\nThe diagram below shows an array of unboxed (top) vs. boxed (below)\nintegers:\n\n![Boxed Array](/tutorials/boxedarray.png \"\")\n\nNo prizes for guessing that the array of unboxed integers is much faster\nthan the array of boxed integers. In addition, because there are fewer\nseparate allocations, garbage collection is much faster and simpler on\nthe array of unboxed objects.\n\nIn C or C++ you should have no problems constructing either of the two\ntypes of arrays above. In Java, you have two types, `int` which is\nunboxed and `Integer` which is boxed, and hence considerably less\nefficient. In OCaml, the basic types are all unboxed.\n\n## Aliases for function names and arguments\nIt's possible to use this as a neat trick to save typing: aliasing function\nnames, and function arguments.\n\nAlthough we haven't looked at object-oriented programming (that's the\nsubject for the [\"Objects\" section](objects.html)),\nhere's an example from OCamlNet of an\naliased function call. All you need to know is that\n`cgi # output # output_string \"string\"` is a method call, similar to\n`cgi.output().output_string (\"string\")` in Java.\n\n<!-- $MDX skip -->\n```ocaml\nlet begin_page cgi title =\n  let out = cgi # output # output_string in\n  out \"<html>\\n\";\n  out \"<head>\\n\";\n  out (\"<title>\" ^ text title ^ \"</title>\\n\");\n  out (\"<style type=\\\"text/css\\\">\\n\");\n  out \"body { background: white; color: black; }\\n\";\n  out \"</style>\\n\";\n  out \"</head>\\n\";\n  out \"<body>\\n\";\n  out (\"<h1>\" ^ text title ^ \"</h1>\\n\")\n```\n\nThe `let out = ... ` is a partial function application for that method\ncall (partial, because the string parameter hasn't been applied). `out`\nis therefore a function, which takes a string parameter.\n\n<!-- $MDX skip -->\n```ocaml\nout \"<html>\\n\";\n```\n\nis equivalent to:\n<!-- $MDX skip -->\n```ocaml\ncgi # output # output_string \"<html>\\n\";\n```\n\nWe saved ourselves a lot of typing there.\n\nWe can also add arguments. This alternative definition of `print_string`\ncan be thought of as a kind of alias for a function name plus arguments:\n\n<!-- $MDX skip -->\n```ocaml\nlet print_string = output_string stdout\n```\n\n`output_string` takes two arguments (a channel and a string), but since\nwe have only supplied one, it is partially applied. So `print_string` is\na function, expecting one string argument.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#what-is-functional-programming\">What is functional programming?</a>\n</li>\n<li><a href=\"#partial-function-applications-and-currying\">Partial function applications and currying</a>\n</li>\n<li><a href=\"#what-is-functional-programming-good-for\">What is functional programming good for?</a>\n</li>\n<li><a href=\"#pure-and-impure-functional-programming\">Pure and impure functional programming</a>\n</li>\n<li><a href=\"#strictness-vs-laziness\">Strictness vs laziness</a>\n</li>\n<li><a href=\"#boxed-vs-unboxed-types\">Boxed vs. unboxed types</a>\n</li>\n<li><a href=\"#aliases-for-function-names-and-arguments\">Aliases for function names and arguments</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"what-is-functional-programming\">What is functional programming?</h2>\n<p>We've got quite far into the tutorial, yet we haven't really considered\n<strong>functional programming</strong>. All of the features given so far - rich data\ntypes, pattern matching, type inference, nested functions - you could\nimagine could exist in a kind of &quot;super C&quot; language. These are Cool\nFeatures certainly, and make your code concise, easy to read, and have\nfewer bugs, but they actually have very little to do with functional\nprogramming. In fact my argument is going to be that the reason that\nfunctional languages are so great is <em>not</em> because of functional\nprogramming, but because we've been stuck with C-like languages for\nyears and in the meantime the cutting edge of programming has moved on\nconsiderably. So while we were writing\n<code>struct { int type; union { ... } }</code> for the umpteenth time, ML and\nHaskell programmers had safe variants and pattern matching on datatypes.\nWhile we were being careful to <code>free</code> all our <code>malloc</code>s, there have been\nlanguages with garbage collectors able to outperform hand-coding since\nthe 80s.</p>\n<p>Well, after that I'd better tell you what functional programming is\nanyhow.</p>\n<p>The basic, and not very enlightening definition is this: in a\n<strong>functional language</strong>, <strong>functions</strong> are first-class citizens.</p>\n<p>Lot of words there that don't really make much sense. So let's have an\nexample:</p>\n<pre><code class=\"language-ocaml\"># let double x = x * 2 in\n    List.map double [1; 2; 3]\n- : int list = [2; 4; 6]\n</code></pre>\n<p>In this example, I've first defined a nested function called <code>double</code>\nwhich takes an argument <code>x</code> and returns <code>x * 2</code>. Then <code>map</code> calls\n<code>double</code> on each element of the given list (<code>[1; 2; 3]</code>) to produce the\nresult: a list with each number doubled.</p>\n<p><code>map</code> is known as a <strong>higher-order function</strong> (HOF). Higher-order\nfunctions are just a fancy way of saying that the function takes a\nfunction as one of its arguments. So far so simple. If you're familiar\nwith C/C++ then this looks like passing a function pointer around.</p>\n<p><strong>Closures</strong> are functions which carry around some of the &quot;environment&quot;\nin which they were defined. In particular, a closure can reference\nvariables which were available at the point of its definition. Let's\ngeneralise the function above so that now we can take any list of\nintegers and multiply each element by an arbitrary value <code>n</code>:</p>\n<pre><code class=\"language-ocaml\"># let multiply n list =\n    let f x = n * x in\n      List.map f list\nval multiply : int -&gt; int list -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Hence:</p>\n<pre><code class=\"language-ocaml\"># multiply 2 [1; 2; 3]\n- : int list = [2; 4; 6]\n# multiply 5 [1; 2; 3]\n- : int list = [5; 10; 15]\n</code></pre>\n<p>The important point to note about the <code>multiply</code> function is the nested\nfunction <code>f</code>. This is a closure. Look at how <code>f</code> uses the value of <code>n</code>\nwhich isn't actually passed as an explicit argument to <code>f</code>. Instead <code>f</code>\npicks it up from its environment - it's an argument to the <code>multiply</code>\nfunction and hence available within this function.</p>\n<p>This might sound straightforward, but let's look a bit closer at that\ncall to map: <code>List.map f list</code>.</p>\n<p><code>map</code> is defined in the <code>List</code> module, far away from the current code.\nIn other words, we're passing <code>f</code> into a module defined &quot;a long time\nago, in a galaxy far far away&quot;. For all we know that code might pass <code>f</code>\nto other modules, or save a reference to <code>f</code> somewhere and call it\nlater. Whether it does this or not, the closure will ensure that <code>f</code>\nalways has access back to its parental environment, and to <code>n</code>.</p>\n<p>Here's a real example from lablgtk. This is actually a method on a class\n(we haven't talked about classes and objects yet, but just think of it\nas a function definition for now).</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">class html_skel obj = object (self)\n  ...\n  ...\n  method save_to_channel chan =\n    let receiver_fn content =\n      output_string chan content;\n      true\n    in\n      save obj receiver_fn\n  ...\nend\n</code></pre>\n<p>First of all you need to know that the <code>save</code> function called at the end\nof the method takes as its second argument a function (<code>receiver_fn</code>).\nIt repeatedly calls <code>receiver_fn</code> with snippets of text from the widget\nthat it's trying to save.</p>\n<p>Now look at the definition of <code>receiver_fn</code>. This function is a closure\nalright because it keeps a reference to <code>chan</code> from its environment.</p>\n<h2 id=\"partial-function-applications-and-currying\">Partial function applications and currying</h2>\n<p>Let's define a plus function which just adds two integers:</p>\n<pre><code class=\"language-ocaml\"># let plus a b =\n    a + b\nval plus : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Some questions for people asleep at the back of the class.</p>\n<ol>\n<li>What is <code>plus</code>?\n</li>\n<li>What is <code>plus 2 3</code>?\n</li>\n<li>What is <code>plus 2</code>?\n</li>\n</ol>\n<p>Question 1 is easy. <code>plus</code> is a function, it takes two arguments which\nare integers and it returns an integer. We write its type like this:</p>\n<pre><code class=\"language-ocaml\"># plus\n- : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Question 2 is even easier. <code>plus 2 3</code> is a number, the integer <code>5</code>. We\nwrite its value and type like this:</p>\n<pre><code class=\"language-ocaml\"># 5\n- : int = 5\n</code></pre>\n<p>But what about question 3? It looks like <code>plus 2</code> is a mistake, a bug.\nIn fact, however, it isn't. If we type this into the OCaml toplevel, it\ntells us:</p>\n<pre><code class=\"language-ocaml\"># plus 2\n- : int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>This isn't an error. It's telling us that <code>plus 2</code> is in fact a\n<em>function</em>, which takes an <code>int</code> and returns an <code>int</code>. What sort of\nfunction is this? We experiment by first of all giving this mysterious\nfunction a name (<code>f</code>), and then trying it out on a few integers to see\nwhat it does:</p>\n<pre><code class=\"language-ocaml\"># let f = plus 2\nval f : int -&gt; int = &lt;fun&gt;\n# f 10\n- : int = 12\n# f 15\n- : int = 17\n# f 99\n- : int = 101\n</code></pre>\n<p>In engineering this is sufficient <a href=\"humor_proof.html\">proof by example</a>\nfor us to state that <code>plus 2</code> is the function which adds 2 to things.</p>\n<p>Going back to the original definition, let's &quot;fill in&quot; the first\nargument (<code>a</code>) setting it to 2 to get:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let plus 2 b =       (* This is not real OCaml code! *)\n  2 + b\n</code></pre>\n<p>You can kind of see, I hope, why <code>plus 2</code> is the function which adds 2\nto things.</p>\n<p>Looking at the types of these expressions we may be able to see some\nrationale for the strange <code>-&gt;</code> arrow notation used for function types:</p>\n<pre><code class=\"language-ocaml\"># plus\n- : int -&gt; int -&gt; int = &lt;fun&gt;\n# plus 2\n- : int -&gt; int = &lt;fun&gt;\n# plus 2 3\n- : int = 5\n</code></pre>\n<p>This process is called <strong>currying</strong> (or perhaps it's called\n<strong>uncurrying</strong>, I never was really sure which was which). It is called\nthis after Haskell Curry who did some important stuff related to the\nlambda calculus. Since I'm trying to avoid entering into the mathematics\nbehind OCaml because that makes for a very boring and irrelevant\ntutorial, I won't go any further on the subject. You can find much more\ninformation about currying if it interests you by <a href=\"https://www.google.com/search?q=currying\" title=\"https://www.google.com/search?q=currying\">doing a search on\nGoogle</a>.</p>\n<p>Remember our <code>double</code> and <code>multiply</code> functions from earlier on?\n<code>multiply</code> was defined as this:</p>\n<pre><code class=\"language-ocaml\"># let multiply n list =\n  let f x = n * x in\n    List.map f list\nval multiply : int -&gt; int list -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>We can now define <code>double</code>, <code>triple</code> &amp;c functions very easily just like\nthis:</p>\n<pre><code class=\"language-ocaml\"># let double = multiply 2\nval double : int list -&gt; int list = &lt;fun&gt;\n# let triple = multiply 3\nval triple : int list -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>They really are functions, look:</p>\n<pre><code class=\"language-ocaml\"># double [1; 2; 3]\n- : int list = [2; 4; 6]\n# triple [1; 2; 3]\n- : int list = [3; 6; 9]\n</code></pre>\n<p>You can also use partial application directly (without the intermediate\n<code>f</code> function) like this:</p>\n<pre><code class=\"language-ocaml\"># let multiply n = List.map (( * ) n)\nval multiply : int -&gt; int list -&gt; int list = &lt;fun&gt;\n# let double = multiply 2\nval double : int list -&gt; int list = &lt;fun&gt;\n# let triple = multiply 3\nval triple : int list -&gt; int list = &lt;fun&gt;\n# double [1; 2; 3]\n- : int list = [2; 4; 6]\n# triple [1; 2; 3]\n- : int list = [3; 6; 9]\n</code></pre>\n<p>In the example above, <code>(( * ) n)</code> is the partial application of the <code>( * )</code>\n(times) function. Note the extra spaces needed so that OCaml doesn't\nthink <code>(*</code> starts a comment.</p>\n<p>You can put infix operators into brackets to make functions. Here's an\nidentical definition of the <code>plus</code> function as before:</p>\n<pre><code class=\"language-ocaml\"># let plus = ( + )\nval plus : int -&gt; int -&gt; int = &lt;fun&gt;\n# plus 2 3\n- : int = 5\n</code></pre>\n<p>Here's some more currying fun:</p>\n<pre><code class=\"language-ocaml\"># List.map (plus 2) [1; 2; 3]\n- : int list = [3; 4; 5]\n# let list_of_functions = List.map plus [1; 2; 3]\nval list_of_functions : (int -&gt; int) list = [&lt;fun&gt;; &lt;fun&gt;; &lt;fun&gt;]\n</code></pre>\n<h2 id=\"what-is-functional-programming-good-for\">What is functional programming good for?</h2>\n<p>Functional programming, like any good programming technique, is a useful\ntool in your armoury for solving some classes of problems. It's very\ngood for callbacks, which have multiple uses from GUIs through to\nevent-driven loops. It's great for expressing generic algorithms.\n<code>List.map</code> is really a generic algorithm for applying functions over any\ntype of list. Similarly you can define generic functions over trees.\nCertain types of numerical problems can be solved more quickly with\nfunctional programming (for example, numerically calculating the\nderivative of a mathematical function).</p>\n<h2 id=\"pure-and-impure-functional-programming\">Pure and impure functional programming</h2>\n<p>A <strong>pure function</strong> is one without any <strong>side-effects</strong>. A side-effect\nreally means that the function keeps some sort of hidden state inside\nit. <code>strlen</code> is a good example of a pure function in C. If you call\n<code>strlen</code> with the same string, it always returns the same length. The\noutput of <code>strlen</code> (the length) only depends on the inputs (the string)\nand nothing else. Many functions in C are, unfortunately, impure. For\nexample, <code>malloc</code> - if you call it with the same number, it certainly\nwon't return the same pointer to you. <code>malloc</code>, of course, relies on a\nhuge amount of hidden internal state (objects allocated on the heap, the\nallocation method in use, grabbing pages from the operating system,\netc.).</p>\n<p>ML-derived languages like OCaml are &quot;mostly pure&quot;. They allow\nside-effects through things like references and arrays, but by and large\nmost of the code you'll write will be pure functional because they\nencourage this thinking. Haskell, another functional language, is pure\nfunctional. OCaml is therefore more practical because writing impure\nfunctions is sometimes useful.</p>\n<p>There are various theoretical advantages of having pure functions. One\nadvantage is that if a function is pure, then if it is called several\ntimes with the same arguments, the compiler only needs to actually call\nthe function once. A good example in C is:</p>\n<pre><code class=\"language-C\">for (i = 0; i &lt; strlen (s); ++i)\n  {\n    // Do something which doesn't affect s.\n  }\n</code></pre>\n<p>If naively compiled, this loop is O(n<sup>2</sup>) because <code>strlen (s)</code>\nis called each time and <code>strlen</code> needs to iterate over the whole of <code>s</code>.\nIf the compiler is smart enough to work out that <code>strlen</code> is pure\nfunctional <em>and</em> that <code>s</code> is not updated in the loop, then it can remove\nthe redundant extra calls to <code>strlen</code> and make the loop O(n). Do\ncompilers really do this? In the case of <code>strlen</code> yes, in other cases,\nprobably not.</p>\n<p>Concentrating on writing small pure functions allows you to construct\nreusable code using a bottom-up approach, testing each small function as\nyou go along. The current fashion is for carefully planning your\nprograms using a top-down approach, but in the author's opinion this\noften results in projects failing.</p>\n<h2 id=\"strictness-vs-laziness\">Strictness vs laziness</h2>\n<p>C-derived and ML-derived languages are strict. Haskell and Miranda are\nnon-strict, or lazy, languages. OCaml is strict by default but allows a\nlazy style of programming where it is needed.</p>\n<p>In a strict language, arguments to functions are always evaluated first,\nand the results are then passed to the function. For example in a strict\nlanguage, the call <code>give_me_a_three (1/0)</code> is always going to result in\na divide-by-zero error:</p>\n<pre><code class=\"language-ocaml\"># let give_me_a_three _ = 3\nval give_me_a_three : 'a -&gt; int = &lt;fun&gt;\n# give_me_a_three (1/0)\nException: Division_by_zero.\n</code></pre>\n<p>If you've programmed in any conventional language, this is just how\nthings work, and you'd be surprised that things could work any other\nway.</p>\n<p>In a lazy language, something stranger happens. Arguments to functions\nare only evaluated if the function actually uses them. Remember that the\n<code>give_me_a_three</code> function throws away its argument and always returns a\n3? Well in a lazy language, the above call would <em>not</em> fail because\n<code>give_me_a_three</code> never looks at its first argument, so the first\nargument is never evaluated, so the division by zero doesn't happen.</p>\n<p>Lazy languages also let you do really odd things like defining an\ninfinitely long list. Provided you don't actually try to iterate over\nthe whole list this works (say, instead, that you just try to fetch the\nfirst 10 elements).</p>\n<p>OCaml is a strict language, but has a <code>Lazy</code> module that lets you write\nlazy expressions. Here's an example. First we create a lazy expression\nfor <code>1/0</code>:</p>\n<pre><code class=\"language-ocaml\"># let lazy_expr = lazy (1 / 0)\nval lazy_expr : int lazy_t = &lt;lazy&gt;\n</code></pre>\n<p>Notice the type of this lazy expression is <code>int lazy_t</code>.</p>\n<p>Because <code>give_me_a_three</code> takes <code>'a</code> (any type) we can pass this lazy\nexpression into the function:</p>\n<pre><code class=\"language-ocaml\"># give_me_a_three lazy_expr\n- : int = 3\n</code></pre>\n<p>To evaluate a lazy expression, you must use the <code>Lazy.force</code> function:</p>\n<pre><code class=\"language-ocaml\"># Lazy.force lazy_expr\nException: Division_by_zero.\n</code></pre>\n<h2 id=\"boxed-vs-unboxed-types\">Boxed vs. unboxed types</h2>\n<p>One term which you'll hear a lot when discussing functional languages is\n&quot;boxed&quot;. I was very confused when I first heard this term, but in fact\nthe distinction between boxed and unboxed types is quite simple if\nyou've used C, C++ or Java before (in Perl, everything is boxed).</p>\n<p>The way to think of a boxed object is to think of an object which has\nbeen allocated on the heap using <code>malloc</code> in C (or equivalently <code>new</code> in\nC++), and/or is referred to through a pointer. Take a look at this\nexample C program:</p>\n<pre><code class=\"language-C\">#include &lt;stdio.h&gt;\n\nvoid\nprintit (int *ptr)\n{\n  printf (&quot;the number is %d\\n&quot;, *ptr);\n}\n\nvoid\nmain ()\n{\n  int a = 3;\n  int *p = &amp;a;\n\n  printit (p);\n}\n</code></pre>\n<p>The variable <code>a</code> is allocated on the stack, and is quite definitely\nunboxed.</p>\n<p>The function <code>printit</code> takes a boxed integer and prints it.</p>\n<p>The diagram below shows an array of unboxed (top) vs. boxed (below)\nintegers:</p>\n<p><img src=\"/tutorials/boxedarray.png\" alt=\"Boxed Array\" title=\"\" /></p>\n<p>No prizes for guessing that the array of unboxed integers is much faster\nthan the array of boxed integers. In addition, because there are fewer\nseparate allocations, garbage collection is much faster and simpler on\nthe array of unboxed objects.</p>\n<p>In C or C++ you should have no problems constructing either of the two\ntypes of arrays above. In Java, you have two types, <code>int</code> which is\nunboxed and <code>Integer</code> which is boxed, and hence considerably less\nefficient. In OCaml, the basic types are all unboxed.</p>\n<h2 id=\"aliases-for-function-names-and-arguments\">Aliases for function names and arguments</h2>\n<p>It's possible to use this as a neat trick to save typing: aliasing function\nnames, and function arguments.</p>\n<p>Although we haven't looked at object-oriented programming (that's the\nsubject for the <a href=\"objects.html\">&quot;Objects&quot; section</a>),\nhere's an example from OCamlNet of an\naliased function call. All you need to know is that\n<code>cgi # output # output_string &quot;string&quot;</code> is a method call, similar to\n<code>cgi.output().output_string (&quot;string&quot;)</code> in Java.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let begin_page cgi title =\n  let out = cgi # output # output_string in\n  out &quot;&lt;html&gt;\\n&quot;;\n  out &quot;&lt;head&gt;\\n&quot;;\n  out (&quot;&lt;title&gt;&quot; ^ text title ^ &quot;&lt;/title&gt;\\n&quot;);\n  out (&quot;&lt;style type=\\&quot;text/css\\&quot;&gt;\\n&quot;);\n  out &quot;body { background: white; color: black; }\\n&quot;;\n  out &quot;&lt;/style&gt;\\n&quot;;\n  out &quot;&lt;/head&gt;\\n&quot;;\n  out &quot;&lt;body&gt;\\n&quot;;\n  out (&quot;&lt;h1&gt;&quot; ^ text title ^ &quot;&lt;/h1&gt;\\n&quot;)\n</code></pre>\n<p>The <code>let out = ... </code> is a partial function application for that method\ncall (partial, because the string parameter hasn't been applied). <code>out</code>\nis therefore a function, which takes a string parameter.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">out &quot;&lt;html&gt;\\n&quot;;\n</code></pre>\n<p>is equivalent to:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">cgi # output # output_string &quot;&lt;html&gt;\\n&quot;;\n</code></pre>\n<p>We saved ourselves a lot of typing there.</p>\n<p>We can also add arguments. This alternative definition of <code>print_string</code>\ncan be thought of as a kind of alias for a function name plus arguments:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let print_string = output_string stdout\n</code></pre>\n<p><code>output_string</code> takes two arguments (a channel and a string), but since\nwe have only supplied one, it is partially applied. So <code>print_string</code> is\na function, expecting one string argument.</p>\n"},{"title":"If Statements, Loops and Recursions","slug":"if-statements-loops-and-recursions","description":"Learn basic control-flow and recusion in OCaml\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## If statements (actually, these are if expressions)\nOCaml has an `if` statement with two variations, and the obvious meaning:\n\n```ocaml\nif boolean-condition then expression\n  \nif boolean-condition then expression else other-expression\n```\n```mdx-error\nLine 3, characters 3-5:\nError: Syntax error\n```\n\nUnlike in the conventional languages you'll be used to, `if` statements\nare really expressions. In other words, they're much more like\n`boolean-condition ? expression : other-expression` in C than like the if\nstatements you may be used to.\n\nHere's a simple example of an `if` statement:\n\n```ocaml\n# let max a b =\n  if a > b then a else b\nval max : 'a -> 'a -> 'a = <fun>\n```\n\nAs a short aside, if you type this into the OCaml\ninteractive toplevel (as above), you'll\nnotice that OCaml decides that this function is polymorphic, with the\nfollowing type:\n\n```ocaml\n# max\n- : 'a -> 'a -> 'a = <fun>\n```\n\nAnd indeed OCaml lets you use `max` on any type:\n\n```ocaml\n# max 3 5\n- : int = 5\n# max 3.5 13.0\n- : float = 13.\n# max \"a\" \"b\"\n- : string = \"b\"\n```\n\nThis is because `>` is in fact polymorphic. It works on any type, even\nobjects (it does a binary comparison).\n\n\\[Note that the `Stdlib` module defines `min` and `max` for you.\\]\n\nLet's look a bit more closely at the `if` expression. Here's the `range`\nfunction which I showed you earlier without much explanation. You should\nbe able to combine your knowledge of recursive functions, lists and if\nexpressions to see what it does:\n\n```ocaml\n# let rec range a b =\n    if a > b then []\n    else a :: range (a + 1) b\nval range : int -> int -> int list = <fun>\n```\n\nLet's examine some typical calls to this function. Let's start with the\neasy case of `a > b`. A call to `range 11 10` returns `[]` (the empty\nlist) and that's it.\n\nWhat about calling `range 10 10`? Since `10 > 10` is false, the\n`else`-clause is evaluated, which is: `10 :: (range 11 10)` (I've added\nthe brackets to make the order of evaluation more clear). We've just\nworked out that `range 11 10` = `[]`, so this is: `10 :: []`. Remember\nour formal description of lists and the `::` (cons) operator? `10 :: []`\nis just the same as `[10]`.\n\nLet's try `range 9 10`:\n\n<!-- $MDX skip -->\n```ocaml\nrange 9 10\n→ 9 :: (range 10 10)\n→ 9 :: [10]\n→ [9; 10]\n```\n\nIt should be fairly clear that `range 1 10` evaluates to\n`[1; 2; 3; 4; 5; 6; 7; 8; 9; 10]`.\n\nWhat we've got here is a simple case of recursion. Functional\nprogramming can be said to prefer recursion over loops, but I'm jumping\nahead of myself. We'll discuss recursion more at the end of this\nchapter.\n\nBack, temporarily, to `if` statements. What does this function do?\n\n```ocaml\n# let f x y =\n    x + if y > 0 then y else 0\nval f : int -> int -> int = <fun>\n```\n\nClue: add brackets around the whole of the if expression. It clips `y`\nlike an [electronic diode](https://en.wikipedia.org/wiki/Diode#Current.E2.80.93voltage_characteristic).\n\nThe `abs` (absolute value) function is defined in `Stdlib` as:\n\n```ocaml\n# let abs x =\n    if x >= 0 then x else -x\nval abs : int -> int = <fun>\n```\n\nAlso in `Stdlib`, the `string_of_float` function contains a complex\npair of nested `if` expressions:\n\n```ocaml\n# let string_of_float f =\n  let s = format_float \"%.12g\" f in\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\"\n    else if s.[i] = '.' || s.[i] = 'e' then s\n    else loop (i + 1)\n  in\n    loop 0\nLine 2, characters 11-23:\nError: Unbound value format_float\n```\n\nLet's examine this function. Suppose the function is called with `f` =\n12.34. Then `s` = \"12.34\", and `l` = 5. We call `loop` the first time\nwith `i` = 0.\n\n`i` is not greater than or equal to `l`, and `s.[i]` (the\n`i`<sup>th</sup> character in `s`) is not a period or `'e'`. So\n`loop (i + 1)` is called, ie. `loop 1`.\n\nWe go through the same dance for `i` = 1, and end up calling `loop 2`.\n\nFor `i` = 2, however, `s.[i]` is a period (refer to the original string,\n`s` = \"12.34\"). So this immediately returns `s`, and the function\n`string_of_float` returns \"12.34\".\n\nWhat is `loop` doing? In fact it's checking whether the string returned\nfrom `format_float` contains a period (or `'e'`). Suppose that we called\n`string_of_float` with `12.0`. `format_float` would return the string\n\"12\", but `string_of_float` must return \"12.\" or \"12.0\" (because\nfloating point constants in OCaml must contain a period to differentiate\nthem from integer constants). Hence the check.\n\nThe strange use of recursion in this function is almost certainly for\nefficiency. OCaml supports for loops, so why didn't the authors use for\nloops? We'll see in the next section that OCaml's for loops are limited\nin a way which prevents them from being used in `string_of_float`. Here,\nhowever, is a more straightforward, but approximately twice as slow, way\nof writing `string_of_float`:\n\n```ocaml\n# let string_of_float f =\n  let s = format_float \"%.12g\" f in\n    if String.contains s '.' || String.contains s 'e'\n      then s\n      else s ^ \".\"\nLine 2, characters 11-23:\nError: Unbound value format_float\n```\n\n## Using begin ... end\nHere is some code from lablgtk:\n\n<!-- $MDX skip -->\n```ocaml\nif GtkBase.Object.is_a obj cls then\n  fun _ -> f obj\nelse begin\n  eprintf \"Glade-warning: %s expects a %s argument.\\n\" name cls;\n  raise Not_found\nend\n```\n\n`begin` and `end` are what is known as **syntactic sugar** for open and\nclose parentheses. In the example above, all they do is group the two\nstatements in the `else`-clause together. Suppose the author had written\nthis instead:\n\n<!-- $MDX skip -->\n```ocaml\nif GtkBase.Object.is_a obj cls then\n  fun _ -> f obj\nelse\n  eprintf \"Glade-warning: %s expects a %s argument.\\n\" name cls;\n  raise Not_found\n```\nFully bracketing and properly indenting the above expression gives:\n\n<!-- $MDX skip -->\n```ocaml\n(if GtkBase.Object.is_a obj cls then\n   fun _ -> f obj\n else\n   eprintf \"Glade-warning: %s expects a %s argument.\\n\" name cls\n);\nraise Not_found\n```\nNot what was intended at all. So the `begin` and `end` are necessary to\ngroup together multiple statements in a `then` or `else` clause of an if\nexpression. You can also use plain ordinary parentheses `( ... )` if you\nprefer (and I do prefer, because I **loathe** Pascal :-). Here are two\nsimple examples:\n\n```ocaml\n# if 1 = 0 then\n    print_endline \"THEN\"\n  else begin\n    print_endline \"ELSE\";\n    failwith \"else clause\"\n  end\nException: Failure \"else clause\".\nELSE\n# if 1 = 0 then\n    print_endline \"THEN\"\n  else (\n    print_endline \"ELSE\";\n    failwith \"else clause\"\n  )\nException: Failure \"else clause\".\nELSE\n```\n\n## For loops and while loops\nOCaml supports a rather limited form of the familiar `for` loop:\n\n<!-- $MDX skip -->\n```ocaml\nfor variable = start_value to end_value do\n  expression\ndone\n  \nfor variable = start_value downto end_value do\n  expression\ndone\n```\nA simple but real example from lablgtk:\n\n<!-- $MDX skip -->\n```ocaml\nfor i = 1 to n_jobs () do\n  do_next_job ()\ndone\n```\nIn OCaml, `for` loops are just shorthand for writing:\n\n<!-- $MDX skip -->\n```ocaml\nlet i = 1 in\ndo_next_job ();\nlet i = 2 in\ndo_next_job ();\nlet i = 3 in\ndo_next_job ();\n  ...\nlet i = n_jobs () in\ndo_next_job ();\n()\n```\n\nOCaml doesn't support the concept of breaking out of a `for` loop early\ni.e. it has no `break`, `continue` or `last` statements. (You *could*\nthrow an exception and catch it outside, and this would run fast but\noften looks clumsy.)\n\nThe expression inside an OCaml for loop should evaluate to `unit`\n(otherwise you'll get a warning), and the for loop expression as a whole\nreturns `unit`:\n\n```ocaml\n# for i = 1 to 10 do i done\nLine 1, characters 20-21:\nWarning 10: this expression should have type unit.\n- : unit = ()\n```\nFunctional programmers tend to use recursion instead of explicit loops,\nand regard **for** loops with suspicion since it can't return anything,\nhence OCaml's relatively powerless **for** loop. We talk about recursion\nbelow.\n\n**While loops** in OCaml are written:\n\n<!-- $MDX skip -->\n```ocaml\nwhile boolean-condition do\n  expression\ndone\n```\nAs with for loops, there is no way provided by the language to break out\nof a while loop, except by throwing an exception, and this means that\nwhile loops have fairly limited use. Again, remember that functional\nprogrammers like recursion, and so while loops are second-class citizens\nin the language.\n\nIf you stop to consider while loops, you may see that they aren't really\nany use at all, except in conjunction with our old friend references.\nLet's imagine that OCaml didn't have references for a moment:\n\n<!-- $MDX skip -->\n```ocaml\nlet quit_loop = false in\n  while not quit_loop do\n    print_string \"Have you had enough yet? (y/n) \";\n    let str = read_line () in\n      if str.[0] = 'y' then\n        (* how do I set quit_loop to true ?!? *)\n  done\n```\nRemember that `quit_loop` is not a real \"variable\" - the let-binding\njust makes `quit_loop` a shorthand for `false`. This means the while\nloop condition (shown in red) is always true, and the loop runs on\nforever!\n\nLuckily OCaml *does have* references, so we can write the code above if\nwe want. Don't get confused and think that the `!` (exclamation mark)\nmeans \"not\" as in C/Java. It's used here to mean \"dereference the\npointer\", similar in fact to Forth. You're better off reading `!` as\n\"get\" or \"deref\".\n\n<!-- $MDX skip -->\n```ocaml\nlet quit_loop = ref false in\n  while not !quit_loop do\n    print_string \"Have you had enough yet? (y/n) \";\n    let str = read_line () in\n      if str.[0] = 'y' then quit_loop := true\n  done;;\n```\n\n## Looping over lists\nIf you want to loop over a list, don't be an imperative programmer and\nreach for your trusty six-shooter Mr. For Loop! OCaml has some better\nand faster ways to loop over lists, and they are all located in the\n`List` module. There are in fact dozens of good functions in `List`, but\nI'll only talk about the most useful ones here.\n\nFirst off, let's define a list for us to use:\n\n```ocaml\n# let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nval my_list : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n```\n\nIf you want to call a function once on every element of the list, use\n`List.iter`, like this:\n\n```ocaml\n# let f elem =\n    Printf.printf \"I'm looking at element %d now\\n\" elem\n  in\n    List.iter f my_list\nI'm looking at element 1 now\nI'm looking at element 2 now\nI'm looking at element 3 now\nI'm looking at element 4 now\nI'm looking at element 5 now\nI'm looking at element 6 now\nI'm looking at element 7 now\nI'm looking at element 8 now\nI'm looking at element 9 now\nI'm looking at element 10 now\n- : unit = ()\n```\n\n`List.iter` is in fact what you should think about using first every\ntime your cerebellum suggests you use a for loop.\n\nIf you want to *transform* each element separately in the list - for\nexample, doubling each element in the list - then use `List.map`.\n\n```ocaml\n# List.map (( * ) 2) my_list\n- : int list = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]\n```\n\nThe function `List.filter` collects only those elements of a list which satisfy\nsome condition - e.g. returning all even numbers in a list.\n\n```ocaml\n# let is_even i =\n    i mod 2 = 0\n  in\n    List.filter is_even my_list\n- : int list = [2; 4; 6; 8; 10]\n```\n\nTo find out if a list contains some element, use `List.mem` (short for\nmember):\n\n```ocaml\n# List.mem 12 my_list\n- : bool = false\n```\n\n`List.for_all` and `List.exists` are the same as the \"forall\" and\n\"exist\" operators in predicate logic.\n\nFor operating over two lists at the same time, there are \"-2\" variants\nof some of these functions, namely `iter2`, `map2`, `for_all2`,\n`exists2`.\n\nThe `map` and `filter` functions operate on individual list elements in\nisolation. **Fold** is a more unusual operation that is best\nthought about as \"inserting an operator between each element of the\nlist\". Suppose I wanted to add all the numbers in my list together. In\nhand-waving terms what I want to do is insert a plus sign between the\nelements in my list:\n\n```ocaml\n# 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n- : int = 55\n```\n\nThe fold operation does this, although the exact details are a little\nbit more tricky. First of all, what happens if I try to fold an empty\nlist? In the case of summing the list it would be nice if the answer was\nzero, instead of error. However if I was trying to find the product of\nthe list, I'd like the answer to be one instead. So I obviously have to\nprovide some sort of \"default\" argument to my fold. The second issue\ndoesn't arise with simple operators like `+` and `*`: what happens if\nthe operator I'm using isn't associative, ie. (a *op* b) *op* c not\nequal to a *op* (b *op* c)? In that case it would matter if I started\nfrom the left hand end of the list and worked right, versus if I started\nfrom the right and worked left. For this reason there are two versions\nof fold, called `List.fold_left` (works left to right) and\n`List.fold_right` (works right to left, and is also less efficient).\n\nLet's use `List.fold_left` to define `sum` and `product` functions for\ninteger lists:\n\n```ocaml\n# let sum = List.fold_left ( + ) 0\nval sum : int list -> int = <fun>\n# let product = List.fold_left ( * ) 1\nval product : int list -> int = <fun>\n# sum my_list\n- : int = 55\n# product my_list\n- : int = 3628800\n```\n\nThat was easy! Notice that I've accidentally come up with a way to do\nmathematical factorials:\n\n```ocaml\n# let fact n = product (range 1 n)\nval fact : int -> int = <fun>\n# fact 10\n- : int = 3628800\n```\n\n(Notice that this factorial function isn't very useful because it\noverflows the integers and gives wrong answers even for quite small\nvalues of `n`.)\n\n## Looping over strings\nThe `String` module also contains many dozens of useful string-related\nfunctions, and some of them are concerned with looping over strings.\n\n`String.copy` copies a string, like `strdup`. There is also a `String.iter`\nfunction which works like `List.iter`, except over the characters of the\nstring.\n\n## Recursion\nNow we come to a hard topic - recursion. Functional programmers are\ndefined by their love of recursive functions, and in many ways recursive\nfunctions in f.p. are the equivalent of loops in imperative programming.\nIn functional languages loops are second-class citizens, whilst\nrecursive functions get all the best support.\n\nWriting recursive functions requires a change in mindset from writing\nfor loops and while loops. So what I'll give you in this section will be\njust an introduction and examples.\n\nIn the first example we're going to read the whole of a file into memory\n(into a long string). There are essentially three possible approaches to\nthis:\n\n###  Approach 1\nGet the length of the file, and read it all in one go using the\n`really_input` method. This is the simplest, but it might not work on\nchannels which are not really files (eg. reading keyboard input) which\nis why we look at the other two approaches.\n\n###  Approach 2\nThe imperative approach, using a while loop which is broken out of using\nan exception.\n\n###  Approach 3\nA recursive loop, breaking out of the recursion again using an\nexception.\n\nWe're going to introduce a few new concepts here. Our second two\napproaches will use the `Buffer` module - an expandable buffer which you\ncan think of like a string onto which you can efficiently append more\ntext at the end. We're also going to be catching the `End_of_file`\nexception which the input functions throw when they reach the end of the\ninput. Also we're going to use `Sys.argv.(1)` to get the first command\nline parameter.\n\n```ocaml\n(* Read whole file: Approach 1 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let len = in_channel_length chan in\n  let result = (Bytes.create len) in\n    really_input chan result 0 len;\n    (Bytes.to_string result)\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf \"I read %d characters from %s\\n\" (String.length str) filename\n```\n\nApproach 1 works but is not very satisfactory because `read_whole_chan`\nwon't work on non-file channels like keyboard input or sockets. Approach\n2 involves a while loop:\n\n```ocaml\n(* Read whole file: Approach 2 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  try\n    while true do\n      let line = input_line chan in\n        Buffer.add_string buf line;\n        Buffer.add_char buf '\\n'\n    done;\n    assert false (* This is never executed\n\t                (always raises Assert_failure). *)\n  with\n    End_of_file -> Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf \"I read %d characters from %s\\n\" (String.length str) filename\n```\n\nThe key to approach 2 is to look at the central while loop. Remember\nthat I said the only way to break out of a while loop early was with an\nexception? This is exactly what we're doing here. Although I haven't\ncovered exceptions yet, you probably won't have any trouble\nunderstanding the `End_of_file` exception thrown in the code above by\n`input_line` when it hits the end of the file. The buffer `buf`\naccumulates the contents of the file, and when we hit the end of the\nfile we return it (`Buffer.contents buf`).\n\nOne curious point about this is the apparently superfluous statement\n(`assert false`) just after the while loop. What is it for?  Remember\nthat while loops, like for loops, are just expressions, and they return\nthe `unit` object (`()`). However OCaml demands that the return type\ninside a `try` matches the return type of each caught exception. In this\ncase because `End_of_file` results in a `string`, the main body of the\n`try` must also \"return\" a string — even though because of the infinite\nwhile loop the string could never actually be returned.  `assert false`\nhas a polymorphic type, so will unify with whatever value is returned\nby the `with` branch.\n\nHere's our recursive version. Notice that it's *shorter* than approach\n2, but not so easy to understand for imperative programmers at least:\n\n```ocaml\n(* Read whole file: Approach 3 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  let rec loop () =\n    let line = input_line chan in\n      Buffer.add_string buf line;\n      Buffer.add_char buf '\\n';\n      loop ()\n  in\n    try loop () with\n      End_of_file -> Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n  printf \"I read %d characters from %s\\n\" (String.length str) filename\n```\n\nAgain we have an infinite loop - but in this case done using recursion.\n`loop` calls itself at the end of the function. The infinite recursion\nis broken when `input_line` throws an `End_of_file` exception.\n\nIt looks like approach 3 might overflow the stack if you gave it a\nparticularly large file, but this is in fact not the case. Because of\ntail recursion (discussed below) the compiler will turn the recursive\n`loop` function into a real while loop (!) which runs in constant stack\nspace.\n\nIn the next example we will show how recursion is great for constructing\nor examining certain types of data structures, particularly trees. Let's\nhave a recursive type to represent files in a filesystem:\n\n```ocaml\n# type filesystem = File of string | Directory of filesystem list\ntype filesystem = File of string | Directory of filesystem list\n```\n\nThe `opendir` and `readdir` functions are used to open a directory and\nread elements from the directory. I'm going to define a handy\n`readdir_no_ex` function which hides the annoying `End_of_file`\nexception that `readdir` throws when it reaches the end of the\ndirectory:\n\n```ocaml\n# #load \"unix.cma\"\n# open Unix\n# let readdir_no_ex dirh =\n  try\n    Some (readdir dirh)\n  with\n    End_of_file -> None\nval readdir_no_ex : dir_handle -> string option = <fun>\n```\nThe type of `readdir_no_ex` is this. Recall our earlier discussion about\nnull pointers.\n\n```ocaml\n# readdir_no_ex\n- : dir_handle -> string option = <fun>\n```\n\nI'm also going to define a simple recursive function which I can use to\nconvert the `filesystem` type into a string for (eg) printing:\n\n```ocaml\n# let rec string_of_filesystem fs =\n  match fs with\n  | File filename -> filename ^ \"\\n\"\n  | Directory fs_list ->\n      List.fold_left (^) \"\" (List.map string_of_filesystem fs_list)\nval string_of_filesystem : filesystem -> string = <fun>\n```\n\nNote the use of `fold_left` and `map`. The `map` is used to\n(recursively) convert each `filesystem` in the list into a `string`.\nThen the `fold_left (^) \"\"` concatenates the list together into one big\nstring. Notice also the use of pattern matching. (The library defines a\nfunction called `String.concat` which is essentially equivalent to\n`fold_left (^) `, but implemented more efficiently).\n\nNow let's define a function to read a directory structure, recursively,\nand return a recursive `filesystem` data structure. I'm going to show\nthis function in steps, but I'll print out the entire function at the\nend of this section. First the outline of the function:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    (* ..... *) in\n  Directory (loop ())\n```\n\nThe call to `opendir` opens up the given path and returns a `dir_handle`\nfrom which we will be able to read the names using `readdir_no_ex`\nlater. The return value of the function is going to be a\n`Directory fs_list`, so all we need to do to complete the function is to\nwrite our function `loop` which returns a list of `filesystem`s. The\ntype of `loop` will be:\n\n<!-- $MDX skip -->\n```ocaml\nloop : unit -> filesystem list\n```\n\nHow do we define loop? Let's take it in steps again.\n\n<!-- $MDX skip -->\n```ocaml\nlet rec loop () =\n  let filename = readdir_no_ex dirh in\n  (* ..... *)\n```\n\nFirst we read the next filename from the directory handle. `filename`\nhas type `string option`, in other words it could be `None` or\n`Some \"foo\"` where `foo` is the name of the next filename in the\ndirectory. We also need to ignore the `\".\"` and `\"..\"` files (ie. the\ncurrent directory and the parent directory). We can do all this with a\nnice pattern match:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec loop () =\n  let filename = readdir_no_ex dirh in\n    match filename with\n    | None -> []\n    | Some \".\" -> loop ()\n    | Some \"..\" -> loop ()\n    | Some filename ->\n        (* ..... *)\n```\n\nThe `None` case is easy. Thinking recursively (!) if `loop` is called\nand we've reached the end of the directory, `loop` needs to return a\nlist of entries - and there's no entries - so it returns the empty list\n(`[]`).\n\nFor `\".\"` and `\"..\"` we just ignore the file and call `loop` again.\n\nWhat do we do when `loop` reads a real filename (the `Some filename`\nmatch below)? Let `pathname` be the full path to the file. We 'stat' the\nfile to see if it's really a directory. If it *is* a directory, we set\n`this` by recursively calling `read_directory` which will return\n`Directory something`. Notice that the overall result of\n`read_directory` is `Directory (loop ())`. If the file is really a file\n(not a directory) then we let `this` be `File pathname`. Then we do\nsomething clever: we return `this :: loop ()`. This is the recursive\ncall to `loop ()` to calculate the remaining directory members (a list),\nto which we prepend `this`.\n\n```ocaml\n# let rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    let filename = readdir_no_ex dirh in\n      match filename with\n      | None -> []\n      | Some \".\" -> loop ()\n      | Some \"..\" -> loop ()\n      | Some filename ->\n          let pathname = path ^ \"/\" ^ filename in\n          let stat = lstat pathname in\n          let this =\n            if stat.st_kind = S_DIR then\n              read_directory pathname\n            else\n              File pathname\n          in\n            this :: loop ()\n  in\n    Directory (loop ())\nval read_directory : string -> filesystem = <fun>\n```\n\nThat's quite a complex bit of recursion, but although this is a made-up\nexample, it's fairly typical of the complex patterns of recursion found\nin real-world functional programs. The two important lessons to take\naway from this are:\n\n* The use of recursion to build a list:\n\n    <!-- $MDX skip -->\n    ```ocaml\n    let rec loop () =\n      a match or if statement\n      | base case -> []\n      | recursive case -> element :: loop ()\n    ```\n    Compare this to our previous `range` function. The pattern of recursion\n    is exactly the same:\n    \n    ```ocaml\n    # let rec range a b =\n      if a > b then []            (* Base case *)\n      else a :: range (a + 1) b     (* Recursive case *)\n    ```\n\t\n* The use of recursion to build up trees:\n\n    <!-- $MDX skip -->\n    ```ocaml\n    let rec read_directory path =\n      (* blah blah *)\n      if file-is-a-directory then\n        read_directory path-to-file\n      else\n        Leaf file\n    ```\n    All that remains now to make this a working program is a little bit of\n    code to call `read_directory` and display the result:\n    \n    <!-- $MDX skip -->\n    ```ocaml\n    let path = Sys.argv.(1) in\n    let fs = read_directory path in\n    print_endline (string_of_filesystem fs)\n    ```\n\n###  Recursion example: maximum element in a list\nRemember the basic recursion pattern for lists:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec loop () =\n  a match or if statement\n  | base case -> []\n  | recursive case -> element :: loop ()\n```\nThe key here is actually the use of the match / base case / recursive\ncase pattern. In this example - finding the maximum element in a list -\nwe're going to have two base cases and one recursive case. But before I\njump ahead to the code, let's just step back and think about the\nproblem. By thinking about the problem, the solution will appear \"as if\nby magic\" (I promise you :-)\n\nFirst of all, let's be clear that the maximum element of a list is just\nthe biggest one, e.g. the maximum element of the list `[1; 2; 3; 4; 1]`\nis `4`.\n\nAre there any special cases? Yes, there are. What's the maximum element\nof the empty list `[]`? There *isn't one*. If we are passed an empty\nlist, we should throw an error.\n\nWhat's the maximum element of a single element list such as `[4]`?\nThat's easy: it's just the element itself. So `list_max [4]` should\nreturn `4`, or in the general case, `list_max [x]` should return `x`.\n\nWhat's the maximum element of the general list `x :: remainder` (this is\nthe \"cons\" notation for the list, so `remainder` is the tail - also a\nlist)?\n\nThink about this for a while. Suppose you know the maximum element of\n`remainder`, which is, say, `y`. What's the maximum element of\n`x :: remainder`? It depends on whether `x > y` or `x <= y`. If `x` is\nbigger than `y`, then the overall maximum is `x`, whereas conversely if\n`x` is less than `y`, then the overall maximum is `y`.\n\nDoes this really work? Consider `[1; 2; 3; 4; 1]` again. This is\n`1 :: [2; 3; 4; 1]`. Now the maximum element of the remainder,\n`[2; 3; 4; 1]`, is `4`. So now we're interested in `x = 1` and `y = 4`.\nThat head element `x = 1` doesn't matter because `y = 4` is bigger, so\nthe overall maximum of the whole list is `y = 4`.\n\nLet's now code those rules above up, to get a working function:\n\n```ocaml\n# let rec list_max xs =\n  match xs with\n  | [] -> (* empty list: fail *)\n      failwith \"list_max called on empty list\"\n  | [x] -> (* single element list: return the element *)\n      x\n  | x :: remainder -> (* multiple element list: recursive case *)\n      max x (list_max remainder)\nval list_max : 'a list -> 'a = <fun>\n```\nI've added comments so you can see how the rules / special cases we\ndecided upon above really correspond to lines of code.\n\nDoes it work?\n\n```ocaml\n# list_max [1; 2; 3; 4; 1]\n- : int = 4\n# list_max []\nException: Failure \"list_max called on empty list\".\n# list_max [5; 4; 3; 2; 1]\n- : int = 5\n# list_max [5; 4; 3; 2; 1; 100]\n- : int = 100\n```\nNotice how the solution proposed is both (a) very different from the\nimperative for-loop solution, and (b) much more closely tied to the\nproblem specification. Functional programmers will tell you that this is\nbecause the functional style is much higher level than the imperative\nstyle, and therefore better and simpler. Whether you believe them is up\nto you. It's certainly true that it's much simpler to reason logically\nabout the functional version, which is useful if you wanted to formally\nprove that `list_max` is correct (\"correct\" being the mathematical way\nto say that a program is provably bug-free, useful for space shuttles,\nnuclear power plants and higher quality software in general).\n\n###  Tail recursion\nLet's look at the `range` function again for about the twentieth time:\n\n```ocaml\n# let rec range a b =\n  if a > b then []\n  else a :: range (a+1) b\nval range : int -> int -> int list = <fun>\n```\nI'm going to rewrite it slightly to make something about the structure\nof the program clearer (still the same function however):\n\n```ocaml\n# let rec range a b =\n  if a > b then [] else\n    let result = range (a+1) b in\n      a :: result\nval range : int -> int -> int list = <fun>\n```\nLet's call it:\n\n```ocaml\n# List.length (range 1 10)\n- : int = 10\n# List.length (range 1 1000000)\nStack overflow during evaluation (looping recursion?).\n```\nHmmm ... at first sight this looks like a problem with recursive\nprogramming, and hence with the whole of functional programming! If you\nwrite your code recursively instead of iteratively then you necessarily\nrun out of stack space on large inputs, right?\n\nIn fact, wrong. Compilers can perform a simple optimisation on certain\ntypes of recursive functions to turn them into while loops. These\ncertain types of recursive functions therefore run in constant stack\nspace, and with the equivalent efficiency of imperative while loops.\nThese functions are called **tail-recursive functions**.\n\nIn tail-recursive functions, the recursive call happens last of all.\nRemember our `loop ()` functions above? They all had the form:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec loop () =\n  (* do something *)\n  loop ()\n```\nBecause the recursive call to `loop ()` happens as the very last thing,\n`loop` is tail-recursive and the compiler will turn the whole thing into\na while loop.\n\nUnfortunately `range` is not tail-recursive, and the longer version\nabove shows why. The recursive call to `range` doesn't happen as the\nvery last thing. In fact the last thing to happen is the `::` (cons)\noperation. As a result, the compiler doesn't turn the recursion into a\nwhile loop, and the function is not efficient in its use of stack space.\n\nThe use of an accumulating argument or `accumulator` allows one to write\nfunctions such as `range` above in a tail-recursive manner, which means they\nwill be efficient and work properly on large inputs. Let's plan our rewritten\n`range` function which will use an accumulator argument to store the \"result so\nfar\":\n\n<!-- $MDX skip -->\n```ocaml\nlet rec range2 a b accum =\n  (* ... *)\n  \nlet range a b =\n  range2 a b []\n```\n\nThe `accum` argument is going to accumulate the result. It's the \"result\nso far\". We pass in the empty list (\"no result so far\"). The easy case\nis when `a > b`:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec range2 a b accum =\n  if a > b then accum\n  else\n    (* ... *)\n```\nIf `a > b` (i.e. if we've reached the end of the recursion), then stop\nand return the result (`accum`).\n\nNow the trick is to write the `else`-clause and make sure that the call\nto `range2` is the very last thing that we do, so the function is\ntail-recursive:\n\n```ocaml\n# let rec range2 a b accum =\n  if a > b then accum\n  else range2 (a + 1) b (a :: accum)\nval range2 : int -> int -> int list -> int list = <fun>\n```\nThere's only one slight problem with this function: it constructs the\nlist backwards! However, this is easy to rectify by redefining range as:\n\n```ocaml\n# let range a b = List.rev (range2 a b [])\nval range : int -> int -> int list = <fun>\n```\nIt works this time, although it's a bit slow to run because it really\ndoes have to construct a list with a million elements in it:\n\n```ocaml\n# List.length (range 1 1000000)\n- : int = 1000000\n```\nThe following implementation is twice as fast as the previous one,\nbecause it does not need to reverse a list:\n\n```ocaml\n# let rec range2 a b accum =\n  if b < a then accum\n  else range2 a (b - 1) (b :: accum)\nval range2 : int -> int -> int list -> int list = <fun>\n# let range a b =\n  range2 a b []\nval range : int -> int -> int list = <fun>\n```\nThat was a brief overview of tail recursion, but in real world\nsituations determining if a function is tail recursive can be quite\nhard. What did we really learn here? One thing is that recursive\nfunctions have a dangerous trap for inexperienced programmers. Your\nfunction can appear to work for small inputs (during testing), but fail\ncatastrophically in the field when exposed to large inputs. This is one\nargument *against* using recursive functions, and for using explicit\nwhile loops when possible.\n\n## Mutable records, references (again!) and arrays\nPreviously we mentioned records in passing. These are like C `struct`s:\n\n```ocaml\n# type pair_of_ints = {a : int; b : int}\ntype pair_of_ints = { a : int; b : int; }\n# {a = 3; b = 5}\n- : pair_of_ints = {a = 3; b = 5}\n# {a = 3}\nLine 1, characters 1-8:\nError: Some record fields are undefined: b\n```\n\nOne feature which I didn't cover: OCaml records can have mutable fields.\nNormally an expression like `{a = 3; b = 5}` is an immutable, constant\nobject. However if the record has **mutable fields**, then\nthere is a way to change those fields in the record. This is an\nimperative feature of OCaml, because functional languages don't normally\nallow mutable objects (or references or mutable arrays, which we'll look\nat in a moment).\n\nHere is an object defined with a mutable field. This field is used to\ncount how many times the object has been accessed. You could imagine\nthis being used in a caching scheme to decide which objects you'd evict\nfrom memory.\n\n```ocaml\n# type name = {name : string; mutable access_count : int}\ntype name = { name : string; mutable access_count : int; }\n```\n\nHere is a function defined on names which prints the `name` field and\nincrements the mutable `access_count` field:\n\n```ocaml\n# let print_name name =\n  print_endline (\"The name is \" ^ name.name);\n  name.access_count <- name.access_count + 1\nval print_name : name -> unit = <fun>\n```\n\nNotice a strange, and very non-functional feature of `print_name`: it modifies\nits `access_count` parameter. This function is not \"pure\". OCaml is a\nfunctional language, but not to the extent that it forces functional\nprogramming down your throat.\n\nAnyway, let's see `print_name` in action:\n\n```ocaml\n# let n = {name = \"Richard Jones\"; access_count = 0}\nval n : name = {name = \"Richard Jones\"; access_count = 0}\n# n\n- : name = {name = \"Richard Jones\"; access_count = 0}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = \"Richard Jones\"; access_count = 1}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = \"Richard Jones\"; access_count = 2}\n```\n\nOnly fields explicitly marked as `mutable` can be assigned to using the\n`<-` operator. If you try to assign to a non-mutable field, OCaml won't\nlet you:\n\n```ocaml\n# n.name <- \"John Smith\"\nLine 1, characters 1-23:\nError: The record field name is not mutable\n```\nReferences, with which we should be familiar by now, are implemented\nusing records with a mutable `contents` field. Check out the definition\nin `Stdlib`:\n\n```ocaml\ntype 'a ref = {mutable contents : 'a}\n```\n\nAnd look closely at what the OCaml toplevel prints out for the value of\na reference:\n\n```ocaml\n# let r = ref 100\nval r : int Stdlib.ref = {Stdlib.contents = 100}\n```\n\nArrays are another sort of mutable structure provided by OCaml. In\nOCaml, plain lists are implemented as linked lists, and linked lists are\nslow for some types of operation. For example, getting the head of a\nlist, or iterating over a list to perform some operation on each element\nis reasonably fast. However, jumping to the n<sup>th</sup> element of a\nlist, or trying to randomly access a list - both are slow operations.\nThe OCaml `Array` type is a real array, so random access is fast, but\ninsertion and deletion of elements is slow. `Array`s are also mutable so\nyou can randomly change elements too.\n\nThe basics of arrays are simple:\n\n```ocaml\n# let a = Array.create 10 0\nLine 1, characters 9-21:\nAlert deprecated: Stdlib.Array.create\nUse Array.make instead.\nval a : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n# for i = 0 to Array.length a - 1 do\n  a.(i) <- i\nLine 3, characters 1-3:\nError: Syntax error\n# a\n- : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n```\nNotice the syntax for writing arrays: `[| element; element; ... |]`\n\nThe OCaml compiler was designed with heavy numerical processing in mind\n(the sort of thing that FORTRAN is traditionally used for), and so it\ncontains various optimisations specifically for arrays of numbers,\nvectors and matrices. Here is some benchmark code for doing dense matrix\nmultiplication. Notice that it uses for-loops and is generally very\nimperative in style:\n\n```ocaml\n# let size = 30\nval size : int = 30\n\n# let mkmatrix rows cols =\n  let count = ref 1\n  and last_col = cols - 1\n  and m = Array.make_matrix rows cols 0 in\n    for i = 0 to rows - 1 do\n      let mi = m.(i) in\n        for j = 0 to last_col do\n          mi.(j) <- !count;\n          incr count\n        done;\n    done;\n    m\nval mkmatrix : int -> int -> int array array = <fun>\n\n# let rec inner_loop k v m1i m2 j =\n  if k < 0 then v\n  else inner_loop (k - 1) (v + m1i.(k) * m2.(k).(j)) m1i m2 j\nval inner_loop : int -> int -> int array -> int array array -> int -> int =\n  <fun>\n\n# let mmult rows cols m1 m2 m3 =\n  let last_col = cols - 1\n  and last_row = rows - 1 in\n    for i = 0 to last_row do\n      let m1i = m1.(i) and m3i = m3.(i) in\n      for j = 0 to last_col do\n        m3i.(j) <- inner_loop last_row 0 m1i m2 j\n      done;\n    done\nval mmult :\n  int -> int -> int array array -> int array array -> int array array -> unit =\n  <fun>\n\n# let () =\n  let n =\n    try int_of_string Sys.argv.(1)\n    with Invalid_argument _ -> 1\n  and m1 = mkmatrix size size\n  and m2 = mkmatrix size size\n  and m3 = Array.make_matrix size size 0 in\n    for i = 1 to n - 1 do\n      mmult size size m1 m2 m3\n    done;\n    mmult size size m1 m2 m3;\n    Printf.printf \"%d %d %d %d\\n\" m3.(0).(0) m3.(2).(3) m3.(3).(2) m3.(4).(4)\nException: Failure \"int_of_string\".\n```\n\n## Mutually recursive functions\nSuppose I want to define two functions which call each other. This is\nactually not a very common thing to do, but it can be useful sometimes.\nHere's a contrived example (thanks to Ryan Tarpine): The number 0 is\neven. Other numbers greater than 0 are even if their predecessor is odd.\nHence:\n\n```ocaml\n# let rec even n =\n  match n with\n  | 0 -> true\n  | x -> odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n```\n\nThe code above doesn't compile because we haven't defined the function\n`odd` yet! That's easy though. Zero is not odd, and other numbers\ngreater than 0 are odd if their predecessor is even. So to make this\ncomplete we need that function too:\n\n```ocaml\n# let rec even n =\n  match n with\n  | 0 -> true\n  | x -> odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n# let rec odd n =\n  match n with\n  | 0 -> false\n  | x -> even (x - 1)\nLine 4, characters 10-14:\nError: Unbound value even\n```\n\nThe only problem is... this program doesn't compile. In order to compile\nthe `even` function, we already need the definition of `odd`, and to\ncompile `odd` we need the definition of `even`. So swapping the two\ndefinitions around won't help either.\n\nThere are no \"forward prototypes\" (as seen in languages descended\nfrom C) in OCaml but there is a special syntax\nfor defining a set of two or more mutually recursive functions, like\n`odd` and `even`:\n\n```ocaml\n# let rec even n =\n  match n with\n  | 0 -> true\n  | x -> odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n```\nYou can also\nuse similar syntax for writing mutually recursive class definitions and\nmodules.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#if-statements-actually-these-are-if-expressions\">If statements (actually, these are if expressions)</a>\n</li>\n<li><a href=\"#using-begin--end\">Using begin ... end</a>\n</li>\n<li><a href=\"#for-loops-and-while-loops\">For loops and while loops</a>\n</li>\n<li><a href=\"#looping-over-lists\">Looping over lists</a>\n</li>\n<li><a href=\"#looping-over-strings\">Looping over strings</a>\n</li>\n<li><a href=\"#recursion\">Recursion</a>\n</li>\n<li><a href=\"#mutable-records-references-again-and-arrays\">Mutable records, references (again!) and arrays</a>\n</li>\n<li><a href=\"#mutually-recursive-functions\">Mutually recursive functions</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"if-statements-actually-these-are-if-expressions\">If statements (actually, these are if expressions)</h2>\n<p>OCaml has an <code>if</code> statement with two variations, and the obvious meaning:</p>\n<pre><code class=\"language-ocaml\">if boolean-condition then expression\n  \nif boolean-condition then expression else other-expression\n</code></pre>\n<pre><code class=\"language-mdx-error\">Line 3, characters 3-5:\nError: Syntax error\n</code></pre>\n<p>Unlike in the conventional languages you'll be used to, <code>if</code> statements\nare really expressions. In other words, they're much more like\n<code>boolean-condition ? expression : other-expression</code> in C than like the if\nstatements you may be used to.</p>\n<p>Here's a simple example of an <code>if</code> statement:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b\nval max : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>As a short aside, if you type this into the OCaml\ninteractive toplevel (as above), you'll\nnotice that OCaml decides that this function is polymorphic, with the\nfollowing type:</p>\n<pre><code class=\"language-ocaml\"># max\n- : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>And indeed OCaml lets you use <code>max</code> on any type:</p>\n<pre><code class=\"language-ocaml\"># max 3 5\n- : int = 5\n# max 3.5 13.0\n- : float = 13.\n# max &quot;a&quot; &quot;b&quot;\n- : string = &quot;b&quot;\n</code></pre>\n<p>This is because <code>&gt;</code> is in fact polymorphic. It works on any type, even\nobjects (it does a binary comparison).</p>\n<p>[Note that the <code>Stdlib</code> module defines <code>min</code> and <code>max</code> for you.]</p>\n<p>Let's look a bit more closely at the <code>if</code> expression. Here's the <code>range</code>\nfunction which I showed you earlier without much explanation. You should\nbe able to combine your knowledge of recursive functions, lists and if\nexpressions to see what it does:</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n    if a &gt; b then []\n    else a :: range (a + 1) b\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Let's examine some typical calls to this function. Let's start with the\neasy case of <code>a &gt; b</code>. A call to <code>range 11 10</code> returns <code>[]</code> (the empty\nlist) and that's it.</p>\n<p>What about calling <code>range 10 10</code>? Since <code>10 &gt; 10</code> is false, the\n<code>else</code>-clause is evaluated, which is: <code>10 :: (range 11 10)</code> (I've added\nthe brackets to make the order of evaluation more clear). We've just\nworked out that <code>range 11 10</code> = <code>[]</code>, so this is: <code>10 :: []</code>. Remember\nour formal description of lists and the <code>::</code> (cons) operator? <code>10 :: []</code>\nis just the same as <code>[10]</code>.</p>\n<p>Let's try <code>range 9 10</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">range 9 10\n→ 9 :: (range 10 10)\n→ 9 :: [10]\n→ [9; 10]\n</code></pre>\n<p>It should be fairly clear that <code>range 1 10</code> evaluates to\n<code>[1; 2; 3; 4; 5; 6; 7; 8; 9; 10]</code>.</p>\n<p>What we've got here is a simple case of recursion. Functional\nprogramming can be said to prefer recursion over loops, but I'm jumping\nahead of myself. We'll discuss recursion more at the end of this\nchapter.</p>\n<p>Back, temporarily, to <code>if</code> statements. What does this function do?</p>\n<pre><code class=\"language-ocaml\"># let f x y =\n    x + if y &gt; 0 then y else 0\nval f : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Clue: add brackets around the whole of the if expression. It clips <code>y</code>\nlike an <a href=\"https://en.wikipedia.org/wiki/Diode#Current.E2.80.93voltage_characteristic\">electronic diode</a>.</p>\n<p>The <code>abs</code> (absolute value) function is defined in <code>Stdlib</code> as:</p>\n<pre><code class=\"language-ocaml\"># let abs x =\n    if x &gt;= 0 then x else -x\nval abs : int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Also in <code>Stdlib</code>, the <code>string_of_float</code> function contains a complex\npair of nested <code>if</code> expressions:</p>\n<pre><code class=\"language-ocaml\"># let string_of_float f =\n  let s = format_float &quot;%.12g&quot; f in\n  let l = string_length s in\n  let rec loop i =\n    if i &gt;= l then s ^ &quot;.&quot;\n    else if s.[i] = '.' || s.[i] = 'e' then s\n    else loop (i + 1)\n  in\n    loop 0\nLine 2, characters 11-23:\nError: Unbound value format_float\n</code></pre>\n<p>Let's examine this function. Suppose the function is called with <code>f</code> =\n12.34. Then <code>s</code> = &quot;12.34&quot;, and <code>l</code> = 5. We call <code>loop</code> the first time\nwith <code>i</code> = 0.</p>\n<p><code>i</code> is not greater than or equal to <code>l</code>, and <code>s.[i]</code> (the\n<code>i</code><sup>th</sup> character in <code>s</code>) is not a period or <code>'e'</code>. So\n<code>loop (i + 1)</code> is called, ie. <code>loop 1</code>.</p>\n<p>We go through the same dance for <code>i</code> = 1, and end up calling <code>loop 2</code>.</p>\n<p>For <code>i</code> = 2, however, <code>s.[i]</code> is a period (refer to the original string,\n<code>s</code> = &quot;12.34&quot;). So this immediately returns <code>s</code>, and the function\n<code>string_of_float</code> returns &quot;12.34&quot;.</p>\n<p>What is <code>loop</code> doing? In fact it's checking whether the string returned\nfrom <code>format_float</code> contains a period (or <code>'e'</code>). Suppose that we called\n<code>string_of_float</code> with <code>12.0</code>. <code>format_float</code> would return the string\n&quot;12&quot;, but <code>string_of_float</code> must return &quot;12.&quot; or &quot;12.0&quot; (because\nfloating point constants in OCaml must contain a period to differentiate\nthem from integer constants). Hence the check.</p>\n<p>The strange use of recursion in this function is almost certainly for\nefficiency. OCaml supports for loops, so why didn't the authors use for\nloops? We'll see in the next section that OCaml's for loops are limited\nin a way which prevents them from being used in <code>string_of_float</code>. Here,\nhowever, is a more straightforward, but approximately twice as slow, way\nof writing <code>string_of_float</code>:</p>\n<pre><code class=\"language-ocaml\"># let string_of_float f =\n  let s = format_float &quot;%.12g&quot; f in\n    if String.contains s '.' || String.contains s 'e'\n      then s\n      else s ^ &quot;.&quot;\nLine 2, characters 11-23:\nError: Unbound value format_float\n</code></pre>\n<h2 id=\"using-begin--end\">Using begin ... end</h2>\n<p>Here is some code from lablgtk:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if GtkBase.Object.is_a obj cls then\n  fun _ -&gt; f obj\nelse begin\n  eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls;\n  raise Not_found\nend\n</code></pre>\n<p><code>begin</code> and <code>end</code> are what is known as <strong>syntactic sugar</strong> for open and\nclose parentheses. In the example above, all they do is group the two\nstatements in the <code>else</code>-clause together. Suppose the author had written\nthis instead:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if GtkBase.Object.is_a obj cls then\n  fun _ -&gt; f obj\nelse\n  eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls;\n  raise Not_found\n</code></pre>\n<p>Fully bracketing and properly indenting the above expression gives:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(if GtkBase.Object.is_a obj cls then\n   fun _ -&gt; f obj\n else\n   eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls\n);\nraise Not_found\n</code></pre>\n<p>Not what was intended at all. So the <code>begin</code> and <code>end</code> are necessary to\ngroup together multiple statements in a <code>then</code> or <code>else</code> clause of an if\nexpression. You can also use plain ordinary parentheses <code>( ... )</code> if you\nprefer (and I do prefer, because I <strong>loathe</strong> Pascal :-). Here are two\nsimple examples:</p>\n<pre><code class=\"language-ocaml\"># if 1 = 0 then\n    print_endline &quot;THEN&quot;\n  else begin\n    print_endline &quot;ELSE&quot;;\n    failwith &quot;else clause&quot;\n  end\nException: Failure &quot;else clause&quot;.\nELSE\n# if 1 = 0 then\n    print_endline &quot;THEN&quot;\n  else (\n    print_endline &quot;ELSE&quot;;\n    failwith &quot;else clause&quot;\n  )\nException: Failure &quot;else clause&quot;.\nELSE\n</code></pre>\n<h2 id=\"for-loops-and-while-loops\">For loops and while loops</h2>\n<p>OCaml supports a rather limited form of the familiar <code>for</code> loop:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">for variable = start_value to end_value do\n  expression\ndone\n  \nfor variable = start_value downto end_value do\n  expression\ndone\n</code></pre>\n<p>A simple but real example from lablgtk:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">for i = 1 to n_jobs () do\n  do_next_job ()\ndone\n</code></pre>\n<p>In OCaml, <code>for</code> loops are just shorthand for writing:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let i = 1 in\ndo_next_job ();\nlet i = 2 in\ndo_next_job ();\nlet i = 3 in\ndo_next_job ();\n  ...\nlet i = n_jobs () in\ndo_next_job ();\n()\n</code></pre>\n<p>OCaml doesn't support the concept of breaking out of a <code>for</code> loop early\ni.e. it has no <code>break</code>, <code>continue</code> or <code>last</code> statements. (You <em>could</em>\nthrow an exception and catch it outside, and this would run fast but\noften looks clumsy.)</p>\n<p>The expression inside an OCaml for loop should evaluate to <code>unit</code>\n(otherwise you'll get a warning), and the for loop expression as a whole\nreturns <code>unit</code>:</p>\n<pre><code class=\"language-ocaml\"># for i = 1 to 10 do i done\nLine 1, characters 20-21:\nWarning 10: this expression should have type unit.\n- : unit = ()\n</code></pre>\n<p>Functional programmers tend to use recursion instead of explicit loops,\nand regard <strong>for</strong> loops with suspicion since it can't return anything,\nhence OCaml's relatively powerless <strong>for</strong> loop. We talk about recursion\nbelow.</p>\n<p><strong>While loops</strong> in OCaml are written:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">while boolean-condition do\n  expression\ndone\n</code></pre>\n<p>As with for loops, there is no way provided by the language to break out\nof a while loop, except by throwing an exception, and this means that\nwhile loops have fairly limited use. Again, remember that functional\nprogrammers like recursion, and so while loops are second-class citizens\nin the language.</p>\n<p>If you stop to consider while loops, you may see that they aren't really\nany use at all, except in conjunction with our old friend references.\nLet's imagine that OCaml didn't have references for a moment:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let quit_loop = false in\n  while not quit_loop do\n    print_string &quot;Have you had enough yet? (y/n) &quot;;\n    let str = read_line () in\n      if str.[0] = 'y' then\n        (* how do I set quit_loop to true ?!? *)\n  done\n</code></pre>\n<p>Remember that <code>quit_loop</code> is not a real &quot;variable&quot; - the let-binding\njust makes <code>quit_loop</code> a shorthand for <code>false</code>. This means the while\nloop condition (shown in red) is always true, and the loop runs on\nforever!</p>\n<p>Luckily OCaml <em>does have</em> references, so we can write the code above if\nwe want. Don't get confused and think that the <code>!</code> (exclamation mark)\nmeans &quot;not&quot; as in C/Java. It's used here to mean &quot;dereference the\npointer&quot;, similar in fact to Forth. You're better off reading <code>!</code> as\n&quot;get&quot; or &quot;deref&quot;.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let quit_loop = ref false in\n  while not !quit_loop do\n    print_string &quot;Have you had enough yet? (y/n) &quot;;\n    let str = read_line () in\n      if str.[0] = 'y' then quit_loop := true\n  done;;\n</code></pre>\n<h2 id=\"looping-over-lists\">Looping over lists</h2>\n<p>If you want to loop over a list, don't be an imperative programmer and\nreach for your trusty six-shooter Mr. For Loop! OCaml has some better\nand faster ways to loop over lists, and they are all located in the\n<code>List</code> module. There are in fact dozens of good functions in <code>List</code>, but\nI'll only talk about the most useful ones here.</p>\n<p>First off, let's define a list for us to use:</p>\n<pre><code class=\"language-ocaml\"># let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nval my_list : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n</code></pre>\n<p>If you want to call a function once on every element of the list, use\n<code>List.iter</code>, like this:</p>\n<pre><code class=\"language-ocaml\"># let f elem =\n    Printf.printf &quot;I'm looking at element %d now\\n&quot; elem\n  in\n    List.iter f my_list\nI'm looking at element 1 now\nI'm looking at element 2 now\nI'm looking at element 3 now\nI'm looking at element 4 now\nI'm looking at element 5 now\nI'm looking at element 6 now\nI'm looking at element 7 now\nI'm looking at element 8 now\nI'm looking at element 9 now\nI'm looking at element 10 now\n- : unit = ()\n</code></pre>\n<p><code>List.iter</code> is in fact what you should think about using first every\ntime your cerebellum suggests you use a for loop.</p>\n<p>If you want to <em>transform</em> each element separately in the list - for\nexample, doubling each element in the list - then use <code>List.map</code>.</p>\n<pre><code class=\"language-ocaml\"># List.map (( * ) 2) my_list\n- : int list = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]\n</code></pre>\n<p>The function <code>List.filter</code> collects only those elements of a list which satisfy\nsome condition - e.g. returning all even numbers in a list.</p>\n<pre><code class=\"language-ocaml\"># let is_even i =\n    i mod 2 = 0\n  in\n    List.filter is_even my_list\n- : int list = [2; 4; 6; 8; 10]\n</code></pre>\n<p>To find out if a list contains some element, use <code>List.mem</code> (short for\nmember):</p>\n<pre><code class=\"language-ocaml\"># List.mem 12 my_list\n- : bool = false\n</code></pre>\n<p><code>List.for_all</code> and <code>List.exists</code> are the same as the &quot;forall&quot; and\n&quot;exist&quot; operators in predicate logic.</p>\n<p>For operating over two lists at the same time, there are &quot;-2&quot; variants\nof some of these functions, namely <code>iter2</code>, <code>map2</code>, <code>for_all2</code>,\n<code>exists2</code>.</p>\n<p>The <code>map</code> and <code>filter</code> functions operate on individual list elements in\nisolation. <strong>Fold</strong> is a more unusual operation that is best\nthought about as &quot;inserting an operator between each element of the\nlist&quot;. Suppose I wanted to add all the numbers in my list together. In\nhand-waving terms what I want to do is insert a plus sign between the\nelements in my list:</p>\n<pre><code class=\"language-ocaml\"># 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n- : int = 55\n</code></pre>\n<p>The fold operation does this, although the exact details are a little\nbit more tricky. First of all, what happens if I try to fold an empty\nlist? In the case of summing the list it would be nice if the answer was\nzero, instead of error. However if I was trying to find the product of\nthe list, I'd like the answer to be one instead. So I obviously have to\nprovide some sort of &quot;default&quot; argument to my fold. The second issue\ndoesn't arise with simple operators like <code>+</code> and <code>*</code>: what happens if\nthe operator I'm using isn't associative, ie. (a <em>op</em> b) <em>op</em> c not\nequal to a <em>op</em> (b <em>op</em> c)? In that case it would matter if I started\nfrom the left hand end of the list and worked right, versus if I started\nfrom the right and worked left. For this reason there are two versions\nof fold, called <code>List.fold_left</code> (works left to right) and\n<code>List.fold_right</code> (works right to left, and is also less efficient).</p>\n<p>Let's use <code>List.fold_left</code> to define <code>sum</code> and <code>product</code> functions for\ninteger lists:</p>\n<pre><code class=\"language-ocaml\"># let sum = List.fold_left ( + ) 0\nval sum : int list -&gt; int = &lt;fun&gt;\n# let product = List.fold_left ( * ) 1\nval product : int list -&gt; int = &lt;fun&gt;\n# sum my_list\n- : int = 55\n# product my_list\n- : int = 3628800\n</code></pre>\n<p>That was easy! Notice that I've accidentally come up with a way to do\nmathematical factorials:</p>\n<pre><code class=\"language-ocaml\"># let fact n = product (range 1 n)\nval fact : int -&gt; int = &lt;fun&gt;\n# fact 10\n- : int = 3628800\n</code></pre>\n<p>(Notice that this factorial function isn't very useful because it\noverflows the integers and gives wrong answers even for quite small\nvalues of <code>n</code>.)</p>\n<h2 id=\"looping-over-strings\">Looping over strings</h2>\n<p>The <code>String</code> module also contains many dozens of useful string-related\nfunctions, and some of them are concerned with looping over strings.</p>\n<p><code>String.copy</code> copies a string, like <code>strdup</code>. There is also a <code>String.iter</code>\nfunction which works like <code>List.iter</code>, except over the characters of the\nstring.</p>\n<h2 id=\"recursion\">Recursion</h2>\n<p>Now we come to a hard topic - recursion. Functional programmers are\ndefined by their love of recursive functions, and in many ways recursive\nfunctions in f.p. are the equivalent of loops in imperative programming.\nIn functional languages loops are second-class citizens, whilst\nrecursive functions get all the best support.</p>\n<p>Writing recursive functions requires a change in mindset from writing\nfor loops and while loops. So what I'll give you in this section will be\njust an introduction and examples.</p>\n<p>In the first example we're going to read the whole of a file into memory\n(into a long string). There are essentially three possible approaches to\nthis:</p>\n<h3 id=\"approach-1\">Approach 1</h3>\n<p>Get the length of the file, and read it all in one go using the\n<code>really_input</code> method. This is the simplest, but it might not work on\nchannels which are not really files (eg. reading keyboard input) which\nis why we look at the other two approaches.</p>\n<h3 id=\"approach-2\">Approach 2</h3>\n<p>The imperative approach, using a while loop which is broken out of using\nan exception.</p>\n<h3 id=\"approach-3\">Approach 3</h3>\n<p>A recursive loop, breaking out of the recursion again using an\nexception.</p>\n<p>We're going to introduce a few new concepts here. Our second two\napproaches will use the <code>Buffer</code> module - an expandable buffer which you\ncan think of like a string onto which you can efficiently append more\ntext at the end. We're also going to be catching the <code>End_of_file</code>\nexception which the input functions throw when they reach the end of the\ninput. Also we're going to use <code>Sys.argv.(1)</code> to get the first command\nline parameter.</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 1 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let len = in_channel_length chan in\n  let result = (Bytes.create len) in\n    really_input chan result 0 len;\n    (Bytes.to_string result)\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>Approach 1 works but is not very satisfactory because <code>read_whole_chan</code>\nwon't work on non-file channels like keyboard input or sockets. Approach\n2 involves a while loop:</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 2 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  try\n    while true do\n      let line = input_line chan in\n        Buffer.add_string buf line;\n        Buffer.add_char buf '\\n'\n    done;\n    assert false (* This is never executed\n\t                (always raises Assert_failure). *)\n  with\n    End_of_file -&gt; Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>The key to approach 2 is to look at the central while loop. Remember\nthat I said the only way to break out of a while loop early was with an\nexception? This is exactly what we're doing here. Although I haven't\ncovered exceptions yet, you probably won't have any trouble\nunderstanding the <code>End_of_file</code> exception thrown in the code above by\n<code>input_line</code> when it hits the end of the file. The buffer <code>buf</code>\naccumulates the contents of the file, and when we hit the end of the\nfile we return it (<code>Buffer.contents buf</code>).</p>\n<p>One curious point about this is the apparently superfluous statement\n(<code>assert false</code>) just after the while loop. What is it for?  Remember\nthat while loops, like for loops, are just expressions, and they return\nthe <code>unit</code> object (<code>()</code>). However OCaml demands that the return type\ninside a <code>try</code> matches the return type of each caught exception. In this\ncase because <code>End_of_file</code> results in a <code>string</code>, the main body of the\n<code>try</code> must also &quot;return&quot; a string — even though because of the infinite\nwhile loop the string could never actually be returned.  <code>assert false</code>\nhas a polymorphic type, so will unify with whatever value is returned\nby the <code>with</code> branch.</p>\n<p>Here's our recursive version. Notice that it's <em>shorter</em> than approach\n2, but not so easy to understand for imperative programmers at least:</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 3 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  let rec loop () =\n    let line = input_line chan in\n      Buffer.add_string buf line;\n      Buffer.add_char buf '\\n';\n      loop ()\n  in\n    try loop () with\n      End_of_file -&gt; Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n  printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>Again we have an infinite loop - but in this case done using recursion.\n<code>loop</code> calls itself at the end of the function. The infinite recursion\nis broken when <code>input_line</code> throws an <code>End_of_file</code> exception.</p>\n<p>It looks like approach 3 might overflow the stack if you gave it a\nparticularly large file, but this is in fact not the case. Because of\ntail recursion (discussed below) the compiler will turn the recursive\n<code>loop</code> function into a real while loop (!) which runs in constant stack\nspace.</p>\n<p>In the next example we will show how recursion is great for constructing\nor examining certain types of data structures, particularly trees. Let's\nhave a recursive type to represent files in a filesystem:</p>\n<pre><code class=\"language-ocaml\"># type filesystem = File of string | Directory of filesystem list\ntype filesystem = File of string | Directory of filesystem list\n</code></pre>\n<p>The <code>opendir</code> and <code>readdir</code> functions are used to open a directory and\nread elements from the directory. I'm going to define a handy\n<code>readdir_no_ex</code> function which hides the annoying <code>End_of_file</code>\nexception that <code>readdir</code> throws when it reaches the end of the\ndirectory:</p>\n<pre><code class=\"language-ocaml\"># #load &quot;unix.cma&quot;\n# open Unix\n# let readdir_no_ex dirh =\n  try\n    Some (readdir dirh)\n  with\n    End_of_file -&gt; None\nval readdir_no_ex : dir_handle -&gt; string option = &lt;fun&gt;\n</code></pre>\n<p>The type of <code>readdir_no_ex</code> is this. Recall our earlier discussion about\nnull pointers.</p>\n<pre><code class=\"language-ocaml\"># readdir_no_ex\n- : dir_handle -&gt; string option = &lt;fun&gt;\n</code></pre>\n<p>I'm also going to define a simple recursive function which I can use to\nconvert the <code>filesystem</code> type into a string for (eg) printing:</p>\n<pre><code class=\"language-ocaml\"># let rec string_of_filesystem fs =\n  match fs with\n  | File filename -&gt; filename ^ &quot;\\n&quot;\n  | Directory fs_list -&gt;\n      List.fold_left (^) &quot;&quot; (List.map string_of_filesystem fs_list)\nval string_of_filesystem : filesystem -&gt; string = &lt;fun&gt;\n</code></pre>\n<p>Note the use of <code>fold_left</code> and <code>map</code>. The <code>map</code> is used to\n(recursively) convert each <code>filesystem</code> in the list into a <code>string</code>.\nThen the <code>fold_left (^) &quot;&quot;</code> concatenates the list together into one big\nstring. Notice also the use of pattern matching. (The library defines a\nfunction called <code>String.concat</code> which is essentially equivalent to\n<code>fold_left (^) </code>, but implemented more efficiently).</p>\n<p>Now let's define a function to read a directory structure, recursively,\nand return a recursive <code>filesystem</code> data structure. I'm going to show\nthis function in steps, but I'll print out the entire function at the\nend of this section. First the outline of the function:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    (* ..... *) in\n  Directory (loop ())\n</code></pre>\n<p>The call to <code>opendir</code> opens up the given path and returns a <code>dir_handle</code>\nfrom which we will be able to read the names using <code>readdir_no_ex</code>\nlater. The return value of the function is going to be a\n<code>Directory fs_list</code>, so all we need to do to complete the function is to\nwrite our function <code>loop</code> which returns a list of <code>filesystem</code>s. The\ntype of <code>loop</code> will be:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">loop : unit -&gt; filesystem list\n</code></pre>\n<p>How do we define loop? Let's take it in steps again.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  let filename = readdir_no_ex dirh in\n  (* ..... *)\n</code></pre>\n<p>First we read the next filename from the directory handle. <code>filename</code>\nhas type <code>string option</code>, in other words it could be <code>None</code> or\n<code>Some &quot;foo&quot;</code> where <code>foo</code> is the name of the next filename in the\ndirectory. We also need to ignore the <code>&quot;.&quot;</code> and <code>&quot;..&quot;</code> files (ie. the\ncurrent directory and the parent directory). We can do all this with a\nnice pattern match:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  let filename = readdir_no_ex dirh in\n    match filename with\n    | None -&gt; []\n    | Some &quot;.&quot; -&gt; loop ()\n    | Some &quot;..&quot; -&gt; loop ()\n    | Some filename -&gt;\n        (* ..... *)\n</code></pre>\n<p>The <code>None</code> case is easy. Thinking recursively (!) if <code>loop</code> is called\nand we've reached the end of the directory, <code>loop</code> needs to return a\nlist of entries - and there's no entries - so it returns the empty list\n(<code>[]</code>).</p>\n<p>For <code>&quot;.&quot;</code> and <code>&quot;..&quot;</code> we just ignore the file and call <code>loop</code> again.</p>\n<p>What do we do when <code>loop</code> reads a real filename (the <code>Some filename</code>\nmatch below)? Let <code>pathname</code> be the full path to the file. We 'stat' the\nfile to see if it's really a directory. If it <em>is</em> a directory, we set\n<code>this</code> by recursively calling <code>read_directory</code> which will return\n<code>Directory something</code>. Notice that the overall result of\n<code>read_directory</code> is <code>Directory (loop ())</code>. If the file is really a file\n(not a directory) then we let <code>this</code> be <code>File pathname</code>. Then we do\nsomething clever: we return <code>this :: loop ()</code>. This is the recursive\ncall to <code>loop ()</code> to calculate the remaining directory members (a list),\nto which we prepend <code>this</code>.</p>\n<pre><code class=\"language-ocaml\"># let rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    let filename = readdir_no_ex dirh in\n      match filename with\n      | None -&gt; []\n      | Some &quot;.&quot; -&gt; loop ()\n      | Some &quot;..&quot; -&gt; loop ()\n      | Some filename -&gt;\n          let pathname = path ^ &quot;/&quot; ^ filename in\n          let stat = lstat pathname in\n          let this =\n            if stat.st_kind = S_DIR then\n              read_directory pathname\n            else\n              File pathname\n          in\n            this :: loop ()\n  in\n    Directory (loop ())\nval read_directory : string -&gt; filesystem = &lt;fun&gt;\n</code></pre>\n<p>That's quite a complex bit of recursion, but although this is a made-up\nexample, it's fairly typical of the complex patterns of recursion found\nin real-world functional programs. The two important lessons to take\naway from this are:</p>\n<ul>\n<li>\n<p>The use of recursion to build a list:</p>\n  <!-- $MDX skip -->\n  ```ocaml\n  let rec loop () =\n    a match or if statement\n    | base case -> []\n    | recursive case -> element :: loop ()\n  ```\n  Compare this to our previous `range` function. The pattern of recursion\n  is exactly the same:\n    \n  ```ocaml\n  # let rec range a b =\n    if a > b then []            (* Base case *)\n    else a :: range (a + 1) b     (* Recursive case *)\n  ```\n\t\n</li>\n<li>\n<p>The use of recursion to build up trees:</p>\n  <!-- $MDX skip -->\n  ```ocaml\n  let rec read_directory path =\n    (* blah blah *)\n    if file-is-a-directory then\n      read_directory path-to-file\n    else\n      Leaf file\n  ```\n  All that remains now to make this a working program is a little bit of\n  code to call `read_directory` and display the result:\n    \n  <!-- $MDX skip -->\n  ```ocaml\n  let path = Sys.argv.(1) in\n  let fs = read_directory path in\n  print_endline (string_of_filesystem fs)\n  ```\n\n</li>\n</ul>\n<h3 id=\"recursion-example-maximum-element-in-a-list\">Recursion example: maximum element in a list</h3>\n<p>Remember the basic recursion pattern for lists:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  a match or if statement\n  | base case -&gt; []\n  | recursive case -&gt; element :: loop ()\n</code></pre>\n<p>The key here is actually the use of the match / base case / recursive\ncase pattern. In this example - finding the maximum element in a list -\nwe're going to have two base cases and one recursive case. But before I\njump ahead to the code, let's just step back and think about the\nproblem. By thinking about the problem, the solution will appear &quot;as if\nby magic&quot; (I promise you :-)</p>\n<p>First of all, let's be clear that the maximum element of a list is just\nthe biggest one, e.g. the maximum element of the list <code>[1; 2; 3; 4; 1]</code>\nis <code>4</code>.</p>\n<p>Are there any special cases? Yes, there are. What's the maximum element\nof the empty list <code>[]</code>? There <em>isn't one</em>. If we are passed an empty\nlist, we should throw an error.</p>\n<p>What's the maximum element of a single element list such as <code>[4]</code>?\nThat's easy: it's just the element itself. So <code>list_max [4]</code> should\nreturn <code>4</code>, or in the general case, <code>list_max [x]</code> should return <code>x</code>.</p>\n<p>What's the maximum element of the general list <code>x :: remainder</code> (this is\nthe &quot;cons&quot; notation for the list, so <code>remainder</code> is the tail - also a\nlist)?</p>\n<p>Think about this for a while. Suppose you know the maximum element of\n<code>remainder</code>, which is, say, <code>y</code>. What's the maximum element of\n<code>x :: remainder</code>? It depends on whether <code>x &gt; y</code> or <code>x &lt;= y</code>. If <code>x</code> is\nbigger than <code>y</code>, then the overall maximum is <code>x</code>, whereas conversely if\n<code>x</code> is less than <code>y</code>, then the overall maximum is <code>y</code>.</p>\n<p>Does this really work? Consider <code>[1; 2; 3; 4; 1]</code> again. This is\n<code>1 :: [2; 3; 4; 1]</code>. Now the maximum element of the remainder,\n<code>[2; 3; 4; 1]</code>, is <code>4</code>. So now we're interested in <code>x = 1</code> and <code>y = 4</code>.\nThat head element <code>x = 1</code> doesn't matter because <code>y = 4</code> is bigger, so\nthe overall maximum of the whole list is <code>y = 4</code>.</p>\n<p>Let's now code those rules above up, to get a working function:</p>\n<pre><code class=\"language-ocaml\"># let rec list_max xs =\n  match xs with\n  | [] -&gt; (* empty list: fail *)\n      failwith &quot;list_max called on empty list&quot;\n  | [x] -&gt; (* single element list: return the element *)\n      x\n  | x :: remainder -&gt; (* multiple element list: recursive case *)\n      max x (list_max remainder)\nval list_max : 'a list -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>I've added comments so you can see how the rules / special cases we\ndecided upon above really correspond to lines of code.</p>\n<p>Does it work?</p>\n<pre><code class=\"language-ocaml\"># list_max [1; 2; 3; 4; 1]\n- : int = 4\n# list_max []\nException: Failure &quot;list_max called on empty list&quot;.\n# list_max [5; 4; 3; 2; 1]\n- : int = 5\n# list_max [5; 4; 3; 2; 1; 100]\n- : int = 100\n</code></pre>\n<p>Notice how the solution proposed is both (a) very different from the\nimperative for-loop solution, and (b) much more closely tied to the\nproblem specification. Functional programmers will tell you that this is\nbecause the functional style is much higher level than the imperative\nstyle, and therefore better and simpler. Whether you believe them is up\nto you. It's certainly true that it's much simpler to reason logically\nabout the functional version, which is useful if you wanted to formally\nprove that <code>list_max</code> is correct (&quot;correct&quot; being the mathematical way\nto say that a program is provably bug-free, useful for space shuttles,\nnuclear power plants and higher quality software in general).</p>\n<h3 id=\"tail-recursion\">Tail recursion</h3>\n<p>Let's look at the <code>range</code> function again for about the twentieth time:</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n  if a &gt; b then []\n  else a :: range (a+1) b\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>I'm going to rewrite it slightly to make something about the structure\nof the program clearer (still the same function however):</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n  if a &gt; b then [] else\n    let result = range (a+1) b in\n      a :: result\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Let's call it:</p>\n<pre><code class=\"language-ocaml\"># List.length (range 1 10)\n- : int = 10\n# List.length (range 1 1000000)\nStack overflow during evaluation (looping recursion?).\n</code></pre>\n<p>Hmmm ... at first sight this looks like a problem with recursive\nprogramming, and hence with the whole of functional programming! If you\nwrite your code recursively instead of iteratively then you necessarily\nrun out of stack space on large inputs, right?</p>\n<p>In fact, wrong. Compilers can perform a simple optimisation on certain\ntypes of recursive functions to turn them into while loops. These\ncertain types of recursive functions therefore run in constant stack\nspace, and with the equivalent efficiency of imperative while loops.\nThese functions are called <strong>tail-recursive functions</strong>.</p>\n<p>In tail-recursive functions, the recursive call happens last of all.\nRemember our <code>loop ()</code> functions above? They all had the form:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  (* do something *)\n  loop ()\n</code></pre>\n<p>Because the recursive call to <code>loop ()</code> happens as the very last thing,\n<code>loop</code> is tail-recursive and the compiler will turn the whole thing into\na while loop.</p>\n<p>Unfortunately <code>range</code> is not tail-recursive, and the longer version\nabove shows why. The recursive call to <code>range</code> doesn't happen as the\nvery last thing. In fact the last thing to happen is the <code>::</code> (cons)\noperation. As a result, the compiler doesn't turn the recursion into a\nwhile loop, and the function is not efficient in its use of stack space.</p>\n<p>The use of an accumulating argument or <code>accumulator</code> allows one to write\nfunctions such as <code>range</code> above in a tail-recursive manner, which means they\nwill be efficient and work properly on large inputs. Let's plan our rewritten\n<code>range</code> function which will use an accumulator argument to store the &quot;result so\nfar&quot;:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec range2 a b accum =\n  (* ... *)\n  \nlet range a b =\n  range2 a b []\n</code></pre>\n<p>The <code>accum</code> argument is going to accumulate the result. It's the &quot;result\nso far&quot;. We pass in the empty list (&quot;no result so far&quot;). The easy case\nis when <code>a &gt; b</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec range2 a b accum =\n  if a &gt; b then accum\n  else\n    (* ... *)\n</code></pre>\n<p>If <code>a &gt; b</code> (i.e. if we've reached the end of the recursion), then stop\nand return the result (<code>accum</code>).</p>\n<p>Now the trick is to write the <code>else</code>-clause and make sure that the call\nto <code>range2</code> is the very last thing that we do, so the function is\ntail-recursive:</p>\n<pre><code class=\"language-ocaml\"># let rec range2 a b accum =\n  if a &gt; b then accum\n  else range2 (a + 1) b (a :: accum)\nval range2 : int -&gt; int -&gt; int list -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>There's only one slight problem with this function: it constructs the\nlist backwards! However, this is easy to rectify by redefining range as:</p>\n<pre><code class=\"language-ocaml\"># let range a b = List.rev (range2 a b [])\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>It works this time, although it's a bit slow to run because it really\ndoes have to construct a list with a million elements in it:</p>\n<pre><code class=\"language-ocaml\"># List.length (range 1 1000000)\n- : int = 1000000\n</code></pre>\n<p>The following implementation is twice as fast as the previous one,\nbecause it does not need to reverse a list:</p>\n<pre><code class=\"language-ocaml\"># let rec range2 a b accum =\n  if b &lt; a then accum\n  else range2 a (b - 1) (b :: accum)\nval range2 : int -&gt; int -&gt; int list -&gt; int list = &lt;fun&gt;\n# let range a b =\n  range2 a b []\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>That was a brief overview of tail recursion, but in real world\nsituations determining if a function is tail recursive can be quite\nhard. What did we really learn here? One thing is that recursive\nfunctions have a dangerous trap for inexperienced programmers. Your\nfunction can appear to work for small inputs (during testing), but fail\ncatastrophically in the field when exposed to large inputs. This is one\nargument <em>against</em> using recursive functions, and for using explicit\nwhile loops when possible.</p>\n<h2 id=\"mutable-records-references-again-and-arrays\">Mutable records, references (again!) and arrays</h2>\n<p>Previously we mentioned records in passing. These are like C <code>struct</code>s:</p>\n<pre><code class=\"language-ocaml\"># type pair_of_ints = {a : int; b : int}\ntype pair_of_ints = { a : int; b : int; }\n# {a = 3; b = 5}\n- : pair_of_ints = {a = 3; b = 5}\n# {a = 3}\nLine 1, characters 1-8:\nError: Some record fields are undefined: b\n</code></pre>\n<p>One feature which I didn't cover: OCaml records can have mutable fields.\nNormally an expression like <code>{a = 3; b = 5}</code> is an immutable, constant\nobject. However if the record has <strong>mutable fields</strong>, then\nthere is a way to change those fields in the record. This is an\nimperative feature of OCaml, because functional languages don't normally\nallow mutable objects (or references or mutable arrays, which we'll look\nat in a moment).</p>\n<p>Here is an object defined with a mutable field. This field is used to\ncount how many times the object has been accessed. You could imagine\nthis being used in a caching scheme to decide which objects you'd evict\nfrom memory.</p>\n<pre><code class=\"language-ocaml\"># type name = {name : string; mutable access_count : int}\ntype name = { name : string; mutable access_count : int; }\n</code></pre>\n<p>Here is a function defined on names which prints the <code>name</code> field and\nincrements the mutable <code>access_count</code> field:</p>\n<pre><code class=\"language-ocaml\"># let print_name name =\n  print_endline (&quot;The name is &quot; ^ name.name);\n  name.access_count &lt;- name.access_count + 1\nval print_name : name -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Notice a strange, and very non-functional feature of <code>print_name</code>: it modifies\nits <code>access_count</code> parameter. This function is not &quot;pure&quot;. OCaml is a\nfunctional language, but not to the extent that it forces functional\nprogramming down your throat.</p>\n<p>Anyway, let's see <code>print_name</code> in action:</p>\n<pre><code class=\"language-ocaml\"># let n = {name = &quot;Richard Jones&quot;; access_count = 0}\nval n : name = {name = &quot;Richard Jones&quot;; access_count = 0}\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 0}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 1}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 2}\n</code></pre>\n<p>Only fields explicitly marked as <code>mutable</code> can be assigned to using the\n<code>&lt;-</code> operator. If you try to assign to a non-mutable field, OCaml won't\nlet you:</p>\n<pre><code class=\"language-ocaml\"># n.name &lt;- &quot;John Smith&quot;\nLine 1, characters 1-23:\nError: The record field name is not mutable\n</code></pre>\n<p>References, with which we should be familiar by now, are implemented\nusing records with a mutable <code>contents</code> field. Check out the definition\nin <code>Stdlib</code>:</p>\n<pre><code class=\"language-ocaml\">type 'a ref = {mutable contents : 'a}\n</code></pre>\n<p>And look closely at what the OCaml toplevel prints out for the value of\na reference:</p>\n<pre><code class=\"language-ocaml\"># let r = ref 100\nval r : int Stdlib.ref = {Stdlib.contents = 100}\n</code></pre>\n<p>Arrays are another sort of mutable structure provided by OCaml. In\nOCaml, plain lists are implemented as linked lists, and linked lists are\nslow for some types of operation. For example, getting the head of a\nlist, or iterating over a list to perform some operation on each element\nis reasonably fast. However, jumping to the n<sup>th</sup> element of a\nlist, or trying to randomly access a list - both are slow operations.\nThe OCaml <code>Array</code> type is a real array, so random access is fast, but\ninsertion and deletion of elements is slow. <code>Array</code>s are also mutable so\nyou can randomly change elements too.</p>\n<p>The basics of arrays are simple:</p>\n<pre><code class=\"language-ocaml\"># let a = Array.create 10 0\nLine 1, characters 9-21:\nAlert deprecated: Stdlib.Array.create\nUse Array.make instead.\nval a : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n# for i = 0 to Array.length a - 1 do\n  a.(i) &lt;- i\nLine 3, characters 1-3:\nError: Syntax error\n# a\n- : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n</code></pre>\n<p>Notice the syntax for writing arrays: <code>[| element; element; ... |]</code></p>\n<p>The OCaml compiler was designed with heavy numerical processing in mind\n(the sort of thing that FORTRAN is traditionally used for), and so it\ncontains various optimisations specifically for arrays of numbers,\nvectors and matrices. Here is some benchmark code for doing dense matrix\nmultiplication. Notice that it uses for-loops and is generally very\nimperative in style:</p>\n<pre><code class=\"language-ocaml\"># let size = 30\nval size : int = 30\n\n# let mkmatrix rows cols =\n  let count = ref 1\n  and last_col = cols - 1\n  and m = Array.make_matrix rows cols 0 in\n    for i = 0 to rows - 1 do\n      let mi = m.(i) in\n        for j = 0 to last_col do\n          mi.(j) &lt;- !count;\n          incr count\n        done;\n    done;\n    m\nval mkmatrix : int -&gt; int -&gt; int array array = &lt;fun&gt;\n\n# let rec inner_loop k v m1i m2 j =\n  if k &lt; 0 then v\n  else inner_loop (k - 1) (v + m1i.(k) * m2.(k).(j)) m1i m2 j\nval inner_loop : int -&gt; int -&gt; int array -&gt; int array array -&gt; int -&gt; int =\n  &lt;fun&gt;\n\n# let mmult rows cols m1 m2 m3 =\n  let last_col = cols - 1\n  and last_row = rows - 1 in\n    for i = 0 to last_row do\n      let m1i = m1.(i) and m3i = m3.(i) in\n      for j = 0 to last_col do\n        m3i.(j) &lt;- inner_loop last_row 0 m1i m2 j\n      done;\n    done\nval mmult :\n  int -&gt; int -&gt; int array array -&gt; int array array -&gt; int array array -&gt; unit =\n  &lt;fun&gt;\n\n# let () =\n  let n =\n    try int_of_string Sys.argv.(1)\n    with Invalid_argument _ -&gt; 1\n  and m1 = mkmatrix size size\n  and m2 = mkmatrix size size\n  and m3 = Array.make_matrix size size 0 in\n    for i = 1 to n - 1 do\n      mmult size size m1 m2 m3\n    done;\n    mmult size size m1 m2 m3;\n    Printf.printf &quot;%d %d %d %d\\n&quot; m3.(0).(0) m3.(2).(3) m3.(3).(2) m3.(4).(4)\nException: Failure &quot;int_of_string&quot;.\n</code></pre>\n<h2 id=\"mutually-recursive-functions\">Mutually recursive functions</h2>\n<p>Suppose I want to define two functions which call each other. This is\nactually not a very common thing to do, but it can be useful sometimes.\nHere's a contrived example (thanks to Ryan Tarpine): The number 0 is\neven. Other numbers greater than 0 are even if their predecessor is odd.\nHence:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n</code></pre>\n<p>The code above doesn't compile because we haven't defined the function\n<code>odd</code> yet! That's easy though. Zero is not odd, and other numbers\ngreater than 0 are odd if their predecessor is even. So to make this\ncomplete we need that function too:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n# let rec odd n =\n  match n with\n  | 0 -&gt; false\n  | x -&gt; even (x - 1)\nLine 4, characters 10-14:\nError: Unbound value even\n</code></pre>\n<p>The only problem is... this program doesn't compile. In order to compile\nthe <code>even</code> function, we already need the definition of <code>odd</code>, and to\ncompile <code>odd</code> we need the definition of <code>even</code>. So swapping the two\ndefinitions around won't help either.</p>\n<p>There are no &quot;forward prototypes&quot; (as seen in languages descended\nfrom C) in OCaml but there is a special syntax\nfor defining a set of two or more mutually recursive functions, like\n<code>odd</code> and <code>even</code>:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n</code></pre>\n<p>You can also\nuse similar syntax for writing mutually recursive class definitions and\nmodules.</p>\n"},{"title":"Modules","slug":"modules","description":"Learn about OCaml modules and how they can be used to cleanly separate distinct parts of your program\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## Basic usage\n\nIn OCaml, every piece of code is wrapped into a module. Optionally, a module\nitself can be a submodule of another module, pretty much like directories in a\nfile system - but we don't do this very often.\n\nWhen you write a program let's say using two files `amodule.ml` and\n`bmodule.ml`, each of these files automatically defines a module named\n`Amodule` and a module named `Bmodule` that provide whatever you put into the\nfiles.\n\nHere is the code that we have in our file `amodule.ml`:\n\n<!-- $MDX file=examples/amodule.ml -->\n```ocaml\nlet hello () = print_endline \"Hello\"\n```\n\nAnd here is what we have in `bmodule.ml`:\n\n<!-- $MDX file=examples/bmodule.ml -->\n```ocaml\nlet () = Amodule.hello ()\n```\n\nWe can compile the files in one command:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlopt -o hello amodule.ml bmodule.ml\n```\n\nOr, as a build system might do, one by one:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlopt -c amodule.ml\n$ ocamlopt -c bmodule.ml\n$ ocamlopt -o hello amodule.cmx bmodule.cmx\n```\n\nNow we have an executable that prints \"Hello\". As you can see, if you want to\naccess anything from a given module, use the name of the module (always\nstarting with a capital) followed by a dot and the thing that you want to use.\nIt may be a value, a type constructor, or anything else that a given module can\nprovide.\n\nLibraries, starting with the standard library, provide collections of modules.\nfor example, `List.iter` designates the `iter` function from the `List` module.\n\nIf you are using a given module heavily, you may want to make its contents\ndirectly accessible. For this, we use the `open` directive. In our example,\n`bmodule.ml` could have been written:\n\n<!-- $MDX skip -->\n```ocaml\nopen Amodule\nlet () = hello ()\n```\n\nUsing `open` or not is a matter of personal taste. Some modules provide names\nthat are used in many other modules. This is the case of the `List` module for\ninstance. Usually, we don't do `open List`. Other modules like `Printf` provide\nnames that are normally not subject to conflicts, such as `printf`. In order to\navoid writing `Printf.printf` all over the place, it often makes sense to place\none `open Printf` at the beginning of the file:\n\n```ocaml\nopen Printf\nlet data = [\"a\"; \"beautiful\"; \"day\"]\nlet () = List.iter (printf \"%s\\n\") data\n```\n\nThere are also local `open`s:\n\n```ocaml\n# let map_3d_matrix f m =\n  let open Array in\n    map (map (map f)) m\nval map_3d_matrix :\n  ('a -> 'b) -> 'a array array array -> 'b array array array = <fun>\n# let map_3d_matrix' f =\n  Array.(map (map (map f)))\nval map_3d_matrix' :\n  ('a -> 'b) -> 'a array array array -> 'b array array array = <fun>\n```\n\n## Interfaces and signatures\n\nA module can provide a certain number of things (functions, types, submodules,\n...) to the rest of the program that is using it. If nothing special is done,\neverything which is defined in a module will be accessible from the outside. That's\noften fine in small personal programs, but there are many situations where it\nis better that a module only provides what it is meant to provide, not any of\nthe auxiliary functions and types that are used internally.\n\nFor this, we have to define a module interface, which will act as a mask over\nthe module's implementation. Just like a module derives from a .ml file, the\ncorresponding module interface or signature derives from an .mli file. It\ncontains a list of values with their type. Let's rewrite our `amodule.ml` file\nto something called `amodule2.ml`:\n\n<!-- $MDX file=examples/amodule2.ml -->\n```ocaml\nlet hello () = print_endline \"Hello\"\n```\n\nAs it is, `Amodule` has the following interface:\n\n```ocaml\nval message : string\n\nval hello : unit -> unit\n```\n```mdx-error\nLine 1, characters 1-21:\nError: Value declarations are only allowed in signatures\n```\n\nLet's assume that accessing the `message` value directly is none of the others\nmodules' business. We want to hide it by defining a restricted interface. This\nis our `amodule2.mli` file:\n\n<!-- $MDX file=examples/amodule2.mli -->\n```ocaml\nval hello : unit -> unit\n(** Displays a greeting message. *)\n```\n\n(note the double asterisk at the beginning of the comment - it is a good habit\nto document .mli files using the format supported by\n[ocamldoc](/releases/{{! get LATEST_OCAML_VERSION_MAIN !}}/htmlman/ocamldoc.html))\n\nSuch .mli files must be compiled just before the matching .ml files. They are\ncompiled using `ocamlc`, even if .ml files are compiled to native code using\n`ocamlopt`:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlc -c amodule2.mli\n$ ocamlopt -c amodule2.ml\n```\n\n## Abstract types\n\nWhat about type definitions? We saw that values such as functions can be\nexported by placing their name and their type in a .mli file, e.g.\n\n<!-- $MDX skip -->\n```ocaml\nval hello : unit -> unit\n```\n\nBut modules often define new types. Let's define a simple record type that\nwould represent a date:\n\n```ocaml\ntype date = {day : int; month : int; year : int}\n```\n\nThere are four options when it comes to writing the .mli file:\n\n1. The type is completely omitted from the signature.\n1. The type definition is copy-pasted into the signature.\n1. The type is made abstract: only its name is given.\n1. The record fields are made read-only: `type date = private { ... }`\n\nCase 3 would look like this:\n\n```ocaml\ntype date\n```\n\nNow, users of the module can manipulate objects of type `date`, but they can't\naccess the record fields directly. They must use the functions that the module\nprovides. Let's assume the module provides three functions, one for creating a\ndate, one for computing the difference between two dates, and one that returns\nthe date in years:\n\n<!-- $MDX skip -->\n```ocaml\ntype date\n\nval create : ?days:int -> ?months:int -> ?years:int -> unit -> date\n\nval sub : date -> date -> date\n\nval years : date -> float\n```\n\nThe point is that only `create` and `sub` can be used to create `date` records.\nTherefore, it is not possible for the user of the module to create ill-formed\nrecords. Actually, our implementation uses a record, but we could change it and\nbe sure that it will not break any code that relies on this module! This makes\na lot of sense in a library since subsequent versions of the same library can\ncontinue to expose the same interface, while internally changing the\nimplementation, including data structures.\n\n## Submodules\n\n###  Submodule implementation\n\nWe saw that one `example.ml` file results automatically in one module\nimplementation named `Example`. Its module signature is automatically derived\nand is the broadest possible, or can be restricted by writing an `example.mli`\nfile.\n\nThat said, a given module can also be defined explicitly from within a file.\nThat makes it a submodule of the current module. Let's consider this\n`example.ml` file:\n\n```ocaml\nmodule Hello = struct\n  let message = \"Hello\"\n  let hello () = print_endline message\nend\n\nlet goodbye () = print_endline \"Goodbye\"\n\nlet hello_goodbye () =\n  Hello.hello ();\n  goodbye ()\n```\n\nFrom another file, it is clear that we now have two levels of modules.  We can\nwrite:\n\n<!-- $MDX skip -->\n```ocaml\nlet () =\n  Example.Hello.hello ();\n  Example.goodbye ()\n```\n\n###  Submodule interface\n\nWe can also restrict the interface of a given submodule. It is called a module\ntype. Let's do it in our `example.ml` file:\n\n```ocaml\nmodule Hello : sig\n val hello : unit -> unit\nend\n= \nstruct\n  let message = \"Hello\"\n  let hello () = print_endline message\nend\n  \n(* At this point, Hello.message is not accessible anymore. *)\n\nlet goodbye () = print_endline \"Goodbye\"\n\nlet hello_goodbye () =\n  Hello.hello ();\n  goodbye ()\n```\n\nThe definition of the `Hello` module above is the equivalent of a\n`hello.mli`/`hello.ml` pair of files. Writing all of that in one block of code\nis not elegant so, in general, we prefer to define the module signature\nseparately:\n\n<!-- $MDX skip -->\n```ocaml\nmodule type Hello_type = sig\n val hello : unit -> unit\nend\n  \nmodule Hello : Hello_type = struct\n  ...\nend\n```\n\n`Hello_type` is a named module type, and can be reused to define other module\ninterfaces.\n\n## Practical manipulation of modules\n\n###  Displaying the interface of a module\n\nYou can use the `ocaml` toplevel to visualize the contents of an existing\nmodule, such as `List`:\n\n```ocaml\n# #show List;;\nmodule List = List\nmodule List :\n  sig\n    type 'a t = 'a list = [] | (::) of 'a * 'a list\n    val length : 'a t -> int\n    val compare_lengths : 'a t -> 'b t -> int\n    val compare_length_with : 'a t -> int -> int\n    val cons : 'a -> 'a t -> 'a t\n    val hd : 'a t -> 'a\n    val tl : 'a t -> 'a t\n    val nth : 'a t -> int -> 'a\n    val nth_opt : 'a t -> int -> 'a option\n    val rev : 'a t -> 'a t\n    val init : int -> (int -> 'a) -> 'a t\n    val append : 'a t -> 'a t -> 'a t\n    val rev_append : 'a t -> 'a t -> 'a t\n    val concat : 'a t t -> 'a t\n    val flatten : 'a t t -> 'a t\n    val iter : ('a -> unit) -> 'a t -> unit\n    val iteri : (int -> 'a -> unit) -> 'a t -> unit\n    val map : ('a -> 'b) -> 'a t -> 'b t\n    val mapi : (int -> 'a -> 'b) -> 'a t -> 'b t\n    val rev_map : ('a -> 'b) -> 'a t -> 'b t\n    val filter_map : ('a -> 'b option) -> 'a t -> 'b t\n    val concat_map : ('a -> 'b t) -> 'a t -> 'b t\n    val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a\n    val fold_right : ('a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val iter2 : ('a -> 'b -> unit) -> 'a t -> 'b t -> unit\n    val map2 : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t\n    val rev_map2 : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t\n    val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b t -> 'c t -> 'a\n    val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a t -> 'b t -> 'c -> 'c\n    val for_all : ('a -> bool) -> 'a t -> bool\n    val exists : ('a -> bool) -> 'a t -> bool\n    val for_all2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool\n    val exists2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool\n    val mem : 'a -> 'a t -> bool\n    val memq : 'a -> 'a t -> bool\n    val find : ('a -> bool) -> 'a t -> 'a\n    val find_opt : ('a -> bool) -> 'a t -> 'a option\n    val find_map : ('a -> 'b option) -> 'a t -> 'b option\n    val filter : ('a -> bool) -> 'a t -> 'a t\n    val find_all : ('a -> bool) -> 'a t -> 'a t\n    val partition : ('a -> bool) -> 'a t -> 'a t * 'a t\n    val assoc : 'a -> ('a * 'b) t -> 'b\n    val assoc_opt : 'a -> ('a * 'b) t -> 'b option\n    val assq : 'a -> ('a * 'b) t -> 'b\n    val assq_opt : 'a -> ('a * 'b) t -> 'b option\n    val mem_assoc : 'a -> ('a * 'b) t -> bool\n    val mem_assq : 'a -> ('a * 'b) t -> bool\n    val remove_assoc : 'a -> ('a * 'b) t -> ('a * 'b) t\n    val remove_assq : 'a -> ('a * 'b) t -> ('a * 'b) t\n    val split : ('a * 'b) t -> 'a t * 'b t\n    val combine : 'a t -> 'b t -> ('a * 'b) t\n    val sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val stable_sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val fast_sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val sort_uniq : ('a -> 'a -> int) -> 'a t -> 'a t\n    val merge : ('a -> 'a -> int) -> 'a t -> 'a t -> 'a t\n    val to_seq : 'a t -> 'a Seq.t\n    val of_seq : 'a Seq.t -> 'a t\n  end\n```\n\nThere is online documentation for each library.\n\n###  Module inclusion\n\nLet's say we feel that a function is missing from the standard `List` module,\nbut we really want it as if it were part of it. In an `extensions.ml` file, we\ncan achieve this effect by using the `include` directive:\n\n```ocaml\n# module List = struct\n  include List\n  let rec optmap f = function\n    | [] -> []\n    | hd :: tl ->\n       match f hd with\n       | None -> optmap f tl\n       | Some x -> x :: optmap f tl\n  end\nmodule List :\n  sig\n    type 'a t = 'a list = [] | (::) of 'a * 'a list\n    val length : 'a t -> int\n    val compare_lengths : 'a t -> 'b t -> int\n    val compare_length_with : 'a t -> int -> int\n    val cons : 'a -> 'a t -> 'a t\n    val hd : 'a t -> 'a\n    val tl : 'a t -> 'a t\n    val nth : 'a t -> int -> 'a\n    val nth_opt : 'a t -> int -> 'a option\n    val rev : 'a t -> 'a t\n    val init : int -> (int -> 'a) -> 'a t\n    val append : 'a t -> 'a t -> 'a t\n    val rev_append : 'a t -> 'a t -> 'a t\n    val concat : 'a t t -> 'a t\n    val flatten : 'a t t -> 'a t\n    val iter : ('a -> unit) -> 'a t -> unit\n    val iteri : (int -> 'a -> unit) -> 'a t -> unit\n    val map : ('a -> 'b) -> 'a t -> 'b t\n    val mapi : (int -> 'a -> 'b) -> 'a t -> 'b t\n    val rev_map : ('a -> 'b) -> 'a t -> 'b t\n    val filter_map : ('a -> 'b option) -> 'a t -> 'b t\n    val concat_map : ('a -> 'b t) -> 'a t -> 'b t\n    val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a\n    val fold_right : ('a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val iter2 : ('a -> 'b -> unit) -> 'a t -> 'b t -> unit\n    val map2 : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t\n    val rev_map2 : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t\n    val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b t -> 'c t -> 'a\n    val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a t -> 'b t -> 'c -> 'c\n    val for_all : ('a -> bool) -> 'a t -> bool\n    val exists : ('a -> bool) -> 'a t -> bool\n    val for_all2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool\n    val exists2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool\n    val mem : 'a -> 'a t -> bool\n    val memq : 'a -> 'a t -> bool\n    val find : ('a -> bool) -> 'a t -> 'a\n    val find_opt : ('a -> bool) -> 'a t -> 'a option\n    val find_map : ('a -> 'b option) -> 'a t -> 'b option\n    val filter : ('a -> bool) -> 'a t -> 'a t\n    val find_all : ('a -> bool) -> 'a t -> 'a t\n    val partition : ('a -> bool) -> 'a t -> 'a t * 'a t\n    val assoc : 'a -> ('a * 'b) t -> 'b\n    val assoc_opt : 'a -> ('a * 'b) t -> 'b option\n    val assq : 'a -> ('a * 'b) t -> 'b\n    val assq_opt : 'a -> ('a * 'b) t -> 'b option\n    val mem_assoc : 'a -> ('a * 'b) t -> bool\n    val mem_assq : 'a -> ('a * 'b) t -> bool\n    val remove_assoc : 'a -> ('a * 'b) t -> ('a * 'b) t\n    val remove_assq : 'a -> ('a * 'b) t -> ('a * 'b) t\n    val split : ('a * 'b) t -> 'a t * 'b t\n    val combine : 'a t -> 'b t -> ('a * 'b) t\n    val sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val stable_sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val fast_sort : ('a -> 'a -> int) -> 'a t -> 'a t\n    val sort_uniq : ('a -> 'a -> int) -> 'a t -> 'a t\n    val merge : ('a -> 'a -> int) -> 'a t -> 'a t -> 'a t\n    val to_seq : 'a t -> 'a Seq.t\n    val of_seq : 'a Seq.t -> 'a t\n    val optmap : ('a -> 'b option) -> 'a t -> 'b t\n  end\n```\n\nIt creates a module `Extensions.List` that has everything the standard `List`\nmodule has, plus a new `optmap` function. From another file, all we have to do\nto override the default `List` module is `open Extensions` at the beginning of\nthe .ml file:\n\n<!-- $MDX skip -->\n```ocaml\nopen Extensions\n\n...\n\nList.optmap ...\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#basic-usage\">Basic usage</a>\n</li>\n<li><a href=\"#interfaces-and-signatures\">Interfaces and signatures</a>\n</li>\n<li><a href=\"#abstract-types\">Abstract types</a>\n</li>\n<li><a href=\"#submodules\">Submodules</a>\n</li>\n<li><a href=\"#practical-manipulation-of-modules\">Practical manipulation of modules</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"basic-usage\">Basic usage</h2>\n<p>In OCaml, every piece of code is wrapped into a module. Optionally, a module\nitself can be a submodule of another module, pretty much like directories in a\nfile system - but we don't do this very often.</p>\n<p>When you write a program let's say using two files <code>amodule.ml</code> and\n<code>bmodule.ml</code>, each of these files automatically defines a module named\n<code>Amodule</code> and a module named <code>Bmodule</code> that provide whatever you put into the\nfiles.</p>\n<p>Here is the code that we have in our file <code>amodule.ml</code>:</p>\n<!-- $MDX file=examples/amodule.ml -->\n<pre><code class=\"language-ocaml\">let hello () = print_endline &quot;Hello&quot;\n</code></pre>\n<p>And here is what we have in <code>bmodule.ml</code>:</p>\n<!-- $MDX file=examples/bmodule.ml -->\n<pre><code class=\"language-ocaml\">let () = Amodule.hello ()\n</code></pre>\n<p>We can compile the files in one command:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlopt -o hello amodule.ml bmodule.ml\n</code></pre>\n<p>Or, as a build system might do, one by one:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlopt -c amodule.ml\n$ ocamlopt -c bmodule.ml\n$ ocamlopt -o hello amodule.cmx bmodule.cmx\n</code></pre>\n<p>Now we have an executable that prints &quot;Hello&quot;. As you can see, if you want to\naccess anything from a given module, use the name of the module (always\nstarting with a capital) followed by a dot and the thing that you want to use.\nIt may be a value, a type constructor, or anything else that a given module can\nprovide.</p>\n<p>Libraries, starting with the standard library, provide collections of modules.\nfor example, <code>List.iter</code> designates the <code>iter</code> function from the <code>List</code> module.</p>\n<p>If you are using a given module heavily, you may want to make its contents\ndirectly accessible. For this, we use the <code>open</code> directive. In our example,\n<code>bmodule.ml</code> could have been written:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Amodule\nlet () = hello ()\n</code></pre>\n<p>Using <code>open</code> or not is a matter of personal taste. Some modules provide names\nthat are used in many other modules. This is the case of the <code>List</code> module for\ninstance. Usually, we don't do <code>open List</code>. Other modules like <code>Printf</code> provide\nnames that are normally not subject to conflicts, such as <code>printf</code>. In order to\navoid writing <code>Printf.printf</code> all over the place, it often makes sense to place\none <code>open Printf</code> at the beginning of the file:</p>\n<pre><code class=\"language-ocaml\">open Printf\nlet data = [&quot;a&quot;; &quot;beautiful&quot;; &quot;day&quot;]\nlet () = List.iter (printf &quot;%s\\n&quot;) data\n</code></pre>\n<p>There are also local <code>open</code>s:</p>\n<pre><code class=\"language-ocaml\"># let map_3d_matrix f m =\n  let open Array in\n    map (map (map f)) m\nval map_3d_matrix :\n  ('a -&gt; 'b) -&gt; 'a array array array -&gt; 'b array array array = &lt;fun&gt;\n# let map_3d_matrix' f =\n  Array.(map (map (map f)))\nval map_3d_matrix' :\n  ('a -&gt; 'b) -&gt; 'a array array array -&gt; 'b array array array = &lt;fun&gt;\n</code></pre>\n<h2 id=\"interfaces-and-signatures\">Interfaces and signatures</h2>\n<p>A module can provide a certain number of things (functions, types, submodules,\n...) to the rest of the program that is using it. If nothing special is done,\neverything which is defined in a module will be accessible from the outside. That's\noften fine in small personal programs, but there are many situations where it\nis better that a module only provides what it is meant to provide, not any of\nthe auxiliary functions and types that are used internally.</p>\n<p>For this, we have to define a module interface, which will act as a mask over\nthe module's implementation. Just like a module derives from a .ml file, the\ncorresponding module interface or signature derives from an .mli file. It\ncontains a list of values with their type. Let's rewrite our <code>amodule.ml</code> file\nto something called <code>amodule2.ml</code>:</p>\n<!-- $MDX file=examples/amodule2.ml -->\n<pre><code class=\"language-ocaml\">let hello () = print_endline &quot;Hello&quot;\n</code></pre>\n<p>As it is, <code>Amodule</code> has the following interface:</p>\n<pre><code class=\"language-ocaml\">val message : string\n\nval hello : unit -&gt; unit\n</code></pre>\n<pre><code class=\"language-mdx-error\">Line 1, characters 1-21:\nError: Value declarations are only allowed in signatures\n</code></pre>\n<p>Let's assume that accessing the <code>message</code> value directly is none of the others\nmodules' business. We want to hide it by defining a restricted interface. This\nis our <code>amodule2.mli</code> file:</p>\n<!-- $MDX file=examples/amodule2.mli -->\n<pre><code class=\"language-ocaml\">val hello : unit -&gt; unit\n(** Displays a greeting message. *)\n</code></pre>\n<p>(note the double asterisk at the beginning of the comment - it is a good habit\nto document .mli files using the format supported by\n[ocamldoc](/releases/{{! get LATEST_OCAML_VERSION_MAIN !}}/htmlman/ocamldoc.html))</p>\n<p>Such .mli files must be compiled just before the matching .ml files. They are\ncompiled using <code>ocamlc</code>, even if .ml files are compiled to native code using\n<code>ocamlopt</code>:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlc -c amodule2.mli\n$ ocamlopt -c amodule2.ml\n</code></pre>\n<h2 id=\"abstract-types\">Abstract types</h2>\n<p>What about type definitions? We saw that values such as functions can be\nexported by placing their name and their type in a .mli file, e.g.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">val hello : unit -&gt; unit\n</code></pre>\n<p>But modules often define new types. Let's define a simple record type that\nwould represent a date:</p>\n<pre><code class=\"language-ocaml\">type date = {day : int; month : int; year : int}\n</code></pre>\n<p>There are four options when it comes to writing the .mli file:</p>\n<ol>\n<li>The type is completely omitted from the signature.\n</li>\n<li>The type definition is copy-pasted into the signature.\n</li>\n<li>The type is made abstract: only its name is given.\n</li>\n<li>The record fields are made read-only: <code>type date = private { ... }</code>\n</li>\n</ol>\n<p>Case 3 would look like this:</p>\n<pre><code class=\"language-ocaml\">type date\n</code></pre>\n<p>Now, users of the module can manipulate objects of type <code>date</code>, but they can't\naccess the record fields directly. They must use the functions that the module\nprovides. Let's assume the module provides three functions, one for creating a\ndate, one for computing the difference between two dates, and one that returns\nthe date in years:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">type date\n\nval create : ?days:int -&gt; ?months:int -&gt; ?years:int -&gt; unit -&gt; date\n\nval sub : date -&gt; date -&gt; date\n\nval years : date -&gt; float\n</code></pre>\n<p>The point is that only <code>create</code> and <code>sub</code> can be used to create <code>date</code> records.\nTherefore, it is not possible for the user of the module to create ill-formed\nrecords. Actually, our implementation uses a record, but we could change it and\nbe sure that it will not break any code that relies on this module! This makes\na lot of sense in a library since subsequent versions of the same library can\ncontinue to expose the same interface, while internally changing the\nimplementation, including data structures.</p>\n<h2 id=\"submodules\">Submodules</h2>\n<h3 id=\"submodule-implementation\">Submodule implementation</h3>\n<p>We saw that one <code>example.ml</code> file results automatically in one module\nimplementation named <code>Example</code>. Its module signature is automatically derived\nand is the broadest possible, or can be restricted by writing an <code>example.mli</code>\nfile.</p>\n<p>That said, a given module can also be defined explicitly from within a file.\nThat makes it a submodule of the current module. Let's consider this\n<code>example.ml</code> file:</p>\n<pre><code class=\"language-ocaml\">module Hello = struct\n  let message = &quot;Hello&quot;\n  let hello () = print_endline message\nend\n\nlet goodbye () = print_endline &quot;Goodbye&quot;\n\nlet hello_goodbye () =\n  Hello.hello ();\n  goodbye ()\n</code></pre>\n<p>From another file, it is clear that we now have two levels of modules.  We can\nwrite:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let () =\n  Example.Hello.hello ();\n  Example.goodbye ()\n</code></pre>\n<h3 id=\"submodule-interface\">Submodule interface</h3>\n<p>We can also restrict the interface of a given submodule. It is called a module\ntype. Let's do it in our <code>example.ml</code> file:</p>\n<pre><code class=\"language-ocaml\">module Hello : sig\n val hello : unit -&gt; unit\nend\n= \nstruct\n  let message = &quot;Hello&quot;\n  let hello () = print_endline message\nend\n  \n(* At this point, Hello.message is not accessible anymore. *)\n\nlet goodbye () = print_endline &quot;Goodbye&quot;\n\nlet hello_goodbye () =\n  Hello.hello ();\n  goodbye ()\n</code></pre>\n<p>The definition of the <code>Hello</code> module above is the equivalent of a\n<code>hello.mli</code>/<code>hello.ml</code> pair of files. Writing all of that in one block of code\nis not elegant so, in general, we prefer to define the module signature\nseparately:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">module type Hello_type = sig\n val hello : unit -&gt; unit\nend\n  \nmodule Hello : Hello_type = struct\n  ...\nend\n</code></pre>\n<p><code>Hello_type</code> is a named module type, and can be reused to define other module\ninterfaces.</p>\n<h2 id=\"practical-manipulation-of-modules\">Practical manipulation of modules</h2>\n<h3 id=\"displaying-the-interface-of-a-module\">Displaying the interface of a module</h3>\n<p>You can use the <code>ocaml</code> toplevel to visualize the contents of an existing\nmodule, such as <code>List</code>:</p>\n<pre><code class=\"language-ocaml\"># #show List;;\nmodule List = List\nmodule List :\n  sig\n    type 'a t = 'a list = [] | (::) of 'a * 'a list\n    val length : 'a t -&gt; int\n    val compare_lengths : 'a t -&gt; 'b t -&gt; int\n    val compare_length_with : 'a t -&gt; int -&gt; int\n    val cons : 'a -&gt; 'a t -&gt; 'a t\n    val hd : 'a t -&gt; 'a\n    val tl : 'a t -&gt; 'a t\n    val nth : 'a t -&gt; int -&gt; 'a\n    val nth_opt : 'a t -&gt; int -&gt; 'a option\n    val rev : 'a t -&gt; 'a t\n    val init : int -&gt; (int -&gt; 'a) -&gt; 'a t\n    val append : 'a t -&gt; 'a t -&gt; 'a t\n    val rev_append : 'a t -&gt; 'a t -&gt; 'a t\n    val concat : 'a t t -&gt; 'a t\n    val flatten : 'a t t -&gt; 'a t\n    val iter : ('a -&gt; unit) -&gt; 'a t -&gt; unit\n    val iteri : (int -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; unit\n    val map : ('a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val mapi : (int -&gt; 'a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val rev_map : ('a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val filter_map : ('a -&gt; 'b option) -&gt; 'a t -&gt; 'b t\n    val concat_map : ('a -&gt; 'b t) -&gt; 'a t -&gt; 'b t\n    val fold_left : ('a -&gt; 'b -&gt; 'a) -&gt; 'a -&gt; 'b t -&gt; 'a\n    val fold_right : ('a -&gt; 'b -&gt; 'b) -&gt; 'a t -&gt; 'b -&gt; 'b\n    val iter2 : ('a -&gt; 'b -&gt; unit) -&gt; 'a t -&gt; 'b t -&gt; unit\n    val map2 : ('a -&gt; 'b -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c t\n    val rev_map2 : ('a -&gt; 'b -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c t\n    val fold_left2 : ('a -&gt; 'b -&gt; 'c -&gt; 'a) -&gt; 'a -&gt; 'b t -&gt; 'c t -&gt; 'a\n    val fold_right2 : ('a -&gt; 'b -&gt; 'c -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c -&gt; 'c\n    val for_all : ('a -&gt; bool) -&gt; 'a t -&gt; bool\n    val exists : ('a -&gt; bool) -&gt; 'a t -&gt; bool\n    val for_all2 : ('a -&gt; 'b -&gt; bool) -&gt; 'a t -&gt; 'b t -&gt; bool\n    val exists2 : ('a -&gt; 'b -&gt; bool) -&gt; 'a t -&gt; 'b t -&gt; bool\n    val mem : 'a -&gt; 'a t -&gt; bool\n    val memq : 'a -&gt; 'a t -&gt; bool\n    val find : ('a -&gt; bool) -&gt; 'a t -&gt; 'a\n    val find_opt : ('a -&gt; bool) -&gt; 'a t -&gt; 'a option\n    val find_map : ('a -&gt; 'b option) -&gt; 'a t -&gt; 'b option\n    val filter : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t\n    val find_all : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t\n    val partition : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t * 'a t\n    val assoc : 'a -&gt; ('a * 'b) t -&gt; 'b\n    val assoc_opt : 'a -&gt; ('a * 'b) t -&gt; 'b option\n    val assq : 'a -&gt; ('a * 'b) t -&gt; 'b\n    val assq_opt : 'a -&gt; ('a * 'b) t -&gt; 'b option\n    val mem_assoc : 'a -&gt; ('a * 'b) t -&gt; bool\n    val mem_assq : 'a -&gt; ('a * 'b) t -&gt; bool\n    val remove_assoc : 'a -&gt; ('a * 'b) t -&gt; ('a * 'b) t\n    val remove_assq : 'a -&gt; ('a * 'b) t -&gt; ('a * 'b) t\n    val split : ('a * 'b) t -&gt; 'a t * 'b t\n    val combine : 'a t -&gt; 'b t -&gt; ('a * 'b) t\n    val sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val stable_sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val fast_sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val sort_uniq : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val merge : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t -&gt; 'a t\n    val to_seq : 'a t -&gt; 'a Seq.t\n    val of_seq : 'a Seq.t -&gt; 'a t\n  end\n</code></pre>\n<p>There is online documentation for each library.</p>\n<h3 id=\"module-inclusion\">Module inclusion</h3>\n<p>Let's say we feel that a function is missing from the standard <code>List</code> module,\nbut we really want it as if it were part of it. In an <code>extensions.ml</code> file, we\ncan achieve this effect by using the <code>include</code> directive:</p>\n<pre><code class=\"language-ocaml\"># module List = struct\n  include List\n  let rec optmap f = function\n    | [] -&gt; []\n    | hd :: tl -&gt;\n       match f hd with\n       | None -&gt; optmap f tl\n       | Some x -&gt; x :: optmap f tl\n  end\nmodule List :\n  sig\n    type 'a t = 'a list = [] | (::) of 'a * 'a list\n    val length : 'a t -&gt; int\n    val compare_lengths : 'a t -&gt; 'b t -&gt; int\n    val compare_length_with : 'a t -&gt; int -&gt; int\n    val cons : 'a -&gt; 'a t -&gt; 'a t\n    val hd : 'a t -&gt; 'a\n    val tl : 'a t -&gt; 'a t\n    val nth : 'a t -&gt; int -&gt; 'a\n    val nth_opt : 'a t -&gt; int -&gt; 'a option\n    val rev : 'a t -&gt; 'a t\n    val init : int -&gt; (int -&gt; 'a) -&gt; 'a t\n    val append : 'a t -&gt; 'a t -&gt; 'a t\n    val rev_append : 'a t -&gt; 'a t -&gt; 'a t\n    val concat : 'a t t -&gt; 'a t\n    val flatten : 'a t t -&gt; 'a t\n    val iter : ('a -&gt; unit) -&gt; 'a t -&gt; unit\n    val iteri : (int -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; unit\n    val map : ('a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val mapi : (int -&gt; 'a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val rev_map : ('a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val filter_map : ('a -&gt; 'b option) -&gt; 'a t -&gt; 'b t\n    val concat_map : ('a -&gt; 'b t) -&gt; 'a t -&gt; 'b t\n    val fold_left : ('a -&gt; 'b -&gt; 'a) -&gt; 'a -&gt; 'b t -&gt; 'a\n    val fold_right : ('a -&gt; 'b -&gt; 'b) -&gt; 'a t -&gt; 'b -&gt; 'b\n    val iter2 : ('a -&gt; 'b -&gt; unit) -&gt; 'a t -&gt; 'b t -&gt; unit\n    val map2 : ('a -&gt; 'b -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c t\n    val rev_map2 : ('a -&gt; 'b -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c t\n    val fold_left2 : ('a -&gt; 'b -&gt; 'c -&gt; 'a) -&gt; 'a -&gt; 'b t -&gt; 'c t -&gt; 'a\n    val fold_right2 : ('a -&gt; 'b -&gt; 'c -&gt; 'c) -&gt; 'a t -&gt; 'b t -&gt; 'c -&gt; 'c\n    val for_all : ('a -&gt; bool) -&gt; 'a t -&gt; bool\n    val exists : ('a -&gt; bool) -&gt; 'a t -&gt; bool\n    val for_all2 : ('a -&gt; 'b -&gt; bool) -&gt; 'a t -&gt; 'b t -&gt; bool\n    val exists2 : ('a -&gt; 'b -&gt; bool) -&gt; 'a t -&gt; 'b t -&gt; bool\n    val mem : 'a -&gt; 'a t -&gt; bool\n    val memq : 'a -&gt; 'a t -&gt; bool\n    val find : ('a -&gt; bool) -&gt; 'a t -&gt; 'a\n    val find_opt : ('a -&gt; bool) -&gt; 'a t -&gt; 'a option\n    val find_map : ('a -&gt; 'b option) -&gt; 'a t -&gt; 'b option\n    val filter : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t\n    val find_all : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t\n    val partition : ('a -&gt; bool) -&gt; 'a t -&gt; 'a t * 'a t\n    val assoc : 'a -&gt; ('a * 'b) t -&gt; 'b\n    val assoc_opt : 'a -&gt; ('a * 'b) t -&gt; 'b option\n    val assq : 'a -&gt; ('a * 'b) t -&gt; 'b\n    val assq_opt : 'a -&gt; ('a * 'b) t -&gt; 'b option\n    val mem_assoc : 'a -&gt; ('a * 'b) t -&gt; bool\n    val mem_assq : 'a -&gt; ('a * 'b) t -&gt; bool\n    val remove_assoc : 'a -&gt; ('a * 'b) t -&gt; ('a * 'b) t\n    val remove_assq : 'a -&gt; ('a * 'b) t -&gt; ('a * 'b) t\n    val split : ('a * 'b) t -&gt; 'a t * 'b t\n    val combine : 'a t -&gt; 'b t -&gt; ('a * 'b) t\n    val sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val stable_sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val fast_sort : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val sort_uniq : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t\n    val merge : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t -&gt; 'a t\n    val to_seq : 'a t -&gt; 'a Seq.t\n    val of_seq : 'a Seq.t -&gt; 'a t\n    val optmap : ('a -&gt; 'b option) -&gt; 'a t -&gt; 'b t\n  end\n</code></pre>\n<p>It creates a module <code>Extensions.List</code> that has everything the standard <code>List</code>\nmodule has, plus a new <code>optmap</code> function. From another file, all we have to do\nto override the default <code>List</code> module is <code>open Extensions</code> at the beginning of\nthe .ml file:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Extensions\n\n...\n\nList.optmap ...\n</code></pre>\n"},{"title":"Labels","slug":"labels","description":"Provide labels to your functions arguments\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Labelled and optional arguments to functions\n\nPython has a nice syntax for writing arguments to functions. Here's\nan example (from the Python tutorial, since I'm not a Python\nprogrammer):\n\n```python\ndef ask_ok(prompt, retries=4, complaint='Yes or no, please!'):\n  # function definition omitted\n```\nHere are the ways we can call this Python function:\n\n```python\nask_ok ('Do you really want to quit?')\nask_ok ('Overwrite the file?', 2)\nask_ok (prompt='Are you sure?')\nask_ok (complaint='Please answer yes or no!', prompt='Are you sure?')\n```\n\nNotice that in Python we are allowed to name arguments when we call\nthem, or use the usual function call syntax, and we can have optional\narguments with default values.\n\nOCaml also has a way to label arguments and have optional arguments with\ndefault values.\n\nThe basic syntax is:\n\n```ocaml\n# let rec range ~first:a ~last:b =\n  if a > b then []\n  else a :: range ~first:(a + 1) ~last:b\nval range : first:int -> last:int -> int list = <fun>\n```\n\n(Notice that both `to` and `end` are reserved words in OCaml, so they\ncannot be used as labels. So you cannot have `~from/~to` or\n`~start/~end`.)\n\nThe type of our previous `range` function was:\n\n<!-- $MDX skip -->\n```ocaml\nrange : int -> int -> int list\n```\n\nAnd the type of our new `range` function with labelled arguments is:\n\n```ocaml\n# range\n- : first:int -> last:int -> int list = <fun>\n```\n\nConfusingly, the `~` (tilde) is *not* shown in the type definition, but\nyou need to use it everywhere else.\n\nWith labelled arguments, it doesn't matter which order you give the\narguments anymore:\n\n```ocaml\n# range ~first:1 ~last:10\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n# range ~last:10 ~first:1\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n```\n\nThere is also a shorthand way to name the arguments, so that the label\nis the same as the variable in the function definition:\n\n```ocaml\n# let may ~f x =\n  match x with\n  | None -> ()\n  | Some x -> ignore (f x)\nval may : f:('a -> 'b) -> 'a option -> unit = <fun>\n```\n\nIt's worth spending some time working out exactly what this function\ndoes, and also working out by hand its type signature. There's a lot\ngoing on. First of all, the parameter `~f` is just shorthand for `~f:f`\n(ie. the label is `~f` and the variable used in the function is `f`).\nSecondly notice that the function takes two parameters. The second\nparameter (`x`) is unlabelled - it is permitted for a function to take a\nmixture of labelled and unlabelled arguments if you want.\n\nWhat is the type of the labelled `f` parameter? Obviously it's a\nfunction of some sort.\n\nWhat is the type of the unlabelled `x` parameter? The `match` clause\ngives us a clue. It's an `'a option`.\n\nThis tells us that `f` takes an `'a` parameter, and the return value of\n`f` is ignored, so it could be anything. The type of `f` is therefore\n`'a -> 'b`.\n\nThe `may` function as a whole returns `unit`. Notice in each case of the\n`match` the result is `()`.\n\nThus the type of the `may` function is (and you can verify this in the\nOCaml interactive toplevel if you want):\n\n```ocaml\n# may\n- : f:('a -> 'b) -> 'a option -> unit = <fun>\n```\nWhat does this function do? Running the function in the OCaml toplevel\ngives us some clues:\n\n```ocaml\n# may ~f:print_endline None\n- : unit = ()\n# may ~f:print_endline (Some \"hello\")\nhello\n- : unit = ()\n```\n\nIf the unlabelled argument is a “null pointer” then `may` does nothing.\nOtherwise `may` calls the `f` function on the argument. Why is this\nuseful? We're just about to find out ...\n\n###  Optional arguments\nOptional arguments are like labelled arguments, but we use `?` instead\nof `~` in front of them. Here is an example:\n\n```ocaml\n# let rec range ?(step=1) a b =\n  if a > b then []\n  else a :: range ~step (a + step) b\nval range : ?step:int -> int -> int -> int list = <fun>\n```\n\nNote the somewhat confusing syntax, switching between `?` and `~`. We'll\ntalk about that in the next section. Here is how you call this function:\n\n```ocaml\n# range 1 10\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n# range 1 10 ~step:2\n- : int list = [1; 3; 5; 7; 9]\n```\n\nIn this case, `?(step=1)` fairly obviously means that `~step` is an\noptional argument which defaults to 1. We can also omit the default\nvalue and just have an optional argument. This example is modified from\nlablgtk:\n\n```ocaml\n# type window =\n  {mutable title: string;\n   mutable width: int;\n   mutable height: int}\ntype window = {\n  mutable title : string;\n  mutable width : int;\n  mutable height : int;\n}\n# let create_window () =\n  {title = \"none\"; width = 640; height = 480;}\nval create_window : unit -> window = <fun>\n# let set_title window title =\n  window.title <- title\nval set_title : window -> string -> unit = <fun>\n# let set_width window width =\n  window.width <- width\nval set_width : window -> int -> unit = <fun>\n# let set_height window height =\n  window.height <- height\nval set_height : window -> int -> unit = <fun>\n# let open_window ?title ?width ?height () =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nval open_window :\n  ?title:string -> ?width:int -> ?height:int -> unit -> window = <fun>\n```\n\nThis example is significantly complex and quite subtle, but the pattern\nused is very common in the lablgtk source code. Let's concentrate on the\nsimple `create_window` function first. This function takes a `unit` and\nreturns a `window`, initialized with default settings for title, width\nand height:\n\n```ocaml\n# create_window ()\n- : window = {title = \"none\"; width = 640; height = 480}\n```\n\nThe `set_title`, `set_width` and `set_height` functions are impure\nfunctions which modify the `window` structure, in the obvious way. For\nexample:\n\n```ocaml\n# let w = create_window () in\n  set_title w \"My Application\";\n  w\n- : window = {title = \"My Application\"; width = 640; height = 480}\n```\n\nSo far this is just the imperative \"mutable records\" which we talked\nabout in the previous chapter. Now the complex part is the `open_window`\nfunction. This function takes *4* arguments, three of them optional,\nfollowed by a required, unlabelled `unit`. Let's first see this function\nin action:\n\n```ocaml\n# open_window ~title:\"My Application\" ()\n- : window = {title = \"My Application\"; width = 640; height = 480}\n# open_window ~title:\"Clock\" ~width:128 ~height:128 ()\n- : window = {title = \"Clock\"; width = 128; height = 128}\n```\n\nIt does what you expect, but how?! The secret is in the `may` function\n(see above) and the fact that the optional parameters *don't* have\ndefaults.\n\nWhen an optional parameter doesn't have a default, then it has type\n`'a option`. The `'a` would normally be inferred by type inference, so\nin the case of `?title` above, this has type `string option`.\n\nRemember the `may` function? It takes a function and an argument, and\ncalls the function on the argument provided the argument isn't `None`.\nSo:\n\n<!-- $MDX skip -->\n```ocaml\n# may ~f:(set_title window) title\n```\n\nIf the optional title argument is not specified by the caller, then\n`title` = `None`, so `may` does nothing. But if we call the function\nwith, for example,\n\n```ocaml\n# open_window ~title:\"My Application\" ()\n- : window = {title = \"My Application\"; width = 640; height = 480}\n```\n\nthen `title` = `Some \"My Application\"`, and `may` therefore calls\n`set_title window \"My Application\"`.\n\nYou should make sure you fully understand this example before proceeding\nto the next section.\n\n###  \"Warning: This optional argument cannot be erased\"\nWe've just touched upon labels and optional arguments, but even this\nbrief explanation should have raised several questions. The first may be\nwhy the extra `unit` argument to `open_window`? Let's try defining this\nfunction without the extra `unit`:\n\n```ocaml\n# let open_window ?title ?width ?height =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nLine 1, characters 32-38:\nWarning 16: this optional argument cannot be erased.\nval open_window : ?title:string -> ?width:int -> ?height:int -> window =\n  <fun>\n```\n\nAlthough OCaml has compiled the function, it has generated a somewhat\ninfamous warning: \"This optional argument cannot be erased\", referring\nto the final `?height` argument. To try to show what's going on here,\nlet's call our modified `open_window` function:\n\n```ocaml\n# open_window\n- : ?title:string -> ?width:int -> ?height:int -> window = <fun>\n# open_window ~title:\"My Application\"\n- : ?width:int -> ?height:int -> window = <fun>\n```\n\nDid that work or not? No it didn't. In fact it didn't even run the\n`open_window` function at all. Instead it printed some strange type\ninformation. What's going on?\n\nRecall currying and uncurrying, and partial application of functions. If\nwe have a function `plus` defined as:\n\n```ocaml\n# let plus x y =\n  x + y\nval plus : int -> int -> int = <fun>\n```\nWe can partially apply this, for example as `plus 2` which is \"the\nfunction that adds 2 to things\":\n\n```ocaml\n# let f = plus 2\nval f : int -> int = <fun>\n# f 5\n- : int = 7\n# f 100\n- : int = 102\n```\n\nIn the `plus` example, the OCaml compiler can easily work out that\n`plus 2` doesn't have enough arguments supplied yet. It needs another\nargument before the `plus` function itself can be executed. Therefore\n`plus 2` is a function which is waiting for its extra argument to come\nalong.\n\nThings are not so clear when we add optional arguments into the mix. The\ncall to `open_window;;` above is a case in point. Does the user mean\n\"execute `open_window` now\"? Or does the user mean to supply some or all\nof the optional arguments later? Is `open_window;;` waiting for extra\narguments to come along like `plus 2`?\n\nOCaml plays it safe and doesn't execute `open_window`. Instead it treats\nit as a partial function application. The expression `open_window`\nliterally evaluates to a function value.\n\nLet's go back to the original and working definition of `open_window`\nwhere we had the extra unlabelled `unit` argument at the end:\n\n```ocaml\n# let open_window ?title ?width ?height () =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nval open_window :\n  ?title:string -> ?width:int -> ?height:int -> unit -> window = <fun>\n```\n\nIf you want to pass optional arguments to `open_window` you must do so\nbefore the final `unit`, so if you type:\n\n```ocaml\n# open_window ()\n- : window = {title = \"none\"; width = 640; height = 480}\n```\nyou must mean \"execute `open_window` now with all optional arguments\nunspecified\". Whereas if you type:\n\n```ocaml\n# open_window\n- : ?title:string -> ?width:int -> ?height:int -> unit -> window = <fun>\n```\nyou mean \"give me the functional value\" or (more usually in the\ntoplevel) \"print out the type of `open_window`\".\n\n###  More `~`shorthand\nLet's rewrite the `range` function yet again, this time using as much\nshorthand as possible for the labels:\n\n```ocaml\n# let rec range ~first ~last =\n  if first > last then []\n  else first :: range ~first:(first + 1) ~last\nval range : first:int -> last:int -> int list = <fun>\n```\n\nRecall that `~foo` on its own is short for `~foo:foo`. This applies also\nwhen calling functions as well as declaring the arguments to functions,\nhence in the above the highlighted red `~last` is short for\n`~last:last`.\n\n###  Using `?foo` in a function call\nThere's another little wrinkle concerning optional arguments. Suppose we\nwrite a function around `open_window` to open up an application:\n\n```ocaml\n# let open_application ?width ?height () =\n  open_window ~title:\"My Application\" ~width ~height\nLine 2, characters 40-45:\nError: This expression has type 'a option\n       but an expression was expected of type int\n```\n\nRecall that `~width` is shorthand for `~width:width`. The type of\n`width` is `'a option`, but `open_window ~width:` expects an `int`.\n\nOCaml provides more syntactic sugar. Writing `?width` in the function\ncall is shorthand for writing `~width:(unwrap width)` where `unwrap`\nwould be a function which would remove the \"`option` wrapper\" around\n`width` (it's not actually possible to write an `unwrap` function like\nthis, but conceptually that's the idea). So the correct way to write\nthis function is:\n\n```ocaml\n# let open_application ?width ?height () =\n  open_window ~title:\"My Application\" ?width ?height\nval open_application : ?width:int -> ?height:int -> unit -> unit -> window =\n  <fun>\n```\n\n###  When and when not to use `~` and `?`\nThe syntax for labels and optional arguments is confusing, and you may\noften wonder when to use `~foo`, when to use `?foo` and when to use\nplain `foo`. It's something of a black art which takes practice to get\nright.\n\n`?foo` is only used when declaring the arguments of a function, ie:\n\n<!-- $MDX skip -->\n```ocaml\nlet f ?arg1 ... =\n```\n\nor when using the specialised \"unwrap `option` wrapper\" form for\nfunction calls:\n\n```ocaml\n# let open_application ?width ?height () =\n  open_window ~title:\"My Application\" ?width ?height\nval open_application : ?width:int -> ?height:int -> unit -> unit -> window =\n  <fun>\n```\nThe declaration `?foo` creates a variable called `foo`, so if you need\nthe value of `?foo`, use just `foo`.\n\nThe same applies to labels. Only use the `~foo` form when declaring\narguments of a function, ie:\n\n<!-- $MDX skip -->\n```ocaml\nlet f ~foo:foo ... =\n```\n\nThe declaration `~foo:foo` creates a variable called simply `foo`, so if\nyou need the value just use plain `foo`.\n\nThings, however, get complicated for two reasons: first, the shorthand\nform `~foo` (equivalent to `~foo:foo`), and second, when you call a\nfunction which takes a labelled or optional argument and you use the\nshorthand form.\n\nHere is some apparently obscure code from lablgtk to demonstrate all of\nthis:\n\n<!-- $MDX skip -->\n```ocaml\n# let html ?border_width ?width ?height ?packing ?show () =  (* line 1 *)\n  let w = create () in\n  load_empty w;\n  Container.set w ?border_width ?width ?height;            (* line 4 *)\n  pack_return (new html w) ~packing ~show                  (* line 5 *)\n```\nOn line 1 we have the function definition. Notice there are 5 optional\narguments, and the mandatory `unit` 6<sup>th</sup> argument. Each of the\noptional arguments is going to define a variable, eg. `border_width`, of\ntype `'a option`.\n\nOn line 4 we use the special `?foo` form for passing optional arguments\nto functions which take optional arguments. `Container.set` has the\nfollowing type:\n\n<!-- $MDX skip -->\n```ocaml\nmodule Container = struct\n  let set ?border_width ?(width = -2) ?(height = -2) w =\n    (* ... *)\n```\nLine 5 uses the `~`shorthand. Writing this in long form:\n\n```ocaml\n# pack_return (new html w) ~packing:packing ~show:show\nLine 1, characters 1-12:\nError: Unbound value pack_return\n```\n\nThe `pack_return` function actually takes mandatory labelled arguments\ncalled `~packing` and `~show`, each of type `'a option`. In other words,\n`pack_return` explicitly unwraps the `option` wrapper.\n\n## More variants (“polymorphic variants”)\nTry compiling the following C code:\n\n```C\n#include <stdio.h>\n#include <fcntl.h>\n#include <unistd.h>\n\nenum lock { open, close };\n\nmain ()\n{\n  int fd, n;\n  char buffer[256];\n\n  fd = open (\"/etc/motd\", O_RDONLY);                     // line 12\n  while ((n = read (fd, buffer, sizeof buffer)) > 0)\n    write (1, buffer, n);\n  close (fd);                                            // line 15\n}\n```\nWhen I compile the code I get a whole bunch of errors including:\n\n```text\ntest.c: In function `main':\ntest.c:12: error: called object is not a function\ntest.c:15: error: called object is not a function\n```\nThis illustrates one problem with enumerated types (enums) in C. In the\nexample above, one enum statement reserves *three* symbols, namely\n`lock`, `open` and `close`. Here's another example:\n\n```C\nenum lock { open, close };\nenum door { open, close };\n```\nCompiling gives:\n\n```text\ntest.c:2: error: conflicting types for `open'\ntest.c:1: error: previous declaration of `open'\ntest.c:2: error: conflicting types for `close'\ntest.c:1: error: previous declaration of `close'\n```\nThe first enum defines the symbol `open` as something of type\n`enum lock`. You cannot reuse that symbol in another enum.\n\nThis will be familiar to most C/C++ programmers, and they won't write\nnaive code like that above. However the same issue happens with OCaml\nvariants, but OCaml provides a way to work around it.\n\nHere is some OCaml code, which actually *does* compile:\n\n```ocaml\n# type lock = Open | Close\ntype lock = Open | Close\n# type door = Open | Close\ntype door = Open | Close\n```\nAfter running those two statements, what is the type of `Open`? We can\nfind out easily enough in the toplevel:\n\n```ocaml\n# type lock = Open | Close\ntype lock = Open | Close\n# type door = Open | Close\ntype door = Open | Close\n# Open\n- : door = Open\n```\n\nOCaml uses the most recent definition for `Open`, giving it the type\n`door`. This is actually not such a serious problem because if you\naccidentally tried to use `Open` in the type context of a `lock`, then\nOCaml's wonderful type inference would immediately spot the error and\nyou wouldn't be able to compile the code.\n\nSo far, so much like C. Now I said that OCaml provides a way to work\naround the constraint that `Open` can only have one type. In other\nwords, suppose I want to use `Open` to mean either \"the `Open` of type\n`lock`\" or \"the `Open` of type `door`\" and I want OCaml to work out\nwhich one I mean.\n\nThe syntax is slightly different, but here is how we do it:\n\n```ocaml\n# type lock = [ `Open | `Close ]\ntype lock = [ `Close | `Open ]\n# type door = [ `Open | `Close ]\ntype door = [ `Close | `Open ]\n```\nNotice the syntactic differences:\n\n1. Each variant name is prefixed with `` ` `` (a back tick).\n1. You have to put square brackets (`[]`) around the alternatives.\n\nThe question naturally arises: What is the type of `` `Open``?\n\n```ocaml\n# `Open\n- : [> `Open ] = `Open\n```\n`` [> `Open] `` can be read as\n`` [ `Open | and some other possibilities which we don't know about ] ``.\n\nThe “>” (greater than) sign indicates that the set of possibilities is\nbigger than those listed (open-ended).\n\nThere's nothing special about `` `Open ``. *Any* back-ticked word can be\nused as a type, even one which we haven't mentioned before:\n\n```ocaml\n# `Foo\n- : [> `Foo ] = `Foo\n# `Foo 42\n- : [> `Foo of int ] = `Foo 42\n```\nLet's write a function to print the state of a `lock`:\n\n```ocaml\n# let print_lock st =\n  match st with\n  | `Open -> print_endline \"The lock is open\"\n  | `Close -> print_endline \"The lock is closed\"\nval print_lock : [< `Close | `Open ] -> unit = <fun>\n```\nTake a careful look at the type of that function. Type inference has\nworked out that the `st` argument has type `` [< `Close | `Open] ``. The\n`<` (less than) sign means that this is a __closed class__. In\nother words, this function will only work on `` `Close`` or `` `Open``\nand not on anything else.\n\n```ocaml\n# print_lock `Open\nThe lock is open\n- : unit = ()\n```\n\nNotice that `print_lock` works just as well with a `door` as with a\n`lock`! We've deliberately given up some type safety, and type inference\nis now being used to help guess what we mean, rather than enforce\ncorrect coding.\n\nThis is only an introduction to polymorphic variants. Because of the\nreduction in type safety, it is recommended that you don't use these in\nyour code. You will, however, see them in advanced OCaml code quite a\nlot precisely because advanced programmers will sometimes want to weaken\nthe type system to write advanced idioms.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#labelled-and-optional-arguments-to-functions\">Labelled and optional arguments to functions</a>\n</li>\n<li><a href=\"#more-variants-polymorphic-variants\">More variants (“polymorphic variants”)</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"labelled-and-optional-arguments-to-functions\">Labelled and optional arguments to functions</h2>\n<p>Python has a nice syntax for writing arguments to functions. Here's\nan example (from the Python tutorial, since I'm not a Python\nprogrammer):</p>\n<pre><code class=\"language-python\">def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):\n  # function definition omitted\n</code></pre>\n<p>Here are the ways we can call this Python function:</p>\n<pre><code class=\"language-python\">ask_ok ('Do you really want to quit?')\nask_ok ('Overwrite the file?', 2)\nask_ok (prompt='Are you sure?')\nask_ok (complaint='Please answer yes or no!', prompt='Are you sure?')\n</code></pre>\n<p>Notice that in Python we are allowed to name arguments when we call\nthem, or use the usual function call syntax, and we can have optional\narguments with default values.</p>\n<p>OCaml also has a way to label arguments and have optional arguments with\ndefault values.</p>\n<p>The basic syntax is:</p>\n<pre><code class=\"language-ocaml\"># let rec range ~first:a ~last:b =\n  if a &gt; b then []\n  else a :: range ~first:(a + 1) ~last:b\nval range : first:int -&gt; last:int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>(Notice that both <code>to</code> and <code>end</code> are reserved words in OCaml, so they\ncannot be used as labels. So you cannot have <code>~from/~to</code> or\n<code>~start/~end</code>.)</p>\n<p>The type of our previous <code>range</code> function was:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">range : int -&gt; int -&gt; int list\n</code></pre>\n<p>And the type of our new <code>range</code> function with labelled arguments is:</p>\n<pre><code class=\"language-ocaml\"># range\n- : first:int -&gt; last:int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Confusingly, the <code>~</code> (tilde) is <em>not</em> shown in the type definition, but\nyou need to use it everywhere else.</p>\n<p>With labelled arguments, it doesn't matter which order you give the\narguments anymore:</p>\n<pre><code class=\"language-ocaml\"># range ~first:1 ~last:10\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n# range ~last:10 ~first:1\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n</code></pre>\n<p>There is also a shorthand way to name the arguments, so that the label\nis the same as the variable in the function definition:</p>\n<pre><code class=\"language-ocaml\"># let may ~f x =\n  match x with\n  | None -&gt; ()\n  | Some x -&gt; ignore (f x)\nval may : f:('a -&gt; 'b) -&gt; 'a option -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>It's worth spending some time working out exactly what this function\ndoes, and also working out by hand its type signature. There's a lot\ngoing on. First of all, the parameter <code>~f</code> is just shorthand for <code>~f:f</code>\n(ie. the label is <code>~f</code> and the variable used in the function is <code>f</code>).\nSecondly notice that the function takes two parameters. The second\nparameter (<code>x</code>) is unlabelled - it is permitted for a function to take a\nmixture of labelled and unlabelled arguments if you want.</p>\n<p>What is the type of the labelled <code>f</code> parameter? Obviously it's a\nfunction of some sort.</p>\n<p>What is the type of the unlabelled <code>x</code> parameter? The <code>match</code> clause\ngives us a clue. It's an <code>'a option</code>.</p>\n<p>This tells us that <code>f</code> takes an <code>'a</code> parameter, and the return value of\n<code>f</code> is ignored, so it could be anything. The type of <code>f</code> is therefore\n<code>'a -&gt; 'b</code>.</p>\n<p>The <code>may</code> function as a whole returns <code>unit</code>. Notice in each case of the\n<code>match</code> the result is <code>()</code>.</p>\n<p>Thus the type of the <code>may</code> function is (and you can verify this in the\nOCaml interactive toplevel if you want):</p>\n<pre><code class=\"language-ocaml\"># may\n- : f:('a -&gt; 'b) -&gt; 'a option -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>What does this function do? Running the function in the OCaml toplevel\ngives us some clues:</p>\n<pre><code class=\"language-ocaml\"># may ~f:print_endline None\n- : unit = ()\n# may ~f:print_endline (Some &quot;hello&quot;)\nhello\n- : unit = ()\n</code></pre>\n<p>If the unlabelled argument is a “null pointer” then <code>may</code> does nothing.\nOtherwise <code>may</code> calls the <code>f</code> function on the argument. Why is this\nuseful? We're just about to find out ...</p>\n<h3 id=\"optional-arguments\">Optional arguments</h3>\n<p>Optional arguments are like labelled arguments, but we use <code>?</code> instead\nof <code>~</code> in front of them. Here is an example:</p>\n<pre><code class=\"language-ocaml\"># let rec range ?(step=1) a b =\n  if a &gt; b then []\n  else a :: range ~step (a + step) b\nval range : ?step:int -&gt; int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Note the somewhat confusing syntax, switching between <code>?</code> and <code>~</code>. We'll\ntalk about that in the next section. Here is how you call this function:</p>\n<pre><code class=\"language-ocaml\"># range 1 10\n- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n# range 1 10 ~step:2\n- : int list = [1; 3; 5; 7; 9]\n</code></pre>\n<p>In this case, <code>?(step=1)</code> fairly obviously means that <code>~step</code> is an\noptional argument which defaults to 1. We can also omit the default\nvalue and just have an optional argument. This example is modified from\nlablgtk:</p>\n<pre><code class=\"language-ocaml\"># type window =\n  {mutable title: string;\n   mutable width: int;\n   mutable height: int}\ntype window = {\n  mutable title : string;\n  mutable width : int;\n  mutable height : int;\n}\n# let create_window () =\n  {title = &quot;none&quot;; width = 640; height = 480;}\nval create_window : unit -&gt; window = &lt;fun&gt;\n# let set_title window title =\n  window.title &lt;- title\nval set_title : window -&gt; string -&gt; unit = &lt;fun&gt;\n# let set_width window width =\n  window.width &lt;- width\nval set_width : window -&gt; int -&gt; unit = &lt;fun&gt;\n# let set_height window height =\n  window.height &lt;- height\nval set_height : window -&gt; int -&gt; unit = &lt;fun&gt;\n# let open_window ?title ?width ?height () =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nval open_window :\n  ?title:string -&gt; ?width:int -&gt; ?height:int -&gt; unit -&gt; window = &lt;fun&gt;\n</code></pre>\n<p>This example is significantly complex and quite subtle, but the pattern\nused is very common in the lablgtk source code. Let's concentrate on the\nsimple <code>create_window</code> function first. This function takes a <code>unit</code> and\nreturns a <code>window</code>, initialized with default settings for title, width\nand height:</p>\n<pre><code class=\"language-ocaml\"># create_window ()\n- : window = {title = &quot;none&quot;; width = 640; height = 480}\n</code></pre>\n<p>The <code>set_title</code>, <code>set_width</code> and <code>set_height</code> functions are impure\nfunctions which modify the <code>window</code> structure, in the obvious way. For\nexample:</p>\n<pre><code class=\"language-ocaml\"># let w = create_window () in\n  set_title w &quot;My Application&quot;;\n  w\n- : window = {title = &quot;My Application&quot;; width = 640; height = 480}\n</code></pre>\n<p>So far this is just the imperative &quot;mutable records&quot; which we talked\nabout in the previous chapter. Now the complex part is the <code>open_window</code>\nfunction. This function takes <em>4</em> arguments, three of them optional,\nfollowed by a required, unlabelled <code>unit</code>. Let's first see this function\nin action:</p>\n<pre><code class=\"language-ocaml\"># open_window ~title:&quot;My Application&quot; ()\n- : window = {title = &quot;My Application&quot;; width = 640; height = 480}\n# open_window ~title:&quot;Clock&quot; ~width:128 ~height:128 ()\n- : window = {title = &quot;Clock&quot;; width = 128; height = 128}\n</code></pre>\n<p>It does what you expect, but how?! The secret is in the <code>may</code> function\n(see above) and the fact that the optional parameters <em>don't</em> have\ndefaults.</p>\n<p>When an optional parameter doesn't have a default, then it has type\n<code>'a option</code>. The <code>'a</code> would normally be inferred by type inference, so\nin the case of <code>?title</code> above, this has type <code>string option</code>.</p>\n<p>Remember the <code>may</code> function? It takes a function and an argument, and\ncalls the function on the argument provided the argument isn't <code>None</code>.\nSo:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\"># may ~f:(set_title window) title\n</code></pre>\n<p>If the optional title argument is not specified by the caller, then\n<code>title</code> = <code>None</code>, so <code>may</code> does nothing. But if we call the function\nwith, for example,</p>\n<pre><code class=\"language-ocaml\"># open_window ~title:&quot;My Application&quot; ()\n- : window = {title = &quot;My Application&quot;; width = 640; height = 480}\n</code></pre>\n<p>then <code>title</code> = <code>Some &quot;My Application&quot;</code>, and <code>may</code> therefore calls\n<code>set_title window &quot;My Application&quot;</code>.</p>\n<p>You should make sure you fully understand this example before proceeding\nto the next section.</p>\n<h3 id=\"warning-this-optional-argument-cannot-be-erased\">&quot;Warning: This optional argument cannot be erased&quot;</h3>\n<p>We've just touched upon labels and optional arguments, but even this\nbrief explanation should have raised several questions. The first may be\nwhy the extra <code>unit</code> argument to <code>open_window</code>? Let's try defining this\nfunction without the extra <code>unit</code>:</p>\n<pre><code class=\"language-ocaml\"># let open_window ?title ?width ?height =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nLine 1, characters 32-38:\nWarning 16: this optional argument cannot be erased.\nval open_window : ?title:string -&gt; ?width:int -&gt; ?height:int -&gt; window =\n  &lt;fun&gt;\n</code></pre>\n<p>Although OCaml has compiled the function, it has generated a somewhat\ninfamous warning: &quot;This optional argument cannot be erased&quot;, referring\nto the final <code>?height</code> argument. To try to show what's going on here,\nlet's call our modified <code>open_window</code> function:</p>\n<pre><code class=\"language-ocaml\"># open_window\n- : ?title:string -&gt; ?width:int -&gt; ?height:int -&gt; window = &lt;fun&gt;\n# open_window ~title:&quot;My Application&quot;\n- : ?width:int -&gt; ?height:int -&gt; window = &lt;fun&gt;\n</code></pre>\n<p>Did that work or not? No it didn't. In fact it didn't even run the\n<code>open_window</code> function at all. Instead it printed some strange type\ninformation. What's going on?</p>\n<p>Recall currying and uncurrying, and partial application of functions. If\nwe have a function <code>plus</code> defined as:</p>\n<pre><code class=\"language-ocaml\"># let plus x y =\n  x + y\nval plus : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>We can partially apply this, for example as <code>plus 2</code> which is &quot;the\nfunction that adds 2 to things&quot;:</p>\n<pre><code class=\"language-ocaml\"># let f = plus 2\nval f : int -&gt; int = &lt;fun&gt;\n# f 5\n- : int = 7\n# f 100\n- : int = 102\n</code></pre>\n<p>In the <code>plus</code> example, the OCaml compiler can easily work out that\n<code>plus 2</code> doesn't have enough arguments supplied yet. It needs another\nargument before the <code>plus</code> function itself can be executed. Therefore\n<code>plus 2</code> is a function which is waiting for its extra argument to come\nalong.</p>\n<p>Things are not so clear when we add optional arguments into the mix. The\ncall to <code>open_window;;</code> above is a case in point. Does the user mean\n&quot;execute <code>open_window</code> now&quot;? Or does the user mean to supply some or all\nof the optional arguments later? Is <code>open_window;;</code> waiting for extra\narguments to come along like <code>plus 2</code>?</p>\n<p>OCaml plays it safe and doesn't execute <code>open_window</code>. Instead it treats\nit as a partial function application. The expression <code>open_window</code>\nliterally evaluates to a function value.</p>\n<p>Let's go back to the original and working definition of <code>open_window</code>\nwhere we had the extra unlabelled <code>unit</code> argument at the end:</p>\n<pre><code class=\"language-ocaml\"># let open_window ?title ?width ?height () =\n  let window = create_window () in\n  may ~f:(set_title window) title;\n  may ~f:(set_width window) width;\n  may ~f:(set_height window) height;\n  window\nval open_window :\n  ?title:string -&gt; ?width:int -&gt; ?height:int -&gt; unit -&gt; window = &lt;fun&gt;\n</code></pre>\n<p>If you want to pass optional arguments to <code>open_window</code> you must do so\nbefore the final <code>unit</code>, so if you type:</p>\n<pre><code class=\"language-ocaml\"># open_window ()\n- : window = {title = &quot;none&quot;; width = 640; height = 480}\n</code></pre>\n<p>you must mean &quot;execute <code>open_window</code> now with all optional arguments\nunspecified&quot;. Whereas if you type:</p>\n<pre><code class=\"language-ocaml\"># open_window\n- : ?title:string -&gt; ?width:int -&gt; ?height:int -&gt; unit -&gt; window = &lt;fun&gt;\n</code></pre>\n<p>you mean &quot;give me the functional value&quot; or (more usually in the\ntoplevel) &quot;print out the type of <code>open_window</code>&quot;.</p>\n<h3 id=\"more-shorthand\">More <code>~</code>shorthand</h3>\n<p>Let's rewrite the <code>range</code> function yet again, this time using as much\nshorthand as possible for the labels:</p>\n<pre><code class=\"language-ocaml\"># let rec range ~first ~last =\n  if first &gt; last then []\n  else first :: range ~first:(first + 1) ~last\nval range : first:int -&gt; last:int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Recall that <code>~foo</code> on its own is short for <code>~foo:foo</code>. This applies also\nwhen calling functions as well as declaring the arguments to functions,\nhence in the above the highlighted red <code>~last</code> is short for\n<code>~last:last</code>.</p>\n<h3 id=\"using-foo-in-a-function-call\">Using <code>?foo</code> in a function call</h3>\n<p>There's another little wrinkle concerning optional arguments. Suppose we\nwrite a function around <code>open_window</code> to open up an application:</p>\n<pre><code class=\"language-ocaml\"># let open_application ?width ?height () =\n  open_window ~title:&quot;My Application&quot; ~width ~height\nLine 2, characters 40-45:\nError: This expression has type 'a option\n       but an expression was expected of type int\n</code></pre>\n<p>Recall that <code>~width</code> is shorthand for <code>~width:width</code>. The type of\n<code>width</code> is <code>'a option</code>, but <code>open_window ~width:</code> expects an <code>int</code>.</p>\n<p>OCaml provides more syntactic sugar. Writing <code>?width</code> in the function\ncall is shorthand for writing <code>~width:(unwrap width)</code> where <code>unwrap</code>\nwould be a function which would remove the &quot;<code>option</code> wrapper&quot; around\n<code>width</code> (it's not actually possible to write an <code>unwrap</code> function like\nthis, but conceptually that's the idea). So the correct way to write\nthis function is:</p>\n<pre><code class=\"language-ocaml\"># let open_application ?width ?height () =\n  open_window ~title:&quot;My Application&quot; ?width ?height\nval open_application : ?width:int -&gt; ?height:int -&gt; unit -&gt; unit -&gt; window =\n  &lt;fun&gt;\n</code></pre>\n<h3 id=\"when-and-when-not-to-use--and-\">When and when not to use <code>~</code> and <code>?</code></h3>\n<p>The syntax for labels and optional arguments is confusing, and you may\noften wonder when to use <code>~foo</code>, when to use <code>?foo</code> and when to use\nplain <code>foo</code>. It's something of a black art which takes practice to get\nright.</p>\n<p><code>?foo</code> is only used when declaring the arguments of a function, ie:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f ?arg1 ... =\n</code></pre>\n<p>or when using the specialised &quot;unwrap <code>option</code> wrapper&quot; form for\nfunction calls:</p>\n<pre><code class=\"language-ocaml\"># let open_application ?width ?height () =\n  open_window ~title:&quot;My Application&quot; ?width ?height\nval open_application : ?width:int -&gt; ?height:int -&gt; unit -&gt; unit -&gt; window =\n  &lt;fun&gt;\n</code></pre>\n<p>The declaration <code>?foo</code> creates a variable called <code>foo</code>, so if you need\nthe value of <code>?foo</code>, use just <code>foo</code>.</p>\n<p>The same applies to labels. Only use the <code>~foo</code> form when declaring\narguments of a function, ie:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let f ~foo:foo ... =\n</code></pre>\n<p>The declaration <code>~foo:foo</code> creates a variable called simply <code>foo</code>, so if\nyou need the value just use plain <code>foo</code>.</p>\n<p>Things, however, get complicated for two reasons: first, the shorthand\nform <code>~foo</code> (equivalent to <code>~foo:foo</code>), and second, when you call a\nfunction which takes a labelled or optional argument and you use the\nshorthand form.</p>\n<p>Here is some apparently obscure code from lablgtk to demonstrate all of\nthis:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\"># let html ?border_width ?width ?height ?packing ?show () =  (* line 1 *)\n  let w = create () in\n  load_empty w;\n  Container.set w ?border_width ?width ?height;            (* line 4 *)\n  pack_return (new html w) ~packing ~show                  (* line 5 *)\n</code></pre>\n<p>On line 1 we have the function definition. Notice there are 5 optional\narguments, and the mandatory <code>unit</code> 6<sup>th</sup> argument. Each of the\noptional arguments is going to define a variable, eg. <code>border_width</code>, of\ntype <code>'a option</code>.</p>\n<p>On line 4 we use the special <code>?foo</code> form for passing optional arguments\nto functions which take optional arguments. <code>Container.set</code> has the\nfollowing type:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">module Container = struct\n  let set ?border_width ?(width = -2) ?(height = -2) w =\n    (* ... *)\n</code></pre>\n<p>Line 5 uses the <code>~</code>shorthand. Writing this in long form:</p>\n<pre><code class=\"language-ocaml\"># pack_return (new html w) ~packing:packing ~show:show\nLine 1, characters 1-12:\nError: Unbound value pack_return\n</code></pre>\n<p>The <code>pack_return</code> function actually takes mandatory labelled arguments\ncalled <code>~packing</code> and <code>~show</code>, each of type <code>'a option</code>. In other words,\n<code>pack_return</code> explicitly unwraps the <code>option</code> wrapper.</p>\n<h2 id=\"more-variants-polymorphic-variants\">More variants (“polymorphic variants”)</h2>\n<p>Try compiling the following C code:</p>\n<pre><code class=\"language-C\">#include &lt;stdio.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nenum lock { open, close };\n\nmain ()\n{\n  int fd, n;\n  char buffer[256];\n\n  fd = open (&quot;/etc/motd&quot;, O_RDONLY);                     // line 12\n  while ((n = read (fd, buffer, sizeof buffer)) &gt; 0)\n    write (1, buffer, n);\n  close (fd);                                            // line 15\n}\n</code></pre>\n<p>When I compile the code I get a whole bunch of errors including:</p>\n<pre><code class=\"language-text\">test.c: In function `main':\ntest.c:12: error: called object is not a function\ntest.c:15: error: called object is not a function\n</code></pre>\n<p>This illustrates one problem with enumerated types (enums) in C. In the\nexample above, one enum statement reserves <em>three</em> symbols, namely\n<code>lock</code>, <code>open</code> and <code>close</code>. Here's another example:</p>\n<pre><code class=\"language-C\">enum lock { open, close };\nenum door { open, close };\n</code></pre>\n<p>Compiling gives:</p>\n<pre><code class=\"language-text\">test.c:2: error: conflicting types for `open'\ntest.c:1: error: previous declaration of `open'\ntest.c:2: error: conflicting types for `close'\ntest.c:1: error: previous declaration of `close'\n</code></pre>\n<p>The first enum defines the symbol <code>open</code> as something of type\n<code>enum lock</code>. You cannot reuse that symbol in another enum.</p>\n<p>This will be familiar to most C/C++ programmers, and they won't write\nnaive code like that above. However the same issue happens with OCaml\nvariants, but OCaml provides a way to work around it.</p>\n<p>Here is some OCaml code, which actually <em>does</em> compile:</p>\n<pre><code class=\"language-ocaml\"># type lock = Open | Close\ntype lock = Open | Close\n# type door = Open | Close\ntype door = Open | Close\n</code></pre>\n<p>After running those two statements, what is the type of <code>Open</code>? We can\nfind out easily enough in the toplevel:</p>\n<pre><code class=\"language-ocaml\"># type lock = Open | Close\ntype lock = Open | Close\n# type door = Open | Close\ntype door = Open | Close\n# Open\n- : door = Open\n</code></pre>\n<p>OCaml uses the most recent definition for <code>Open</code>, giving it the type\n<code>door</code>. This is actually not such a serious problem because if you\naccidentally tried to use <code>Open</code> in the type context of a <code>lock</code>, then\nOCaml's wonderful type inference would immediately spot the error and\nyou wouldn't be able to compile the code.</p>\n<p>So far, so much like C. Now I said that OCaml provides a way to work\naround the constraint that <code>Open</code> can only have one type. In other\nwords, suppose I want to use <code>Open</code> to mean either &quot;the <code>Open</code> of type\n<code>lock</code>&quot; or &quot;the <code>Open</code> of type <code>door</code>&quot; and I want OCaml to work out\nwhich one I mean.</p>\n<p>The syntax is slightly different, but here is how we do it:</p>\n<pre><code class=\"language-ocaml\"># type lock = [ `Open | `Close ]\ntype lock = [ `Close | `Open ]\n# type door = [ `Open | `Close ]\ntype door = [ `Close | `Open ]\n</code></pre>\n<p>Notice the syntactic differences:</p>\n<ol>\n<li>Each variant name is prefixed with <code>`</code> (a back tick).\n</li>\n<li>You have to put square brackets (<code>[]</code>) around the alternatives.\n</li>\n</ol>\n<p>The question naturally arises: What is the type of <code> `Open</code>?</p>\n<pre><code class=\"language-ocaml\"># `Open\n- : [&gt; `Open ] = `Open\n</code></pre>\n<p><code>[&gt; `Open]</code> can be read as\n<code>[ `Open | and some other possibilities which we don't know about ]</code>.</p>\n<p>The “&gt;” (greater than) sign indicates that the set of possibilities is\nbigger than those listed (open-ended).</p>\n<p>There's nothing special about <code>`Open</code>. <em>Any</em> back-ticked word can be\nused as a type, even one which we haven't mentioned before:</p>\n<pre><code class=\"language-ocaml\"># `Foo\n- : [&gt; `Foo ] = `Foo\n# `Foo 42\n- : [&gt; `Foo of int ] = `Foo 42\n</code></pre>\n<p>Let's write a function to print the state of a <code>lock</code>:</p>\n<pre><code class=\"language-ocaml\"># let print_lock st =\n  match st with\n  | `Open -&gt; print_endline &quot;The lock is open&quot;\n  | `Close -&gt; print_endline &quot;The lock is closed&quot;\nval print_lock : [&lt; `Close | `Open ] -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Take a careful look at the type of that function. Type inference has\nworked out that the <code>st</code> argument has type <code>[&lt; `Close | `Open]</code>. The\n<code>&lt;</code> (less than) sign means that this is a <strong>closed class</strong>. In\nother words, this function will only work on <code> `Close</code> or <code> `Open</code>\nand not on anything else.</p>\n<pre><code class=\"language-ocaml\"># print_lock `Open\nThe lock is open\n- : unit = ()\n</code></pre>\n<p>Notice that <code>print_lock</code> works just as well with a <code>door</code> as with a\n<code>lock</code>! We've deliberately given up some type safety, and type inference\nis now being used to help guess what we mean, rather than enforce\ncorrect coding.</p>\n<p>This is only an introduction to polymorphic variants. Because of the\nreduction in type safety, it is recommended that you don't use these in\nyour code. You will, however, see them in advanced OCaml code quite a\nlot precisely because advanced programmers will sometimes want to weaken\nthe type system to write advanced idioms.</p>\n"},{"title":"Pointers in OCaml","slug":"pointers-in-ocaml","description":"Use OCaml's explicit pointers with references\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Status of pointers in OCaml\nPointers exist in OCaml, and in fact they spread all over the place.\nThey are used either implicitly (in the most cases), or explicitly (in\nthe rare occasions where implicit pointers are not more handy). The vast\nmajority of pointers usages that are found in usual programming\nlanguages simply disappear in OCaml, or more exactly, those pointers are\ntotally automatically handled by the compiler. Thus, the OCaml programmer\ncan safely ignore the existence of pointers, focusing on the semantics of their\nprogram.\n\nFor instance, lists or trees are defined without explicit pointers using\na concrete datatype definition. The underlying implementation uses\npointers, but this is hidden from the programmer since pointer\nhandling is done by the compiler.\n\nIn the rare occasions where explicit pointers are needed (the most\ncommon case is when translating into OCaml an algorithm described in a\nclassic imperative language), OCaml provides references that are\nfull-fledged pointers, even first class citizen pointers (references can\nbe passed as argument, embedded into arbitrary data structures, and\nreturned as function results).\n\n###  Explicit pointers are OCaml values of type `ref`\nYou can program directly with explicit references if you want to, but\nthis is normally a waste of time and effort.\n\nLet's examine the simple example of linked lists (integer lists to be\nsimple). This data type is defined in C (or in Pascal) using explicit\npointers, for instance:\n\n```C\n/* Cells and lists type in C */\nstruct cell {\n  int hd;\n  struct cell *tl;\n};\n\ntypedef struct cell cell, *list;\n```\n```Pascal\n{Cells and lists type in Pascal}\ntype\n list = ^cell;\n cell = record\n  hd: integer;\n  tl: cell;\n end;\n```\nWe can translate this in OCaml, using a sum type definition, without\npointers:\n\n```ocaml\n# type list = Nil | Cons of int * list\ntype list = Nil | Cons of int * list\n```\n\nCell lists are thus represented as pairs, and the recursive structure of\nlists is evident, with the two alternatives, empty list (the\n`Nil`constructor) and non empty list (the `Cons` constructor).\n\nAutomatic management of pointers and automatic memory allocation shine\nwhen allocating list values: one just writes `Cons (x, l)` to add `x` in\nfront of the list `l`. In C, you need to write this function, to\nallocate a new cell and then fill its fields. For instance:\n\n```C\n/* The empty list */\n#define nil NULL\n\n/* The constructor of lists */\nlist cons (element x, list l)\n{\n  list result;\n  result = (list) malloc (sizeof (cell));\n  result -> hd = x;\n  result -> tl = l;\n  return (result);\n}\n```\nSimilarly, in Pascal:\n\n```Pascal\n{Creating a list cell}\nfunction cons (x: integer; l: list): list;\n  var p: list;\n  begin\n    new(p);\n    p^.hd := x;\n    p^.tl := l;\n    cons := p\n  end;\n```\nWe thus see that fields of list cells in the C program have to be\nmutable, otherwise initialization is impossible. By contrast in OCaml,\nallocation and initialization are merged into a single basic operation:\nconstructor application. This way, immutable data structures are\ndefinable (those data types are often referred to as “pure” or\n“functional” data structures). If physical modifications are necessary\nfor other reasons than mere initialization, OCaml provides records with\nmutable fields. For instance, a list type defining lists whose elements\ncan be in place modified could be written:\n\n```ocaml\n# type list = Nil | Cons of cell\n  and cell = { mutable hd : int; tl : list }\ntype list = Nil | Cons of cell\nand cell = { mutable hd : int; tl : list; }\n```\nIf the structure of the list itself must also be modified (cells must be\nphysically removed from the list), the `tl` field would also be declared\nas mutable:\n\n```ocaml\n# type list = Nil | Cons of cell\n  and cell = { mutable hd : int; mutable tl : list }\ntype list = Nil | Cons of cell\nand cell = { mutable hd : int; mutable tl : list; }\n```\n\nPhysical assignments are still useless to allocate mutable data: you\nwrite `Cons {hd = 1; tl = l}` to add `1` to the list `l`. Physical\nassignments that remain in OCaml programs should be just those\nassignments that are mandatory to implement the algorithm at hand.\n\nVery often, pointers are used to implement physical modification of data\nstructures. In OCaml programs this means using vectors or mutable fields\nin records.\n\n**In conclusion:** You can use explicit pointers in OCaml, exactly as in C, but\nthis is not natural, since you get back the usual drawbacks and difficulties of\nexplicit pointers manipulation of classical algorithmic languages. See a more\ncomplete example below.\n\n## Defining pointers in OCaml\nThe general pointer type can be defined using the definition of a\npointer: a pointer is either null, or a pointer to an assignable memory\nlocation:\n\n```ocaml\n# type 'a pointer = Null | Pointer of 'a ref\ntype 'a pointer = Null | Pointer of 'a ref\n```\nExplicit dereferencing (or reading the pointer's designated value) and\npointer assignment (or writing to the pointer's designated memory\nlocation) are easily defined. We define dereferencing as a prefix\noperator named `!^`, and assignment as the infix `^:=`.\n\n```ocaml\n# let ( !^ ) = function\n    | Null -> invalid_arg \"Attempt to dereference the null pointer\"\n    | Pointer r -> !r\nval ( !^ ) : 'a pointer -> 'a = <fun>\n\n# let ( ^:= ) p v =\n    match p with\n     | Null -> invalid_arg \"Attempt to assign the null pointer\"\n     | Pointer r -> r := v\nval ( ^:= ) : 'a pointer -> 'a -> unit = <fun>\n```\n\nNow we define the allocation of a new pointer initialized to point to a\ngiven value:\n\n```ocaml\n# let new_pointer x = Pointer (ref x)\nval new_pointer : 'a -> 'a pointer = <fun>\n```\nFor instance, let's define and then assign a pointer to an integer:\n\n```ocaml\n# let p = new_pointer 0\nval p : int pointer = Pointer {contents = 0}\n# p ^:= 1\n- : unit = ()\n# !^p\n- : int = 1\n```\n\n## Integer Lists\nNow we can define lists using explicit pointers as in usual imperative\nlanguages:\n\n```ocaml\n# type ilist = cell pointer\n  and cell = { mutable hd : int; mutable tl : ilist }\ntype ilist = cell pointer\nand cell = { mutable hd : int; mutable tl : ilist; }\n```\nWe then define allocation of a new cell, the list constructor and its\nassociated destructors.\n\n```ocaml\n# let new_cell () = {hd = 0; tl = Null}\nval new_cell : unit -> cell = <fun>\n# let cons x l =\n    let c = new_cell () in\n    c.hd <- x;\n    c.tl <- l;\n    (new_pointer c : ilist)\nval cons : int -> ilist -> ilist = <fun>\n# let hd (l : ilist) = !^l.hd\nval hd : ilist -> int = <fun>\n# let tl (l : ilist) = !^l.tl\nval tl : ilist -> ilist = <fun>\n```\n\nWe can now write all kind of classical algorithms, based on pointers\nmanipulation, with their associated loops, their unwanted sharing\nproblems and their null pointer errors. For instance, list\nconcatenation, as often described in literature, physically modifies\nits first list argument, hooking the second list to the end of the\nfirst:\n\n```ocaml\n# let append (l1 : ilist) (l2 : ilist) =\n  let temp = ref l1 in\n  while tl !temp <> Null do\n    temp := tl !temp\n  done;\n  !^ !temp.tl <- l2\nval append : ilist -> ilist -> unit = <fun>\n\n# let l1 = cons 1 (cons 2 Null)\nval l1 : ilist =\n  Pointer\n   {contents = {hd = 1; tl = Pointer {contents = {hd = 2; tl = Null}}}}\n\n# let l2 = cons 3 Null\nval l2 : ilist = Pointer {contents = {hd = 3; tl = Null}}\n\n# append l1 l2\n- : unit = ()\n```\n\nThe lists `l1` and `l2` are effectively catenated:\n\n```ocaml\n# l1\n- : ilist =\nPointer\n {contents =\n   {hd = 1;\n    tl =\n     Pointer\n      {contents = {hd = 2; tl = Pointer {contents = {hd = 3; tl = Null}}}}}}\n```\n\nJust a nasty side effect of physical list concatenation: `l1` now\ncontains the concatenation of the two lists `l1` and `l2`, thus the list\n`l1` no longer exists: in some sense `append` *consumes* its first\nargument. In other words, the value of a list data now depends on its\nhistory, that is on the sequence of function calls that use the value.\nThis strange behaviour leads to a lot of difficulties when explicitly\nmanipulating pointers. Try for instance, the seemingly harmless:\n\n```ocaml\n# append l1 l1\n- : unit = ()\n```\n\nThen evaluate `l1`:\n\n```ocaml\n# l1\n- : ilist =\nPointer\n {contents =\n   {hd = 1;\n    tl =\n     Pointer\n      {contents = {hd = 2; tl = Pointer {contents = {hd = 3; tl = <cycle>}}}}}}\n```\n\n## Polymorphic lists\nWe can define polymorphic lists using pointers; here is a simple implementation\nof those polymorphic mutable lists:\n\n```ocaml\n# type 'a lists = 'a cell pointer\n  and 'a cell = { mutable hd : 'a pointer; mutable tl : 'a lists }\ntype 'a lists = 'a cell pointer\nand 'a cell = { mutable hd : 'a pointer; mutable tl : 'a lists; }\n# let new_cell () = {hd = Null; tl = Null}\nval new_cell : unit -> 'a cell = <fun>\n# let cons x l =\n    let c = new_cell () in\n    c.hd <- new_pointer x;\n    c.tl <- l;\n    (new_pointer c : 'a lists)\nval cons : 'a -> 'a lists -> 'a lists = <fun>\n# let hd (l : 'a lists) = !^l.hd\nval hd : 'a lists -> 'a pointer = <fun>\n# let tl (l : 'a lists) = !^l.tl\nval tl : 'a lists -> 'a lists = <fun>\n# let append (l1 : 'a lists) (l2 : 'a lists) =\n  let temp = ref l1 in\n  while tl !temp <> Null do\n    temp := tl !temp\n  done;\n  !^ !temp.tl <- l2\nval append : 'a lists -> 'a lists -> unit = <fun>\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#status-of-pointers-in-ocaml\">Status of pointers in OCaml</a>\n</li>\n<li><a href=\"#defining-pointers-in-ocaml\">Defining pointers in OCaml</a>\n</li>\n<li><a href=\"#integer-lists\">Integer Lists</a>\n</li>\n<li><a href=\"#polymorphic-lists\">Polymorphic lists</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"status-of-pointers-in-ocaml\">Status of pointers in OCaml</h2>\n<p>Pointers exist in OCaml, and in fact they spread all over the place.\nThey are used either implicitly (in the most cases), or explicitly (in\nthe rare occasions where implicit pointers are not more handy). The vast\nmajority of pointers usages that are found in usual programming\nlanguages simply disappear in OCaml, or more exactly, those pointers are\ntotally automatically handled by the compiler. Thus, the OCaml programmer\ncan safely ignore the existence of pointers, focusing on the semantics of their\nprogram.</p>\n<p>For instance, lists or trees are defined without explicit pointers using\na concrete datatype definition. The underlying implementation uses\npointers, but this is hidden from the programmer since pointer\nhandling is done by the compiler.</p>\n<p>In the rare occasions where explicit pointers are needed (the most\ncommon case is when translating into OCaml an algorithm described in a\nclassic imperative language), OCaml provides references that are\nfull-fledged pointers, even first class citizen pointers (references can\nbe passed as argument, embedded into arbitrary data structures, and\nreturned as function results).</p>\n<h3 id=\"explicit-pointers-are-ocaml-values-of-type-ref\">Explicit pointers are OCaml values of type <code>ref</code></h3>\n<p>You can program directly with explicit references if you want to, but\nthis is normally a waste of time and effort.</p>\n<p>Let's examine the simple example of linked lists (integer lists to be\nsimple). This data type is defined in C (or in Pascal) using explicit\npointers, for instance:</p>\n<pre><code class=\"language-C\">/* Cells and lists type in C */\nstruct cell {\n  int hd;\n  struct cell *tl;\n};\n\ntypedef struct cell cell, *list;\n</code></pre>\n<pre><code class=\"language-Pascal\">{Cells and lists type in Pascal}\ntype\n list = ^cell;\n cell = record\n  hd: integer;\n  tl: cell;\n end;\n</code></pre>\n<p>We can translate this in OCaml, using a sum type definition, without\npointers:</p>\n<pre><code class=\"language-ocaml\"># type list = Nil | Cons of int * list\ntype list = Nil | Cons of int * list\n</code></pre>\n<p>Cell lists are thus represented as pairs, and the recursive structure of\nlists is evident, with the two alternatives, empty list (the\n<code>Nil</code>constructor) and non empty list (the <code>Cons</code> constructor).</p>\n<p>Automatic management of pointers and automatic memory allocation shine\nwhen allocating list values: one just writes <code>Cons (x, l)</code> to add <code>x</code> in\nfront of the list <code>l</code>. In C, you need to write this function, to\nallocate a new cell and then fill its fields. For instance:</p>\n<pre><code class=\"language-C\">/* The empty list */\n#define nil NULL\n\n/* The constructor of lists */\nlist cons (element x, list l)\n{\n  list result;\n  result = (list) malloc (sizeof (cell));\n  result -&gt; hd = x;\n  result -&gt; tl = l;\n  return (result);\n}\n</code></pre>\n<p>Similarly, in Pascal:</p>\n<pre><code class=\"language-Pascal\">{Creating a list cell}\nfunction cons (x: integer; l: list): list;\n  var p: list;\n  begin\n    new(p);\n    p^.hd := x;\n    p^.tl := l;\n    cons := p\n  end;\n</code></pre>\n<p>We thus see that fields of list cells in the C program have to be\nmutable, otherwise initialization is impossible. By contrast in OCaml,\nallocation and initialization are merged into a single basic operation:\nconstructor application. This way, immutable data structures are\ndefinable (those data types are often referred to as “pure” or\n“functional” data structures). If physical modifications are necessary\nfor other reasons than mere initialization, OCaml provides records with\nmutable fields. For instance, a list type defining lists whose elements\ncan be in place modified could be written:</p>\n<pre><code class=\"language-ocaml\"># type list = Nil | Cons of cell\n  and cell = { mutable hd : int; tl : list }\ntype list = Nil | Cons of cell\nand cell = { mutable hd : int; tl : list; }\n</code></pre>\n<p>If the structure of the list itself must also be modified (cells must be\nphysically removed from the list), the <code>tl</code> field would also be declared\nas mutable:</p>\n<pre><code class=\"language-ocaml\"># type list = Nil | Cons of cell\n  and cell = { mutable hd : int; mutable tl : list }\ntype list = Nil | Cons of cell\nand cell = { mutable hd : int; mutable tl : list; }\n</code></pre>\n<p>Physical assignments are still useless to allocate mutable data: you\nwrite <code>Cons {hd = 1; tl = l}</code> to add <code>1</code> to the list <code>l</code>. Physical\nassignments that remain in OCaml programs should be just those\nassignments that are mandatory to implement the algorithm at hand.</p>\n<p>Very often, pointers are used to implement physical modification of data\nstructures. In OCaml programs this means using vectors or mutable fields\nin records.</p>\n<p><strong>In conclusion:</strong> You can use explicit pointers in OCaml, exactly as in C, but\nthis is not natural, since you get back the usual drawbacks and difficulties of\nexplicit pointers manipulation of classical algorithmic languages. See a more\ncomplete example below.</p>\n<h2 id=\"defining-pointers-in-ocaml\">Defining pointers in OCaml</h2>\n<p>The general pointer type can be defined using the definition of a\npointer: a pointer is either null, or a pointer to an assignable memory\nlocation:</p>\n<pre><code class=\"language-ocaml\"># type 'a pointer = Null | Pointer of 'a ref\ntype 'a pointer = Null | Pointer of 'a ref\n</code></pre>\n<p>Explicit dereferencing (or reading the pointer's designated value) and\npointer assignment (or writing to the pointer's designated memory\nlocation) are easily defined. We define dereferencing as a prefix\noperator named <code>!^</code>, and assignment as the infix <code>^:=</code>.</p>\n<pre><code class=\"language-ocaml\"># let ( !^ ) = function\n    | Null -&gt; invalid_arg &quot;Attempt to dereference the null pointer&quot;\n    | Pointer r -&gt; !r\nval ( !^ ) : 'a pointer -&gt; 'a = &lt;fun&gt;\n\n# let ( ^:= ) p v =\n    match p with\n     | Null -&gt; invalid_arg &quot;Attempt to assign the null pointer&quot;\n     | Pointer r -&gt; r := v\nval ( ^:= ) : 'a pointer -&gt; 'a -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Now we define the allocation of a new pointer initialized to point to a\ngiven value:</p>\n<pre><code class=\"language-ocaml\"># let new_pointer x = Pointer (ref x)\nval new_pointer : 'a -&gt; 'a pointer = &lt;fun&gt;\n</code></pre>\n<p>For instance, let's define and then assign a pointer to an integer:</p>\n<pre><code class=\"language-ocaml\"># let p = new_pointer 0\nval p : int pointer = Pointer {contents = 0}\n# p ^:= 1\n- : unit = ()\n# !^p\n- : int = 1\n</code></pre>\n<h2 id=\"integer-lists\">Integer Lists</h2>\n<p>Now we can define lists using explicit pointers as in usual imperative\nlanguages:</p>\n<pre><code class=\"language-ocaml\"># type ilist = cell pointer\n  and cell = { mutable hd : int; mutable tl : ilist }\ntype ilist = cell pointer\nand cell = { mutable hd : int; mutable tl : ilist; }\n</code></pre>\n<p>We then define allocation of a new cell, the list constructor and its\nassociated destructors.</p>\n<pre><code class=\"language-ocaml\"># let new_cell () = {hd = 0; tl = Null}\nval new_cell : unit -&gt; cell = &lt;fun&gt;\n# let cons x l =\n    let c = new_cell () in\n    c.hd &lt;- x;\n    c.tl &lt;- l;\n    (new_pointer c : ilist)\nval cons : int -&gt; ilist -&gt; ilist = &lt;fun&gt;\n# let hd (l : ilist) = !^l.hd\nval hd : ilist -&gt; int = &lt;fun&gt;\n# let tl (l : ilist) = !^l.tl\nval tl : ilist -&gt; ilist = &lt;fun&gt;\n</code></pre>\n<p>We can now write all kind of classical algorithms, based on pointers\nmanipulation, with their associated loops, their unwanted sharing\nproblems and their null pointer errors. For instance, list\nconcatenation, as often described in literature, physically modifies\nits first list argument, hooking the second list to the end of the\nfirst:</p>\n<pre><code class=\"language-ocaml\"># let append (l1 : ilist) (l2 : ilist) =\n  let temp = ref l1 in\n  while tl !temp &lt;&gt; Null do\n    temp := tl !temp\n  done;\n  !^ !temp.tl &lt;- l2\nval append : ilist -&gt; ilist -&gt; unit = &lt;fun&gt;\n\n# let l1 = cons 1 (cons 2 Null)\nval l1 : ilist =\n  Pointer\n   {contents = {hd = 1; tl = Pointer {contents = {hd = 2; tl = Null}}}}\n\n# let l2 = cons 3 Null\nval l2 : ilist = Pointer {contents = {hd = 3; tl = Null}}\n\n# append l1 l2\n- : unit = ()\n</code></pre>\n<p>The lists <code>l1</code> and <code>l2</code> are effectively catenated:</p>\n<pre><code class=\"language-ocaml\"># l1\n- : ilist =\nPointer\n {contents =\n   {hd = 1;\n    tl =\n     Pointer\n      {contents = {hd = 2; tl = Pointer {contents = {hd = 3; tl = Null}}}}}}\n</code></pre>\n<p>Just a nasty side effect of physical list concatenation: <code>l1</code> now\ncontains the concatenation of the two lists <code>l1</code> and <code>l2</code>, thus the list\n<code>l1</code> no longer exists: in some sense <code>append</code> <em>consumes</em> its first\nargument. In other words, the value of a list data now depends on its\nhistory, that is on the sequence of function calls that use the value.\nThis strange behaviour leads to a lot of difficulties when explicitly\nmanipulating pointers. Try for instance, the seemingly harmless:</p>\n<pre><code class=\"language-ocaml\"># append l1 l1\n- : unit = ()\n</code></pre>\n<p>Then evaluate <code>l1</code>:</p>\n<pre><code class=\"language-ocaml\"># l1\n- : ilist =\nPointer\n {contents =\n   {hd = 1;\n    tl =\n     Pointer\n      {contents = {hd = 2; tl = Pointer {contents = {hd = 3; tl = &lt;cycle&gt;}}}}}}\n</code></pre>\n<h2 id=\"polymorphic-lists\">Polymorphic lists</h2>\n<p>We can define polymorphic lists using pointers; here is a simple implementation\nof those polymorphic mutable lists:</p>\n<pre><code class=\"language-ocaml\"># type 'a lists = 'a cell pointer\n  and 'a cell = { mutable hd : 'a pointer; mutable tl : 'a lists }\ntype 'a lists = 'a cell pointer\nand 'a cell = { mutable hd : 'a pointer; mutable tl : 'a lists; }\n# let new_cell () = {hd = Null; tl = Null}\nval new_cell : unit -&gt; 'a cell = &lt;fun&gt;\n# let cons x l =\n    let c = new_cell () in\n    c.hd &lt;- new_pointer x;\n    c.tl &lt;- l;\n    (new_pointer c : 'a lists)\nval cons : 'a -&gt; 'a lists -&gt; 'a lists = &lt;fun&gt;\n# let hd (l : 'a lists) = !^l.hd\nval hd : 'a lists -&gt; 'a pointer = &lt;fun&gt;\n# let tl (l : 'a lists) = !^l.tl\nval tl : 'a lists -&gt; 'a lists = &lt;fun&gt;\n# let append (l1 : 'a lists) (l2 : 'a lists) =\n  let temp = ref l1 in\n  while tl !temp &lt;&gt; Null do\n    temp := tl !temp\n  done;\n  !^ !temp.tl &lt;- l2\nval append : 'a lists -&gt; 'a lists -&gt; unit = &lt;fun&gt;\n</code></pre>\n"},{"title":"Null Pointers, Asserts and Warnings","slug":"null-pointers-asserts-and-warnings","description":"Handling warnings and asserting invariants for your code\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Null pointers\nSo you've got a survey on your website which asks your readers for their\nnames and ages. Only problem is that for some reason a few of your\nreaders don't want to give you their age - they stubbornly refuse to\nfill that field in. What's a poor database administrator to do?\n\nAssume that the age is represented by an `int`, there are two possible\nways to solve this problem. The most common one (and the most *wrong*\none) is to assume some sort of \"special\" value for the age which means\nthat the age information wasn't collected. So if, say, age = -1 then the\ndata wasn't collected, otherwise the data was collected (even if it's\nnot valid!). This method kind of works until you start, for example,\ncalculating the mean age of visitors to your website. Since you forgot\nto take into account your special value, you conclude that the mean age\nof visitors is 7½ years old, and you employ web designers to remove all\nthe long words and use primary colours everywhere.\n\nThe other, correct method is to store the age in a field which has type\n\"int or null\". Here's a SQL table for storing ages:\n\n```SQL\ncreate table users\n(\n  userid serial,\n  name text not null,\n  age int             -- may be null\n);\n```\n\nIf the age data isn't collected, then it goes into the database as a\nspecial SQL `NULL` value. SQL ignores this automatically when you ask it\nto compute averages and so on.\n\nProgramming languages also support nulls, although they may be easier to\nuse in some than in others. In Java, any reference to\nan object can be null, so it might make sense in Java to store the\nage as an `Integer` and allow references to the age to be null. In C\npointers can, of course, be null, but if you wanted a simple integer to\nbe null, you'd have to first box it up into an object allocated by\n`malloc` on the heap.\n\nOCaml has an elegant solution to the problem of nulls, using a simple\npolymorphic variant type defined (in `Stdlib`) as:\n\n```ocaml\ntype 'a option = None | Some of 'a\n```\n\nA \"null pointer\" is written `None`. The type of age in our example above\n(an `int` which can be null) is `int option` (remember: backwards like\n`int list` and `int binary_tree`).\n\n```ocaml\n# Some 3\n- : int option = Some 3\n```\n\nWhat about a list of optional ints?\n\n```ocaml\n# [None; Some 3; Some 6; None]\n- : int option list = [None; Some 3; Some 6; None]\n```\nAnd what about an optional list of ints?\n\n```ocaml\n# Some [1; 2; 3]\n- : int list option = Some [1; 2; 3]\n```\n\n## Assert, warnings, fatal errors, and printing to stderr\nThe built-in `assert` takes an expression as an argument and throws an\nexception *if* the provided expression evaluates to `false`. \nAssuming that you don't catch this exception (it's probably\nunwise to catch this exception, particularly for beginners), this\nresults in the program stopping and printing out the source file and\nline number where the error occurred. An example:\n\n```ocaml\n# assert (Sys.os_type = \"Win32\")\nException: Assert_failure (\"//toplevel//\", 1, 1).\n```\n\n(Running this on Win32, of course, won't throw an error).\n\nYou can also just call `assert false` to stop your program if things\njust aren't going well, but you're probably better to use ...\n\n`failwith \"error message\"` throws a `Failure` exception, which again\nassuming you don't try to catch it, will stop the program with the given\nerror message. `failwith` is often used during pattern matching, like\nthis real example:\n\n<!-- $MDX skip -->\n```ocaml\nmatch Sys.os_type with\n| \"Unix\" | \"Cygwin\" ->   (* code omitted *)\n| \"Win32\" ->             (* code omitted *)\n| \"MacOS\" ->             (* code omitted *)\n| _ -> failwith \"this system is not supported\"\n```\n\nNote a couple of extra pattern matching features in this example too. A\nso-called \"range pattern\" is used to match either `\"Unix\"` or\n`\"Cygwin\"`, and the special `_` pattern which matches \"anything else\".\n\nIf you want to debug your program, then you'll probably want to print out a\nwarning some way through your function. Here's an example:\n\n<!-- $MDX skip -->\n```ocaml\nopen Graphics\n  \nlet () =\n  open_graph \" 640x480\";\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    prerr_endline (\"radius is \" ^ string_of_int radius);\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n```\n\nIf you prefer C-style `printf`'s then try using OCaml's `Printf` module\ninstead:\n\n<!-- $MDX skip -->\n```ocaml\nopen Graphics\n  \nlet () =\n  open_graph \" 640x480\";\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    Printf.eprintf \"radius is %d\\n\" radius;\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#null-pointers\">Null pointers</a>\n</li>\n<li><a href=\"#assert-warnings-fatal-errors-and-printing-to-stderr\">Assert, warnings, fatal errors, and printing to stderr</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"null-pointers\">Null pointers</h2>\n<p>So you've got a survey on your website which asks your readers for their\nnames and ages. Only problem is that for some reason a few of your\nreaders don't want to give you their age - they stubbornly refuse to\nfill that field in. What's a poor database administrator to do?</p>\n<p>Assume that the age is represented by an <code>int</code>, there are two possible\nways to solve this problem. The most common one (and the most <em>wrong</em>\none) is to assume some sort of &quot;special&quot; value for the age which means\nthat the age information wasn't collected. So if, say, age = -1 then the\ndata wasn't collected, otherwise the data was collected (even if it's\nnot valid!). This method kind of works until you start, for example,\ncalculating the mean age of visitors to your website. Since you forgot\nto take into account your special value, you conclude that the mean age\nof visitors is 7½ years old, and you employ web designers to remove all\nthe long words and use primary colours everywhere.</p>\n<p>The other, correct method is to store the age in a field which has type\n&quot;int or null&quot;. Here's a SQL table for storing ages:</p>\n<pre><code class=\"language-SQL\">create table users\n(\n  userid serial,\n  name text not null,\n  age int             -- may be null\n);\n</code></pre>\n<p>If the age data isn't collected, then it goes into the database as a\nspecial SQL <code>NULL</code> value. SQL ignores this automatically when you ask it\nto compute averages and so on.</p>\n<p>Programming languages also support nulls, although they may be easier to\nuse in some than in others. In Java, any reference to\nan object can be null, so it might make sense in Java to store the\nage as an <code>Integer</code> and allow references to the age to be null. In C\npointers can, of course, be null, but if you wanted a simple integer to\nbe null, you'd have to first box it up into an object allocated by\n<code>malloc</code> on the heap.</p>\n<p>OCaml has an elegant solution to the problem of nulls, using a simple\npolymorphic variant type defined (in <code>Stdlib</code>) as:</p>\n<pre><code class=\"language-ocaml\">type 'a option = None | Some of 'a\n</code></pre>\n<p>A &quot;null pointer&quot; is written <code>None</code>. The type of age in our example above\n(an <code>int</code> which can be null) is <code>int option</code> (remember: backwards like\n<code>int list</code> and <code>int binary_tree</code>).</p>\n<pre><code class=\"language-ocaml\"># Some 3\n- : int option = Some 3\n</code></pre>\n<p>What about a list of optional ints?</p>\n<pre><code class=\"language-ocaml\"># [None; Some 3; Some 6; None]\n- : int option list = [None; Some 3; Some 6; None]\n</code></pre>\n<p>And what about an optional list of ints?</p>\n<pre><code class=\"language-ocaml\"># Some [1; 2; 3]\n- : int list option = Some [1; 2; 3]\n</code></pre>\n<h2 id=\"assert-warnings-fatal-errors-and-printing-to-stderr\">Assert, warnings, fatal errors, and printing to stderr</h2>\n<p>The built-in <code>assert</code> takes an expression as an argument and throws an\nexception <em>if</em> the provided expression evaluates to <code>false</code>.\nAssuming that you don't catch this exception (it's probably\nunwise to catch this exception, particularly for beginners), this\nresults in the program stopping and printing out the source file and\nline number where the error occurred. An example:</p>\n<pre><code class=\"language-ocaml\"># assert (Sys.os_type = &quot;Win32&quot;)\nException: Assert_failure (&quot;//toplevel//&quot;, 1, 1).\n</code></pre>\n<p>(Running this on Win32, of course, won't throw an error).</p>\n<p>You can also just call <code>assert false</code> to stop your program if things\njust aren't going well, but you're probably better to use ...</p>\n<p><code>failwith &quot;error message&quot;</code> throws a <code>Failure</code> exception, which again\nassuming you don't try to catch it, will stop the program with the given\nerror message. <code>failwith</code> is often used during pattern matching, like\nthis real example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match Sys.os_type with\n| &quot;Unix&quot; | &quot;Cygwin&quot; -&gt;   (* code omitted *)\n| &quot;Win32&quot; -&gt;             (* code omitted *)\n| &quot;MacOS&quot; -&gt;             (* code omitted *)\n| _ -&gt; failwith &quot;this system is not supported&quot;\n</code></pre>\n<p>Note a couple of extra pattern matching features in this example too. A\nso-called &quot;range pattern&quot; is used to match either <code>&quot;Unix&quot;</code> or\n<code>&quot;Cygwin&quot;</code>, and the special <code>_</code> pattern which matches &quot;anything else&quot;.</p>\n<p>If you want to debug your program, then you'll probably want to print out a\nwarning some way through your function. Here's an example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Graphics\n  \nlet () =\n  open_graph &quot; 640x480&quot;;\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    prerr_endline (&quot;radius is &quot; ^ string_of_int radius);\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n</code></pre>\n<p>If you prefer C-style <code>printf</code>'s then try using OCaml's <code>Printf</code> module\ninstead:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Graphics\n  \nlet () =\n  open_graph &quot; 640x480&quot;;\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    Printf.eprintf &quot;radius is %d\\n&quot; radius;\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n</code></pre>\n"},{"title":"Functors","slug":"functors","description":"Learn about functors, modules parameterised by other modules\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\nFunctors are probably one of the most complex features of OCaml, but you don't\nhave to use them extensively to be a successful OCaml programmer.  Actually,\nyou may never have to define a functor yourself, but you will surely encounter\nthem in the standard library. They are the only way of using the Set and Map\nmodules, but using them is not so difficult.\n\n##  What are functors and why do we need them?\n\nA functor is a module that is parametrized by another module, just like a\nfunction is a value which is parametrized by other values, the arguments.\n\nIt allows one to parametrize a type by a value, which is not possible directly\nin OCaml without functors. For example, we can define a functor that takes an\nint n and returns a collection of array operations that work exclusively on\narrays of length n. If by mistake the programmer passes a regular array to one\nof those functions, it will result in a compilation error. If we were not using\nthis functor but the standard array type, the compiler would not be able to\ndetect the error, and we would get a runtime error at some undetermined date in\nthe future, which is much worse.\n\n##  Using an existing functor\n\nThe standard library defines a `Set` module, which provides a `Make` functor.\nThis functor takes one argument, which is a module that provides (at least) two\nthings: the type of elements, given as `t` and the comparison function given as\n`compare`. The point of the functor is to ensure that the same comparison\nfunction will always be used, even if the programmer makes a mistake.\n\nFor example, if we want to use sets of ints, we would do this:\n\n```ocaml\n# module Int_set =\n  Set.Make (struct\n              type t = int\n              let compare = compare\n            end)\nmodule Int_set :\n  sig\n    type elt = int\n    type t\n    val empty : t\n    val is_empty : t -> bool\n    val mem : int -> t -> bool\n    val add : int -> t -> t\n    val singleton : int -> t\n    val remove : int -> t -> t\n    val union : t -> t -> t\n    val inter : t -> t -> t\n    val disjoint : t -> t -> bool\n    val diff : t -> t -> t\n    val compare : t -> t -> int\n    val equal : t -> t -> bool\n    val subset : t -> t -> bool\n    val iter : (int -> unit) -> t -> unit\n    val map : (int -> int) -> t -> t\n    val fold : (int -> 'a -> 'a) -> t -> 'a -> 'a\n    val for_all : (int -> bool) -> t -> bool\n    val exists : (int -> bool) -> t -> bool\n    val filter : (int -> bool) -> t -> t\n    val partition : (int -> bool) -> t -> t * t\n    val cardinal : t -> int\n    val elements : t -> int list\n    val min_elt : t -> int\n    val min_elt_opt : t -> int option\n    val max_elt : t -> int\n    val max_elt_opt : t -> int option\n    val choose : t -> int\n    val choose_opt : t -> int option\n    val split : int -> t -> t * bool * t\n    val find : int -> t -> int\n    val find_opt : int -> t -> int option\n    val find_first : (int -> bool) -> t -> int\n    val find_first_opt : (int -> bool) -> t -> int option\n    val find_last : (int -> bool) -> t -> int\n    val find_last_opt : (int -> bool) -> t -> int option\n    val of_list : int list -> t\n    val to_seq_from : int -> t -> int Seq.t\n    val to_seq : t -> int Seq.t\n    val add_seq : int Seq.t -> t -> t\n    val of_seq : int Seq.t -> t\n  end\n```\n\nFor sets of strings, it is even easier because the standard library provides a\n`String` module with a type `t` and a function `compare`. If you were following\ncarefully, by now you must have guessed how to create a module for the\nmanipulation of sets of strings:\n\n```ocaml\n# module String_set = Set.Make (String)\nmodule String_set :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -> bool\n    val mem : elt -> t -> bool\n    val add : elt -> t -> t\n    val singleton : elt -> t\n    val remove : elt -> t -> t\n    val union : t -> t -> t\n    val inter : t -> t -> t\n    val disjoint : t -> t -> bool\n    val diff : t -> t -> t\n    val compare : t -> t -> int\n    val equal : t -> t -> bool\n    val subset : t -> t -> bool\n    val iter : (elt -> unit) -> t -> unit\n    val map : (elt -> elt) -> t -> t\n    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a\n    val for_all : (elt -> bool) -> t -> bool\n    val exists : (elt -> bool) -> t -> bool\n    val filter : (elt -> bool) -> t -> t\n    val partition : (elt -> bool) -> t -> t * t\n    val cardinal : t -> int\n    val elements : t -> elt list\n    val min_elt : t -> elt\n    val min_elt_opt : t -> elt option\n    val max_elt : t -> elt\n    val max_elt_opt : t -> elt option\n    val choose : t -> elt\n    val choose_opt : t -> elt option\n    val split : elt -> t -> t * bool * t\n    val find : elt -> t -> elt\n    val find_opt : elt -> t -> elt option\n    val find_first : (elt -> bool) -> t -> elt\n    val find_first_opt : (elt -> bool) -> t -> elt option\n    val find_last : (elt -> bool) -> t -> elt\n    val find_last_opt : (elt -> bool) -> t -> elt option\n    val of_list : elt list -> t\n    val to_seq_from : elt -> t -> elt Seq.t\n    val to_seq : t -> elt Seq.t\n    val add_seq : elt Seq.t -> t -> t\n    val of_seq : elt Seq.t -> t\n  end\n```\n\n(the parentheses are necessary)\n\n##  Defining functors\n\nA functor with one argument can be defined like this:\n\n<!-- $MDX skip -->\n```ocaml\nmodule F (X : X_type) = struct\n  ...\nend\n```\n\nwhere `X` is the module that will be passed as argument, and `X_type` is its\nsignature, which is mandatory.\n\nThe signature of the returned module itself can be constrained, using this\nsyntax:\n\n<!-- $MDX skip -->\n```ocaml\nmodule F (X : X_type) : Y_type =\nstruct\n  ...\nend\n```\n\nor by specifying this in the .mli file:\n\n<!-- $MDX skip -->\n```ocaml\nmodule F (X : X_type) : Y_type\n```\n\nOverall, the syntax of functors is hard to grasp. The best may be to look at\nthe source files\n[`set.ml`](https://github.com/ocaml/ocaml/blob/trunk/stdlib/set.ml) or\n[`map.ml`](https://github.com/ocaml/ocaml/blob/trunk/stdlib/map.ml) of the\nstandard library.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#what-are-functors-and-why-do-we-need-them\">What are functors and why do we need them?</a>\n</li>\n<li><a href=\"#using-an-existing-functor\">Using an existing functor</a>\n</li>\n<li><a href=\"#defining-functors\">Defining functors</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>Functors are probably one of the most complex features of OCaml, but you don't\nhave to use them extensively to be a successful OCaml programmer.  Actually,\nyou may never have to define a functor yourself, but you will surely encounter\nthem in the standard library. They are the only way of using the Set and Map\nmodules, but using them is not so difficult.</p>\n<h2 id=\"what-are-functors-and-why-do-we-need-them\">What are functors and why do we need them?</h2>\n<p>A functor is a module that is parametrized by another module, just like a\nfunction is a value which is parametrized by other values, the arguments.</p>\n<p>It allows one to parametrize a type by a value, which is not possible directly\nin OCaml without functors. For example, we can define a functor that takes an\nint n and returns a collection of array operations that work exclusively on\narrays of length n. If by mistake the programmer passes a regular array to one\nof those functions, it will result in a compilation error. If we were not using\nthis functor but the standard array type, the compiler would not be able to\ndetect the error, and we would get a runtime error at some undetermined date in\nthe future, which is much worse.</p>\n<h2 id=\"using-an-existing-functor\">Using an existing functor</h2>\n<p>The standard library defines a <code>Set</code> module, which provides a <code>Make</code> functor.\nThis functor takes one argument, which is a module that provides (at least) two\nthings: the type of elements, given as <code>t</code> and the comparison function given as\n<code>compare</code>. The point of the functor is to ensure that the same comparison\nfunction will always be used, even if the programmer makes a mistake.</p>\n<p>For example, if we want to use sets of ints, we would do this:</p>\n<pre><code class=\"language-ocaml\"># module Int_set =\n  Set.Make (struct\n              type t = int\n              let compare = compare\n            end)\nmodule Int_set :\n  sig\n    type elt = int\n    type t\n    val empty : t\n    val is_empty : t -&gt; bool\n    val mem : int -&gt; t -&gt; bool\n    val add : int -&gt; t -&gt; t\n    val singleton : int -&gt; t\n    val remove : int -&gt; t -&gt; t\n    val union : t -&gt; t -&gt; t\n    val inter : t -&gt; t -&gt; t\n    val disjoint : t -&gt; t -&gt; bool\n    val diff : t -&gt; t -&gt; t\n    val compare : t -&gt; t -&gt; int\n    val equal : t -&gt; t -&gt; bool\n    val subset : t -&gt; t -&gt; bool\n    val iter : (int -&gt; unit) -&gt; t -&gt; unit\n    val map : (int -&gt; int) -&gt; t -&gt; t\n    val fold : (int -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a\n    val for_all : (int -&gt; bool) -&gt; t -&gt; bool\n    val exists : (int -&gt; bool) -&gt; t -&gt; bool\n    val filter : (int -&gt; bool) -&gt; t -&gt; t\n    val partition : (int -&gt; bool) -&gt; t -&gt; t * t\n    val cardinal : t -&gt; int\n    val elements : t -&gt; int list\n    val min_elt : t -&gt; int\n    val min_elt_opt : t -&gt; int option\n    val max_elt : t -&gt; int\n    val max_elt_opt : t -&gt; int option\n    val choose : t -&gt; int\n    val choose_opt : t -&gt; int option\n    val split : int -&gt; t -&gt; t * bool * t\n    val find : int -&gt; t -&gt; int\n    val find_opt : int -&gt; t -&gt; int option\n    val find_first : (int -&gt; bool) -&gt; t -&gt; int\n    val find_first_opt : (int -&gt; bool) -&gt; t -&gt; int option\n    val find_last : (int -&gt; bool) -&gt; t -&gt; int\n    val find_last_opt : (int -&gt; bool) -&gt; t -&gt; int option\n    val of_list : int list -&gt; t\n    val to_seq_from : int -&gt; t -&gt; int Seq.t\n    val to_seq : t -&gt; int Seq.t\n    val add_seq : int Seq.t -&gt; t -&gt; t\n    val of_seq : int Seq.t -&gt; t\n  end\n</code></pre>\n<p>For sets of strings, it is even easier because the standard library provides a\n<code>String</code> module with a type <code>t</code> and a function <code>compare</code>. If you were following\ncarefully, by now you must have guessed how to create a module for the\nmanipulation of sets of strings:</p>\n<pre><code class=\"language-ocaml\"># module String_set = Set.Make (String)\nmodule String_set :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -&gt; bool\n    val mem : elt -&gt; t -&gt; bool\n    val add : elt -&gt; t -&gt; t\n    val singleton : elt -&gt; t\n    val remove : elt -&gt; t -&gt; t\n    val union : t -&gt; t -&gt; t\n    val inter : t -&gt; t -&gt; t\n    val disjoint : t -&gt; t -&gt; bool\n    val diff : t -&gt; t -&gt; t\n    val compare : t -&gt; t -&gt; int\n    val equal : t -&gt; t -&gt; bool\n    val subset : t -&gt; t -&gt; bool\n    val iter : (elt -&gt; unit) -&gt; t -&gt; unit\n    val map : (elt -&gt; elt) -&gt; t -&gt; t\n    val fold : (elt -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a\n    val for_all : (elt -&gt; bool) -&gt; t -&gt; bool\n    val exists : (elt -&gt; bool) -&gt; t -&gt; bool\n    val filter : (elt -&gt; bool) -&gt; t -&gt; t\n    val partition : (elt -&gt; bool) -&gt; t -&gt; t * t\n    val cardinal : t -&gt; int\n    val elements : t -&gt; elt list\n    val min_elt : t -&gt; elt\n    val min_elt_opt : t -&gt; elt option\n    val max_elt : t -&gt; elt\n    val max_elt_opt : t -&gt; elt option\n    val choose : t -&gt; elt\n    val choose_opt : t -&gt; elt option\n    val split : elt -&gt; t -&gt; t * bool * t\n    val find : elt -&gt; t -&gt; elt\n    val find_opt : elt -&gt; t -&gt; elt option\n    val find_first : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_first_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val find_last : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_last_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val of_list : elt list -&gt; t\n    val to_seq_from : elt -&gt; t -&gt; elt Seq.t\n    val to_seq : t -&gt; elt Seq.t\n    val add_seq : elt Seq.t -&gt; t -&gt; t\n    val of_seq : elt Seq.t -&gt; t\n  end\n</code></pre>\n<p>(the parentheses are necessary)</p>\n<h2 id=\"defining-functors\">Defining functors</h2>\n<p>A functor with one argument can be defined like this:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">module F (X : X_type) = struct\n  ...\nend\n</code></pre>\n<p>where <code>X</code> is the module that will be passed as argument, and <code>X_type</code> is its\nsignature, which is mandatory.</p>\n<p>The signature of the returned module itself can be constrained, using this\nsyntax:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">module F (X : X_type) : Y_type =\nstruct\n  ...\nend\n</code></pre>\n<p>or by specifying this in the .mli file:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">module F (X : X_type) : Y_type\n</code></pre>\n<p>Overall, the syntax of functors is hard to grasp. The best may be to look at\nthe source files\n<a href=\"https://github.com/ocaml/ocaml/blob/trunk/stdlib/set.ml\"><code>set.ml</code></a> or\n<a href=\"https://github.com/ocaml/ocaml/blob/trunk/stdlib/map.ml\"><code>map.ml</code></a> of the\nstandard library.</p>\n"},{"title":"Objects","slug":"objects","description":"OCaml is an object-oriented, imperative, functional programming language\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Objects and classes\nOCaml is an object-oriented, imperative, functional programming language\n:-) It mixes all these paradigms and lets you use the most appropriate\n(or most familiar) programming paradigm for the task at hand. In this\nchapter I'm going to look at object-oriented programming in OCaml, but\nI'm also going to talk about why you might or might not want to write\nobject-oriented programs.\n\nThe classic noddy example used in text books to demonstrate\nobject-oriented programming is the stack class. This is a pretty\nterrible example in many ways, but I'm going to use it here to show the\nbasics of writing object-oriented OCaml.\n\nHere's some basic code to provide a stack of integers. The class is\nimplemented using a linked list.\n\n```ocaml\n# class stack_of_ints =\n  object (self)\n    val mutable the_list = ([] : int list)     (* instance variable *)\n    method push x =                            (* push method *)\n      the_list <- x :: the_list\n    method pop =                               (* pop method *)\n      let result = List.hd the_list in\n      the_list <- List.tl the_list;\n      result\n    method peek =                              (* peek method *)\n      List.hd the_list\n    method size =                              (* size method *)\n      List.length the_list\n  end\nclass stack_of_ints :\n  object\n    val mutable the_list : int list\n    method peek : int\n    method pop : int\n    method push : int -> unit\n    method size : int\n  end\n```\n\nThe basic pattern `class name = object (self) ... end` defines a class\ncalled `name`.\n\nThe class has one instance variable, which is mutable (not constant),\ncalled `the_list`. This is the underlying linked list. We initialize\nthis (each time a `stack_of_ints` object is created) using a bit of code\nthat you may not be familiar with. The expression `( [] : int list )`\nmeans \"an empty list, of type `int list`\". Recall that the simple empty\nlist `[]` has type `'a list`, meaning a list of any type. However we\nwant a stack of `int`, not anything else, and so in this case we want to\ntell the type inference engine that this list isn't the general \"list of\nanything\" but is in fact the narrower \"list of `int`\". The syntax\n`( expression : type )` means `expression` which is in fact of type\n`type`. This *isn't* a general type cast, because you can't use it to\noverrule the type inference engine, only to narrow a general type to\nmake it more specific. So you can't write, for example, `( 1 : float )`:\n\n```ocaml\n# (1 : float)\nLine 1, characters 2-3:\nError: This expression has type int but an expression was expected of type\n         float\n  Hint: Did you mean `1.'?\n```\n\nType safety is preserved. Back to the example ...\n\nThis class has four simple methods. `push` pushes an integer onto the\nstack. `pop` pops the top integer off the stack and returns it. Notice\nthe `<-` assignment operator used for updating our mutable instance\nvariable. It's the same `<-` assignment operator which is used for\nupdating mutable fields in records.\n\n`peek` returns the top of the stack (ie. head of the list) without\naffecting the stack, while `size` returns the number of elements in the\nstack (ie. the length of the list).\n\nLet's write some code to test stacks of ints. First let's create a new\nobject. We use the familiar `new` operator:\n\n```ocaml\n# let s = new stack_of_ints\nval s : stack_of_ints = <obj>\n```\nNow we'll push and pop some elements off the stack:\n\n```ocaml\n# for i = 1 to 10 do\n    s#push i\n  done\n- : unit = ()\n# while s#size > 0 do\n    Printf.printf \"Popped %d off the stack.\\n\" s#pop\n  done\nPopped 10 off the stack.\nPopped 9 off the stack.\nPopped 8 off the stack.\nPopped 7 off the stack.\nPopped 6 off the stack.\nPopped 5 off the stack.\nPopped 4 off the stack.\nPopped 3 off the stack.\nPopped 2 off the stack.\nPopped 1 off the stack.\n- : unit = ()\n```\nNotice the syntax. `object#method` means call `method` on `object`. This\nis the same as `object.method` or `object->method` that you will be\nfamiliar with in imperative languages.\n\nIn the OCaml toplevel we can examine the types of objects and methods in\nmore detail:\n\n```ocaml\n# let s = new stack_of_ints\nval s : stack_of_ints = <obj>\n# s#push\n- : int -> unit = <fun>\n```\n\n`s` is an opaque object. The implementation (ie. the list) is hidden\nfrom callers.\n\n###  Polymorphic classes\nA stack of integers is good, but what about a stack that can store any\ntype? (Not a single stack that can store a mixture of types, but\nmultiple stacks each storing objects of any single type). As with\n`'a list`, we can define `'a stack`:\n\n```ocaml\n# class ['a] stack =\n  object (self)\n    val mutable list = ([] : 'a list)    (* instance variable *)\n    method push x =                      (* push method *)\n      list <- x :: list\n    method pop =                         (* pop method *)\n      let result = List.hd list in\n      list <- List.tl list;\n      result\n    method peek =                        (* peek method *)\n      List.hd list\n    method size =                        (* size method *)\n      List.length list\n  end\nclass ['a] stack :\n  object\n    val mutable list : 'a list\n    method peek : 'a\n    method pop : 'a\n    method push : 'a -> unit\n    method size : int\n  end\n```\nThe `class ['a] stack` doesn't really define just one class, but a whole\n\"class of classes\", one for every possible type (ie. an infinitely large\nnumber of classes!) Let's try and use our `'a stack` class. In this\ninstance we create a stack and push a floating point number onto the\nstack. Notice the type of the stack:\n\n```ocaml\n# let s = new stack\nval s : '_weak1 stack = <obj>\n# s#push 1.0\n- : unit = ()\n# s\n- : float stack = <obj>\n```\n\nThis stack is now a `float stack`, and only floating point numbers may\nbe pushed and popped from this stack. Let's demonstrate the type-safety\nof our new `float stack`:\n\n```ocaml\n# s#push 3.0\n- : unit = ()\n# s#pop\n- : float = 3.\n# s#pop\n- : float = 1.\n# s#push \"a string\"\nLine 1, characters 8-18:\nError: This expression has type string but an expression was expected of type\n         float\n```\n\nWe can define polymorphic functions which can operate on any type of\nstack. Our first attempt is this one:\n\n```ocaml\n# let drain_stack s =\n  while s#size > 0 do\n    ignore (s#pop)\n  done\nval drain_stack : < pop : 'a; size : int; .. > -> unit = <fun>\n```\n\nNotice the type of `drain_stack`. Cleverly - perhaps *too* cleverly -\nOCaml's type inference engine has worked out that `drain_stack` works on\n*any* object which has `pop` and `size` methods! So if we defined\nanother, entirely separate class which happened to contain `pop` and\n`size` methods with suitable type signatures, then we might accidentally\ncall `drain_stack` on objects of that other type.\n\nWe can force OCaml to be more specific and only allow `drain_stack` to\nbe called on `'a stack`s by narrowing the type of the `s` argument, like\nthis:\n\n```ocaml\n# let drain_stack (s : 'a stack) =\n  while s#size > 0 do\n    ignore (s#pop)\n  done\nval drain_stack : 'a stack -> unit = <fun>\n```\n\n###  Inheritance, virtual classes, initializers\nI've noticed programmers in Java tend to overuse inheritance, possibly\nbecause it's the only reasonable way of extending code in that language.\nA much better and more general way to extend code is usually to use\nhooks (cf. Apache's module API). Nevertheless in certain narrow areas\ninheritance can be useful, and the most important of these is in writing\nGUI widget libraries.\n\nLet's consider an imaginary OCaml widget library similar to Java's\nSwing. We will define buttons and labels with the following class\nhierarchy:\n\n```\nwidget  (superclass for all widgets)\n  |\n  +----> container  (any widget that can contain other widgets)\n  |        |\n  |        +----> button\n  |\n  +-------------> label\n```\n(Notice that a `button` is a `container` because it can contain either a\nlabel or an image, depending on what is displayed on the button).\n\n`widget` is the virtual superclass for all widgets. I want every widget\nto have a name (just a string) which is constant over the life of that\nwidget. This was my first attempt:\n\n```ocaml\n# class virtual widget name =\n  object (self)\n    method get_name =\n      name\n    method virtual repaint : unit\n  end\nLines 1-6, characters 1-6:\nError: Some type variables are unbound in this type:\n         class virtual widget :\n           'a ->\n           object method get_name : 'a method virtual repaint : unit end\n       The method get_name has type 'a where 'a is unbound\n```\nOops! I forgot that OCaml cannot infer the type of `name` so will assume\nthat it is `'a`. But that defines a polymorphic class, and I didn't\ndeclare the class as polymorphic (`class ['a] widget`). I need to narrow\nthe type of `name` like this:\n\n```ocaml\n# class virtual widget (name : string) =\n  object (self)\n    method get_name =\n      name\n    method virtual repaint : unit\n  end;;\nclass virtual widget :\n  string -> object method get_name : string method virtual repaint : unit end\n```\nNow there are several new things going on in this code. Firstly the\nclass contains an **initializer**. This is an argument to the class\n(`name`) which you can think of as exactly the equivalent of an argument\nto a constructor in, eg., Java:\n\n```java\npublic class Widget\n{\n  public Widget (String name)\n  {\n    ...\n  }\n}\n```\nIn OCaml a constructor constructs the whole class, it's not just a\nspecially named function, so we write the arguments as if they are\narguments to the class:\n\n<!-- $MDX skip -->\n```ocaml\nclass foo arg1 arg2 ... =\n```\n\nSecondly the class contains a virtual method, and thus the whole class\nis marked as virtual. The virtual method is our `repaint` method. We\nneed to tell OCaml it's virtual (`method virtual`), *and* we need to\ntell OCaml the type of the method. Because the method doesn't contain\nany code, OCaml can't use type inference to automatically work out the\ntype for you, so you need to tell it the type. In this case the method\njust returns `unit`. If your class contains any virtual methods (even\njust inherited ones) then you need to specify the whole class as virtual\nby using `class virtual ...`.\n\nAs in C++ and Java, virtual classes cannot be directly instantiated\nusing `new`:\n\n```ocaml\n# let w = new widget \"my widget\"\nLine 1, characters 9-19:\nError: Cannot instantiate the virtual class widget\n```\n\nNow my `container` class is more interesting. It must inherit from\n`widget` and have the mechanics for storing the list of contained\nwidgets. Here is my simple implementation for `container`:\n\n```ocaml\n# class virtual container name =\n  object (self)\n    inherit widget name\n    val mutable widgets = ([] : widget list)\n    method add w =\n      widgets <- w :: widgets\n    method get_widgets =\n      widgets\n    method repaint =\n      List.iter (fun w -> w#repaint) widgets\n  end\nclass virtual container :\n  string ->\n  object\n    val mutable widgets : widget list\n    method add : widget -> unit\n    method get_name : string\n    method get_widgets : widget list\n    method repaint : unit\n  end\n```\n\nNotes:\n\n1. The `container` class is marked as virtual. It doesn't contain any\n virtual methods, but in this case I just want to prevent people\n creating containers directly.\n1. The `container` class has a `name` argument which is passed directly\n up when constructing the `widget`.\n1. `inherit widget name` means that the `container` inherits from\n `widget`, and it passes the `name` argument to the constructor for\n `widget`.\n1. My `container` contains a mutable list of widgets and methods to\n `add` a widget to this list and `get_widgets` (return the list of\n widgets).\n1. The list of widgets returned by `get_widgets` cannot be modified by\n code outside the class. The reason for this is somewhat subtle, but\n basically comes down to the fact that OCaml's linked lists are\n immutable. Let's imagine that someone wrote this code:\n\n  ```ocaml\n  # let list = container#get_widgets in\n    x :: list\n  ```\n\nWould this modify the private internal representation of my `container`\nclass, by prepending `x` to the list of widgets? No it wouldn't. The\nprivate variable `widgets` would be unaffected by this or any other\nchange attempted by the outside code. This means, for example, that you\ncould change the internal representation to use an array at some later\ndate, and no code outside the class would need to be changed.\n\nLast, but not least, we have implemented the previously virtual\n`repaint` function so that `container#repaint` will repaint all of the\ncontained widgets. Notice I use `List.iter` to iterate over the list,\nand I also use a probably unfamiliar anonymous function expression:\n\n```ocaml\n# (fun w -> w#repaint)\n- : < repaint : 'a; .. > -> 'a = <fun>\n```\nwhich defines an anonymous function with one argument `w` that just\ncalls `w#repaint` (the `repaint` method on widget `w`).\n\nIn this instance our `button` class is simple (rather unrealistically\nsimple in fact, but nevermind that):\n\n```ocaml\n# type button_state = Released | Pressed\ntype button_state = Released | Pressed\n# class button ?callback name =\n  object (self)\n    inherit container name as super\n    val mutable state = Released\n    method press =\n      state <- Pressed;\n      match callback with\n      | None -> ()\n      | Some f -> f ()\n    method release =\n      state <- Released\n    method repaint =\n      super#repaint;\n      print_endline (\"Button being repainted, state is \" ^\n                     (match state with\n                      | Pressed -> \"Pressed\"\n                      | Released -> \"Released\"))\n  end\nclass button :\n  ?callback:(unit -> unit) ->\n  string ->\n  object\n    val mutable state : button_state\n    val mutable widgets : widget list\n    method add : widget -> unit\n    method get_name : string\n    method get_widgets : widget list\n    method press : unit\n    method release : unit\n    method repaint : unit\n  end\n```\n\nNotes:\n\n1. This function has an optional argument (see the previous chapter)\n which is used to pass in the optional callback function. The\n callback is called when the button is pressed.\n1. The expression `inherit container name as super` names the\n superclass `super`. I use this in the `repaint` method:\n `super#repaint`. This expressly calls the superclass method.\n1. Pressing the button (calling `button#press` in this rather\n simplistic code) sets the state of the button to `Pressed` and calls\n the callback function, if one was defined. Notice that the\n `callback` variable is either `None` or `Some f`, in other words it\n has type `(unit -> unit) option`. Reread the previous chapter if you\n are unsure about this.\n1. Notice a strange thing about the `callback` variable. It's defined\n as an argument to the class, but any method can see and use it. In\n other words, the variable is supplied when the object is\n constructed, but persists over the lifetime of the object.\n1. The `repaint` method has been implemented. It calls the superclass\n (to repaint the container), then repaints the button, displaying the\n current state of the button.\n\nBefore defining our `label` class, let's play with the `button` class in\nthe OCaml toplevel:\n\n```ocaml\n# let b = new button ~callback:(fun () -> print_endline \"Ouch!\") \"button\"\nval b : button = <obj>\n# b#repaint\nButton being repainted, state is Released\n- : unit = ()\n# b#press\nOuch!\n- : unit = ()\n# b#repaint\nButton being repainted, state is Pressed\n- : unit = ()\n# b#release\n- : unit = ()\n```\n\nHere's our comparatively trivial `label` class:\n\n```ocaml\n# class label name text =\n  object (self)\n    inherit widget name\n    method repaint =\n      print_endline (\"Label: \" ^ text)\n  end\nclass label :\n  string ->\n  string -> object method get_name : string method repaint : unit end\n```\nLet's create a label which says \"Press me!\" and add it to the button:\n\n```ocaml\n# let l = new label \"label\" \"Press me!\"\nval l : label = <obj>\n# b#add l\n- : unit = ()\n# b#repaint\nLabel: Press me!\nButton being repainted, state is Released\n- : unit = ()\n```\n\n###  A note about `self`\nIn all the examples above we defined classes using the general pattern:\n\n<!-- $MDX skip -->\n```ocaml\nclass name =\n  object (self)\n    (* ... *)\n  end\n```\nI didn't explain the reference to `self`. In fact this names the object,\nallowing you to call methods in the same class or pass the object to\nfunctions outside the class. In other words, it's exactly the same as\n`this` in C++/Java. You may completely omit the\n`(self)` part if you don't need to refer to yourself - indeed in all the\nexamples above we could have done exactly that. However, I would advise\nyou to leave it in there because you never know when you might modify\nthe class and require the reference to `self`. There is no penalty for\nhaving it.\n\n###  Inheritance and coercions\n\n```ocaml\n# let b = new button \"button\"\nval b : button = <obj>\n# let l = new label \"label\" \"Press me!\"\nval l : label = <obj>\n# [b; l]\nLine 1, characters 5-6:\nError: This expression has type label but an expression was expected of type\n         button\n       The first object type has no method add\n```\nI created a button `b` and a label `l` and I tried to create a list\ncontaining both, but I got an error. Yet `b` and `l` are both `widget`s,\nso why can't I put them into the same list? Perhaps OCaml can't guess\nthat I want a `widget list`? Let's try telling it:\n\n```ocaml\n# let wl = ([] : widget list)\nval wl : widget list = []\n# let wl = b :: wl\nLine 1, characters 15-17:\nError: This expression has type widget list\n       but an expression was expected of type button list\n       Type widget = < get_name : string; repaint : unit >\n       is not compatible with type\n         button =\n           < add : widget -> unit; get_name : string;\n             get_widgets : widget list; press : unit; release : unit;\n             repaint : unit >\n       The first object type has no method add\n```\n\nIt turns out that OCaml doesn't coerce subclasses to the type of the\nsuperclass by default, but you can tell it to by using the `:>`\n(coercion) operator:\n\n```ocaml\n# let wl = (b :> widget) :: wl\nval wl : widget list = [<obj>]\n# let wl = (l :> widget) :: wl\nval wl : widget list = [<obj>; <obj>]\n```\n\nThe expression `(b :> widget)` means \"coerce the button `b` to have type\n`widget`\". Type-safety is preserved because it is possible to tell\ncompletely at compile time whether the coercion will succeed.\n\nActually, coercions are somewhat more subtle than described above, and\nso I urge you to read the manual to find out the full details.\n\nThe `container#add` method defined above is actually incorrect, and\nfails if you try to add widgets of different types into a `container`. A\ncoercion would fix this.\n\nIs it possible to coerce from a superclass (eg. `widget`) to a subclass\n(eg. `button`)? The answer, perhaps surprisingly, is NO! Coercing in\nthis direction is *unsafe*. You might try to coerce a `widget` which is\nin fact a `label`, not a `button`.\n\n###  The `Oo` module and comparing objects\nThe `Oo` module contains a few useful functions for OO programming.\n\n`Oo.copy` makes a shallow copy of an object. `Oo.id object` returns a\nunique identifying number for each object (a unique number across all\nclasses).\n\n`=` and `<>` can be used to compare objects for *physical* equality (an\nobject and its copy are not physically identical). You can also use `<`\netc. which provides an ordering of objects based apparently on their\nIDs.\n\n## Objects without class\nHere we examine how to use objects pretty much like records, without\nnecessarily using classes.\n\n###  Immediate objects and object types\nObjects can be used instead of records, and have some nice properties\nthat can make them preferable to records in some cases. We saw that the\ncanonical way of creating objects is to first define a class, and use\nthis class to create individual objects. This can be cumbersome in some\nsituations since class definitions are more than a type definition and\ncannot be defined recursively with types. However, objects have a type\nthat is very analog to a record type, and it can be used in type\ndefinitions. In addition, objects can be created without a class. They\nare called *immediate objects*. Here is the definition of an immediate\nobject:\n\n```ocaml\n# let o =\n  object\n    val mutable n = 0\n    method incr = n <- n + 1\n    method get = n\n  end\nval o : < get : int; incr : unit > = <obj>\n```\n\nThis object has a type, which is defined by its public methods only.\nValues are not visible and neither are private methods (not shown).\nUnlike records, such a type does not need to be predefined explicitly,\nbut doing so can make things clearer. We can do it like this:\n\n```ocaml\n# type counter = <get : int; incr : unit>\ntype counter = < get : int; incr : unit >\n```\nCompare with an equivalent record type definition:\n\n```ocaml\n# type counter_r =\n  {get : unit -> int;\n   incr : unit -> unit}\ntype counter_r = { get : unit -> int; incr : unit -> unit; }\n```\nThe implementation of a record working like our object would be:\n\n```ocaml\n# let r =\n  let n = ref 0 in\n    {get = (fun () -> !n);\n     incr = (fun () -> incr n)}\nval r : counter_r = {get = <fun>; incr = <fun>}\n```\nIn terms of functionality, both the object and the record are similar,\nbut each solution has its own advantages:\n\n* **speed**: slightly faster field access in records\n* **field names**: it is inconvenient to manipulate records of\n different types when some fields are named identically but it's not\n a problem with objects\n* **subtyping**: it is impossible to coerce the type of a record to a\n type with less fields. That is however possible with objects, so\n objects of different kinds that share some methods can be mixed in a\n data structure where only their common methods are visible (see next\n section)\n* **type definitions**: there is no need to define an object type in\n advance, so it lightens the dependency constraints between modules\n\n###  Class types vs. just types\nBeware of the confusion between *class types* and object *types*. A\n*class type* is not a data *type*, normally referred to as *type* in the\nOCaml jargon. An object *type* is a kind of data *type*, just like a\nrecord type or a tuple.\n\nWhen a class is defined, both a *class type* and an object *type* of the\nsame name are defined:\n\n```ocaml\n# class t =\n  object\n    val x = 0\n    method get = x\n  end\nclass t : object val x : int method get : int end\n```\n\n`object val x : int method get : int end` is a class type.\n\nIn this example, `t` is also the type of objects that this class would\ncreate. Objects that derive from different classes or no class at all\n(immediate objects) can be mixed together as long as they have the same\ntype:\n\n```ocaml\n# let x = object method get = 123 end\nval x : < get : int > = <obj>\n# let l = [new t; x]\nval l : t list = [<obj>; <obj>]\n```\n\nMixing objects that share a common subtype can be done, but requires\nexplicit type coercion using the `:>` operator:\n\n```ocaml\n# let x = object method get = 123 end\nval x : < get : int > = <obj>\n# let y = object method get = 80 method special = \"hello\" end\nval y : < get : int; special : string > = <obj>\n# let l = [x; y]\nLine 1, characters 13-14:\nError: This expression has type < get : int; special : string >\n       but an expression was expected of type < get : int >\n       The second object type has no method special\n# let l = [x; (y :> t)]\nval l : t list = [<obj>; <obj>]\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#objects-and-classes\">Objects and classes</a>\n</li>\n<li><a href=\"#objects-without-class\">Objects without class</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"objects-and-classes\">Objects and classes</h2>\n<p>OCaml is an object-oriented, imperative, functional programming language\n:-) It mixes all these paradigms and lets you use the most appropriate\n(or most familiar) programming paradigm for the task at hand. In this\nchapter I'm going to look at object-oriented programming in OCaml, but\nI'm also going to talk about why you might or might not want to write\nobject-oriented programs.</p>\n<p>The classic noddy example used in text books to demonstrate\nobject-oriented programming is the stack class. This is a pretty\nterrible example in many ways, but I'm going to use it here to show the\nbasics of writing object-oriented OCaml.</p>\n<p>Here's some basic code to provide a stack of integers. The class is\nimplemented using a linked list.</p>\n<pre><code class=\"language-ocaml\"># class stack_of_ints =\n  object (self)\n    val mutable the_list = ([] : int list)     (* instance variable *)\n    method push x =                            (* push method *)\n      the_list &lt;- x :: the_list\n    method pop =                               (* pop method *)\n      let result = List.hd the_list in\n      the_list &lt;- List.tl the_list;\n      result\n    method peek =                              (* peek method *)\n      List.hd the_list\n    method size =                              (* size method *)\n      List.length the_list\n  end\nclass stack_of_ints :\n  object\n    val mutable the_list : int list\n    method peek : int\n    method pop : int\n    method push : int -&gt; unit\n    method size : int\n  end\n</code></pre>\n<p>The basic pattern <code>class name = object (self) ... end</code> defines a class\ncalled <code>name</code>.</p>\n<p>The class has one instance variable, which is mutable (not constant),\ncalled <code>the_list</code>. This is the underlying linked list. We initialize\nthis (each time a <code>stack_of_ints</code> object is created) using a bit of code\nthat you may not be familiar with. The expression <code>( [] : int list )</code>\nmeans &quot;an empty list, of type <code>int list</code>&quot;. Recall that the simple empty\nlist <code>[]</code> has type <code>'a list</code>, meaning a list of any type. However we\nwant a stack of <code>int</code>, not anything else, and so in this case we want to\ntell the type inference engine that this list isn't the general &quot;list of\nanything&quot; but is in fact the narrower &quot;list of <code>int</code>&quot;. The syntax\n<code>( expression : type )</code> means <code>expression</code> which is in fact of type\n<code>type</code>. This <em>isn't</em> a general type cast, because you can't use it to\noverrule the type inference engine, only to narrow a general type to\nmake it more specific. So you can't write, for example, <code>( 1 : float )</code>:</p>\n<pre><code class=\"language-ocaml\"># (1 : float)\nLine 1, characters 2-3:\nError: This expression has type int but an expression was expected of type\n         float\n  Hint: Did you mean `1.'?\n</code></pre>\n<p>Type safety is preserved. Back to the example ...</p>\n<p>This class has four simple methods. <code>push</code> pushes an integer onto the\nstack. <code>pop</code> pops the top integer off the stack and returns it. Notice\nthe <code>&lt;-</code> assignment operator used for updating our mutable instance\nvariable. It's the same <code>&lt;-</code> assignment operator which is used for\nupdating mutable fields in records.</p>\n<p><code>peek</code> returns the top of the stack (ie. head of the list) without\naffecting the stack, while <code>size</code> returns the number of elements in the\nstack (ie. the length of the list).</p>\n<p>Let's write some code to test stacks of ints. First let's create a new\nobject. We use the familiar <code>new</code> operator:</p>\n<pre><code class=\"language-ocaml\"># let s = new stack_of_ints\nval s : stack_of_ints = &lt;obj&gt;\n</code></pre>\n<p>Now we'll push and pop some elements off the stack:</p>\n<pre><code class=\"language-ocaml\"># for i = 1 to 10 do\n    s#push i\n  done\n- : unit = ()\n# while s#size &gt; 0 do\n    Printf.printf &quot;Popped %d off the stack.\\n&quot; s#pop\n  done\nPopped 10 off the stack.\nPopped 9 off the stack.\nPopped 8 off the stack.\nPopped 7 off the stack.\nPopped 6 off the stack.\nPopped 5 off the stack.\nPopped 4 off the stack.\nPopped 3 off the stack.\nPopped 2 off the stack.\nPopped 1 off the stack.\n- : unit = ()\n</code></pre>\n<p>Notice the syntax. <code>object#method</code> means call <code>method</code> on <code>object</code>. This\nis the same as <code>object.method</code> or <code>object-&gt;method</code> that you will be\nfamiliar with in imperative languages.</p>\n<p>In the OCaml toplevel we can examine the types of objects and methods in\nmore detail:</p>\n<pre><code class=\"language-ocaml\"># let s = new stack_of_ints\nval s : stack_of_ints = &lt;obj&gt;\n# s#push\n- : int -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p><code>s</code> is an opaque object. The implementation (ie. the list) is hidden\nfrom callers.</p>\n<h3 id=\"polymorphic-classes\">Polymorphic classes</h3>\n<p>A stack of integers is good, but what about a stack that can store any\ntype? (Not a single stack that can store a mixture of types, but\nmultiple stacks each storing objects of any single type). As with\n<code>'a list</code>, we can define <code>'a stack</code>:</p>\n<pre><code class=\"language-ocaml\"># class ['a] stack =\n  object (self)\n    val mutable list = ([] : 'a list)    (* instance variable *)\n    method push x =                      (* push method *)\n      list &lt;- x :: list\n    method pop =                         (* pop method *)\n      let result = List.hd list in\n      list &lt;- List.tl list;\n      result\n    method peek =                        (* peek method *)\n      List.hd list\n    method size =                        (* size method *)\n      List.length list\n  end\nclass ['a] stack :\n  object\n    val mutable list : 'a list\n    method peek : 'a\n    method pop : 'a\n    method push : 'a -&gt; unit\n    method size : int\n  end\n</code></pre>\n<p>The <code>class ['a] stack</code> doesn't really define just one class, but a whole\n&quot;class of classes&quot;, one for every possible type (ie. an infinitely large\nnumber of classes!) Let's try and use our <code>'a stack</code> class. In this\ninstance we create a stack and push a floating point number onto the\nstack. Notice the type of the stack:</p>\n<pre><code class=\"language-ocaml\"># let s = new stack\nval s : '_weak1 stack = &lt;obj&gt;\n# s#push 1.0\n- : unit = ()\n# s\n- : float stack = &lt;obj&gt;\n</code></pre>\n<p>This stack is now a <code>float stack</code>, and only floating point numbers may\nbe pushed and popped from this stack. Let's demonstrate the type-safety\nof our new <code>float stack</code>:</p>\n<pre><code class=\"language-ocaml\"># s#push 3.0\n- : unit = ()\n# s#pop\n- : float = 3.\n# s#pop\n- : float = 1.\n# s#push &quot;a string&quot;\nLine 1, characters 8-18:\nError: This expression has type string but an expression was expected of type\n         float\n</code></pre>\n<p>We can define polymorphic functions which can operate on any type of\nstack. Our first attempt is this one:</p>\n<pre><code class=\"language-ocaml\"># let drain_stack s =\n  while s#size &gt; 0 do\n    ignore (s#pop)\n  done\nval drain_stack : &lt; pop : 'a; size : int; .. &gt; -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Notice the type of <code>drain_stack</code>. Cleverly - perhaps <em>too</em> cleverly -\nOCaml's type inference engine has worked out that <code>drain_stack</code> works on\n<em>any</em> object which has <code>pop</code> and <code>size</code> methods! So if we defined\nanother, entirely separate class which happened to contain <code>pop</code> and\n<code>size</code> methods with suitable type signatures, then we might accidentally\ncall <code>drain_stack</code> on objects of that other type.</p>\n<p>We can force OCaml to be more specific and only allow <code>drain_stack</code> to\nbe called on <code>'a stack</code>s by narrowing the type of the <code>s</code> argument, like\nthis:</p>\n<pre><code class=\"language-ocaml\"># let drain_stack (s : 'a stack) =\n  while s#size &gt; 0 do\n    ignore (s#pop)\n  done\nval drain_stack : 'a stack -&gt; unit = &lt;fun&gt;\n</code></pre>\n<h3 id=\"inheritance-virtual-classes-initializers\">Inheritance, virtual classes, initializers</h3>\n<p>I've noticed programmers in Java tend to overuse inheritance, possibly\nbecause it's the only reasonable way of extending code in that language.\nA much better and more general way to extend code is usually to use\nhooks (cf. Apache's module API). Nevertheless in certain narrow areas\ninheritance can be useful, and the most important of these is in writing\nGUI widget libraries.</p>\n<p>Let's consider an imaginary OCaml widget library similar to Java's\nSwing. We will define buttons and labels with the following class\nhierarchy:</p>\n<pre><code>widget  (superclass for all widgets)\n  |\n  +----&gt; container  (any widget that can contain other widgets)\n  |        |\n  |        +----&gt; button\n  |\n  +-------------&gt; label\n</code></pre>\n<p>(Notice that a <code>button</code> is a <code>container</code> because it can contain either a\nlabel or an image, depending on what is displayed on the button).</p>\n<p><code>widget</code> is the virtual superclass for all widgets. I want every widget\nto have a name (just a string) which is constant over the life of that\nwidget. This was my first attempt:</p>\n<pre><code class=\"language-ocaml\"># class virtual widget name =\n  object (self)\n    method get_name =\n      name\n    method virtual repaint : unit\n  end\nLines 1-6, characters 1-6:\nError: Some type variables are unbound in this type:\n         class virtual widget :\n           'a -&gt;\n           object method get_name : 'a method virtual repaint : unit end\n       The method get_name has type 'a where 'a is unbound\n</code></pre>\n<p>Oops! I forgot that OCaml cannot infer the type of <code>name</code> so will assume\nthat it is <code>'a</code>. But that defines a polymorphic class, and I didn't\ndeclare the class as polymorphic (<code>class ['a] widget</code>). I need to narrow\nthe type of <code>name</code> like this:</p>\n<pre><code class=\"language-ocaml\"># class virtual widget (name : string) =\n  object (self)\n    method get_name =\n      name\n    method virtual repaint : unit\n  end;;\nclass virtual widget :\n  string -&gt; object method get_name : string method virtual repaint : unit end\n</code></pre>\n<p>Now there are several new things going on in this code. Firstly the\nclass contains an <strong>initializer</strong>. This is an argument to the class\n(<code>name</code>) which you can think of as exactly the equivalent of an argument\nto a constructor in, eg., Java:</p>\n<pre><code class=\"language-java\">public class Widget\n{\n  public Widget (String name)\n  {\n    ...\n  }\n}\n</code></pre>\n<p>In OCaml a constructor constructs the whole class, it's not just a\nspecially named function, so we write the arguments as if they are\narguments to the class:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">class foo arg1 arg2 ... =\n</code></pre>\n<p>Secondly the class contains a virtual method, and thus the whole class\nis marked as virtual. The virtual method is our <code>repaint</code> method. We\nneed to tell OCaml it's virtual (<code>method virtual</code>), <em>and</em> we need to\ntell OCaml the type of the method. Because the method doesn't contain\nany code, OCaml can't use type inference to automatically work out the\ntype for you, so you need to tell it the type. In this case the method\njust returns <code>unit</code>. If your class contains any virtual methods (even\njust inherited ones) then you need to specify the whole class as virtual\nby using <code>class virtual ...</code>.</p>\n<p>As in C++ and Java, virtual classes cannot be directly instantiated\nusing <code>new</code>:</p>\n<pre><code class=\"language-ocaml\"># let w = new widget &quot;my widget&quot;\nLine 1, characters 9-19:\nError: Cannot instantiate the virtual class widget\n</code></pre>\n<p>Now my <code>container</code> class is more interesting. It must inherit from\n<code>widget</code> and have the mechanics for storing the list of contained\nwidgets. Here is my simple implementation for <code>container</code>:</p>\n<pre><code class=\"language-ocaml\"># class virtual container name =\n  object (self)\n    inherit widget name\n    val mutable widgets = ([] : widget list)\n    method add w =\n      widgets &lt;- w :: widgets\n    method get_widgets =\n      widgets\n    method repaint =\n      List.iter (fun w -&gt; w#repaint) widgets\n  end\nclass virtual container :\n  string -&gt;\n  object\n    val mutable widgets : widget list\n    method add : widget -&gt; unit\n    method get_name : string\n    method get_widgets : widget list\n    method repaint : unit\n  end\n</code></pre>\n<p>Notes:</p>\n<ol>\n<li>The <code>container</code> class is marked as virtual. It doesn't contain any\nvirtual methods, but in this case I just want to prevent people\ncreating containers directly.\n</li>\n<li>The <code>container</code> class has a <code>name</code> argument which is passed directly\nup when constructing the <code>widget</code>.\n</li>\n<li><code>inherit widget name</code> means that the <code>container</code> inherits from\n<code>widget</code>, and it passes the <code>name</code> argument to the constructor for\n<code>widget</code>.\n</li>\n<li>My <code>container</code> contains a mutable list of widgets and methods to\n<code>add</code> a widget to this list and <code>get_widgets</code> (return the list of\nwidgets).\n</li>\n<li>The list of widgets returned by <code>get_widgets</code> cannot be modified by\ncode outside the class. The reason for this is somewhat subtle, but\nbasically comes down to the fact that OCaml's linked lists are\nimmutable. Let's imagine that someone wrote this code:\n</li>\n</ol>\n<pre><code class=\"language-ocaml\"># let list = container#get_widgets in\n  x :: list\n</code></pre>\n<p>Would this modify the private internal representation of my <code>container</code>\nclass, by prepending <code>x</code> to the list of widgets? No it wouldn't. The\nprivate variable <code>widgets</code> would be unaffected by this or any other\nchange attempted by the outside code. This means, for example, that you\ncould change the internal representation to use an array at some later\ndate, and no code outside the class would need to be changed.</p>\n<p>Last, but not least, we have implemented the previously virtual\n<code>repaint</code> function so that <code>container#repaint</code> will repaint all of the\ncontained widgets. Notice I use <code>List.iter</code> to iterate over the list,\nand I also use a probably unfamiliar anonymous function expression:</p>\n<pre><code class=\"language-ocaml\"># (fun w -&gt; w#repaint)\n- : &lt; repaint : 'a; .. &gt; -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>which defines an anonymous function with one argument <code>w</code> that just\ncalls <code>w#repaint</code> (the <code>repaint</code> method on widget <code>w</code>).</p>\n<p>In this instance our <code>button</code> class is simple (rather unrealistically\nsimple in fact, but nevermind that):</p>\n<pre><code class=\"language-ocaml\"># type button_state = Released | Pressed\ntype button_state = Released | Pressed\n# class button ?callback name =\n  object (self)\n    inherit container name as super\n    val mutable state = Released\n    method press =\n      state &lt;- Pressed;\n      match callback with\n      | None -&gt; ()\n      | Some f -&gt; f ()\n    method release =\n      state &lt;- Released\n    method repaint =\n      super#repaint;\n      print_endline (&quot;Button being repainted, state is &quot; ^\n                     (match state with\n                      | Pressed -&gt; &quot;Pressed&quot;\n                      | Released -&gt; &quot;Released&quot;))\n  end\nclass button :\n  ?callback:(unit -&gt; unit) -&gt;\n  string -&gt;\n  object\n    val mutable state : button_state\n    val mutable widgets : widget list\n    method add : widget -&gt; unit\n    method get_name : string\n    method get_widgets : widget list\n    method press : unit\n    method release : unit\n    method repaint : unit\n  end\n</code></pre>\n<p>Notes:</p>\n<ol>\n<li>This function has an optional argument (see the previous chapter)\nwhich is used to pass in the optional callback function. The\ncallback is called when the button is pressed.\n</li>\n<li>The expression <code>inherit container name as super</code> names the\nsuperclass <code>super</code>. I use this in the <code>repaint</code> method:\n<code>super#repaint</code>. This expressly calls the superclass method.\n</li>\n<li>Pressing the button (calling <code>button#press</code> in this rather\nsimplistic code) sets the state of the button to <code>Pressed</code> and calls\nthe callback function, if one was defined. Notice that the\n<code>callback</code> variable is either <code>None</code> or <code>Some f</code>, in other words it\nhas type <code>(unit -&gt; unit) option</code>. Reread the previous chapter if you\nare unsure about this.\n</li>\n<li>Notice a strange thing about the <code>callback</code> variable. It's defined\nas an argument to the class, but any method can see and use it. In\nother words, the variable is supplied when the object is\nconstructed, but persists over the lifetime of the object.\n</li>\n<li>The <code>repaint</code> method has been implemented. It calls the superclass\n(to repaint the container), then repaints the button, displaying the\ncurrent state of the button.\n</li>\n</ol>\n<p>Before defining our <code>label</code> class, let's play with the <code>button</code> class in\nthe OCaml toplevel:</p>\n<pre><code class=\"language-ocaml\"># let b = new button ~callback:(fun () -&gt; print_endline &quot;Ouch!&quot;) &quot;button&quot;\nval b : button = &lt;obj&gt;\n# b#repaint\nButton being repainted, state is Released\n- : unit = ()\n# b#press\nOuch!\n- : unit = ()\n# b#repaint\nButton being repainted, state is Pressed\n- : unit = ()\n# b#release\n- : unit = ()\n</code></pre>\n<p>Here's our comparatively trivial <code>label</code> class:</p>\n<pre><code class=\"language-ocaml\"># class label name text =\n  object (self)\n    inherit widget name\n    method repaint =\n      print_endline (&quot;Label: &quot; ^ text)\n  end\nclass label :\n  string -&gt;\n  string -&gt; object method get_name : string method repaint : unit end\n</code></pre>\n<p>Let's create a label which says &quot;Press me!&quot; and add it to the button:</p>\n<pre><code class=\"language-ocaml\"># let l = new label &quot;label&quot; &quot;Press me!&quot;\nval l : label = &lt;obj&gt;\n# b#add l\n- : unit = ()\n# b#repaint\nLabel: Press me!\nButton being repainted, state is Released\n- : unit = ()\n</code></pre>\n<h3 id=\"a-note-about-self\">A note about <code>self</code></h3>\n<p>In all the examples above we defined classes using the general pattern:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">class name =\n  object (self)\n    (* ... *)\n  end\n</code></pre>\n<p>I didn't explain the reference to <code>self</code>. In fact this names the object,\nallowing you to call methods in the same class or pass the object to\nfunctions outside the class. In other words, it's exactly the same as\n<code>this</code> in C++/Java. You may completely omit the\n<code>(self)</code> part if you don't need to refer to yourself - indeed in all the\nexamples above we could have done exactly that. However, I would advise\nyou to leave it in there because you never know when you might modify\nthe class and require the reference to <code>self</code>. There is no penalty for\nhaving it.</p>\n<h3 id=\"inheritance-and-coercions\">Inheritance and coercions</h3>\n<pre><code class=\"language-ocaml\"># let b = new button &quot;button&quot;\nval b : button = &lt;obj&gt;\n# let l = new label &quot;label&quot; &quot;Press me!&quot;\nval l : label = &lt;obj&gt;\n# [b; l]\nLine 1, characters 5-6:\nError: This expression has type label but an expression was expected of type\n         button\n       The first object type has no method add\n</code></pre>\n<p>I created a button <code>b</code> and a label <code>l</code> and I tried to create a list\ncontaining both, but I got an error. Yet <code>b</code> and <code>l</code> are both <code>widget</code>s,\nso why can't I put them into the same list? Perhaps OCaml can't guess\nthat I want a <code>widget list</code>? Let's try telling it:</p>\n<pre><code class=\"language-ocaml\"># let wl = ([] : widget list)\nval wl : widget list = []\n# let wl = b :: wl\nLine 1, characters 15-17:\nError: This expression has type widget list\n       but an expression was expected of type button list\n       Type widget = &lt; get_name : string; repaint : unit &gt;\n       is not compatible with type\n         button =\n           &lt; add : widget -&gt; unit; get_name : string;\n             get_widgets : widget list; press : unit; release : unit;\n             repaint : unit &gt;\n       The first object type has no method add\n</code></pre>\n<p>It turns out that OCaml doesn't coerce subclasses to the type of the\nsuperclass by default, but you can tell it to by using the <code>:&gt;</code>\n(coercion) operator:</p>\n<pre><code class=\"language-ocaml\"># let wl = (b :&gt; widget) :: wl\nval wl : widget list = [&lt;obj&gt;]\n# let wl = (l :&gt; widget) :: wl\nval wl : widget list = [&lt;obj&gt;; &lt;obj&gt;]\n</code></pre>\n<p>The expression <code>(b :&gt; widget)</code> means &quot;coerce the button <code>b</code> to have type\n<code>widget</code>&quot;. Type-safety is preserved because it is possible to tell\ncompletely at compile time whether the coercion will succeed.</p>\n<p>Actually, coercions are somewhat more subtle than described above, and\nso I urge you to read the manual to find out the full details.</p>\n<p>The <code>container#add</code> method defined above is actually incorrect, and\nfails if you try to add widgets of different types into a <code>container</code>. A\ncoercion would fix this.</p>\n<p>Is it possible to coerce from a superclass (eg. <code>widget</code>) to a subclass\n(eg. <code>button</code>)? The answer, perhaps surprisingly, is NO! Coercing in\nthis direction is <em>unsafe</em>. You might try to coerce a <code>widget</code> which is\nin fact a <code>label</code>, not a <code>button</code>.</p>\n<h3 id=\"the-oo-module-and-comparing-objects\">The <code>Oo</code> module and comparing objects</h3>\n<p>The <code>Oo</code> module contains a few useful functions for OO programming.</p>\n<p><code>Oo.copy</code> makes a shallow copy of an object. <code>Oo.id object</code> returns a\nunique identifying number for each object (a unique number across all\nclasses).</p>\n<p><code>=</code> and <code>&lt;&gt;</code> can be used to compare objects for <em>physical</em> equality (an\nobject and its copy are not physically identical). You can also use <code>&lt;</code>\netc. which provides an ordering of objects based apparently on their\nIDs.</p>\n<h2 id=\"objects-without-class\">Objects without class</h2>\n<p>Here we examine how to use objects pretty much like records, without\nnecessarily using classes.</p>\n<h3 id=\"immediate-objects-and-object-types\">Immediate objects and object types</h3>\n<p>Objects can be used instead of records, and have some nice properties\nthat can make them preferable to records in some cases. We saw that the\ncanonical way of creating objects is to first define a class, and use\nthis class to create individual objects. This can be cumbersome in some\nsituations since class definitions are more than a type definition and\ncannot be defined recursively with types. However, objects have a type\nthat is very analog to a record type, and it can be used in type\ndefinitions. In addition, objects can be created without a class. They\nare called <em>immediate objects</em>. Here is the definition of an immediate\nobject:</p>\n<pre><code class=\"language-ocaml\"># let o =\n  object\n    val mutable n = 0\n    method incr = n &lt;- n + 1\n    method get = n\n  end\nval o : &lt; get : int; incr : unit &gt; = &lt;obj&gt;\n</code></pre>\n<p>This object has a type, which is defined by its public methods only.\nValues are not visible and neither are private methods (not shown).\nUnlike records, such a type does not need to be predefined explicitly,\nbut doing so can make things clearer. We can do it like this:</p>\n<pre><code class=\"language-ocaml\"># type counter = &lt;get : int; incr : unit&gt;\ntype counter = &lt; get : int; incr : unit &gt;\n</code></pre>\n<p>Compare with an equivalent record type definition:</p>\n<pre><code class=\"language-ocaml\"># type counter_r =\n  {get : unit -&gt; int;\n   incr : unit -&gt; unit}\ntype counter_r = { get : unit -&gt; int; incr : unit -&gt; unit; }\n</code></pre>\n<p>The implementation of a record working like our object would be:</p>\n<pre><code class=\"language-ocaml\"># let r =\n  let n = ref 0 in\n    {get = (fun () -&gt; !n);\n     incr = (fun () -&gt; incr n)}\nval r : counter_r = {get = &lt;fun&gt;; incr = &lt;fun&gt;}\n</code></pre>\n<p>In terms of functionality, both the object and the record are similar,\nbut each solution has its own advantages:</p>\n<ul>\n<li><strong>speed</strong>: slightly faster field access in records\n</li>\n<li><strong>field names</strong>: it is inconvenient to manipulate records of\ndifferent types when some fields are named identically but it's not\na problem with objects\n</li>\n<li><strong>subtyping</strong>: it is impossible to coerce the type of a record to a\ntype with less fields. That is however possible with objects, so\nobjects of different kinds that share some methods can be mixed in a\ndata structure where only their common methods are visible (see next\nsection)\n</li>\n<li><strong>type definitions</strong>: there is no need to define an object type in\nadvance, so it lightens the dependency constraints between modules\n</li>\n</ul>\n<h3 id=\"class-types-vs-just-types\">Class types vs. just types</h3>\n<p>Beware of the confusion between <em>class types</em> and object <em>types</em>. A\n<em>class type</em> is not a data <em>type</em>, normally referred to as <em>type</em> in the\nOCaml jargon. An object <em>type</em> is a kind of data <em>type</em>, just like a\nrecord type or a tuple.</p>\n<p>When a class is defined, both a <em>class type</em> and an object <em>type</em> of the\nsame name are defined:</p>\n<pre><code class=\"language-ocaml\"># class t =\n  object\n    val x = 0\n    method get = x\n  end\nclass t : object val x : int method get : int end\n</code></pre>\n<p><code>object val x : int method get : int end</code> is a class type.</p>\n<p>In this example, <code>t</code> is also the type of objects that this class would\ncreate. Objects that derive from different classes or no class at all\n(immediate objects) can be mixed together as long as they have the same\ntype:</p>\n<pre><code class=\"language-ocaml\"># let x = object method get = 123 end\nval x : &lt; get : int &gt; = &lt;obj&gt;\n# let l = [new t; x]\nval l : t list = [&lt;obj&gt;; &lt;obj&gt;]\n</code></pre>\n<p>Mixing objects that share a common subtype can be done, but requires\nexplicit type coercion using the <code>:&gt;</code> operator:</p>\n<pre><code class=\"language-ocaml\"># let x = object method get = 123 end\nval x : &lt; get : int &gt; = &lt;obj&gt;\n# let y = object method get = 80 method special = &quot;hello&quot; end\nval y : &lt; get : int; special : string &gt; = &lt;obj&gt;\n# let l = [x; y]\nLine 1, characters 13-14:\nError: This expression has type &lt; get : int; special : string &gt;\n       but an expression was expected of type &lt; get : int &gt;\n       The second object type has no method special\n# let l = [x; (y :&gt; t)]\nval l : t list = [&lt;obj&gt;; &lt;obj&gt;]\n</code></pre>\n"},{"title":"Error Handling","slug":"error-handling","description":"Discover the different ways you can manage errors in your OCaml programs\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"errors","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## Exceptions\n\nOne way of handling errors in OCaml is exceptions. The\nstandard library relies heavily upon them.\n\nExceptions belong to the type `exn` (an extensible sum type):\n\n```ocaml\nexception Foo of string\n\nlet i_will_fail () =\n  raise (Foo \"Oh no!\")\n```\n\nHere, we add a variant `Foo` to the type `exn`, and create a function\nthat will raise this exception. Now, how do we handle exceptions?\nThe construct is `try ... with ...`:\n\n```ocaml\nlet safe_inverse n =\n  try Some (1 / n) with\n    Division_by_zero -> None\n\nlet safe_list_find p l =\n  try Some (List.find p l) with\n    Not_found -> None\n```\n\nWe can try those functions:\n\n```ocaml\n# 1 / 0;;\nException: Division_by_zero.\n# safe_inverse 2;;\n- : int option = Some 0\n# safe_inverse 0;;\n- : int option = None\n# List.find (fun x -> x mod 2 = 0) [1; 3; 5]\nException: Not_found.\n# safe_list_find (fun x -> x mod 2 = 0) [1; 3; 4; 5]\n- : int option = Some 4\n# safe_list_find (fun x -> x mod 2 = 0) [1; 3; 5]\n- : int option = None\n```\n\nThe biggest issue with exceptions is that they do not appear in types.\nOne has to read the documentation to see that, indeed, `Map.S.find`\nor `List.hd` are not total functions, and that they might fail.\n\nIt is considered good practice nowadays, when a function can fail in\ncases that are not bugs (i.e., not `assert false`, but network failures,\nkeys not present, etc.)\nto return a more explicit type such as `'a option` or `('a, 'b) result`.\nA relatively common idiom is to have such a safe version of the function,\nsay, `val foo : a -> b option`, and an exception raising\nversion `val foo_exn : a -> b`.\n\n### Documentation\n\nFunctions that can raise exceptions should be documented like this:\n\n<!-- $MDX skip -->\n```ocaml\nval foo : a -> b\n(** foo does this and that, here is how it works, etc.\n    @raise Invalid_argument if [a] doesn't satisfy ...\n    @raise Sys_error if filesystem is not happy *)\n```\n\n### Stacktraces\n\nTo get a stacktrace when a unhandled exception makes your program crash, you\nneed to compile the program in \"debug\" mode (with `-g` when calling\n`ocamlc`, or `-tag 'debug'` when calling `ocamlbuild`).\nThen:\n\n```\nOCAMLRUNPARAM=b ./myprogram [args]\n```\n\nAnd you will get a stacktrace. Alternatively, you can call, from within the program,\n\n```ocaml\nlet () = Printexc.record_backtrace true\n```\n\n### Printing\n\nTo print an exception, the module `Printexc` comes in handy. For instance,\nthe following function `notify_user : (unit -> 'a) -> 'a` can be used\nto call a function and, if it fails, print the exception on `stderr`.\nIf stacktraces are enabled, this function will also display it.\n\n```ocaml\nlet notify_user f =\n  try f () with e ->\n    let msg = Printexc.to_string e\n    and stack = Printexc.get_backtrace () in\n      Printf.eprintf \"there was an error: %s%s\\n\" msg stack;\n      raise e\n```\n\nOCaml knows how to print its built-in exception, but you can also tell it\nhow to print your own exceptions:\n\n```ocaml\nexception Foo of int\n\nlet () =\n  Printexc.register_printer\n    (function\n      | Foo i -> Some (Printf.sprintf \"Foo(%d)\" i)\n      | _ -> None (* for other exceptions *)\n    )\n```\n\nEach printer should take care of the exceptions it knows about, returning\n`Some <printed exception>`, and return `None` otherwise (let the other printers\ndo the job!).\n\n## Result type\n\nThe Stdlib module contains the following type:\n\n```ocaml\ntype ('a, 'b) result =\n  | Ok of 'a\n  | Error of 'b\n```\n\nA value `Ok x` means that the computation succeeded with `x`, and\na value `Error e` means that it failed.\nPattern matching can be used to deal with both cases, as with any\nother sum type. The advantage here is that a function `a -> b` that\nfails can be modified so its type is `a -> (b, error) result`,\nwhich makes the failure explicit.\nThe error case `e` in `Error e` can be of any type\n(the `'b` type variable), but a few possible choices\nare:\n\n- `exn`, in which case the result type just makes exceptions explicit.\n- `string`, where the error case is a message that indicates what failed.\n- `string lazy_t`, a more elaborate form of error message that is only evaluated\n  if printing is required.\n- some polymorphic variant, with one case per\n  possible error. This is very accurate (each error can be dealt with\n  explicitly and occurs in the type) but the use of polymorphic variants\n  sometimes make error messages hard to read.\n\nFor easy combination of functions that can fail, many alternative standard\nlibraries provide useful combinators on the `result` type: `map`, `>>=`, etc.\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#exceptions\">Exceptions</a>\n</li>\n<li><a href=\"#result-type\">Result type</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"exceptions\">Exceptions</h2>\n<p>One way of handling errors in OCaml is exceptions. The\nstandard library relies heavily upon them.</p>\n<p>Exceptions belong to the type <code>exn</code> (an extensible sum type):</p>\n<pre><code class=\"language-ocaml\">exception Foo of string\n\nlet i_will_fail () =\n  raise (Foo &quot;Oh no!&quot;)\n</code></pre>\n<p>Here, we add a variant <code>Foo</code> to the type <code>exn</code>, and create a function\nthat will raise this exception. Now, how do we handle exceptions?\nThe construct is <code>try ... with ...</code>:</p>\n<pre><code class=\"language-ocaml\">let safe_inverse n =\n  try Some (1 / n) with\n    Division_by_zero -&gt; None\n\nlet safe_list_find p l =\n  try Some (List.find p l) with\n    Not_found -&gt; None\n</code></pre>\n<p>We can try those functions:</p>\n<pre><code class=\"language-ocaml\"># 1 / 0;;\nException: Division_by_zero.\n# safe_inverse 2;;\n- : int option = Some 0\n# safe_inverse 0;;\n- : int option = None\n# List.find (fun x -&gt; x mod 2 = 0) [1; 3; 5]\nException: Not_found.\n# safe_list_find (fun x -&gt; x mod 2 = 0) [1; 3; 4; 5]\n- : int option = Some 4\n# safe_list_find (fun x -&gt; x mod 2 = 0) [1; 3; 5]\n- : int option = None\n</code></pre>\n<p>The biggest issue with exceptions is that they do not appear in types.\nOne has to read the documentation to see that, indeed, <code>Map.S.find</code>\nor <code>List.hd</code> are not total functions, and that they might fail.</p>\n<p>It is considered good practice nowadays, when a function can fail in\ncases that are not bugs (i.e., not <code>assert false</code>, but network failures,\nkeys not present, etc.)\nto return a more explicit type such as <code>'a option</code> or <code>('a, 'b) result</code>.\nA relatively common idiom is to have such a safe version of the function,\nsay, <code>val foo : a -&gt; b option</code>, and an exception raising\nversion <code>val foo_exn : a -&gt; b</code>.</p>\n<h3 id=\"documentation\">Documentation</h3>\n<p>Functions that can raise exceptions should be documented like this:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">val foo : a -&gt; b\n(** foo does this and that, here is how it works, etc.\n    @raise Invalid_argument if [a] doesn't satisfy ...\n    @raise Sys_error if filesystem is not happy *)\n</code></pre>\n<h3 id=\"stacktraces\">Stacktraces</h3>\n<p>To get a stacktrace when a unhandled exception makes your program crash, you\nneed to compile the program in &quot;debug&quot; mode (with <code>-g</code> when calling\n<code>ocamlc</code>, or <code>-tag 'debug'</code> when calling <code>ocamlbuild</code>).\nThen:</p>\n<pre><code>OCAMLRUNPARAM=b ./myprogram [args]\n</code></pre>\n<p>And you will get a stacktrace. Alternatively, you can call, from within the program,</p>\n<pre><code class=\"language-ocaml\">let () = Printexc.record_backtrace true\n</code></pre>\n<h3 id=\"printing\">Printing</h3>\n<p>To print an exception, the module <code>Printexc</code> comes in handy. For instance,\nthe following function <code>notify_user : (unit -&gt; 'a) -&gt; 'a</code> can be used\nto call a function and, if it fails, print the exception on <code>stderr</code>.\nIf stacktraces are enabled, this function will also display it.</p>\n<pre><code class=\"language-ocaml\">let notify_user f =\n  try f () with e -&gt;\n    let msg = Printexc.to_string e\n    and stack = Printexc.get_backtrace () in\n      Printf.eprintf &quot;there was an error: %s%s\\n&quot; msg stack;\n      raise e\n</code></pre>\n<p>OCaml knows how to print its built-in exception, but you can also tell it\nhow to print your own exceptions:</p>\n<pre><code class=\"language-ocaml\">exception Foo of int\n\nlet () =\n  Printexc.register_printer\n    (function\n      | Foo i -&gt; Some (Printf.sprintf &quot;Foo(%d)&quot; i)\n      | _ -&gt; None (* for other exceptions *)\n    )\n</code></pre>\n<p>Each printer should take care of the exceptions it knows about, returning\n<code>Some &lt;printed exception&gt;</code>, and return <code>None</code> otherwise (let the other printers\ndo the job!).</p>\n<h2 id=\"result-type\">Result type</h2>\n<p>The Stdlib module contains the following type:</p>\n<pre><code class=\"language-ocaml\">type ('a, 'b) result =\n  | Ok of 'a\n  | Error of 'b\n</code></pre>\n<p>A value <code>Ok x</code> means that the computation succeeded with <code>x</code>, and\na value <code>Error e</code> means that it failed.\nPattern matching can be used to deal with both cases, as with any\nother sum type. The advantage here is that a function <code>a -&gt; b</code> that\nfails can be modified so its type is <code>a -&gt; (b, error) result</code>,\nwhich makes the failure explicit.\nThe error case <code>e</code> in <code>Error e</code> can be of any type\n(the <code>'b</code> type variable), but a few possible choices\nare:</p>\n<ul>\n<li><code>exn</code>, in which case the result type just makes exceptions explicit.\n</li>\n<li><code>string</code>, where the error case is a message that indicates what failed.\n</li>\n<li><code>string lazy_t</code>, a more elaborate form of error message that is only evaluated\nif printing is required.\n</li>\n<li>some polymorphic variant, with one case per\npossible error. This is very accurate (each error can be dealt with\nexplicitly and occurs in the type) but the use of polymorphic variants\nsometimes make error messages hard to read.\n</li>\n</ul>\n<p>For easy combination of functions that can fail, many alternative standard\nlibraries provide useful combinators on the <code>result</code> type: <code>map</code>, <code>&gt;&gt;=</code>, etc.</p>\n"},{"title":"Common Error Messages","slug":"common-error-messages","description":"Understand the most common error messages the OCaml compiler can throw at you\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"errors","tl":{"hd":"debugging","tl":0}},"users":{"hd":"Beginner","tl":0},"body_md":"\nThis page gives a list of quick explanations for some error or warning\nmessages that are emitted by the OCaml compilers. Longer explanations\nare usually given in dedicated sections of this tutorial.\n\n## Type errors\n###  This expression has type ... but is here used with type ...\nWhen the type of an object is not compatible with the context in which\nit is used, it is frequent to obtain this kind of message:\n\n```ocaml\n# 1 + 2.5\nLine 1, characters 5-8:\nError: This expression has type float but an expression was expected of type\n         int\n```\n\"This expression has type *X* but is here used with type *Y*\" means that\nif the contents of the expression is isolated (2.5), its type is\ninferred as *X* (float). But the context, i.e. everything which is\naround (1 + ...) tells that the gap expects an expression of type *Y*\n(int) which is not compatible with *X*.\n\nMore disturbing is the following message:\n\n```text\nThis expression has type my_type but is here used with type my_type\n```\nThis error happens often while testing some type definitions using the\ninteractive toplevel.  In OCaml, it is perfectly legal\nto define a type with a name\nthat is already taken by another type. Consider the following session:\n\n```ocaml\n# type my_type = A | B\ntype my_type = A | B\n# let a = A\nval a : my_type = A\n# type my_type = A | B\ntype my_type = A | B\n# let b = B\nval b : my_type = B\n# a = b\nLine 1, characters 5-6:\nError: This expression has type my_type/1\n       but an expression was expected of type my_type/2\n       Hint: The type my_type has been defined multiple times in this\n         toplevel session. Some toplevel values still refer to old versions\n         of this type. Did you try to redefine them?\n```\nFor the compiler, the second definition of my_type is totally\nindependent from the first definition. So we have defined two types\nwhich have the same name. Since \"a\" was defined earlier, it belongs to\nthe first type while \"b\" belongs to the second type. In this example,\nredefining \"a\" after the last definition of my_type solves the problem.\nThis kind of problem should not happen in real programs unless you use\nthe same name for the same type in the same module, which is highly\ndiscouraged.\n\n###  Warning: This optional argument cannot be erased\nFunctions with optional arguments must have at least one non-labelled\nargument. For instance, this is not OK:\n\n```ocaml\n# let f ?(x = 0) ?(y = 0) = print_int (x + y)\nLine 1, characters 18-23:\nWarning 16: this optional argument cannot be erased.\nval f : ?x:int -> ?y:int -> unit = <fun>\n```\nThe solution is simply to add one argument of type unit, like this:\n\n```ocaml\n# let f ?(x = 0) ?(y = 0) () = print_int (x + y)\nval f : ?x:int -> ?y:int -> unit -> unit = <fun>\n```\nSee the [Labels](labels.html \"Labels\") section for more details on\nfunctions with labelled arguments.\n\n###  The type of this expression... contains type variables that cannot be generalized\nThis happens in some cases when the full type of an object is not known\nby the compiler when it reaches the end of the compilation unit (file)\nbut for some reason it cannot remain polymorphic. Example:\n\n```ocaml env=ref\n# let x = ref None\nval x : '_weak1 option ref = {contents = None}\n```\ntriggers the following message during the compilation:\n\n```text\nThe type of this expression, '_a option ref,\ncontains type variables that cannot be generalized\n```\n\nSolution: help the compiler with a type annotation, like for instance:\n\n```ocaml env=ref\n# let x : string option ref = ref None\nval x : string option ref = {contents = None}\n```\nor:\n\n```ocaml env=ref\n# let x = ref (None : string option)\nval x : string option ref = {contents = None}\n```\n\nData of type `'_weak<n>` may be allowed temporarily, for instance during a\ntoplevel session. It means that the given object has an unknown type,\nbut it cannot be any type: it is not polymorphic data. In the toplevel,\nour example gives these results:\n\n```ocaml env=ref\n# let x = ref None\nval x : '_weak2 option ref = {contents = None}\n```\n\nThe compiler tells us that the type of x is not fully known yet. But by\nusing `x` later, the compiler can infer the type of `x`:\n\n```ocaml env=ref\n# x := Some 0\n- : unit = ()\n```\nNow `x` has a known type:\n\n```ocaml env=ref\n# x\n- : int option ref = {contents = Some 0}\n```\n\n## Pattern matching warnings and errors\n###  This pattern is unused\nThis warning should be considered as an error, since there is no reason\nto intentionally keep such code. It may happen when the programmer\nintroduced a catch-all pattern unintentionally such as in the following\nsituation:\n\n```ocaml\n# let test_member x tup =\n  match tup with\n  | (y, _) | (_, y) when y = x -> true\n  | _ -> false\nLine 3, characters 14-20:\nWarning 12: this sub-pattern is unused.\nLine 3, characters 5-20:\nWarning 57: Ambiguous or-pattern variables under guard;\nvariable y may match different arguments. (See manual section 9.5)\nval test_member : 'a -> 'a * 'a -> bool = <fun>\n```\nObviously, the programmer had a misconception of what OCaml's pattern\nmatching is about. Remember the following:\n\n* the tree of cases is traversed linearly, from left to right. There\n is *no backtracking* as in regexp matching.\n* a guard (\"when\" clause) is not part of a pattern. It is simply a\n condition which is evaluated at most once and is used as a last\n resort to jump to the next match case.\n* lowercase identifiers (bindings such as \"y\" above) are just names,\n so they will always match.\n\nIn our example, it is now clear that only the first item of the pair\nwill ever be tested. This leads to the following results:\n\n```ocaml\n# test_member 1 (1, 0)\n- : bool = true\n# test_member 1 (0, 1)\n- : bool = false\n```\n###  This pattern-matching is not exhaustive\nOCaml's pattern matching can check whether a set of patterns is\nexhaustive or not, based on the *type* only. So in the following\nexample, the compiler doesn't know what range of ints the \"mod\" operator\nwould return:\n\n```ocamltop\nlet is_even x =\n  match x mod 2 with\n  | 0 -> true\n  | 1 | -1 -> false\n```\nA short solution without pattern matching would be:\n\n```ocaml\n# let is_even x = x mod 2 = 0\nval is_even : int -> bool = <fun>\n```\nIn general, that kind of simplification is not possible and the best\nsolution is to add a catch-all case which should never be reached:\n\n```ocaml\n# let is_even x =\n  match x mod 2 with\n  | 0 -> true\n  | 1 | -1 -> false\n  | _ -> assert false\nval is_even : int -> bool = <fun>\n```\n\n## Problems recompiling valid programs\n###  x.cmi is not a compiled interface\nWhen recompiling some old program or compiling a program from an\nexternal source that was not cleaned properly, it is possible to get\nthis error message:\n\n```text\nsome_module.cmi is not a compiled interface\n```\n\nIt means that some_module.cmi is not valid according to the *current\nversion* of the OCaml compiler. Most of the time, removing the old\ncompiled files (*.cmi, *.cmo, *.cmx, ...) and recompiling is\nsufficient to solve this problem.\n\t\n###  Warning: Illegal backslash escape in string\nRecent versions of OCaml warn you against unprotected backslashes in\nstrings since they should be doubled. Such a message may be displayed\nwhen compiling an older program, and can be turned off with the `-w x`\noption.\n\n```ocaml\n# \"\\e\\n\" (* bad practice *)\nFile \"_none_\", line 1, characters 1-3:\nWarning 14: illegal backslash escape in string.\n- : string = \"\\\\e\\n\"\n# \"\\\\e\\n\" (* good practice *)\n- : string = \"\\\\e\\n\"\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#type-errors\">Type errors</a>\n</li>\n<li><a href=\"#pattern-matching-warnings-and-errors\">Pattern matching warnings and errors</a>\n</li>\n<li><a href=\"#problems-recompiling-valid-programs\">Problems recompiling valid programs</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This page gives a list of quick explanations for some error or warning\nmessages that are emitted by the OCaml compilers. Longer explanations\nare usually given in dedicated sections of this tutorial.</p>\n<h2 id=\"type-errors\">Type errors</h2>\n<h3 id=\"this-expression-has-type--but-is-here-used-with-type-\">This expression has type ... but is here used with type ...</h3>\n<p>When the type of an object is not compatible with the context in which\nit is used, it is frequent to obtain this kind of message:</p>\n<pre><code class=\"language-ocaml\"># 1 + 2.5\nLine 1, characters 5-8:\nError: This expression has type float but an expression was expected of type\n         int\n</code></pre>\n<p>&quot;This expression has type <em>X</em> but is here used with type <em>Y</em>&quot; means that\nif the contents of the expression is isolated (2.5), its type is\ninferred as <em>X</em> (float). But the context, i.e. everything which is\naround (1 + ...) tells that the gap expects an expression of type <em>Y</em>\n(int) which is not compatible with <em>X</em>.</p>\n<p>More disturbing is the following message:</p>\n<pre><code class=\"language-text\">This expression has type my_type but is here used with type my_type\n</code></pre>\n<p>This error happens often while testing some type definitions using the\ninteractive toplevel.  In OCaml, it is perfectly legal\nto define a type with a name\nthat is already taken by another type. Consider the following session:</p>\n<pre><code class=\"language-ocaml\"># type my_type = A | B\ntype my_type = A | B\n# let a = A\nval a : my_type = A\n# type my_type = A | B\ntype my_type = A | B\n# let b = B\nval b : my_type = B\n# a = b\nLine 1, characters 5-6:\nError: This expression has type my_type/1\n       but an expression was expected of type my_type/2\n       Hint: The type my_type has been defined multiple times in this\n         toplevel session. Some toplevel values still refer to old versions\n         of this type. Did you try to redefine them?\n</code></pre>\n<p>For the compiler, the second definition of my_type is totally\nindependent from the first definition. So we have defined two types\nwhich have the same name. Since &quot;a&quot; was defined earlier, it belongs to\nthe first type while &quot;b&quot; belongs to the second type. In this example,\nredefining &quot;a&quot; after the last definition of my_type solves the problem.\nThis kind of problem should not happen in real programs unless you use\nthe same name for the same type in the same module, which is highly\ndiscouraged.</p>\n<h3 id=\"warning-this-optional-argument-cannot-be-erased\">Warning: This optional argument cannot be erased</h3>\n<p>Functions with optional arguments must have at least one non-labelled\nargument. For instance, this is not OK:</p>\n<pre><code class=\"language-ocaml\"># let f ?(x = 0) ?(y = 0) = print_int (x + y)\nLine 1, characters 18-23:\nWarning 16: this optional argument cannot be erased.\nval f : ?x:int -&gt; ?y:int -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>The solution is simply to add one argument of type unit, like this:</p>\n<pre><code class=\"language-ocaml\"># let f ?(x = 0) ?(y = 0) () = print_int (x + y)\nval f : ?x:int -&gt; ?y:int -&gt; unit -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>See the <a href=\"labels.html\" title=\"Labels\">Labels</a> section for more details on\nfunctions with labelled arguments.</p>\n<h3 id=\"the-type-of-this-expression-contains-type-variables-that-cannot-be-generalized\">The type of this expression... contains type variables that cannot be generalized</h3>\n<p>This happens in some cases when the full type of an object is not known\nby the compiler when it reaches the end of the compilation unit (file)\nbut for some reason it cannot remain polymorphic. Example:</p>\n<pre><code class=\"language-ocaml\"># let x = ref None\nval x : '_weak1 option ref = {contents = None}\n</code></pre>\n<p>triggers the following message during the compilation:</p>\n<pre><code class=\"language-text\">The type of this expression, '_a option ref,\ncontains type variables that cannot be generalized\n</code></pre>\n<p>Solution: help the compiler with a type annotation, like for instance:</p>\n<pre><code class=\"language-ocaml\"># let x : string option ref = ref None\nval x : string option ref = {contents = None}\n</code></pre>\n<p>or:</p>\n<pre><code class=\"language-ocaml\"># let x = ref (None : string option)\nval x : string option ref = {contents = None}\n</code></pre>\n<p>Data of type <code>'_weak&lt;n&gt;</code> may be allowed temporarily, for instance during a\ntoplevel session. It means that the given object has an unknown type,\nbut it cannot be any type: it is not polymorphic data. In the toplevel,\nour example gives these results:</p>\n<pre><code class=\"language-ocaml\"># let x = ref None\nval x : '_weak2 option ref = {contents = None}\n</code></pre>\n<p>The compiler tells us that the type of x is not fully known yet. But by\nusing <code>x</code> later, the compiler can infer the type of <code>x</code>:</p>\n<pre><code class=\"language-ocaml\"># x := Some 0\n- : unit = ()\n</code></pre>\n<p>Now <code>x</code> has a known type:</p>\n<pre><code class=\"language-ocaml\"># x\n- : int option ref = {contents = Some 0}\n</code></pre>\n<h2 id=\"pattern-matching-warnings-and-errors\">Pattern matching warnings and errors</h2>\n<h3 id=\"this-pattern-is-unused\">This pattern is unused</h3>\n<p>This warning should be considered as an error, since there is no reason\nto intentionally keep such code. It may happen when the programmer\nintroduced a catch-all pattern unintentionally such as in the following\nsituation:</p>\n<pre><code class=\"language-ocaml\"># let test_member x tup =\n  match tup with\n  | (y, _) | (_, y) when y = x -&gt; true\n  | _ -&gt; false\nLine 3, characters 14-20:\nWarning 12: this sub-pattern is unused.\nLine 3, characters 5-20:\nWarning 57: Ambiguous or-pattern variables under guard;\nvariable y may match different arguments. (See manual section 9.5)\nval test_member : 'a -&gt; 'a * 'a -&gt; bool = &lt;fun&gt;\n</code></pre>\n<p>Obviously, the programmer had a misconception of what OCaml's pattern\nmatching is about. Remember the following:</p>\n<ul>\n<li>the tree of cases is traversed linearly, from left to right. There\nis <em>no backtracking</em> as in regexp matching.\n</li>\n<li>a guard (&quot;when&quot; clause) is not part of a pattern. It is simply a\ncondition which is evaluated at most once and is used as a last\nresort to jump to the next match case.\n</li>\n<li>lowercase identifiers (bindings such as &quot;y&quot; above) are just names,\nso they will always match.\n</li>\n</ul>\n<p>In our example, it is now clear that only the first item of the pair\nwill ever be tested. This leads to the following results:</p>\n<pre><code class=\"language-ocaml\"># test_member 1 (1, 0)\n- : bool = true\n# test_member 1 (0, 1)\n- : bool = false\n</code></pre>\n<h3 id=\"this-pattern-matching-is-not-exhaustive\">This pattern-matching is not exhaustive</h3>\n<p>OCaml's pattern matching can check whether a set of patterns is\nexhaustive or not, based on the <em>type</em> only. So in the following\nexample, the compiler doesn't know what range of ints the &quot;mod&quot; operator\nwould return:</p>\n<pre><code class=\"language-ocamltop\">let is_even x =\n  match x mod 2 with\n  | 0 -&gt; true\n  | 1 | -1 -&gt; false\n</code></pre>\n<p>A short solution without pattern matching would be:</p>\n<pre><code class=\"language-ocaml\"># let is_even x = x mod 2 = 0\nval is_even : int -&gt; bool = &lt;fun&gt;\n</code></pre>\n<p>In general, that kind of simplification is not possible and the best\nsolution is to add a catch-all case which should never be reached:</p>\n<pre><code class=\"language-ocaml\"># let is_even x =\n  match x mod 2 with\n  | 0 -&gt; true\n  | 1 | -1 -&gt; false\n  | _ -&gt; assert false\nval is_even : int -&gt; bool = &lt;fun&gt;\n</code></pre>\n<h2 id=\"problems-recompiling-valid-programs\">Problems recompiling valid programs</h2>\n<h3 id=\"xcmi-is-not-a-compiled-interface\">x.cmi is not a compiled interface</h3>\n<p>When recompiling some old program or compiling a program from an\nexternal source that was not cleaned properly, it is possible to get\nthis error message:</p>\n<pre><code class=\"language-text\">some_module.cmi is not a compiled interface\n</code></pre>\n<p>It means that some_module.cmi is not valid according to the <em>current\nversion</em> of the OCaml compiler. Most of the time, removing the old\ncompiled files (*.cmi, *.cmo, *.cmx, ...) and recompiling is\nsufficient to solve this problem.</p>\n<h3 id=\"warning-illegal-backslash-escape-in-string\">Warning: Illegal backslash escape in string</h3>\n<p>Recent versions of OCaml warn you against unprotected backslashes in\nstrings since they should be doubled. Such a message may be displayed\nwhen compiling an older program, and can be turned off with the <code>-w x</code>\noption.</p>\n<pre><code class=\"language-ocaml\"># &quot;\\e\\n&quot; (* bad practice *)\nFile &quot;_none_&quot;, line 1, characters 1-3:\nWarning 14: illegal backslash escape in string.\n- : string = &quot;\\\\e\\n&quot;\n# &quot;\\\\e\\n&quot; (* good practice *)\n- : string = &quot;\\\\e\\n&quot;\n</code></pre>\n"},{"title":"Debug","slug":"debug","description":"Learn to build custom types and write function to process this data\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"debugging","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\nThis tutorial presents two techniques for debugging OCaml programs:\n\n* [Tracing functions calls](#Tracingfunctionscallsinthetoplevel),\n  which works in the interactive toplevel.\n* The [OCaml debugger](#The-OCaml-debugger), which allows analysing programs\n  compiled with `ocamlc`.\n\n## Tracing functions calls in the toplevel\n\nThe simplest way to debug programs in the toplevel is to follow the function\ncalls, by “tracing” the faulty function:\n\n```ocaml\n# let rec fib x = if x <= 1 then 1 else fib (x - 1) + fib (x - 2)\nval fib : int -> int = <fun>\n# #trace fib\nfib is now traced.\n# fib 3\nfib <-- 3\nfib <-- 1\nfib --> 1\nfib <-- 2\nfib <-- 0\nfib --> 1\nfib <-- 1\nfib --> 1\nfib --> 2\nfib --> 3\n- : int = 3\n# #untrace fib\nfib is no longer traced.\n```\n\n###  Polymorphic functions\n\nA difficulty with polymorphic functions is that the output of the trace system\nis not very informative in case of polymorphic arguments and/or results.\nConsider a sorting algorithm (say bubble sort):\n\n```ocaml\n# let exchange i j v =\n  let aux = v.(i) in\n    v.(i) <- v.(j);\n    v.(j) <- aux\nval exchange : int -> int -> 'a array -> unit = <fun>\n# let one_pass_vect fin v =\n  for j = 1 to fin do\n    if v.(j - 1) > v.(j) then exchange (j - 1) j v\n  done\nval one_pass_vect : int -> 'a array -> unit = <fun>\n# let bubble_sort_vect v =\n  for i = Array.length v - 1 downto 0 do\n    one_pass_vect i v\n  done\nval bubble_sort_vect : 'a array -> unit = <fun>\n# let q = [|18; 3; 1|]\nval q : int array = [|18; 3; 1|]\n# #trace one_pass_vect\none_pass_vect is now traced.\n# bubble_sort_vect q\none_pass_vect <-- 2\none_pass_vect --> <fun>\none_pass_vect* <-- [|<poly>; <poly>; <poly>|]\none_pass_vect* --> ()\none_pass_vect <-- 1\none_pass_vect --> <fun>\none_pass_vect* <-- [|<poly>; <poly>; <poly>|]\none_pass_vect* --> ()\none_pass_vect <-- 0\none_pass_vect --> <fun>\none_pass_vect* <-- [|<poly>; <poly>; <poly>|]\none_pass_vect* --> ()\n- : unit = ()\n```\n\nThe function `one_pass_vect` being polymorphic, its vector argument is printed\nas a vector containing polymorphic values, `[|<poly>; <poly>; <poly>|]`, and\nthus we cannot properly follow the computation.\n\nA simple way to overcome this problem is to define a monomorphic version of the\nfaulty function. This is fairly easy using a *type constraint*.  Generally\nspeaking, this allows a proper understanding of the error in the definition of\nthe polymorphic function. Once this has been corrected, you just have to\nsuppress the type constraint to revert to a polymorphic version of the\nfunction.\n\nFor our sorting routine, a single type constraint on the argument of the\n`exchange` function warranties a monomorphic typing, that allows a proper trace\nof function calls:\n\n```ocaml\n# let exchange i j (v : int array) =    (* notice the type constraint *)\n  let aux = v.(i) in\n    v.(i) <- v.(j);\n    v.(j) <- aux\nval exchange : int -> int -> int array -> unit = <fun>\n# let one_pass_vect fin v =\n  for j = 1 to fin do\n    if v.(j - 1) > v.(j) then exchange (j - 1) j v\n  done\nval one_pass_vect : int -> int array -> unit = <fun>\n# let bubble_sort_vect v =\n  for i = Array.length v - 1 downto 0 do\n    one_pass_vect i v\n  done\nval bubble_sort_vect : int array -> unit = <fun>\n# let q = [| 18; 3; 1 |]\nval q : int array = [|18; 3; 1|]\n# #trace one_pass_vect\none_pass_vect is now traced.\n# bubble_sort_vect q\none_pass_vect <-- 2\none_pass_vect --> <fun>\none_pass_vect* <-- [|18; 3; 1|]\none_pass_vect* --> ()\none_pass_vect <-- 1\none_pass_vect --> <fun>\none_pass_vect* <-- [|3; 1; 18|]\none_pass_vect* --> ()\none_pass_vect <-- 0\none_pass_vect --> <fun>\none_pass_vect* <-- [|1; 3; 18|]\none_pass_vect* --> ()\n- : unit = ()\n```\n\n###  Limitations\n\nTo keep track of assignments to data structures and mutable variables in a\nprogram, the trace facility is not powerful enough. You need an extra mechanism\nto stop the program in any place and ask for internal values: that is a\nsymbolic debugger with its stepping feature.\n\nStepping a functional program has a meaning which is a bit weird to define and\nunderstand. Let me say that we use the notion of *runtime events* that happen\nfor instance when a parameter is passed to a function or when entering a\npattern matching, or selecting a clause in a pttern matching. Computation\nprogress is taken into account by these events, independently of the\ninstructions executed on the hardware.\n\nAlthough this is difficult to implement, there exists such a debugger for OCaml\nunder Unix: `ocamldebug`. Its use is illustrated in the next section.\n\nIn fact, for complex programs, it is likely the case that the programmer will\nuse explicit printing to find the bugs, since this methodology allows the\nreduction of the trace material: only useful data are printed and special\npurpose formats are more suited to get the relevant information, than what can\nbe output automatically by the generic pretty-printer used by the trace\nmechanism.\n\n## The OCaml debugger\n\nWe now give a quick tutorial for the OCaml debugger (`ocamldebug`).  Before\nstarting, please note that `ocamldebug` does not work under native Windows\nports of OCaml (but it runs under the Cygwin port).\n\n###  Launching the debugger\n\nConsider the following obviously wrong program written in the file\n`uncaught.ml`:\n\n```ocaml\n(* file uncaught.ml *)\nlet l = ref []\nlet find_address name = List.assoc name !l\nlet add_address name address = l := (name, address) :: ! l\n\nlet () =\n  add_address \"IRIA\" \"Rocquencourt\";;\n  print_string (find_address \"INRIA\"); print_newline ();;\n```\n```mdx-error\nval l : (string * string) list ref = {contents = [(\"IRIA\", \"Rocquencourt\")]}\nval find_address : string -> string = <fun>\nval add_address : string -> string -> unit = <fun>\nException: Not_found.\n```\n\nAt runtime, the program raises an uncaught exception `Not_found`.  Suppose we\nwant to find where and why this exception has been raised, we can proceed as\nfollows. First, we compile the program in debug mode:\n\n```\nocamlc -g uncaught.ml\n```\n\nWe launch the debugger:\n\n```\nocamldebug a.out\n```\n\nThen the debugger answers with a banner and a prompt:\n\n```\nOCaml Debugger version 4.12.0\n\n(ocd)\n```\n\n###  Finding the cause of a spurious exception\n\nType `r` (for *run*); you get\n\n```\n(ocd) r\nLoading program... done.\nTime : 12\nProgram end.\nUncaught exception: Not_found\n(ocd)\n```\n\nSelf explanatory, isn't it? So, you want to step backward to set the program\ncounter before the time the exception is raised; hence type in `b` as\n*backstep*, and you get\n\n```\n(ocd) b\nTime : 11 - pc : 15500 - module List\n143     [] -> <|b|>raise Not_found\n```\n\nThe debugger tells you that you are in module `List`, inside a pattern matching\non a list that already chose the `[]` case and is about to execute `raise\nNot_found`, since the program is stopped just before this expression (as\nwitnessed by the `<|b|>` mark).\n\nBut, as you know, you want the debugger to tell you which procedure calls the\none from `List`, and also who calls the procedure that calls the one from\n`List`; hence, you want a backtrace of the execution stack:\n\n```\n(ocd) bt\n#0  Pc : 15500  List char 3562\n#1  Pc : 19128  Uncaught char 221\n```\n\nSo the last function called is from module `List` at character 3562, that is:\n\n<!-- $MDX skip -->\n```ocaml\nlet rec assoc x = function\n  | [] -> raise Not_found\n          ^\n  | (a,b)::l -> if a = x then b else assoc x l\n```\n\nThe function that calls it is in module `Uncaught`, file `uncaught.ml` char\n221:\n\n\n<!-- $MDX skip -->\n```ocaml\nprint_string (find_address \"INRIA\"); print_newline ();;\n                                  ^\n```\n\nTo sum up: if you're developing a program you can compile it with the `-g`\noption, to be ready to debug the program if necessary. Hence, to find a\nspurious exception you just need to type `ocamldebug a.out`, then `r`, `b`, and\n`bt` gives you the backtrace.\n\n###  Getting help and info in the debugger\n\nTo get more info about the current status of the debugger you can ask it\ndirectly at the toplevel prompt of the debugger; for instance:\n\n```\n(ocd) info breakpoints\nNo breakpoint.\n\n(ocd) help break\n  1      15396  in List, character 3539\nbreak : Set breakpoint at specified line or function.\nSyntax: break function-name\nbreak @ [module] linenum\nbreak @ [module] # characternum\n```\n\n###  Setting break points\n\nLet's set up a breakpoint and rerun the entire program from the\nbeginning (`(g)oto 0` then `(r)un`):\n\n```\n(ocd) break @Uncaught 9\nBreakpoint 3 at 19112 : file Uncaught, line 9 column 34\n\n(ocd) g 0\nTime : 0\nBeginning of program.\n\n(ocd) r\nTime : 6 - pc : 19112 - module Uncaught\nBreakpoint : 1\n9 add \"IRIA\" \"Rocquencourt\"<|a|>;;\n```\n\nThen, we can step and find what happens when `find_address` is about to be\ncalled\n\n```\n(ocd) s\nTime : 7 - pc : 19012 - module Uncaught\n5 let find_address name = <|b|>List.assoc name !l;;\n\n(ocd) p name\nname : string = \"INRIA\"\n\n(ocd) p !l\n$1 : (string * string) list = [\"IRIA\", \"Rocquencourt\"]\n(ocd)\n```\n\nNow we can guess why `List.assoc` will fail to find \"INRIA\" in the list...\n\n###  Using the debugger under Emacs\n\nUnder Emacs you call the debugger using `ESC-x` `ocamldebug a.out`. Then Emacs\nwill send you directly to the file and character reported by the debugger, and\nyou can step back and forth using `ESC-b` and `ESC-s`, you can set up break\npoints using `CTRL-X space`, and so on...\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#tracing-functions-calls-in-the-toplevel\">Tracing functions calls in the toplevel</a>\n</li>\n<li><a href=\"#the-ocaml-debugger\">The OCaml debugger</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This tutorial presents two techniques for debugging OCaml programs:</p>\n<ul>\n<li><a href=\"#Tracingfunctionscallsinthetoplevel\">Tracing functions calls</a>,\nwhich works in the interactive toplevel.\n</li>\n<li>The <a href=\"#The-OCaml-debugger\">OCaml debugger</a>, which allows analysing programs\ncompiled with <code>ocamlc</code>.\n</li>\n</ul>\n<h2 id=\"tracing-functions-calls-in-the-toplevel\">Tracing functions calls in the toplevel</h2>\n<p>The simplest way to debug programs in the toplevel is to follow the function\ncalls, by “tracing” the faulty function:</p>\n<pre><code class=\"language-ocaml\"># let rec fib x = if x &lt;= 1 then 1 else fib (x - 1) + fib (x - 2)\nval fib : int -&gt; int = &lt;fun&gt;\n# #trace fib\nfib is now traced.\n# fib 3\nfib &lt;-- 3\nfib &lt;-- 1\nfib --&gt; 1\nfib &lt;-- 2\nfib &lt;-- 0\nfib --&gt; 1\nfib &lt;-- 1\nfib --&gt; 1\nfib --&gt; 2\nfib --&gt; 3\n- : int = 3\n# #untrace fib\nfib is no longer traced.\n</code></pre>\n<h3 id=\"polymorphic-functions\">Polymorphic functions</h3>\n<p>A difficulty with polymorphic functions is that the output of the trace system\nis not very informative in case of polymorphic arguments and/or results.\nConsider a sorting algorithm (say bubble sort):</p>\n<pre><code class=\"language-ocaml\"># let exchange i j v =\n  let aux = v.(i) in\n    v.(i) &lt;- v.(j);\n    v.(j) &lt;- aux\nval exchange : int -&gt; int -&gt; 'a array -&gt; unit = &lt;fun&gt;\n# let one_pass_vect fin v =\n  for j = 1 to fin do\n    if v.(j - 1) &gt; v.(j) then exchange (j - 1) j v\n  done\nval one_pass_vect : int -&gt; 'a array -&gt; unit = &lt;fun&gt;\n# let bubble_sort_vect v =\n  for i = Array.length v - 1 downto 0 do\n    one_pass_vect i v\n  done\nval bubble_sort_vect : 'a array -&gt; unit = &lt;fun&gt;\n# let q = [|18; 3; 1|]\nval q : int array = [|18; 3; 1|]\n# #trace one_pass_vect\none_pass_vect is now traced.\n# bubble_sort_vect q\none_pass_vect &lt;-- 2\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|&lt;poly&gt;; &lt;poly&gt;; &lt;poly&gt;|]\none_pass_vect* --&gt; ()\none_pass_vect &lt;-- 1\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|&lt;poly&gt;; &lt;poly&gt;; &lt;poly&gt;|]\none_pass_vect* --&gt; ()\none_pass_vect &lt;-- 0\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|&lt;poly&gt;; &lt;poly&gt;; &lt;poly&gt;|]\none_pass_vect* --&gt; ()\n- : unit = ()\n</code></pre>\n<p>The function <code>one_pass_vect</code> being polymorphic, its vector argument is printed\nas a vector containing polymorphic values, <code>[|&lt;poly&gt;; &lt;poly&gt;; &lt;poly&gt;|]</code>, and\nthus we cannot properly follow the computation.</p>\n<p>A simple way to overcome this problem is to define a monomorphic version of the\nfaulty function. This is fairly easy using a <em>type constraint</em>.  Generally\nspeaking, this allows a proper understanding of the error in the definition of\nthe polymorphic function. Once this has been corrected, you just have to\nsuppress the type constraint to revert to a polymorphic version of the\nfunction.</p>\n<p>For our sorting routine, a single type constraint on the argument of the\n<code>exchange</code> function warranties a monomorphic typing, that allows a proper trace\nof function calls:</p>\n<pre><code class=\"language-ocaml\"># let exchange i j (v : int array) =    (* notice the type constraint *)\n  let aux = v.(i) in\n    v.(i) &lt;- v.(j);\n    v.(j) &lt;- aux\nval exchange : int -&gt; int -&gt; int array -&gt; unit = &lt;fun&gt;\n# let one_pass_vect fin v =\n  for j = 1 to fin do\n    if v.(j - 1) &gt; v.(j) then exchange (j - 1) j v\n  done\nval one_pass_vect : int -&gt; int array -&gt; unit = &lt;fun&gt;\n# let bubble_sort_vect v =\n  for i = Array.length v - 1 downto 0 do\n    one_pass_vect i v\n  done\nval bubble_sort_vect : int array -&gt; unit = &lt;fun&gt;\n# let q = [| 18; 3; 1 |]\nval q : int array = [|18; 3; 1|]\n# #trace one_pass_vect\none_pass_vect is now traced.\n# bubble_sort_vect q\none_pass_vect &lt;-- 2\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|18; 3; 1|]\none_pass_vect* --&gt; ()\none_pass_vect &lt;-- 1\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|3; 1; 18|]\none_pass_vect* --&gt; ()\none_pass_vect &lt;-- 0\none_pass_vect --&gt; &lt;fun&gt;\none_pass_vect* &lt;-- [|1; 3; 18|]\none_pass_vect* --&gt; ()\n- : unit = ()\n</code></pre>\n<h3 id=\"limitations\">Limitations</h3>\n<p>To keep track of assignments to data structures and mutable variables in a\nprogram, the trace facility is not powerful enough. You need an extra mechanism\nto stop the program in any place and ask for internal values: that is a\nsymbolic debugger with its stepping feature.</p>\n<p>Stepping a functional program has a meaning which is a bit weird to define and\nunderstand. Let me say that we use the notion of <em>runtime events</em> that happen\nfor instance when a parameter is passed to a function or when entering a\npattern matching, or selecting a clause in a pttern matching. Computation\nprogress is taken into account by these events, independently of the\ninstructions executed on the hardware.</p>\n<p>Although this is difficult to implement, there exists such a debugger for OCaml\nunder Unix: <code>ocamldebug</code>. Its use is illustrated in the next section.</p>\n<p>In fact, for complex programs, it is likely the case that the programmer will\nuse explicit printing to find the bugs, since this methodology allows the\nreduction of the trace material: only useful data are printed and special\npurpose formats are more suited to get the relevant information, than what can\nbe output automatically by the generic pretty-printer used by the trace\nmechanism.</p>\n<h2 id=\"the-ocaml-debugger\">The OCaml debugger</h2>\n<p>We now give a quick tutorial for the OCaml debugger (<code>ocamldebug</code>).  Before\nstarting, please note that <code>ocamldebug</code> does not work under native Windows\nports of OCaml (but it runs under the Cygwin port).</p>\n<h3 id=\"launching-the-debugger\">Launching the debugger</h3>\n<p>Consider the following obviously wrong program written in the file\n<code>uncaught.ml</code>:</p>\n<pre><code class=\"language-ocaml\">(* file uncaught.ml *)\nlet l = ref []\nlet find_address name = List.assoc name !l\nlet add_address name address = l := (name, address) :: ! l\n\nlet () =\n  add_address &quot;IRIA&quot; &quot;Rocquencourt&quot;;;\n  print_string (find_address &quot;INRIA&quot;); print_newline ();;\n</code></pre>\n<pre><code class=\"language-mdx-error\">val l : (string * string) list ref = {contents = [(&quot;IRIA&quot;, &quot;Rocquencourt&quot;)]}\nval find_address : string -&gt; string = &lt;fun&gt;\nval add_address : string -&gt; string -&gt; unit = &lt;fun&gt;\nException: Not_found.\n</code></pre>\n<p>At runtime, the program raises an uncaught exception <code>Not_found</code>.  Suppose we\nwant to find where and why this exception has been raised, we can proceed as\nfollows. First, we compile the program in debug mode:</p>\n<pre><code>ocamlc -g uncaught.ml\n</code></pre>\n<p>We launch the debugger:</p>\n<pre><code>ocamldebug a.out\n</code></pre>\n<p>Then the debugger answers with a banner and a prompt:</p>\n<pre><code>OCaml Debugger version 4.12.0\n\n(ocd)\n</code></pre>\n<h3 id=\"finding-the-cause-of-a-spurious-exception\">Finding the cause of a spurious exception</h3>\n<p>Type <code>r</code> (for <em>run</em>); you get</p>\n<pre><code>(ocd) r\nLoading program... done.\nTime : 12\nProgram end.\nUncaught exception: Not_found\n(ocd)\n</code></pre>\n<p>Self explanatory, isn't it? So, you want to step backward to set the program\ncounter before the time the exception is raised; hence type in <code>b</code> as\n<em>backstep</em>, and you get</p>\n<pre><code>(ocd) b\nTime : 11 - pc : 15500 - module List\n143     [] -&gt; &lt;|b|&gt;raise Not_found\n</code></pre>\n<p>The debugger tells you that you are in module <code>List</code>, inside a pattern matching\non a list that already chose the <code>[]</code> case and is about to execute <code>raise Not_found</code>, since the program is stopped just before this expression (as\nwitnessed by the <code>&lt;|b|&gt;</code> mark).</p>\n<p>But, as you know, you want the debugger to tell you which procedure calls the\none from <code>List</code>, and also who calls the procedure that calls the one from\n<code>List</code>; hence, you want a backtrace of the execution stack:</p>\n<pre><code>(ocd) bt\n#0  Pc : 15500  List char 3562\n#1  Pc : 19128  Uncaught char 221\n</code></pre>\n<p>So the last function called is from module <code>List</code> at character 3562, that is:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec assoc x = function\n  | [] -&gt; raise Not_found\n          ^\n  | (a,b)::l -&gt; if a = x then b else assoc x l\n</code></pre>\n<p>The function that calls it is in module <code>Uncaught</code>, file <code>uncaught.ml</code> char\n221:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">print_string (find_address &quot;INRIA&quot;); print_newline ();;\n                                  ^\n</code></pre>\n<p>To sum up: if you're developing a program you can compile it with the <code>-g</code>\noption, to be ready to debug the program if necessary. Hence, to find a\nspurious exception you just need to type <code>ocamldebug a.out</code>, then <code>r</code>, <code>b</code>, and\n<code>bt</code> gives you the backtrace.</p>\n<h3 id=\"getting-help-and-info-in-the-debugger\">Getting help and info in the debugger</h3>\n<p>To get more info about the current status of the debugger you can ask it\ndirectly at the toplevel prompt of the debugger; for instance:</p>\n<pre><code>(ocd) info breakpoints\nNo breakpoint.\n\n(ocd) help break\n  1      15396  in List, character 3539\nbreak : Set breakpoint at specified line or function.\nSyntax: break function-name\nbreak @ [module] linenum\nbreak @ [module] # characternum\n</code></pre>\n<h3 id=\"setting-break-points\">Setting break points</h3>\n<p>Let's set up a breakpoint and rerun the entire program from the\nbeginning (<code>(g)oto 0</code> then <code>(r)un</code>):</p>\n<pre><code>(ocd) break @Uncaught 9\nBreakpoint 3 at 19112 : file Uncaught, line 9 column 34\n\n(ocd) g 0\nTime : 0\nBeginning of program.\n\n(ocd) r\nTime : 6 - pc : 19112 - module Uncaught\nBreakpoint : 1\n9 add &quot;IRIA&quot; &quot;Rocquencourt&quot;&lt;|a|&gt;;;\n</code></pre>\n<p>Then, we can step and find what happens when <code>find_address</code> is about to be\ncalled</p>\n<pre><code>(ocd) s\nTime : 7 - pc : 19012 - module Uncaught\n5 let find_address name = &lt;|b|&gt;List.assoc name !l;;\n\n(ocd) p name\nname : string = &quot;INRIA&quot;\n\n(ocd) p !l\n$1 : (string * string) list = [&quot;IRIA&quot;, &quot;Rocquencourt&quot;]\n(ocd)\n</code></pre>\n<p>Now we can guess why <code>List.assoc</code> will fail to find &quot;INRIA&quot; in the list...</p>\n<h3 id=\"using-the-debugger-under-emacs\">Using the debugger under Emacs</h3>\n<p>Under Emacs you call the debugger using <code>ESC-x</code> <code>ocamldebug a.out</code>. Then Emacs\nwill send you directly to the file and character reported by the debugger, and\nyou can step back and forth using <code>ESC-b</code> and <code>ESC-s</code>, you can set up break\npoints using <code>CTRL-X space</code>, and so on...</p>\n"},{"title":"Map","slug":"map","description":"Create a mapping using the standard library's Map module\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"stdlib","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## Module Map\n\nMap creates a \"mapping\". For instance, let's say I have some data that is\nusers and their associated passwords. I could with the Map module create\na mapping from user names to their passwords. The mapping module not\nonly does this but it does it fairly efficiently. It also does this in a\nfunctional way. In the example below I am going to do a mapping from\nstrings to strings. However, it is possible to do mappings with all\ndifferent types of data.\n\nTo create a Map I can do:\n\n```ocaml\n# module MyUsers = Map.Make(String)\nmodule MyUsers :\n  sig\n    type key = string\n    type 'a t = 'a Map.Make(String).t\n    val empty : 'a t\n    val is_empty : 'a t -> bool\n    val mem : key -> 'a t -> bool\n    val add : key -> 'a -> 'a t -> 'a t\n    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t\n    val singleton : key -> 'a -> 'a t\n    val remove : key -> 'a t -> 'a t\n    val merge :\n      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t\n    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t\n    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int\n    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val for_all : (key -> 'a -> bool) -> 'a t -> bool\n    val exists : (key -> 'a -> bool) -> 'a t -> bool\n    val filter : (key -> 'a -> bool) -> 'a t -> 'a t\n    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t\n    val cardinal : 'a t -> int\n    val bindings : 'a t -> (key * 'a) list\n    val min_binding : 'a t -> key * 'a\n    val min_binding_opt : 'a t -> (key * 'a) option\n    val max_binding : 'a t -> key * 'a\n    val max_binding_opt : 'a t -> (key * 'a) option\n    val choose : 'a t -> key * 'a\n    val choose_opt : 'a t -> (key * 'a) option\n    val split : key -> 'a t -> 'a t * 'a option * 'a t\n    val find : key -> 'a t -> 'a\n    val find_opt : key -> 'a t -> 'a option\n    val find_first : (key -> bool) -> 'a t -> key * 'a\n    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option\n    val find_last : (key -> bool) -> 'a t -> key * 'a\n    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option\n    val map : ('a -> 'b) -> 'a t -> 'b t\n    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t\n    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n```\n\nOK, we have created the module `MyUsers`.  Now, let's start putting\nsomething into it.  Where do we start?  Well, let's create an empty\nmap to begin with:\n\n```ocaml\n# let m = MyUsers.empty\nval m : 'a MyUsers.t = <abstr>\n```\n\nHummm. An empty map is kind of boring, so let's add some data.\n\n```ocaml\n# let m = MyUsers.add \"fred\" \"sugarplums\" m\nval m : string MyUsers.t = <abstr>\n```\n\nWe have now created a new map—again called `m`, thus masking the previous\none—by adding\n\"fred\" and his password \"sugarplums\" to our previous empty map.\nThere is a fairly important point to make here. Once we have added the\nstring \"sugarplums\" we have fixed the types of mappings that we can do.\nThis means our mapping in our module `MyUsers` is from strings _to strings_.\nIf we want a mapping from strings to integers or a mapping from integers\nto whatever we will have to create a different mapping.\n\nLet's add in some additional data just for kicks.\n\n```ocaml\n# let m = MyUsers.add \"tom\" \"ilovelucy\" m\nval m : string MyUsers.t = <abstr>\n# let m = MyUsers.add \"mark\" \"ocamlrules\" m\nval m : string MyUsers.t = <abstr>\n# let m = MyUsers.add \"pete\" \"linux\" m\nval m : string MyUsers.t = <abstr>\n```\n\nNow that we have some data inside of our map, wouldn't it be nice\nto be able to view that data at some point? Let's begin by creating a\nsimple print function.\n\n```ocaml\n# let print_user key password =\n  print_string(key ^ \" \" ^ password ^ \"\\n\")\nval print_user : string -> string -> unit = <fun>\n```\n\nWe have here a function that will take two strings, a key, and a password,\nand print them out nicely, including a new line character at the end.\nAll we need to do is to have this function applied to our mapping. Here\nis what that would look like.\n\n```ocaml\n# MyUsers.iter print_user m\nfred sugarplums\nmark ocamlrules\npete linux\ntom ilovelucy\n- : unit = ()\n```\nThe reason we put our data into a mapping however is probably so we can\nquickly find the data. Let's actually show how to do a find.\n\n```ocaml\n# MyUsers.find \"fred\" m\n- : string = \"sugarplums\"\n```\n\nThis should quickly and efficiently return Fred's password: \"sugarplums\".\n\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#module-map\">Module Map</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"module-map\">Module Map</h2>\n<p>Map creates a &quot;mapping&quot;. For instance, let's say I have some data that is\nusers and their associated passwords. I could with the Map module create\na mapping from user names to their passwords. The mapping module not\nonly does this but it does it fairly efficiently. It also does this in a\nfunctional way. In the example below I am going to do a mapping from\nstrings to strings. However, it is possible to do mappings with all\ndifferent types of data.</p>\n<p>To create a Map I can do:</p>\n<pre><code class=\"language-ocaml\"># module MyUsers = Map.Make(String)\nmodule MyUsers :\n  sig\n    type key = string\n    type 'a t = 'a Map.Make(String).t\n    val empty : 'a t\n    val is_empty : 'a t -&gt; bool\n    val mem : key -&gt; 'a t -&gt; bool\n    val add : key -&gt; 'a -&gt; 'a t -&gt; 'a t\n    val update : key -&gt; ('a option -&gt; 'a option) -&gt; 'a t -&gt; 'a t\n    val singleton : key -&gt; 'a -&gt; 'a t\n    val remove : key -&gt; 'a t -&gt; 'a t\n    val merge :\n      (key -&gt; 'a option -&gt; 'b option -&gt; 'c option) -&gt; 'a t -&gt; 'b t -&gt; 'c t\n    val union : (key -&gt; 'a -&gt; 'a -&gt; 'a option) -&gt; 'a t -&gt; 'a t -&gt; 'a t\n    val compare : ('a -&gt; 'a -&gt; int) -&gt; 'a t -&gt; 'a t -&gt; int\n    val equal : ('a -&gt; 'a -&gt; bool) -&gt; 'a t -&gt; 'a t -&gt; bool\n    val iter : (key -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; unit\n    val fold : (key -&gt; 'a -&gt; 'b -&gt; 'b) -&gt; 'a t -&gt; 'b -&gt; 'b\n    val for_all : (key -&gt; 'a -&gt; bool) -&gt; 'a t -&gt; bool\n    val exists : (key -&gt; 'a -&gt; bool) -&gt; 'a t -&gt; bool\n    val filter : (key -&gt; 'a -&gt; bool) -&gt; 'a t -&gt; 'a t\n    val partition : (key -&gt; 'a -&gt; bool) -&gt; 'a t -&gt; 'a t * 'a t\n    val cardinal : 'a t -&gt; int\n    val bindings : 'a t -&gt; (key * 'a) list\n    val min_binding : 'a t -&gt; key * 'a\n    val min_binding_opt : 'a t -&gt; (key * 'a) option\n    val max_binding : 'a t -&gt; key * 'a\n    val max_binding_opt : 'a t -&gt; (key * 'a) option\n    val choose : 'a t -&gt; key * 'a\n    val choose_opt : 'a t -&gt; (key * 'a) option\n    val split : key -&gt; 'a t -&gt; 'a t * 'a option * 'a t\n    val find : key -&gt; 'a t -&gt; 'a\n    val find_opt : key -&gt; 'a t -&gt; 'a option\n    val find_first : (key -&gt; bool) -&gt; 'a t -&gt; key * 'a\n    val find_first_opt : (key -&gt; bool) -&gt; 'a t -&gt; (key * 'a) option\n    val find_last : (key -&gt; bool) -&gt; 'a t -&gt; key * 'a\n    val find_last_opt : (key -&gt; bool) -&gt; 'a t -&gt; (key * 'a) option\n    val map : ('a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val mapi : (key -&gt; 'a -&gt; 'b) -&gt; 'a t -&gt; 'b t\n    val to_seq : 'a t -&gt; (key * 'a) Seq.t\n    val to_seq_from : key -&gt; 'a t -&gt; (key * 'a) Seq.t\n    val add_seq : (key * 'a) Seq.t -&gt; 'a t -&gt; 'a t\n    val of_seq : (key * 'a) Seq.t -&gt; 'a t\n  end\n</code></pre>\n<p>OK, we have created the module <code>MyUsers</code>.  Now, let's start putting\nsomething into it.  Where do we start?  Well, let's create an empty\nmap to begin with:</p>\n<pre><code class=\"language-ocaml\"># let m = MyUsers.empty\nval m : 'a MyUsers.t = &lt;abstr&gt;\n</code></pre>\n<p>Hummm. An empty map is kind of boring, so let's add some data.</p>\n<pre><code class=\"language-ocaml\"># let m = MyUsers.add &quot;fred&quot; &quot;sugarplums&quot; m\nval m : string MyUsers.t = &lt;abstr&gt;\n</code></pre>\n<p>We have now created a new map—again called <code>m</code>, thus masking the previous\none—by adding\n&quot;fred&quot; and his password &quot;sugarplums&quot; to our previous empty map.\nThere is a fairly important point to make here. Once we have added the\nstring &quot;sugarplums&quot; we have fixed the types of mappings that we can do.\nThis means our mapping in our module <code>MyUsers</code> is from strings <em>to strings</em>.\nIf we want a mapping from strings to integers or a mapping from integers\nto whatever we will have to create a different mapping.</p>\n<p>Let's add in some additional data just for kicks.</p>\n<pre><code class=\"language-ocaml\"># let m = MyUsers.add &quot;tom&quot; &quot;ilovelucy&quot; m\nval m : string MyUsers.t = &lt;abstr&gt;\n# let m = MyUsers.add &quot;mark&quot; &quot;ocamlrules&quot; m\nval m : string MyUsers.t = &lt;abstr&gt;\n# let m = MyUsers.add &quot;pete&quot; &quot;linux&quot; m\nval m : string MyUsers.t = &lt;abstr&gt;\n</code></pre>\n<p>Now that we have some data inside of our map, wouldn't it be nice\nto be able to view that data at some point? Let's begin by creating a\nsimple print function.</p>\n<pre><code class=\"language-ocaml\"># let print_user key password =\n  print_string(key ^ &quot; &quot; ^ password ^ &quot;\\n&quot;)\nval print_user : string -&gt; string -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>We have here a function that will take two strings, a key, and a password,\nand print them out nicely, including a new line character at the end.\nAll we need to do is to have this function applied to our mapping. Here\nis what that would look like.</p>\n<pre><code class=\"language-ocaml\"># MyUsers.iter print_user m\nfred sugarplums\nmark ocamlrules\npete linux\ntom ilovelucy\n- : unit = ()\n</code></pre>\n<p>The reason we put our data into a mapping however is probably so we can\nquickly find the data. Let's actually show how to do a find.</p>\n<pre><code class=\"language-ocaml\"># MyUsers.find &quot;fred&quot; m\n- : string = &quot;sugarplums&quot;\n</code></pre>\n<p>This should quickly and efficiently return Fred's password: &quot;sugarplums&quot;.</p>\n"},{"title":"Sets","slug":"sets","description":"The standard library's Set module\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"stdlib","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\n## Module Set\nTo make a set of strings:\n\n```ocaml\n# module SS = Set.Make(String)\nmodule SS :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -> bool\n    val mem : elt -> t -> bool\n    val add : elt -> t -> t\n    val singleton : elt -> t\n    val remove : elt -> t -> t\n    val union : t -> t -> t\n    val inter : t -> t -> t\n    val disjoint : t -> t -> bool\n    val diff : t -> t -> t\n    val compare : t -> t -> int\n    val equal : t -> t -> bool\n    val subset : t -> t -> bool\n    val iter : (elt -> unit) -> t -> unit\n    val map : (elt -> elt) -> t -> t\n    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a\n    val for_all : (elt -> bool) -> t -> bool\n    val exists : (elt -> bool) -> t -> bool\n    val filter : (elt -> bool) -> t -> t\n    val partition : (elt -> bool) -> t -> t * t\n    val cardinal : t -> int\n    val elements : t -> elt list\n    val min_elt : t -> elt\n    val min_elt_opt : t -> elt option\n    val max_elt : t -> elt\n    val max_elt_opt : t -> elt option\n    val choose : t -> elt\n    val choose_opt : t -> elt option\n    val split : elt -> t -> t * bool * t\n    val find : elt -> t -> elt\n    val find_opt : elt -> t -> elt option\n    val find_first : (elt -> bool) -> t -> elt\n    val find_first_opt : (elt -> bool) -> t -> elt option\n    val find_last : (elt -> bool) -> t -> elt\n    val find_last_opt : (elt -> bool) -> t -> elt option\n    val of_list : elt list -> t\n    val to_seq_from : elt -> t -> elt Seq.t\n    val to_seq : t -> elt Seq.t\n    val add_seq : elt Seq.t -> t -> t\n    val of_seq : elt Seq.t -> t\n  end\n```\n\nTo create a set you need to start somewhere so here is the empty set:\n\n```ocaml\n# let s = SS.empty\nval s : SS.t = <abstr>\n```\n\nAlternatively if we know an element to start with we can create a set\nlike\n\n```ocaml\n# let s = SS.singleton \"hello\"\nval s : SS.t = <abstr>\n```\n\nTo add some elements to the set we can do.\n\n```ocaml\n# let s =\n  List.fold_right SS.add [\"hello\"; \"world\"; \"community\"; \"manager\";\n                          \"stuff\"; \"blue\"; \"green\"] s\nval s : SS.t = <abstr>\n```\n\nNow if we are playing around with sets we will probably want to see what\nis in the set that we have created. To do this we can write a function\nthat will print the set out.\n\n```ocaml\n# let print_set s = \n   SS.iter print_endline s\nval print_set : SS.t -> unit = <fun>\n```\n\nIf we want to remove a specific element of a set there is a remove\nfunction. However if we want to remove several elements at once we could\nthink of it as doing a 'filter'. Let's filter out all words that are\nlonger than 5 characters.\n\nThis can be written as:\n\n```ocaml\n# let my_filter str =\n  String.length str <= 5\nval my_filter : string -> bool = <fun>\n# let s2 = SS.filter my_filter s\nval s2 : SS.t = <abstr>\n```\n\nor using an anonymous function:\n\n```ocaml\n# let s2 = SS.filter (fun str -> String.length str <= 5) s\nval s2 : SS.t = <abstr>\n```\n\nIf we want to check and see if an element is in the set it might look\nlike this.\n\n```ocaml\n# SS.mem \"hello\" s2\n- : bool = true\n```\n\nThe Set module also provides the set theoretic operations union,\nintersection and difference. For example, the difference of the original\nset and the set with short strings (≤ 5 characters) is the set of long\nstrings:\n\n```ocaml\n# print_set (SS.diff s s2)\ncommunity\nmanager\n- : unit = ()\n```\n\nNote that the Set module provides a purely functional data structure:\nremoving an element from a set does not alter that set but, rather,\nreturns a new set that is very similar to (and shares much of its\ninternals with) the original set.\n\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#module-set\">Module Set</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"module-set\">Module Set</h2>\n<p>To make a set of strings:</p>\n<pre><code class=\"language-ocaml\"># module SS = Set.Make(String)\nmodule SS :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -&gt; bool\n    val mem : elt -&gt; t -&gt; bool\n    val add : elt -&gt; t -&gt; t\n    val singleton : elt -&gt; t\n    val remove : elt -&gt; t -&gt; t\n    val union : t -&gt; t -&gt; t\n    val inter : t -&gt; t -&gt; t\n    val disjoint : t -&gt; t -&gt; bool\n    val diff : t -&gt; t -&gt; t\n    val compare : t -&gt; t -&gt; int\n    val equal : t -&gt; t -&gt; bool\n    val subset : t -&gt; t -&gt; bool\n    val iter : (elt -&gt; unit) -&gt; t -&gt; unit\n    val map : (elt -&gt; elt) -&gt; t -&gt; t\n    val fold : (elt -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a\n    val for_all : (elt -&gt; bool) -&gt; t -&gt; bool\n    val exists : (elt -&gt; bool) -&gt; t -&gt; bool\n    val filter : (elt -&gt; bool) -&gt; t -&gt; t\n    val partition : (elt -&gt; bool) -&gt; t -&gt; t * t\n    val cardinal : t -&gt; int\n    val elements : t -&gt; elt list\n    val min_elt : t -&gt; elt\n    val min_elt_opt : t -&gt; elt option\n    val max_elt : t -&gt; elt\n    val max_elt_opt : t -&gt; elt option\n    val choose : t -&gt; elt\n    val choose_opt : t -&gt; elt option\n    val split : elt -&gt; t -&gt; t * bool * t\n    val find : elt -&gt; t -&gt; elt\n    val find_opt : elt -&gt; t -&gt; elt option\n    val find_first : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_first_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val find_last : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_last_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val of_list : elt list -&gt; t\n    val to_seq_from : elt -&gt; t -&gt; elt Seq.t\n    val to_seq : t -&gt; elt Seq.t\n    val add_seq : elt Seq.t -&gt; t -&gt; t\n    val of_seq : elt Seq.t -&gt; t\n  end\n</code></pre>\n<p>To create a set you need to start somewhere so here is the empty set:</p>\n<pre><code class=\"language-ocaml\"># let s = SS.empty\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>Alternatively if we know an element to start with we can create a set\nlike</p>\n<pre><code class=\"language-ocaml\"># let s = SS.singleton &quot;hello&quot;\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>To add some elements to the set we can do.</p>\n<pre><code class=\"language-ocaml\"># let s =\n  List.fold_right SS.add [&quot;hello&quot;; &quot;world&quot;; &quot;community&quot;; &quot;manager&quot;;\n                          &quot;stuff&quot;; &quot;blue&quot;; &quot;green&quot;] s\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>Now if we are playing around with sets we will probably want to see what\nis in the set that we have created. To do this we can write a function\nthat will print the set out.</p>\n<pre><code class=\"language-ocaml\"># let print_set s = \n   SS.iter print_endline s\nval print_set : SS.t -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>If we want to remove a specific element of a set there is a remove\nfunction. However if we want to remove several elements at once we could\nthink of it as doing a 'filter'. Let's filter out all words that are\nlonger than 5 characters.</p>\n<p>This can be written as:</p>\n<pre><code class=\"language-ocaml\"># let my_filter str =\n  String.length str &lt;= 5\nval my_filter : string -&gt; bool = &lt;fun&gt;\n# let s2 = SS.filter my_filter s\nval s2 : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>or using an anonymous function:</p>\n<pre><code class=\"language-ocaml\"># let s2 = SS.filter (fun str -&gt; String.length str &lt;= 5) s\nval s2 : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>If we want to check and see if an element is in the set it might look\nlike this.</p>\n<pre><code class=\"language-ocaml\"># SS.mem &quot;hello&quot; s2\n- : bool = true\n</code></pre>\n<p>The Set module also provides the set theoretic operations union,\nintersection and difference. For example, the difference of the original\nset and the set with short strings (≤ 5 characters) is the set of long\nstrings:</p>\n<pre><code class=\"language-ocaml\"># print_set (SS.diff s s2)\ncommunity\nmanager\n- : unit = ()\n</code></pre>\n<p>Note that the Set module provides a purely functional data structure:\nremoving an element from a set does not alter that set but, rather,\nreturns a new set that is very similar to (and shares much of its\ninternals with) the original set.</p>\n"},{"title":"Hashtables","slug":"hashtables","description":"Discover efficient and mutable lookup tables with OCaml's Hashtbl module\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"stdlib","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Module Hashtbl\n\nThe Hashtbl module implements an efficient, mutable lookup table. To\ncreate a hash table we could write:\n\n```ocaml\n# let my_hash = Hashtbl.create 123456\nval my_hash : ('_weak1, '_weak2) Hashtbl.t = <abstr>\n```\nThe 123456 is the initial size of the hashtbl. This initial number is\njust your best guess as to the amount of data that you will be putting\ninto the hash table. The hash table can grow if you under-estimate the\nsize so don't worry about it too much. The type of my_hash is:\n\n```ocaml\n# my_hash\n- : ('_weak1, '_weak2) Hashtbl.t = <abstr>\n```\n\nThe `'_weak1` and `'_weak2` correspond to the key and value types, respectively.\nThere are no concrete types (e.g., `int` or `float * string`) filled in in\nthose slots because the type of the key and value are not yet\ndetermined. The underscore indicates that the key and data types, once\nchosen, will be fixed. In other words, you can't sometimes use a given\nhashtable with ints for keys, and then later use a string as a key in\nthat same hashtable.\n\nLets add some data to `my_hash`. Lets say I am working on a cross word\nsolving program and I want to find all words that start with a certain\nletter. First I need to enter the data into `my_hash`.\n\nNote that a hashtable is modified by in-place updates, so, unlike a map,\nanother hash table is _not_ created every time you change the table. Thus,\nthe code `let my_hash = Hashtbl.add my_hash ...` wouldn't make any\nsense. Instead, we would write something like this:\n\n```ocaml\n# Hashtbl.add my_hash \"h\" \"hello\";\n  Hashtbl.add my_hash \"h\" \"hi\";\n  Hashtbl.add my_hash \"h\" \"hug\";\n  Hashtbl.add my_hash \"h\" \"hard\";\n  Hashtbl.add my_hash \"w\" \"wimp\";\n  Hashtbl.add my_hash \"w\" \"world\";\n  Hashtbl.add my_hash \"w\" \"wine\"\n- : unit = ()\n```\n\nIf we want to find one element in `my_hash` that has an `\"h\"` in it then we\nwould write: \n\n```ocaml\n# Hashtbl.find my_hash \"h\"\n- : string = \"hard\"\n```\n\nNotice how it returns just one element? That element\nwas the last one entered in with the value of `\"h\"`.\n\nWhat we probably want is all the elements that start with `\"h\"`. To do\nthis we want to *find all* of them. What better name for this than\n`find_all`?\n\n```ocaml\n# Hashtbl.find_all my_hash \"h\"\n- : string list = [\"hard\"; \"hug\"; \"hi\"; \"hello\"]\n```\n\nreturns `[\"hard\"; \"hug\"; \"hi\"; \"hello\"]`.\n\nIf you remove a key, its previous value becomes again the default one\nassociated to the key.\n\n```ocaml\n# Hashtbl.remove my_hash \"h\";;\n- : unit = ()\n# Hashtbl.find my_hash \"h\";;\n- : string = \"hug\"\n```\n\nThis behavior is interesting for the above example or when, say, the\nkeys represent variables that can be temporarily masked by a local\nvariables of the same name.\n\nIn other contexts, one may prefer new values to *replace* the previous\nones.  In this case, one uses `Hashtbl.replace`:\n\n```ocaml\n# Hashtbl.replace my_hash \"t\" \"try\";\n  Hashtbl.replace my_hash \"t\" \"test\";\n  Hashtbl.find_all my_hash \"t\"\n- : string list = [\"test\"]\n\n# Hashtbl.remove my_hash \"t\";\n  Hashtbl.find my_hash \"t\"\nException: Not_found.\n```\n\nTo find out whether there is an\nentry in `my_hash` for a letter we would do:\n\n```ocaml\n# Hashtbl.mem my_hash \"h\"\n- : bool = true\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#module-hashtbl\">Module Hashtbl</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"module-hashtbl\">Module Hashtbl</h2>\n<p>The Hashtbl module implements an efficient, mutable lookup table. To\ncreate a hash table we could write:</p>\n<pre><code class=\"language-ocaml\"># let my_hash = Hashtbl.create 123456\nval my_hash : ('_weak1, '_weak2) Hashtbl.t = &lt;abstr&gt;\n</code></pre>\n<p>The 123456 is the initial size of the hashtbl. This initial number is\njust your best guess as to the amount of data that you will be putting\ninto the hash table. The hash table can grow if you under-estimate the\nsize so don't worry about it too much. The type of my_hash is:</p>\n<pre><code class=\"language-ocaml\"># my_hash\n- : ('_weak1, '_weak2) Hashtbl.t = &lt;abstr&gt;\n</code></pre>\n<p>The <code>'_weak1</code> and <code>'_weak2</code> correspond to the key and value types, respectively.\nThere are no concrete types (e.g., <code>int</code> or <code>float * string</code>) filled in in\nthose slots because the type of the key and value are not yet\ndetermined. The underscore indicates that the key and data types, once\nchosen, will be fixed. In other words, you can't sometimes use a given\nhashtable with ints for keys, and then later use a string as a key in\nthat same hashtable.</p>\n<p>Lets add some data to <code>my_hash</code>. Lets say I am working on a cross word\nsolving program and I want to find all words that start with a certain\nletter. First I need to enter the data into <code>my_hash</code>.</p>\n<p>Note that a hashtable is modified by in-place updates, so, unlike a map,\nanother hash table is <em>not</em> created every time you change the table. Thus,\nthe code <code>let my_hash = Hashtbl.add my_hash ...</code> wouldn't make any\nsense. Instead, we would write something like this:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.add my_hash &quot;h&quot; &quot;hello&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hi&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hug&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hard&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;wimp&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;world&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;wine&quot;\n- : unit = ()\n</code></pre>\n<p>If we want to find one element in <code>my_hash</code> that has an <code>&quot;h&quot;</code> in it then we\nwould write:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.find my_hash &quot;h&quot;\n- : string = &quot;hard&quot;\n</code></pre>\n<p>Notice how it returns just one element? That element\nwas the last one entered in with the value of <code>&quot;h&quot;</code>.</p>\n<p>What we probably want is all the elements that start with <code>&quot;h&quot;</code>. To do\nthis we want to <em>find all</em> of them. What better name for this than\n<code>find_all</code>?</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.find_all my_hash &quot;h&quot;\n- : string list = [&quot;hard&quot;; &quot;hug&quot;; &quot;hi&quot;; &quot;hello&quot;]\n</code></pre>\n<p>returns <code>[&quot;hard&quot;; &quot;hug&quot;; &quot;hi&quot;; &quot;hello&quot;]</code>.</p>\n<p>If you remove a key, its previous value becomes again the default one\nassociated to the key.</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.remove my_hash &quot;h&quot;;;\n- : unit = ()\n# Hashtbl.find my_hash &quot;h&quot;;;\n- : string = &quot;hug&quot;\n</code></pre>\n<p>This behavior is interesting for the above example or when, say, the\nkeys represent variables that can be temporarily masked by a local\nvariables of the same name.</p>\n<p>In other contexts, one may prefer new values to <em>replace</em> the previous\nones.  In this case, one uses <code>Hashtbl.replace</code>:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.replace my_hash &quot;t&quot; &quot;try&quot;;\n  Hashtbl.replace my_hash &quot;t&quot; &quot;test&quot;;\n  Hashtbl.find_all my_hash &quot;t&quot;\n- : string list = [&quot;test&quot;]\n\n# Hashtbl.remove my_hash &quot;t&quot;;\n  Hashtbl.find my_hash &quot;t&quot;\nException: Not_found.\n</code></pre>\n<p>To find out whether there is an\nentry in <code>my_hash</code> for a letter we would do:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.mem my_hash &quot;h&quot;\n- : bool = true\n</code></pre>\n"},{"title":"Streams","slug":"streams","description":"Streams offer an abstraction over consuming items from sequences\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"stdlib","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\nSuppose you need to process each line of a text file. One way to do this\nis to read the file in as a single large string and use something like\n`Str.split` to turn it into a list. This works when the file is small,\nbut because the entire file is loaded into memory, it does not scale\nwell when the file is large.\n\nMore commonly, the `input_line` function can be used to read one line at\na time from a channel. This typically looks like:\n\n```ocaml\nlet in_channel = open_in \"lines.txt\" in\ntry\n  while true do\n    let line = input_line in_channel in\n    (* do something with line *)\n  done\nwith End_of_file ->\n  close_in in_channel\n```\n```mdx-error\nLine 6, characters 5-9:\nError: Syntax error\n```\n\nThe above code is efficient with memory, but it can be inconvenient in\nother ways. Since `input_line` only works with the `in_channel` type, it\ncannot be reused in cases where the text is already in memory. The\n`End_of_file` exception can be raised at any point during iteration, and\nit is the programmer's responsibility to ensure that the file is closed\nappropriately. In fact, if there is any other exception in the above\nexample, the file will not be closed at all. Altogether, there is a lot\ngoing on: channels, I/O, exceptions, and files.\n\nStreams offer an abstraction over one part of this process: reading\nitems from a sequence. They don't assume anything about files or\nchannels, and they replace the `End_of_file` exception with a more\nstructured approach to dealing with the end of input. Here is a function\nthat builds a stream of lines from an input channel:\n\n```ocaml\n# let line_stream_of_channel channel =\n  Stream.from\n    (fun _ ->\n       try Some (input_line channel) with End_of_file -> None)\nval line_stream_of_channel : in_channel -> string Stream.t = <fun>\n```\nThe \"Stream.from\" function builds a stream from a callback function.\nThis function is passed the current stream count (starting with 0) as an\nargument and is expected to return an `'a option`. If the option has a\nvalue (`Some x`), that value will be the next item in the stream. If it\nhas no value (`None`), this indicates that the stream is empty and no\nfurther reads will be attempted. Since the option is polymorphic,\n`Stream.from` can construct streams of any type. These streams have a\ntype of `'a Stream.t`.\n\nWith this simple function, we can now easily construct line streams from\nany input channel:\n\n```ocaml\n# let in_channel = open_in \"019_streams.md\"\nval in_channel : in_channel = <abstr>\n# let lines = line_stream_of_channel in_channel\nval lines : string Stream.t = <abstr>\n```\n\nThis variable `lines` is a stream of strings, one string per line. We\ncan now begin reading lines from it by passing it to `Stream.next`:\n\n```ocaml\n# Stream.next lines\n- : string = \"---\"\n# Stream.next lines\n- : string = \"title: Streams\"\n# Stream.next lines\n- : string = \"description: >\"\n# Stream.next lines\n- : string =\n\"  Streams offer an abstraction over consuming items from sequences\"\n# while true do ignore(Stream.next lines) done\nException: Stdlib.Stream.Failure.\n```\n\nAs you can see, `Stream.next` either returns the next item in the stream\nor raises a `Stream.Failure` exception indicating that the stream is\nempty. Likewise, with a little help from the `Stream.of_list`\nconstructor and the `Str` regular expression module, we could build a\nstream of lines from a string in memory:\n\n```ocaml\n# #load \"str.cma\"\n# let line_stream_of_string string =\n  Stream.of_list (Str.split (Str.regexp \"\\n\") string)\nval line_stream_of_string : string -> string Stream.t = <fun>\n```\nand these streams could be used exactly the same way:\n\n```ocaml\n# let lines = line_stream_of_string \"hello\\nstream\\nworld\"\nval lines : string Stream.t = <abstr>\n# Stream.next lines\n- : string = \"hello\"\n# Stream.next lines\n- : string = \"stream\"\n# Stream.next lines\n- : string = \"world\"\n# Stream.next lines\nException: Stdlib.Stream.Failure.\n```\n\nSince both cases raise `Stream.Failure` on an empty stream, there is no\nneed to worry about catching `End_of_file` in the case of file I/O. This\nunified interface makes it much easier to write functions that can\nreceive data from multiple sources.\n\nThe `Stream.iter` function automates the common task of performing an\noperation for each item. With it, we can rewrite the original example as\nfollows:\n\n```ocaml\nlet in_channel = open_in \"019_streams.md\" in\ntry\n  Stream.iter\n    (fun line ->\n       (* do something with line *)\n       print_endline line)\n    (line_stream_of_channel in_channel);\n  close_in in_channel\nwith e ->\n  close_in in_channel;\n  raise e\n```\n\nNote how much easier it is to handle I/O exceptions properly, since we\ncan deal with them independently from the end-of-file condition. This\nseparation of concerns allows us to decompose this into simpler and more\nreusable functions:\n\n```ocaml\n# let process_line line =\n  print_endline line\nval process_line : string -> unit = <fun>\n\n# let process_lines lines =\n  Stream.iter process_line lines\nval process_lines : string Stream.t -> unit = <fun>\n\n# let process_file filename =\n  let in_channel = open_in filename in\n  try\n    process_lines (line_stream_of_channel in_channel);\n    close_in in_channel\n  with e ->\n    close_in in_channel;\n    raise e\nval process_file : string -> unit = <fun>\n\n# let process_string string =\n  process_lines (line_stream_of_string string)\nval process_string : string -> unit = <fun>\n```\n\n## Constructing streams\nIn the above examples, we saw two methods for constructing streams:\n\n* Stream.from, which builds a stream from a callback function\n* Stream.of_list, which builds a stream from a list in memory\n\nThe `Stream` module provides a few other stream builders:\n\n* Stream.of_string, which builds a character stream from a string\n* Stream.of_channel, which builds a character stream from a channel\n\n`Stream.from` is the most general, and it can be used to produce streams\nof any type. It is not limited to I/O and can even produce infinite\nsequences. Here are a few simple stream builders defined with\n`Stream.from`:\n\n```ocaml\n# let empty_stream () = Stream.from (fun _ -> None)\nval empty_stream : unit -> 'a Stream.t = <fun>\n# let const_stream k = Stream.from (fun _ -> Some k)\nval const_stream : 'a -> 'a Stream.t = <fun>\n# let count_stream i = Stream.from (fun j -> Some (i + j))\nval count_stream : int -> int Stream.t = <fun>\n```\n\n## Deconstructing streams\nWe already saw the `Stream.next` function, which retrieves a single item\nfrom a stream. There is another way to work with streams that is often\npreferable: `Stream.peek` and `Stream.junk`. When used together, these\nfunctions allow you to see what the next item would be. This feature,\nknown as \"look ahead\", is very useful when writing parsers. Even if you\ndon't need to look ahead, the peek/junk protocol may be nicer to work\nwith because it uses options instead of exceptions:\n\n```ocaml\n# let lines = line_stream_of_string \"hello\\nworld\"\nval lines : string Stream.t = <abstr>\n# Stream.peek lines\n- : string option = Some \"hello\"\n# Stream.peek lines\n- : string option = Some \"hello\"\n# Stream.junk lines\n- : unit = ()\n# Stream.peek lines\n- : string option = Some \"world\"\n# Stream.junk lines\n- : unit = ()\n# Stream.peek lines\n- : string option = None\n```\n\nAs you can see, it is necessary to call `Stream.junk` to advance to the\nnext item. `Stream.peek` will always give you either the next item or\n`None`, and it will never fail. Likewise, `Stream.junk` always succeeds\n(even if the stream is empty).\n\n## A more complex `Stream.from` example\nHere is a function that converts a line stream into a paragraph stream.\nAs such, it is both a stream consumer and a stream producer.\n\n```ocaml\n# let paragraphs lines =\n  let rec next para_lines i =\n    match Stream.peek lines, para_lines with\n    | None, [] -> None\n    | Some \"\", [] ->\n        Stream.junk lines;\n        next para_lines i\n    | Some \"\", _ | None, _ ->\n        Some (String.concat \"\\n\" (List.rev para_lines))\n    | Some line, _ ->\n        Stream.junk lines;\n        next (line :: para_lines) i in\n  Stream.from (next [])\nval paragraphs : string Stream.t -> string Stream.t = <fun>\n```\n\nThis function uses an extra parameter to `next` (the `Stream.from`\ncallback) called `para_lines` in order to collect the lines for each\nparagraph. Paragraphs are delimited by any number of blank lines.\n\nEach time `next` is called, a `match` expression tests two values: the\nnext line in the stream, and the contents of `para_lines`. Four cases\nare handled:\n\n1. If the end of the stream is reached and no lines have been\n collected, the paragraph stream ends as well.\n1. If the next line is blank and no lines have been collected, the\n blank is ignored and `next` is called recursively to keep looking\n for a non-blank line.\n1. If a blank line or end of stream is reached and lines **have** been\n collected, the paragraph is returned by concatenating `para_lines`\n to a single string.\n1. Finally, if a non-blank line has been reached, the line is collected\n by recursively calling `para_lines`.\n\nHappily, we can rely on the OCaml compiler's exhaustiveness checking to\nensure that we are handling all possible cases.\n\nWith this new tool, we can now work just as easily with paragraphs as we\ncould before with lines:\n\n```ocaml\n(* Print each paragraph, followed by a separator. *)\nlet lines = line_stream_of_channel in_channel in\nStream.iter\n  (fun para ->\n     print_endline para;\n     print_endline \"--\")\n  (paragraphs lines)\n```\nFunctions like `paragraphs` that produce and consume streams can be\ncomposed together in a manner very similar to UNIX pipes and filters.\n\n## Stream combinators\nJust like lists and arrays, common iteration patterns such as `map`,\n`filter`, and `fold` can be very useful. The `Stream` module does not\nprovide such functions, but they can be built easily using\n`Stream.from`:\n\n```ocaml\n# let stream_map f stream =\n  let rec next i =\n    try Some (f (Stream.next stream))\n    with Stream.Failure -> None in\n  Stream.from next\nval stream_map : ('a -> 'b) -> 'a Stream.t -> 'b Stream.t = <fun>\n\n# let stream_filter p stream =\n  let rec next i =\n    try\n      let value = Stream.next stream in\n      if p value then Some value else next i\n    with Stream.Failure -> None in\n  Stream.from next\nval stream_filter : ('a -> bool) -> 'a Stream.t -> 'a Stream.t = <fun>\n\n# let stream_fold f stream init =\n  let result = ref init in\n  Stream.iter\n    (fun x -> result := f x !result)\n    stream;\n  !result\nval stream_fold : ('a -> 'b -> 'b) -> 'a Stream.t -> 'b -> 'b = <fun>\n```\nFor example, here is a stream of leap years starting with 2000:\n\n```ocaml\n# let is_leap year =\n  year mod 4 = 0 && (year mod 100 <> 0 || year mod 400 = 0)\nval is_leap : int -> bool = <fun>\n# let leap_years = stream_filter is_leap (count_stream 2000)\nval leap_years : int Stream.t = <abstr>\n```\n\nWe can use the `Stream.npeek` function to look ahead by more than one\nitem. In this case, we'll peek at the next 30 items to make sure that\nthe year 2100 is not a leap year (since it's divisible by 100 but not\n400!):\n\n```ocaml\n# Stream.npeek 30 leap_years\n- : int list =\n[2000; 2004; 2008; 2012; 2016; 2020; 2024; 2028; 2032; 2036; 2040; 2044;\n 2048; 2052; 2056; 2060; 2064; 2068; 2072; 2076; 2080; 2084; 2088; 2092;\n 2096; 2104; 2108; 2112; 2116; 2120]\n```\n\nNote that we must be careful not to use `Stream.iter` on an infinite\nstream like `leap_years`. This applies to `stream_fold`, as well as any\nfunction that attempts to consume the entire stream.\n\n```ocaml\n# stream_fold (+) (Stream.of_list [1; 2; 3]) 0\n- : int = 6\n```\n\n`stream_fold (+) (count_stream 0) 0` runs forever.\n\n## Other useful stream builders\nThe previously defined `const_stream` function builds a stream that\nrepeats a single value. It is also useful to build a stream that repeats\na sequence of values. The following function does just that:\n\n```ocaml\n# let cycle items =\n  let buf = ref [] in\n  let rec next i =\n    if !buf = [] then buf := items;\n    match !buf with\n      | h :: t -> (buf := t; Some h)\n      | [] -> None in\n  Stream.from next\nval cycle : 'a list -> 'a Stream.t = <fun>\n```\n\nOne common task that can benefit from this kind of stream is the\ngeneration of alternating background colors for HTML. By using `cycle`\nwith `stream_combine`, explained in the next section, an infinite stream\nof background colors can be combined with a finite stream of data to\nproduce a sequence of HTML blocks:\n\n```ocaml\n# let stream_combine stream1 stream2 =\n  let rec next i =\n    try Some (Stream.next stream1, Stream.next stream2)\n    with Stream.Failure -> None in\n  Stream.from next\nval stream_combine : 'a Stream.t -> 'b Stream.t -> ('a * 'b) Stream.t = <fun>\n# Stream.iter print_endline\n  (stream_map\n     (fun (bg, s) ->\n        Printf.sprintf \"<div style='background: %s'>%s</div>\" bg s)\n     (stream_combine\n        (cycle [\"#eee\"; \"#fff\"])\n        (Stream.of_list [\"hello\"; \"html\"; \"world\"])))\n<div style='background: #eee'>hello</div>\n<div style='background: #fff'>html</div>\n<div style='background: #eee'>world</div>\n- : unit = ()\n```\nHere is a simple `range` function that produces a sequence of integers:\n\n```ocaml\n# let range ?(start=0) ?(stop=0) ?(step=1) () =\n  let in_range = if step < 0 then (>) else (<) in\n  let current = ref start in\n  let rec next i =\n    if in_range !current stop\n    then let result = !current in (current := !current + step;\n                                   Some result)\n    else None in\n  Stream.from next\nval range : ?start:int -> ?stop:int -> ?step:int -> unit -> int Stream.t =\n  <fun>\n```\n\nThis works just like Python's `xrange` built-in function, providing an\neasy way to produce an assortment of lazy integer sequences by\nspecifying combinations of `start`, `stop`, or `step` values:\n\n```ocaml\n# Stream.npeek 10 (range ~start:5 ~stop:10 ())\n- : int list = [5; 6; 7; 8; 9]\n# Stream.npeek 10 (range ~stop:10 ~step:2 ())\n- : int list = [0; 2; 4; 6; 8]\n# Stream.npeek 10 (range ~start:10 ~step:(-1) ())\n- : int list = [10; 9; 8; 7; 6; 5; 4; 3; 2; 1]\n# Stream.npeek 10 (range ~start:10 ~stop:5 ~step:(-1) ())\n- : int list = [10; 9; 8; 7; 6]\n```\n\n## Combining streams\nThere are several ways to combine streams. One is to produce a stream of\nstreams and then concatenate them into a single stream. The following\nfunction works just like `List.concat`, but instead of turning a list of\nlists into a list, it turns a stream of streams into a stream:\n\n```ocaml\n# let stream_concat streams =\n  let current_stream = ref None in\n  let rec next i =\n    try\n      let stream =\n        match !current_stream with\n        | Some stream -> stream\n        | None ->\n           let stream = Stream.next streams in\n           current_stream := Some stream;\n           stream in\n      try Some (Stream.next stream)\n      with Stream.Failure -> (current_stream := None; next i)\n    with Stream.Failure -> None in\n  Stream.from next\nval stream_concat : 'a Stream.t Stream.t -> 'a Stream.t = <fun>\n```\nHere is a sequence of ranges which are themselves derived from a range,\nconcatenated with `stream_concat` to produce a flattened `int Stream.t`.\n\n```ocaml\n# Stream.npeek 10\n  (stream_concat\n     (stream_map\n        (fun i -> range ~stop:i ())\n        (range ~stop:5 ())))\n- : int list = [0; 0; 1; 0; 1; 2; 0; 1; 2; 3]\n```\n\nAnother way to combine streams is to iterate through them in a pairwise\nfashion:\n\n```ocaml\n# let stream_combine stream1 stream2 =\n  let rec next i =\n    try Some (Stream.next stream1, Stream.next stream2)\n    with Stream.Failure -> None in\n  Stream.from next\nval stream_combine : 'a Stream.t -> 'b Stream.t -> ('a * 'b) Stream.t = <fun>\n```\nThis is useful, for instance, if you have a stream of keys and a stream\nof corresponding values. Iterating through key value pairs is then as\nsimple as:\n\n```ocaml\nStream.iter\n  (fun (key, value) ->\n     (* do something with 'key' and 'value' *)\n     ())\n  (stream_combine key_stream value_stream)\n```\n```mdx-error\nLine 5, characters 21-31:\nError: Unbound value key_stream\n```\nSince `stream_combine` stops as soon as either of its input streams runs\nout, it can be used to combine an infinite stream with a finite one.\nThis provides a neat way to add indexes to a sequence:\n\n```ocaml\n# let items = [\"this\"; \"is\"; \"a\"; \"test\"]\nval items : string list = [\"this\"; \"is\"; \"a\"; \"test\"]\n# Stream.iter\n  (fun (index, value) ->\n     Printf.printf \"%d. %s\\n%!\" index value)\n  (stream_combine (count_stream 1) (Stream.of_list items))\n1. this\n2. is\n3. a\n4. test\n- : unit = ()\n```\n\n## Copying streams\nStreams are destructive; once you discard an item in a stream, it is no\nlonger available unless you save a copy somewhere. What if you want to\nuse the same stream more than once? One way is to create a \"tee\". The\nfollowing function creates two output streams from one input stream,\nintelligently queueing unseen values until they have been produced by\nboth streams:\n\n```ocaml\n# let stream_tee stream =\n  let next self other i =\n    try\n      if Queue.is_empty self\n      then\n        let value = Stream.next stream in\n        Queue.add value other;\n        Some value\n      else\n        Some (Queue.take self)\n    with Stream.Failure -> None in\n  let q1 = Queue.create () in\n  let q2 = Queue.create () in\n  (Stream.from (next q1 q2), Stream.from (next q2 q1))\nval stream_tee : 'a Stream.t -> 'a Stream.t * 'a Stream.t = <fun>\n```\nHere is an example of a stream tee in action:\n\n```ocaml\n# let letters = Stream.of_list ['a'; 'b'; 'c'; 'd'; 'e']\nval letters : char Stream.t = <abstr>\n# let s1, s2 = stream_tee letters\nval s1 : char Stream.t = <abstr>\nval s2 : char Stream.t = <abstr>\n# Stream.next s1\n- : char = 'a'\n# Stream.next s1\n- : char = 'b'\n# Stream.next s2\n- : char = 'a'\n# Stream.next s1\n- : char = 'c'\n# Stream.next s2\n- : char = 'b'\n# Stream.next s2\n- : char = 'c'\n```\n\nAgain, since streams are destructive, you probably want to leave the\noriginal stream alone or you will lose items from the copied streams:\n\n```ocaml\n# Stream.next letters\n- : char = 'd'\n# Stream.next s1\n- : char = 'e'\n# Stream.next s2\n- : char = 'e'\n```\n\n## Converting streams\nHere are a few functions for converting between streams and lists,\narrays, and hash tables. These probably belong in the standard library,\nbut they are simple to define anyhow. Again, beware of infinite streams,\nwhich will cause these functions to hang.\n\n```ocaml\n# let stream_of_list = Stream.of_list\nval stream_of_list : 'a list -> 'a Stream.t = <fun>\n# let list_of_stream stream =\n  let result = ref [] in\n  Stream.iter (fun value -> result := value :: !result) stream;\n  List.rev !result\nval list_of_stream : 'a Stream.t -> 'a list = <fun>\n# let stream_of_array array =\n  Stream.of_list (Array.to_list array)\nval stream_of_array : 'a array -> 'a Stream.t = <fun>\n# let array_of_stream stream =\n  Array.of_list (list_of_stream stream)\nval array_of_stream : 'a Stream.t -> 'a array = <fun>\n# let stream_of_hash hash =\n  let result = ref [] in\n  Hashtbl.iter\n    (fun key value -> result := (key, value) :: !result)\n    hash;\n  Stream.of_list !result\nval stream_of_hash : ('a, 'b) Hashtbl.t -> ('a * 'b) Stream.t = <fun>\n# let hash_of_stream stream =\n  let result = Hashtbl.create 0 in\n  Stream.iter\n    (fun (key, value) -> Hashtbl.replace result key value)\n    stream;\n  result\nval hash_of_stream : ('a * 'b) Stream.t -> ('a, 'b) Hashtbl.t = <fun>\n```\n\nWhat if you want to convert arbitrary data types to streams? Well, if the\ndata type defines an `iter` function, and you don't mind using threads,\nyou can use a producer-consumer arrangement to invert control:\n\n```ocaml\n# #directory \"+threads\";;\n# #load \"threads.cma\";;\n# let elements iter coll =\n  let channel = Event.new_channel () in\n  let producer () =\n    let () =\n      iter (fun x -> Event.sync (Event.send channel (Some x))) coll in\n    Event.sync (Event.send channel None) in\n  let consumer i =\n    Event.sync (Event.receive channel) in\n  ignore (Thread.create producer ());\n  Stream.from consumer\nval elements : (('a -> unit) -> 'b -> unit) -> 'b -> 'a Stream.t = <fun>\n```\n\nNow it is possible to build a stream from an `iter` function and a\ncorresponding value:\n\n```ocaml\n# module StringSet = Set.Make(String)\nmodule StringSet :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -> bool\n    val mem : elt -> t -> bool\n    val add : elt -> t -> t\n    val singleton : elt -> t\n    val remove : elt -> t -> t\n    val union : t -> t -> t\n    val inter : t -> t -> t\n    val disjoint : t -> t -> bool\n    val diff : t -> t -> t\n    val compare : t -> t -> int\n    val equal : t -> t -> bool\n    val subset : t -> t -> bool\n    val iter : (elt -> unit) -> t -> unit\n    val map : (elt -> elt) -> t -> t\n    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a\n    val for_all : (elt -> bool) -> t -> bool\n    val exists : (elt -> bool) -> t -> bool\n    val filter : (elt -> bool) -> t -> t\n    val partition : (elt -> bool) -> t -> t * t\n    val cardinal : t -> int\n    val elements : t -> elt list\n    val min_elt : t -> elt\n    val min_elt_opt : t -> elt option\n    val max_elt : t -> elt\n    val max_elt_opt : t -> elt option\n    val choose : t -> elt\n    val choose_opt : t -> elt option\n    val split : elt -> t -> t * bool * t\n    val find : elt -> t -> elt\n    val find_opt : elt -> t -> elt option\n    val find_first : (elt -> bool) -> t -> elt\n    val find_first_opt : (elt -> bool) -> t -> elt option\n    val find_last : (elt -> bool) -> t -> elt\n    val find_last_opt : (elt -> bool) -> t -> elt option\n    val of_list : elt list -> t\n    val to_seq_from : elt -> t -> elt Seq.t\n    val to_seq : t -> elt Seq.t\n    val add_seq : elt Seq.t -> t -> t\n    val of_seq : elt Seq.t -> t\n  end\n# let set = StringSet.empty\nval set : StringSet.t = <abstr>\n# let set = StringSet.add \"here\" set\nval set : StringSet.t = <abstr>\n# let set = StringSet.add \"are\" set\nval set : StringSet.t = <abstr>\n# let set = StringSet.add \"some\" set\nval set : StringSet.t = <abstr>\n# let set = StringSet.add \"values\" set\nval set : StringSet.t = <abstr>\n# let stream = elements StringSet.iter set\nval stream : string Stream.t = <abstr>\n# Stream.iter print_endline stream\nare\nhere\nsome\nvalues\n- : unit = ()\n```\n\nSome data types, like Hashtbl and Map, provide an `iter` function that\niterates through key-value pairs. Here's a function for those, too:\n\n```ocaml\n# let items iter coll =\n  let channel = Event.new_channel () in\n  let producer () =\n    let () =\n      iter (fun k v ->\n              Event.sync (Event.send channel (Some (k, v)))) coll in\n    Event.sync (Event.send channel None) in\n  let consumer i =\n    Event.sync (Event.receive channel) in\n  ignore (Thread.create producer ());\n  Stream.from consumer\nval items : (('a -> 'b -> unit) -> 'c -> unit) -> 'c -> ('a * 'b) Stream.t =\n  <fun>\n```\n\nIf we want just the keys, or just the values, it is simple to transform\nthe output of `items` using `stream_map`:\n\n```ocaml\n# let keys iter coll = stream_map (fun (k, v) -> k) (items iter coll)\nval keys : (('a -> 'b -> unit) -> 'c -> unit) -> 'c -> 'a Stream.t = <fun>\n# let values iter coll = stream_map (fun (k, v) -> v) (items iter coll)\nval values : (('a -> 'b -> unit) -> 'c -> unit) -> 'c -> 'b Stream.t = <fun>\n```\n\nKeep in mind that these techniques spawn producer threads which carry a\nfew risks: they only terminate when they have finished iterating, and\nany change to the original data structure while iterating may produce\nunexpected results.\n\n## Other built-in Stream functions\nThere are a few other documented methods in the `Stream` module:\n\n* Stream.empty, which raises `Stream.Failure` unless a stream is empty\n* Stream.count, which returns the stream count (number of discarded\n elements)\n\nIn addition, there are a few undocumented functions: `iapp`, `icons`,\n`ising`, `lapp`, `lcons`, `lsing`, `sempty`, `slazy`, and `dump`. They\nare visible in the interface with the caveat: \"For system use only, not\nfor the casual user\".\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#constructing-streams\">Constructing streams</a>\n</li>\n<li><a href=\"#deconstructing-streams\">Deconstructing streams</a>\n</li>\n<li><a href=\"#a-more-complex-streamfrom-example\">A more complex <code>Stream.from</code> example</a>\n</li>\n<li><a href=\"#stream-combinators\">Stream combinators</a>\n</li>\n<li><a href=\"#other-useful-stream-builders\">Other useful stream builders</a>\n</li>\n<li><a href=\"#combining-streams\">Combining streams</a>\n</li>\n<li><a href=\"#copying-streams\">Copying streams</a>\n</li>\n<li><a href=\"#converting-streams\">Converting streams</a>\n</li>\n<li><a href=\"#other-built-in-stream-functions\">Other built-in Stream functions</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>Suppose you need to process each line of a text file. One way to do this\nis to read the file in as a single large string and use something like\n<code>Str.split</code> to turn it into a list. This works when the file is small,\nbut because the entire file is loaded into memory, it does not scale\nwell when the file is large.</p>\n<p>More commonly, the <code>input_line</code> function can be used to read one line at\na time from a channel. This typically looks like:</p>\n<pre><code class=\"language-ocaml\">let in_channel = open_in &quot;lines.txt&quot; in\ntry\n  while true do\n    let line = input_line in_channel in\n    (* do something with line *)\n  done\nwith End_of_file -&gt;\n  close_in in_channel\n</code></pre>\n<pre><code class=\"language-mdx-error\">Line 6, characters 5-9:\nError: Syntax error\n</code></pre>\n<p>The above code is efficient with memory, but it can be inconvenient in\nother ways. Since <code>input_line</code> only works with the <code>in_channel</code> type, it\ncannot be reused in cases where the text is already in memory. The\n<code>End_of_file</code> exception can be raised at any point during iteration, and\nit is the programmer's responsibility to ensure that the file is closed\nappropriately. In fact, if there is any other exception in the above\nexample, the file will not be closed at all. Altogether, there is a lot\ngoing on: channels, I/O, exceptions, and files.</p>\n<p>Streams offer an abstraction over one part of this process: reading\nitems from a sequence. They don't assume anything about files or\nchannels, and they replace the <code>End_of_file</code> exception with a more\nstructured approach to dealing with the end of input. Here is a function\nthat builds a stream of lines from an input channel:</p>\n<pre><code class=\"language-ocaml\"># let line_stream_of_channel channel =\n  Stream.from\n    (fun _ -&gt;\n       try Some (input_line channel) with End_of_file -&gt; None)\nval line_stream_of_channel : in_channel -&gt; string Stream.t = &lt;fun&gt;\n</code></pre>\n<p>The &quot;Stream.from&quot; function builds a stream from a callback function.\nThis function is passed the current stream count (starting with 0) as an\nargument and is expected to return an <code>'a option</code>. If the option has a\nvalue (<code>Some x</code>), that value will be the next item in the stream. If it\nhas no value (<code>None</code>), this indicates that the stream is empty and no\nfurther reads will be attempted. Since the option is polymorphic,\n<code>Stream.from</code> can construct streams of any type. These streams have a\ntype of <code>'a Stream.t</code>.</p>\n<p>With this simple function, we can now easily construct line streams from\nany input channel:</p>\n<pre><code class=\"language-ocaml\"># let in_channel = open_in &quot;019_streams.md&quot;\nval in_channel : in_channel = &lt;abstr&gt;\n# let lines = line_stream_of_channel in_channel\nval lines : string Stream.t = &lt;abstr&gt;\n</code></pre>\n<p>This variable <code>lines</code> is a stream of strings, one string per line. We\ncan now begin reading lines from it by passing it to <code>Stream.next</code>:</p>\n<pre><code class=\"language-ocaml\"># Stream.next lines\n- : string = &quot;---&quot;\n# Stream.next lines\n- : string = &quot;title: Streams&quot;\n# Stream.next lines\n- : string = &quot;description: &gt;&quot;\n# Stream.next lines\n- : string =\n&quot;  Streams offer an abstraction over consuming items from sequences&quot;\n# while true do ignore(Stream.next lines) done\nException: Stdlib.Stream.Failure.\n</code></pre>\n<p>As you can see, <code>Stream.next</code> either returns the next item in the stream\nor raises a <code>Stream.Failure</code> exception indicating that the stream is\nempty. Likewise, with a little help from the <code>Stream.of_list</code>\nconstructor and the <code>Str</code> regular expression module, we could build a\nstream of lines from a string in memory:</p>\n<pre><code class=\"language-ocaml\"># #load &quot;str.cma&quot;\n# let line_stream_of_string string =\n  Stream.of_list (Str.split (Str.regexp &quot;\\n&quot;) string)\nval line_stream_of_string : string -&gt; string Stream.t = &lt;fun&gt;\n</code></pre>\n<p>and these streams could be used exactly the same way:</p>\n<pre><code class=\"language-ocaml\"># let lines = line_stream_of_string &quot;hello\\nstream\\nworld&quot;\nval lines : string Stream.t = &lt;abstr&gt;\n# Stream.next lines\n- : string = &quot;hello&quot;\n# Stream.next lines\n- : string = &quot;stream&quot;\n# Stream.next lines\n- : string = &quot;world&quot;\n# Stream.next lines\nException: Stdlib.Stream.Failure.\n</code></pre>\n<p>Since both cases raise <code>Stream.Failure</code> on an empty stream, there is no\nneed to worry about catching <code>End_of_file</code> in the case of file I/O. This\nunified interface makes it much easier to write functions that can\nreceive data from multiple sources.</p>\n<p>The <code>Stream.iter</code> function automates the common task of performing an\noperation for each item. With it, we can rewrite the original example as\nfollows:</p>\n<pre><code class=\"language-ocaml\">let in_channel = open_in &quot;019_streams.md&quot; in\ntry\n  Stream.iter\n    (fun line -&gt;\n       (* do something with line *)\n       print_endline line)\n    (line_stream_of_channel in_channel);\n  close_in in_channel\nwith e -&gt;\n  close_in in_channel;\n  raise e\n</code></pre>\n<p>Note how much easier it is to handle I/O exceptions properly, since we\ncan deal with them independently from the end-of-file condition. This\nseparation of concerns allows us to decompose this into simpler and more\nreusable functions:</p>\n<pre><code class=\"language-ocaml\"># let process_line line =\n  print_endline line\nval process_line : string -&gt; unit = &lt;fun&gt;\n\n# let process_lines lines =\n  Stream.iter process_line lines\nval process_lines : string Stream.t -&gt; unit = &lt;fun&gt;\n\n# let process_file filename =\n  let in_channel = open_in filename in\n  try\n    process_lines (line_stream_of_channel in_channel);\n    close_in in_channel\n  with e -&gt;\n    close_in in_channel;\n    raise e\nval process_file : string -&gt; unit = &lt;fun&gt;\n\n# let process_string string =\n  process_lines (line_stream_of_string string)\nval process_string : string -&gt; unit = &lt;fun&gt;\n</code></pre>\n<h2 id=\"constructing-streams\">Constructing streams</h2>\n<p>In the above examples, we saw two methods for constructing streams:</p>\n<ul>\n<li>Stream.from, which builds a stream from a callback function\n</li>\n<li>Stream.of_list, which builds a stream from a list in memory\n</li>\n</ul>\n<p>The <code>Stream</code> module provides a few other stream builders:</p>\n<ul>\n<li>Stream.of_string, which builds a character stream from a string\n</li>\n<li>Stream.of_channel, which builds a character stream from a channel\n</li>\n</ul>\n<p><code>Stream.from</code> is the most general, and it can be used to produce streams\nof any type. It is not limited to I/O and can even produce infinite\nsequences. Here are a few simple stream builders defined with\n<code>Stream.from</code>:</p>\n<pre><code class=\"language-ocaml\"># let empty_stream () = Stream.from (fun _ -&gt; None)\nval empty_stream : unit -&gt; 'a Stream.t = &lt;fun&gt;\n# let const_stream k = Stream.from (fun _ -&gt; Some k)\nval const_stream : 'a -&gt; 'a Stream.t = &lt;fun&gt;\n# let count_stream i = Stream.from (fun j -&gt; Some (i + j))\nval count_stream : int -&gt; int Stream.t = &lt;fun&gt;\n</code></pre>\n<h2 id=\"deconstructing-streams\">Deconstructing streams</h2>\n<p>We already saw the <code>Stream.next</code> function, which retrieves a single item\nfrom a stream. There is another way to work with streams that is often\npreferable: <code>Stream.peek</code> and <code>Stream.junk</code>. When used together, these\nfunctions allow you to see what the next item would be. This feature,\nknown as &quot;look ahead&quot;, is very useful when writing parsers. Even if you\ndon't need to look ahead, the peek/junk protocol may be nicer to work\nwith because it uses options instead of exceptions:</p>\n<pre><code class=\"language-ocaml\"># let lines = line_stream_of_string &quot;hello\\nworld&quot;\nval lines : string Stream.t = &lt;abstr&gt;\n# Stream.peek lines\n- : string option = Some &quot;hello&quot;\n# Stream.peek lines\n- : string option = Some &quot;hello&quot;\n# Stream.junk lines\n- : unit = ()\n# Stream.peek lines\n- : string option = Some &quot;world&quot;\n# Stream.junk lines\n- : unit = ()\n# Stream.peek lines\n- : string option = None\n</code></pre>\n<p>As you can see, it is necessary to call <code>Stream.junk</code> to advance to the\nnext item. <code>Stream.peek</code> will always give you either the next item or\n<code>None</code>, and it will never fail. Likewise, <code>Stream.junk</code> always succeeds\n(even if the stream is empty).</p>\n<h2 id=\"a-more-complex-streamfrom-example\">A more complex <code>Stream.from</code> example</h2>\n<p>Here is a function that converts a line stream into a paragraph stream.\nAs such, it is both a stream consumer and a stream producer.</p>\n<pre><code class=\"language-ocaml\"># let paragraphs lines =\n  let rec next para_lines i =\n    match Stream.peek lines, para_lines with\n    | None, [] -&gt; None\n    | Some &quot;&quot;, [] -&gt;\n        Stream.junk lines;\n        next para_lines i\n    | Some &quot;&quot;, _ | None, _ -&gt;\n        Some (String.concat &quot;\\n&quot; (List.rev para_lines))\n    | Some line, _ -&gt;\n        Stream.junk lines;\n        next (line :: para_lines) i in\n  Stream.from (next [])\nval paragraphs : string Stream.t -&gt; string Stream.t = &lt;fun&gt;\n</code></pre>\n<p>This function uses an extra parameter to <code>next</code> (the <code>Stream.from</code>\ncallback) called <code>para_lines</code> in order to collect the lines for each\nparagraph. Paragraphs are delimited by any number of blank lines.</p>\n<p>Each time <code>next</code> is called, a <code>match</code> expression tests two values: the\nnext line in the stream, and the contents of <code>para_lines</code>. Four cases\nare handled:</p>\n<ol>\n<li>If the end of the stream is reached and no lines have been\ncollected, the paragraph stream ends as well.\n</li>\n<li>If the next line is blank and no lines have been collected, the\nblank is ignored and <code>next</code> is called recursively to keep looking\nfor a non-blank line.\n</li>\n<li>If a blank line or end of stream is reached and lines <strong>have</strong> been\ncollected, the paragraph is returned by concatenating <code>para_lines</code>\nto a single string.\n</li>\n<li>Finally, if a non-blank line has been reached, the line is collected\nby recursively calling <code>para_lines</code>.\n</li>\n</ol>\n<p>Happily, we can rely on the OCaml compiler's exhaustiveness checking to\nensure that we are handling all possible cases.</p>\n<p>With this new tool, we can now work just as easily with paragraphs as we\ncould before with lines:</p>\n<pre><code class=\"language-ocaml\">(* Print each paragraph, followed by a separator. *)\nlet lines = line_stream_of_channel in_channel in\nStream.iter\n  (fun para -&gt;\n     print_endline para;\n     print_endline &quot;--&quot;)\n  (paragraphs lines)\n</code></pre>\n<p>Functions like <code>paragraphs</code> that produce and consume streams can be\ncomposed together in a manner very similar to UNIX pipes and filters.</p>\n<h2 id=\"stream-combinators\">Stream combinators</h2>\n<p>Just like lists and arrays, common iteration patterns such as <code>map</code>,\n<code>filter</code>, and <code>fold</code> can be very useful. The <code>Stream</code> module does not\nprovide such functions, but they can be built easily using\n<code>Stream.from</code>:</p>\n<pre><code class=\"language-ocaml\"># let stream_map f stream =\n  let rec next i =\n    try Some (f (Stream.next stream))\n    with Stream.Failure -&gt; None in\n  Stream.from next\nval stream_map : ('a -&gt; 'b) -&gt; 'a Stream.t -&gt; 'b Stream.t = &lt;fun&gt;\n\n# let stream_filter p stream =\n  let rec next i =\n    try\n      let value = Stream.next stream in\n      if p value then Some value else next i\n    with Stream.Failure -&gt; None in\n  Stream.from next\nval stream_filter : ('a -&gt; bool) -&gt; 'a Stream.t -&gt; 'a Stream.t = &lt;fun&gt;\n\n# let stream_fold f stream init =\n  let result = ref init in\n  Stream.iter\n    (fun x -&gt; result := f x !result)\n    stream;\n  !result\nval stream_fold : ('a -&gt; 'b -&gt; 'b) -&gt; 'a Stream.t -&gt; 'b -&gt; 'b = &lt;fun&gt;\n</code></pre>\n<p>For example, here is a stream of leap years starting with 2000:</p>\n<pre><code class=\"language-ocaml\"># let is_leap year =\n  year mod 4 = 0 &amp;&amp; (year mod 100 &lt;&gt; 0 || year mod 400 = 0)\nval is_leap : int -&gt; bool = &lt;fun&gt;\n# let leap_years = stream_filter is_leap (count_stream 2000)\nval leap_years : int Stream.t = &lt;abstr&gt;\n</code></pre>\n<p>We can use the <code>Stream.npeek</code> function to look ahead by more than one\nitem. In this case, we'll peek at the next 30 items to make sure that\nthe year 2100 is not a leap year (since it's divisible by 100 but not\n400!):</p>\n<pre><code class=\"language-ocaml\"># Stream.npeek 30 leap_years\n- : int list =\n[2000; 2004; 2008; 2012; 2016; 2020; 2024; 2028; 2032; 2036; 2040; 2044;\n 2048; 2052; 2056; 2060; 2064; 2068; 2072; 2076; 2080; 2084; 2088; 2092;\n 2096; 2104; 2108; 2112; 2116; 2120]\n</code></pre>\n<p>Note that we must be careful not to use <code>Stream.iter</code> on an infinite\nstream like <code>leap_years</code>. This applies to <code>stream_fold</code>, as well as any\nfunction that attempts to consume the entire stream.</p>\n<pre><code class=\"language-ocaml\"># stream_fold (+) (Stream.of_list [1; 2; 3]) 0\n- : int = 6\n</code></pre>\n<p><code>stream_fold (+) (count_stream 0) 0</code> runs forever.</p>\n<h2 id=\"other-useful-stream-builders\">Other useful stream builders</h2>\n<p>The previously defined <code>const_stream</code> function builds a stream that\nrepeats a single value. It is also useful to build a stream that repeats\na sequence of values. The following function does just that:</p>\n<pre><code class=\"language-ocaml\"># let cycle items =\n  let buf = ref [] in\n  let rec next i =\n    if !buf = [] then buf := items;\n    match !buf with\n      | h :: t -&gt; (buf := t; Some h)\n      | [] -&gt; None in\n  Stream.from next\nval cycle : 'a list -&gt; 'a Stream.t = &lt;fun&gt;\n</code></pre>\n<p>One common task that can benefit from this kind of stream is the\ngeneration of alternating background colors for HTML. By using <code>cycle</code>\nwith <code>stream_combine</code>, explained in the next section, an infinite stream\nof background colors can be combined with a finite stream of data to\nproduce a sequence of HTML blocks:</p>\n<pre><code class=\"language-ocaml\"># let stream_combine stream1 stream2 =\n  let rec next i =\n    try Some (Stream.next stream1, Stream.next stream2)\n    with Stream.Failure -&gt; None in\n  Stream.from next\nval stream_combine : 'a Stream.t -&gt; 'b Stream.t -&gt; ('a * 'b) Stream.t = &lt;fun&gt;\n# Stream.iter print_endline\n  (stream_map\n     (fun (bg, s) -&gt;\n        Printf.sprintf &quot;&lt;div style='background: %s'&gt;%s&lt;/div&gt;&quot; bg s)\n     (stream_combine\n        (cycle [&quot;#eee&quot;; &quot;#fff&quot;])\n        (Stream.of_list [&quot;hello&quot;; &quot;html&quot;; &quot;world&quot;])))\n&lt;div style='background: #eee'&gt;hello&lt;/div&gt;\n&lt;div style='background: #fff'&gt;html&lt;/div&gt;\n&lt;div style='background: #eee'&gt;world&lt;/div&gt;\n- : unit = ()\n</code></pre>\n<p>Here is a simple <code>range</code> function that produces a sequence of integers:</p>\n<pre><code class=\"language-ocaml\"># let range ?(start=0) ?(stop=0) ?(step=1) () =\n  let in_range = if step &lt; 0 then (&gt;) else (&lt;) in\n  let current = ref start in\n  let rec next i =\n    if in_range !current stop\n    then let result = !current in (current := !current + step;\n                                   Some result)\n    else None in\n  Stream.from next\nval range : ?start:int -&gt; ?stop:int -&gt; ?step:int -&gt; unit -&gt; int Stream.t =\n  &lt;fun&gt;\n</code></pre>\n<p>This works just like Python's <code>xrange</code> built-in function, providing an\neasy way to produce an assortment of lazy integer sequences by\nspecifying combinations of <code>start</code>, <code>stop</code>, or <code>step</code> values:</p>\n<pre><code class=\"language-ocaml\"># Stream.npeek 10 (range ~start:5 ~stop:10 ())\n- : int list = [5; 6; 7; 8; 9]\n# Stream.npeek 10 (range ~stop:10 ~step:2 ())\n- : int list = [0; 2; 4; 6; 8]\n# Stream.npeek 10 (range ~start:10 ~step:(-1) ())\n- : int list = [10; 9; 8; 7; 6; 5; 4; 3; 2; 1]\n# Stream.npeek 10 (range ~start:10 ~stop:5 ~step:(-1) ())\n- : int list = [10; 9; 8; 7; 6]\n</code></pre>\n<h2 id=\"combining-streams\">Combining streams</h2>\n<p>There are several ways to combine streams. One is to produce a stream of\nstreams and then concatenate them into a single stream. The following\nfunction works just like <code>List.concat</code>, but instead of turning a list of\nlists into a list, it turns a stream of streams into a stream:</p>\n<pre><code class=\"language-ocaml\"># let stream_concat streams =\n  let current_stream = ref None in\n  let rec next i =\n    try\n      let stream =\n        match !current_stream with\n        | Some stream -&gt; stream\n        | None -&gt;\n           let stream = Stream.next streams in\n           current_stream := Some stream;\n           stream in\n      try Some (Stream.next stream)\n      with Stream.Failure -&gt; (current_stream := None; next i)\n    with Stream.Failure -&gt; None in\n  Stream.from next\nval stream_concat : 'a Stream.t Stream.t -&gt; 'a Stream.t = &lt;fun&gt;\n</code></pre>\n<p>Here is a sequence of ranges which are themselves derived from a range,\nconcatenated with <code>stream_concat</code> to produce a flattened <code>int Stream.t</code>.</p>\n<pre><code class=\"language-ocaml\"># Stream.npeek 10\n  (stream_concat\n     (stream_map\n        (fun i -&gt; range ~stop:i ())\n        (range ~stop:5 ())))\n- : int list = [0; 0; 1; 0; 1; 2; 0; 1; 2; 3]\n</code></pre>\n<p>Another way to combine streams is to iterate through them in a pairwise\nfashion:</p>\n<pre><code class=\"language-ocaml\"># let stream_combine stream1 stream2 =\n  let rec next i =\n    try Some (Stream.next stream1, Stream.next stream2)\n    with Stream.Failure -&gt; None in\n  Stream.from next\nval stream_combine : 'a Stream.t -&gt; 'b Stream.t -&gt; ('a * 'b) Stream.t = &lt;fun&gt;\n</code></pre>\n<p>This is useful, for instance, if you have a stream of keys and a stream\nof corresponding values. Iterating through key value pairs is then as\nsimple as:</p>\n<pre><code class=\"language-ocaml\">Stream.iter\n  (fun (key, value) -&gt;\n     (* do something with 'key' and 'value' *)\n     ())\n  (stream_combine key_stream value_stream)\n</code></pre>\n<pre><code class=\"language-mdx-error\">Line 5, characters 21-31:\nError: Unbound value key_stream\n</code></pre>\n<p>Since <code>stream_combine</code> stops as soon as either of its input streams runs\nout, it can be used to combine an infinite stream with a finite one.\nThis provides a neat way to add indexes to a sequence:</p>\n<pre><code class=\"language-ocaml\"># let items = [&quot;this&quot;; &quot;is&quot;; &quot;a&quot;; &quot;test&quot;]\nval items : string list = [&quot;this&quot;; &quot;is&quot;; &quot;a&quot;; &quot;test&quot;]\n# Stream.iter\n  (fun (index, value) -&gt;\n     Printf.printf &quot;%d. %s\\n%!&quot; index value)\n  (stream_combine (count_stream 1) (Stream.of_list items))\n1. this\n2. is\n3. a\n4. test\n- : unit = ()\n</code></pre>\n<h2 id=\"copying-streams\">Copying streams</h2>\n<p>Streams are destructive; once you discard an item in a stream, it is no\nlonger available unless you save a copy somewhere. What if you want to\nuse the same stream more than once? One way is to create a &quot;tee&quot;. The\nfollowing function creates two output streams from one input stream,\nintelligently queueing unseen values until they have been produced by\nboth streams:</p>\n<pre><code class=\"language-ocaml\"># let stream_tee stream =\n  let next self other i =\n    try\n      if Queue.is_empty self\n      then\n        let value = Stream.next stream in\n        Queue.add value other;\n        Some value\n      else\n        Some (Queue.take self)\n    with Stream.Failure -&gt; None in\n  let q1 = Queue.create () in\n  let q2 = Queue.create () in\n  (Stream.from (next q1 q2), Stream.from (next q2 q1))\nval stream_tee : 'a Stream.t -&gt; 'a Stream.t * 'a Stream.t = &lt;fun&gt;\n</code></pre>\n<p>Here is an example of a stream tee in action:</p>\n<pre><code class=\"language-ocaml\"># let letters = Stream.of_list ['a'; 'b'; 'c'; 'd'; 'e']\nval letters : char Stream.t = &lt;abstr&gt;\n# let s1, s2 = stream_tee letters\nval s1 : char Stream.t = &lt;abstr&gt;\nval s2 : char Stream.t = &lt;abstr&gt;\n# Stream.next s1\n- : char = 'a'\n# Stream.next s1\n- : char = 'b'\n# Stream.next s2\n- : char = 'a'\n# Stream.next s1\n- : char = 'c'\n# Stream.next s2\n- : char = 'b'\n# Stream.next s2\n- : char = 'c'\n</code></pre>\n<p>Again, since streams are destructive, you probably want to leave the\noriginal stream alone or you will lose items from the copied streams:</p>\n<pre><code class=\"language-ocaml\"># Stream.next letters\n- : char = 'd'\n# Stream.next s1\n- : char = 'e'\n# Stream.next s2\n- : char = 'e'\n</code></pre>\n<h2 id=\"converting-streams\">Converting streams</h2>\n<p>Here are a few functions for converting between streams and lists,\narrays, and hash tables. These probably belong in the standard library,\nbut they are simple to define anyhow. Again, beware of infinite streams,\nwhich will cause these functions to hang.</p>\n<pre><code class=\"language-ocaml\"># let stream_of_list = Stream.of_list\nval stream_of_list : 'a list -&gt; 'a Stream.t = &lt;fun&gt;\n# let list_of_stream stream =\n  let result = ref [] in\n  Stream.iter (fun value -&gt; result := value :: !result) stream;\n  List.rev !result\nval list_of_stream : 'a Stream.t -&gt; 'a list = &lt;fun&gt;\n# let stream_of_array array =\n  Stream.of_list (Array.to_list array)\nval stream_of_array : 'a array -&gt; 'a Stream.t = &lt;fun&gt;\n# let array_of_stream stream =\n  Array.of_list (list_of_stream stream)\nval array_of_stream : 'a Stream.t -&gt; 'a array = &lt;fun&gt;\n# let stream_of_hash hash =\n  let result = ref [] in\n  Hashtbl.iter\n    (fun key value -&gt; result := (key, value) :: !result)\n    hash;\n  Stream.of_list !result\nval stream_of_hash : ('a, 'b) Hashtbl.t -&gt; ('a * 'b) Stream.t = &lt;fun&gt;\n# let hash_of_stream stream =\n  let result = Hashtbl.create 0 in\n  Stream.iter\n    (fun (key, value) -&gt; Hashtbl.replace result key value)\n    stream;\n  result\nval hash_of_stream : ('a * 'b) Stream.t -&gt; ('a, 'b) Hashtbl.t = &lt;fun&gt;\n</code></pre>\n<p>What if you want to convert arbitrary data types to streams? Well, if the\ndata type defines an <code>iter</code> function, and you don't mind using threads,\nyou can use a producer-consumer arrangement to invert control:</p>\n<pre><code class=\"language-ocaml\"># #directory &quot;+threads&quot;;;\n# #load &quot;threads.cma&quot;;;\n# let elements iter coll =\n  let channel = Event.new_channel () in\n  let producer () =\n    let () =\n      iter (fun x -&gt; Event.sync (Event.send channel (Some x))) coll in\n    Event.sync (Event.send channel None) in\n  let consumer i =\n    Event.sync (Event.receive channel) in\n  ignore (Thread.create producer ());\n  Stream.from consumer\nval elements : (('a -&gt; unit) -&gt; 'b -&gt; unit) -&gt; 'b -&gt; 'a Stream.t = &lt;fun&gt;\n</code></pre>\n<p>Now it is possible to build a stream from an <code>iter</code> function and a\ncorresponding value:</p>\n<pre><code class=\"language-ocaml\"># module StringSet = Set.Make(String)\nmodule StringSet :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -&gt; bool\n    val mem : elt -&gt; t -&gt; bool\n    val add : elt -&gt; t -&gt; t\n    val singleton : elt -&gt; t\n    val remove : elt -&gt; t -&gt; t\n    val union : t -&gt; t -&gt; t\n    val inter : t -&gt; t -&gt; t\n    val disjoint : t -&gt; t -&gt; bool\n    val diff : t -&gt; t -&gt; t\n    val compare : t -&gt; t -&gt; int\n    val equal : t -&gt; t -&gt; bool\n    val subset : t -&gt; t -&gt; bool\n    val iter : (elt -&gt; unit) -&gt; t -&gt; unit\n    val map : (elt -&gt; elt) -&gt; t -&gt; t\n    val fold : (elt -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a\n    val for_all : (elt -&gt; bool) -&gt; t -&gt; bool\n    val exists : (elt -&gt; bool) -&gt; t -&gt; bool\n    val filter : (elt -&gt; bool) -&gt; t -&gt; t\n    val partition : (elt -&gt; bool) -&gt; t -&gt; t * t\n    val cardinal : t -&gt; int\n    val elements : t -&gt; elt list\n    val min_elt : t -&gt; elt\n    val min_elt_opt : t -&gt; elt option\n    val max_elt : t -&gt; elt\n    val max_elt_opt : t -&gt; elt option\n    val choose : t -&gt; elt\n    val choose_opt : t -&gt; elt option\n    val split : elt -&gt; t -&gt; t * bool * t\n    val find : elt -&gt; t -&gt; elt\n    val find_opt : elt -&gt; t -&gt; elt option\n    val find_first : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_first_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val find_last : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_last_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val of_list : elt list -&gt; t\n    val to_seq_from : elt -&gt; t -&gt; elt Seq.t\n    val to_seq : t -&gt; elt Seq.t\n    val add_seq : elt Seq.t -&gt; t -&gt; t\n    val of_seq : elt Seq.t -&gt; t\n  end\n# let set = StringSet.empty\nval set : StringSet.t = &lt;abstr&gt;\n# let set = StringSet.add &quot;here&quot; set\nval set : StringSet.t = &lt;abstr&gt;\n# let set = StringSet.add &quot;are&quot; set\nval set : StringSet.t = &lt;abstr&gt;\n# let set = StringSet.add &quot;some&quot; set\nval set : StringSet.t = &lt;abstr&gt;\n# let set = StringSet.add &quot;values&quot; set\nval set : StringSet.t = &lt;abstr&gt;\n# let stream = elements StringSet.iter set\nval stream : string Stream.t = &lt;abstr&gt;\n# Stream.iter print_endline stream\nare\nhere\nsome\nvalues\n- : unit = ()\n</code></pre>\n<p>Some data types, like Hashtbl and Map, provide an <code>iter</code> function that\niterates through key-value pairs. Here's a function for those, too:</p>\n<pre><code class=\"language-ocaml\"># let items iter coll =\n  let channel = Event.new_channel () in\n  let producer () =\n    let () =\n      iter (fun k v -&gt;\n              Event.sync (Event.send channel (Some (k, v)))) coll in\n    Event.sync (Event.send channel None) in\n  let consumer i =\n    Event.sync (Event.receive channel) in\n  ignore (Thread.create producer ());\n  Stream.from consumer\nval items : (('a -&gt; 'b -&gt; unit) -&gt; 'c -&gt; unit) -&gt; 'c -&gt; ('a * 'b) Stream.t =\n  &lt;fun&gt;\n</code></pre>\n<p>If we want just the keys, or just the values, it is simple to transform\nthe output of <code>items</code> using <code>stream_map</code>:</p>\n<pre><code class=\"language-ocaml\"># let keys iter coll = stream_map (fun (k, v) -&gt; k) (items iter coll)\nval keys : (('a -&gt; 'b -&gt; unit) -&gt; 'c -&gt; unit) -&gt; 'c -&gt; 'a Stream.t = &lt;fun&gt;\n# let values iter coll = stream_map (fun (k, v) -&gt; v) (items iter coll)\nval values : (('a -&gt; 'b -&gt; unit) -&gt; 'c -&gt; unit) -&gt; 'c -&gt; 'b Stream.t = &lt;fun&gt;\n</code></pre>\n<p>Keep in mind that these techniques spawn producer threads which carry a\nfew risks: they only terminate when they have finished iterating, and\nany change to the original data structure while iterating may produce\nunexpected results.</p>\n<h2 id=\"other-built-in-stream-functions\">Other built-in Stream functions</h2>\n<p>There are a few other documented methods in the <code>Stream</code> module:</p>\n<ul>\n<li>Stream.empty, which raises <code>Stream.Failure</code> unless a stream is empty\n</li>\n<li>Stream.count, which returns the stream count (number of discarded\nelements)\n</li>\n</ul>\n<p>In addition, there are a few undocumented functions: <code>iapp</code>, <code>icons</code>,\n<code>ising</code>, <code>lapp</code>, <code>lcons</code>, <code>lsing</code>, <code>sempty</code>, <code>slazy</code>, and <code>dump</code>. They\nare visible in the interface with the caveat: &quot;For system use only, not\nfor the casual user&quot;.</p>\n"},{"title":"Format","slug":"format","description":"The Format module of Caml Light and OCaml's standard libraries provides pretty-printing facilities to get a fancy display for printing routines\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"stdlib","tl":{"hd":"common","tl":0}},"users":{"hd":"Intermediate","tl":0},"body_md":"\nThe `Format` module of Caml Light and OCaml's standard libraries\nprovides pretty-printing facilities to get a fancy display for printing\nroutines. This module implements a “pretty-printing engine” that is\nintended to break lines in a nice way (let's say “automatically when it\nis necessary”).\n\n## Principles\nLine breaking is based on three concepts:\n\n* **boxes**: a box is a logical pretty-printing unit, which defines a\n behaviour of the pretty-printing engine to display the material\n inside the box.\n* **break hints**: a break hint is a directive to the pretty-printing\n engine that proposes to break the line here, if it is necessary to\n properly print the rest of the material. Otherwise, the\n pretty-printing engine never break lines (except “in case of\n emergency” to avoid very bad output). In short, a break hint tells\n the pretty printer that a line break here may be appropriate.\n* **Indentation rules**: When a line break occurs, the pretty-printing\n engines fixes the indentation (or amount of leading spaces) of the\n new line using indentation rules, as follows:\n    * A box can state the extra indentation of every new line opened\n in its scope. This extra indentation is named **box breaking\n indentation**.\n    * A break hint can also set the additional indentation of the new\n line it may fire. This extra indentation is named **hint\n breaking indentation**.\n    * If break hint `bh` fires a new line within box `b`, then the\n indentation of the new line is simply the sum of: the current\n indentation of box `b` `+` the additional box breaking\n indentation, as defined by box `b` `+` the additional hint\n breaking indentation, as defined by break hint `bh`.\n\n## Boxes\nThere are 4 types of boxes. (The most often used is the “hov” box type,\nso skip the rest at first reading).\n\n* **horizontal box** (*h* box, as obtained by the `open_hbox`\n procedure): within this box, break hints do not lead to line breaks.\n* **vertical box** (*v* box, as obtained by the `open_vbox`\n procedure): within this box, every break hint lead to a new line.\n* **vertical/horizontal box** (*hv* box, as obtained by the\n `open_hvbox` procedure): if it is possible, the entire box is\n written on a single line; otherwise, every break hint within the box\n leads to a new line.\n* **vertical or horizontal box** (*hov* box, as obtained by the\n open_box or open_hovbox procedures): within this box, break hints\n are used to cut the line when there is no more room on the line.\n There are two kinds of “hov” boxes, you can find the details\n [below](#Refinementonhovboxes). In first approximation, let me consider these\n two kinds of “hov” boxes as equivalent and obtained by calling the\n `open_box` procedure.\n\nLet me give an example. Suppose we can write 10 chars before the right\nmargin (that indicates no more room). We represent any char as a `-`\nsign; characters `[` and `]` indicates the opening and closing of a box\nand `b` stands for a break hint given to the pretty-printing engine.\n\nThe output \"--b--b--\" is displayed like this (the b symbol stands for\nthe value of the break that is explained below):\n\n* within a “h” box:\n\n    ```text\n    --b--b--\n    ```\n\n* within a “v” box:\n\n    ```text\n    --b\n    --b\n    --\n    ```\n\n* within a “hv” box:\n\n    If there is enough room to print the box on the line:\n\n    ```text\n    --b--b--\n    ```\n    But \"---b---b---\" that cannot fit on the line is written\n\n    ```text\n    ---b\n    ---b\n    ---\n    ```\n\n* within a “hov” box:\n\n    If there is enough room to print the box on the line:\n\n    ```text\n    --b--b--\n    ```\n    But if \"---b---b---\" cannot fit on the line, it is written as\n\n    ```text\n    ---b---b\n    ---\n    ```\n    The first break hint does not lead to a new line, since there is\n    enough room on the line. The second one leads to a new line since\n    there is no more room to print the material following it. If the\n    room left on the line were even shorter, the first break hint may\n    lead to a new line and \"---b---b---\" is written as:\n\n    ```text\n    ---b\n    ---b\n    ---\n    ```\n\n\n## Printing spaces\nBreak hints are also used to output spaces (if the line is not split\nwhen the break is encountered, otherwise the new line indicates properly\nthe separation between printing items). You output a break hint using\n`print_break sp indent`, and this `sp` integer is used to print “sp”\nspaces. Thus `print_break sp ...` may be thought as: print `sp` spaces\nor output a new line.\n\nFor instance, if b is `break 1 0` in the output \"--b--b--\", we get\n\n* within a “h” box:\n\n    ```text\n    -- -- --\n    ```\n\n* within a “v” box:\n\n    ```text\n    --\n    --\n    --\n    ```\n\n* within a “hv” box:\n\n    ```text\n    -- -- --\n    ```\n    or, according to the remaining room on the line:\n\n    ```text\n    --\n    --\n    --\n    ```\n\n* and similarly for “hov” boxes.\n\nGenerally speaking, a printing routine using \"format\", should not\ndirectly output white spaces: the routine should use break hints\ninstead. (For instance `print_space ()` that is a convenient\nabbreviation for `print_break 1 0` and outputs a single space or break\nthe line.)\n\n\n## Indentation of new lines\nThe user gets 2 ways to fix the indentation of new lines:\n\n* **when defining the box**: when you open a box, you can fix the\n indentation added to each new line opened within that box.<br />\n For instance: `open_hovbox 1` opens a “hov” box with new lines\n indented 1 more than the initial indentation of the box. With output\n \"---[--b--b--b--\", we get:\n\n    ```text\n    ---[--b--b\n         --b--\n    ```\n    with `open_hovbox 2`, we get\n\n    ```text\n    ---[--b--b\n          --b--\n    ```\n    Note: the `[` sign in the display is not visible on the screen, it\n    is just there to materialise the aperture of the pretty-printing\n    box. Last “screen” stands for:\n\n    ```text\n    -----b--b\n         --b--\n    ```\n\n* **when defining the break that makes the new line**. As said above,\n you output a break hint using `print_break     sp           indent`.\n The `indent` integer is used to fix the additional indentation of\n the new line. Namely, it is added to the default indentation offset\n of the box where the break occurs.<br />\n For instance, if `[` stands for the opening of a “hov” box with 1\n as extra indentation (as obtained by `open_hovbox 1`), and b is\n `print_break       1       2`, then from output \"---[--b--b--b--\",\n we get:\n\n    ```text\n    ---[-- --\n          --\n          --\n    ```\n\n\n## Refinement on “hov” boxes\n###  Packing and structural “hov” boxes\n\nThe “hov” box type is refined into two categories.\n\n* **the vertical or horizontal *packing* box** (as obtained by the\n open_hovbox procedure): break hints are used to cut the line when\n there is no more room on the line; no new line occurs if there is\n enough room on the line.\n* **vertical or horizontal *structural* box** (as obtained by the\n open_box procedure): similar to the “hov” packing box, the break\n hints are used to cut the line when there is no more room on the\n line; in addition, break hints that can show the box structure lead\n to new lines even if there is enough room on the current line.\n\n###  Differences between a packing and a structural “hov” box\nThe difference between a packing and a structural “hov” box is shown by\na routine that closes boxes and parentheses at the end of printing: with\npacking boxes, the closure of boxes and parentheses do not lead to new\nlines if there is enough room on the line, whereas with structural boxes\neach break hint will lead to a new line. For instance, when printing\n`[(---[(----[(---b)]b)]b)]`, where `b` is a break hint without extra\nindentation (`print_cut ()`). If `[` means opening of a packing “hov”\nbox (open_hovbox), `[(---[(----[(---b)]b)]b)]` is printed as follows:\n\n```text\n(---\n (----\n  (---)))\n```\nIf we replace the packing boxes by structural boxes (open_box), each\nbreak hint that precedes a closing parenthesis can show the boxes\nstructure, if it leads to a new line; hence `[(---[(----[(---b)]b)]b)]`\nis printed like this:\n\n```text\n(---\n (----\n  (---\n  )\n )\n)\n```\n\n## Practical advice\n\nWhen writing a pretty-printing routine, follow these simple rules:\n\n1. Boxes must be opened and closed consistently (`open_*` and\n `close_box` must be nested like parentheses).\n1. Never hesitate to open a box.\n1. Output many break hints, otherwise the pretty-printer is in a bad\n situation where it tries to do its best, which is always “worse than\n your bad”.\n1. Do not try to force spacing using explicit spaces in the character\n strings. For each space you want in the output emit a break hint\n (`print_space ()`), unless you explicitly don't want the line to be\n broken here. For instance, imagine you want to pretty print an OCaml\n definition, more precisely a `let rec ident =     expression` value\n definition. You will probably treat the first three spaces as\n “unbreakable spaces” and write them directly in the string constants\n for keywords, and print `\"let rec \"` before the identifier, and\n similarly write ` =` to get an unbreakable space after the\n identifier; in contrast, the space after the `=` sign is certainly a\n break hint, since breaking the line after `=` is a usual (and\n elegant) way to indent the expression part of a definition. In\n short, it is often necessary to print unbreakable spaces; however,\n most of the time a space should be considered a break hint.\n1. Do not try to force new lines, let the pretty-printer do it for you:\n that's its only job. In particular, do not use `force_newline`: this\n procedure effectively leads to a newline, but it also as the\n unfortunate side effect to partially reinitialise the\n pretty-printing engine, so that the rest of the printing material is\n noticeably messed up.\n1. Never put newline characters directly in the strings to be printed:\n pretty printing engine will consider this newline character as any\n other character written on the current line and this will completely\n mess up the output. Instead of new line characters use line break\n hints: if those break hints must always result in new lines, it just\n means that the surrounding box must be a vertical box!\n1. End your main program by a `print_newline ()` call, that flushes the\n pretty-printer tables (hence the output). (Note that the top-level\n loop of the interactive system does it as well, just before a new\n input.)\n\n## Printing to `stdout`: using `printf`\nThe `format` module provides a general printing facility “à la”\n`printf`. In addition to the usual conversion facility provided by\n`printf`, you can write pretty-printing indications directly inside the\nformat string (opening and closing boxes, indicating breaking hints,\netc).\n\nPretty-printing annotations are introduced by the `@` symbol, directly\ninto the string format. Almost any function of the `format` module can\nbe called from within a `printf` format string. For instance\n\n* “`@[`” open a box (`open_box     0`). You may precise the type as an\n extra argument. For instance `@[<hov n>` is equivalent to\n `open_hovbox       n`.\n* “`@]`” close a box (`close_box       ()`).\n* “`@` ” output a breakable space (`print_space ()`).\n* “`@,`” output a break hint (`print_cut       ()`).\n* “`@;<n m>`” emit a “full” break hint (`print_break n m`).\n* “`@.`” end the pretty-printing, closing all the boxes still opened\n (`print_newline ()`).\n\nFor instance\n\n```ocaml\n# Format.printf \"@[<1>%s@ =@ %d@ %s@]@.\" \"Prix TTC\" 100 \"Euros\"\nPrix TTC = 100 Euros\n- : unit = ()\n```\n\n## A concrete example\n\nLet me give a full example: the shortest non trivial example you could\nimagine, that is the λ-calculus. :)\n\nThus the problem is to pretty-print the values of a concrete data type\nthat models a language of expressions that defines functions and their\napplications to arguments.\n\nFirst, I give the abstract syntax of lambda-terms (we illustrate it in\nthe [interactive system](../description.html#Interactivity)):\n\n```ocaml\n# type lambda =\n  | Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\ntype lambda =\n    Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\n```\nI use the format library to print the lambda-terms:\n\n```ocaml\nopen Format\nlet ident = print_string\nlet kwd = print_string\n\nlet rec print_exp0 = function\n  | Var s ->  ident s\n  | lam -> open_hovbox 1; kwd \"(\"; print_lambda lam; kwd \")\"; close_box ()\nand print_app = function\n  | e -> open_hovbox 2; print_other_applications e; close_box ()\nand print_other_applications f =\n  match f with\n  | Apply (f, arg) -> print_app f; print_space (); print_exp0 arg\n  | f -> print_exp0 f\nand print_lambda = function\n  | Lambda (s, lam) ->\n      open_hovbox 1;\n      kwd \"\\\\\"; ident s; kwd \".\"; print_space(); print_lambda lam;\n      close_box()\n  | e -> print_app e\n```\nIn Caml Light, replace the first line by:\n\n<!-- $MDX skip -->\n```ocaml\n#open \"format\";;\n```\n\n###  Most general pretty-printing: using `fprintf`\n\nWe use the `fprintf` function to write the most versatile version of the\npretty-printing functions for lambda-terms. Now, the functions get an\nextra argument, namely a pretty-printing formatter (the `ppf` argument)\nwhere printing will occur. This way the printing routines are more\ngeneral, since they can print on any formatter defined in the program\n(either printing to a file, or to `stdout`, to `stderr`, or even to a\nstring). Furthermore, the pretty-printing functions are now\ncompositional, since they may be used in conjunction with the special\n`%a` conversion, that prints a `fprintf` argument with a user's supplied\nfunction (these user's supplied functions also have a formatter as first\nargument).\n\nUsing `fprintf`, the lambda-terms printing routines can be written as\nfollows:\n\n```ocaml\nopen Format\n\nlet ident ppf s = fprintf ppf \"%s\" s\nlet kwd ppf s = fprintf ppf \"%s\" s\n\nlet rec pr_exp0 ppf = function\n  | Var s -> fprintf ppf \"%a\" ident s\n  | lam -> fprintf ppf \"@[<1>(%a)@]\" pr_lambda lam\nand pr_app ppf e =\n  fprintf ppf \"@[<2>%a@]\" pr_other_applications e\nand pr_other_applications ppf f =\n  match f with\n  | Apply (f, arg) -> fprintf ppf \"%a@ %a\" pr_app f pr_exp0 arg\n  | f -> pr_exp0 ppf f\nand pr_lambda ppf = function\n  | Lambda (s, lam) ->\n     fprintf ppf \"@[<1>%a%a%a@ %a@]\"\n             kwd \"\\\\\" ident s kwd \".\" pr_lambda lam\n  | e -> pr_app ppf e\n```\n\nGiven those general printing routines, procedures to print to `stdout`\nor `stderr` is just a matter of partial application:\n\n```ocaml\nlet print_lambda = pr_lambda std_formatter\nlet eprint_lambda = pr_lambda err_formatter\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#principles\">Principles</a>\n</li>\n<li><a href=\"#boxes\">Boxes</a>\n</li>\n<li><a href=\"#printing-spaces\">Printing spaces</a>\n</li>\n<li><a href=\"#indentation-of-new-lines\">Indentation of new lines</a>\n</li>\n<li><a href=\"#refinement-on-hov-boxes\">Refinement on “hov” boxes</a>\n</li>\n<li><a href=\"#practical-advice\">Practical advice</a>\n</li>\n<li><a href=\"#printing-to-stdout-using-printf\">Printing to <code>stdout</code>: using <code>printf</code></a>\n</li>\n<li><a href=\"#a-concrete-example\">A concrete example</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>The <code>Format</code> module of Caml Light and OCaml's standard libraries\nprovides pretty-printing facilities to get a fancy display for printing\nroutines. This module implements a “pretty-printing engine” that is\nintended to break lines in a nice way (let's say “automatically when it\nis necessary”).</p>\n<h2 id=\"principles\">Principles</h2>\n<p>Line breaking is based on three concepts:</p>\n<ul>\n<li><strong>boxes</strong>: a box is a logical pretty-printing unit, which defines a\nbehaviour of the pretty-printing engine to display the material\ninside the box.\n</li>\n<li><strong>break hints</strong>: a break hint is a directive to the pretty-printing\nengine that proposes to break the line here, if it is necessary to\nproperly print the rest of the material. Otherwise, the\npretty-printing engine never break lines (except “in case of\nemergency” to avoid very bad output). In short, a break hint tells\nthe pretty printer that a line break here may be appropriate.\n</li>\n<li><strong>Indentation rules</strong>: When a line break occurs, the pretty-printing\nengines fixes the indentation (or amount of leading spaces) of the\nnew line using indentation rules, as follows:\n<ul>\n<li>A box can state the extra indentation of every new line opened\nin its scope. This extra indentation is named <strong>box breaking\nindentation</strong>.\n</li>\n<li>A break hint can also set the additional indentation of the new\nline it may fire. This extra indentation is named <strong>hint\nbreaking indentation</strong>.\n</li>\n<li>If break hint <code>bh</code> fires a new line within box <code>b</code>, then the\nindentation of the new line is simply the sum of: the current\nindentation of box <code>b</code> <code>+</code> the additional box breaking\nindentation, as defined by box <code>b</code> <code>+</code> the additional hint\nbreaking indentation, as defined by break hint <code>bh</code>.\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"boxes\">Boxes</h2>\n<p>There are 4 types of boxes. (The most often used is the “hov” box type,\nso skip the rest at first reading).</p>\n<ul>\n<li><strong>horizontal box</strong> (<em>h</em> box, as obtained by the <code>open_hbox</code>\nprocedure): within this box, break hints do not lead to line breaks.\n</li>\n<li><strong>vertical box</strong> (<em>v</em> box, as obtained by the <code>open_vbox</code>\nprocedure): within this box, every break hint lead to a new line.\n</li>\n<li><strong>vertical/horizontal box</strong> (<em>hv</em> box, as obtained by the\n<code>open_hvbox</code> procedure): if it is possible, the entire box is\nwritten on a single line; otherwise, every break hint within the box\nleads to a new line.\n</li>\n<li><strong>vertical or horizontal box</strong> (<em>hov</em> box, as obtained by the\nopen_box or open_hovbox procedures): within this box, break hints\nare used to cut the line when there is no more room on the line.\nThere are two kinds of “hov” boxes, you can find the details\n<a href=\"#Refinementonhovboxes\">below</a>. In first approximation, let me consider these\ntwo kinds of “hov” boxes as equivalent and obtained by calling the\n<code>open_box</code> procedure.\n</li>\n</ul>\n<p>Let me give an example. Suppose we can write 10 chars before the right\nmargin (that indicates no more room). We represent any char as a <code>-</code>\nsign; characters <code>[</code> and <code>]</code> indicates the opening and closing of a box\nand <code>b</code> stands for a break hint given to the pretty-printing engine.</p>\n<p>The output &quot;--b--b--&quot; is displayed like this (the b symbol stands for\nthe value of the break that is explained below):</p>\n<ul>\n<li>\n<p>within a “h” box:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n</li>\n<li>\n<p>within a “v” box:</p>\n<pre><code class=\"language-text\">--b\n--b\n--\n</code></pre>\n</li>\n<li>\n<p>within a “hv” box:</p>\n<p>If there is enough room to print the box on the line:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n<p>But &quot;---b---b---&quot; that cannot fit on the line is written</p>\n<pre><code class=\"language-text\">---b\n---b\n---\n</code></pre>\n</li>\n<li>\n<p>within a “hov” box:</p>\n<p>If there is enough room to print the box on the line:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n<p>But if &quot;---b---b---&quot; cannot fit on the line, it is written as</p>\n<pre><code class=\"language-text\">---b---b\n---\n</code></pre>\n<p>The first break hint does not lead to a new line, since there is\nenough room on the line. The second one leads to a new line since\nthere is no more room to print the material following it. If the\nroom left on the line were even shorter, the first break hint may\nlead to a new line and &quot;---b---b---&quot; is written as:</p>\n<pre><code class=\"language-text\">---b\n---b\n---\n</code></pre>\n</li>\n</ul>\n<h2 id=\"printing-spaces\">Printing spaces</h2>\n<p>Break hints are also used to output spaces (if the line is not split\nwhen the break is encountered, otherwise the new line indicates properly\nthe separation between printing items). You output a break hint using\n<code>print_break sp indent</code>, and this <code>sp</code> integer is used to print “sp”\nspaces. Thus <code>print_break sp ...</code> may be thought as: print <code>sp</code> spaces\nor output a new line.</p>\n<p>For instance, if b is <code>break 1 0</code> in the output &quot;--b--b--&quot;, we get</p>\n<ul>\n<li>\n<p>within a “h” box:</p>\n<pre><code class=\"language-text\">-- -- --\n</code></pre>\n</li>\n<li>\n<p>within a “v” box:</p>\n<pre><code class=\"language-text\">--\n--\n--\n</code></pre>\n</li>\n<li>\n<p>within a “hv” box:</p>\n<pre><code class=\"language-text\">-- -- --\n</code></pre>\n<p>or, according to the remaining room on the line:</p>\n<pre><code class=\"language-text\">--\n--\n--\n</code></pre>\n</li>\n<li>\n<p>and similarly for “hov” boxes.</p>\n</li>\n</ul>\n<p>Generally speaking, a printing routine using &quot;format&quot;, should not\ndirectly output white spaces: the routine should use break hints\ninstead. (For instance <code>print_space ()</code> that is a convenient\nabbreviation for <code>print_break 1 0</code> and outputs a single space or break\nthe line.)</p>\n<h2 id=\"indentation-of-new-lines\">Indentation of new lines</h2>\n<p>The user gets 2 ways to fix the indentation of new lines:</p>\n<ul>\n<li>\n<p><strong>when defining the box</strong>: when you open a box, you can fix the\nindentation added to each new line opened within that box.<br />\nFor instance: <code>open_hovbox 1</code> opens a “hov” box with new lines\nindented 1 more than the initial indentation of the box. With output\n&quot;---[--b--b--b--&quot;, we get:</p>\n<pre><code class=\"language-text\">---[--b--b\n     --b--\n</code></pre>\n<p>with <code>open_hovbox 2</code>, we get</p>\n<pre><code class=\"language-text\">---[--b--b\n      --b--\n</code></pre>\n<p>Note: the <code>[</code> sign in the display is not visible on the screen, it\nis just there to materialise the aperture of the pretty-printing\nbox. Last “screen” stands for:</p>\n<pre><code class=\"language-text\">-----b--b\n     --b--\n</code></pre>\n</li>\n<li>\n<p><strong>when defining the break that makes the new line</strong>. As said above,\nyou output a break hint using <code>print_break     sp           indent</code>.\nThe <code>indent</code> integer is used to fix the additional indentation of\nthe new line. Namely, it is added to the default indentation offset\nof the box where the break occurs.<br />\nFor instance, if <code>[</code> stands for the opening of a “hov” box with 1\nas extra indentation (as obtained by <code>open_hovbox 1</code>), and b is\n<code>print_break       1       2</code>, then from output &quot;---[--b--b--b--&quot;,\nwe get:</p>\n<pre><code class=\"language-text\">---[-- --\n      --\n      --\n</code></pre>\n</li>\n</ul>\n<h2 id=\"refinement-on-hov-boxes\">Refinement on “hov” boxes</h2>\n<h3 id=\"packing-and-structural-hov-boxes\">Packing and structural “hov” boxes</h3>\n<p>The “hov” box type is refined into two categories.</p>\n<ul>\n<li><strong>the vertical or horizontal <em>packing</em> box</strong> (as obtained by the\nopen_hovbox procedure): break hints are used to cut the line when\nthere is no more room on the line; no new line occurs if there is\nenough room on the line.\n</li>\n<li><strong>vertical or horizontal <em>structural</em> box</strong> (as obtained by the\nopen_box procedure): similar to the “hov” packing box, the break\nhints are used to cut the line when there is no more room on the\nline; in addition, break hints that can show the box structure lead\nto new lines even if there is enough room on the current line.\n</li>\n</ul>\n<h3 id=\"differences-between-a-packing-and-a-structural-hov-box\">Differences between a packing and a structural “hov” box</h3>\n<p>The difference between a packing and a structural “hov” box is shown by\na routine that closes boxes and parentheses at the end of printing: with\npacking boxes, the closure of boxes and parentheses do not lead to new\nlines if there is enough room on the line, whereas with structural boxes\neach break hint will lead to a new line. For instance, when printing\n<code>[(---[(----[(---b)]b)]b)]</code>, where <code>b</code> is a break hint without extra\nindentation (<code>print_cut ()</code>). If <code>[</code> means opening of a packing “hov”\nbox (open_hovbox), <code>[(---[(----[(---b)]b)]b)]</code> is printed as follows:</p>\n<pre><code class=\"language-text\">(---\n (----\n  (---)))\n</code></pre>\n<p>If we replace the packing boxes by structural boxes (open_box), each\nbreak hint that precedes a closing parenthesis can show the boxes\nstructure, if it leads to a new line; hence <code>[(---[(----[(---b)]b)]b)]</code>\nis printed like this:</p>\n<pre><code class=\"language-text\">(---\n (----\n  (---\n  )\n )\n)\n</code></pre>\n<h2 id=\"practical-advice\">Practical advice</h2>\n<p>When writing a pretty-printing routine, follow these simple rules:</p>\n<ol>\n<li>Boxes must be opened and closed consistently (<code>open_*</code> and\n<code>close_box</code> must be nested like parentheses).\n</li>\n<li>Never hesitate to open a box.\n</li>\n<li>Output many break hints, otherwise the pretty-printer is in a bad\nsituation where it tries to do its best, which is always “worse than\nyour bad”.\n</li>\n<li>Do not try to force spacing using explicit spaces in the character\nstrings. For each space you want in the output emit a break hint\n(<code>print_space ()</code>), unless you explicitly don't want the line to be\nbroken here. For instance, imagine you want to pretty print an OCaml\ndefinition, more precisely a <code>let rec ident =     expression</code> value\ndefinition. You will probably treat the first three spaces as\n“unbreakable spaces” and write them directly in the string constants\nfor keywords, and print <code>&quot;let rec &quot;</code> before the identifier, and\nsimilarly write <code> =</code> to get an unbreakable space after the\nidentifier; in contrast, the space after the <code>=</code> sign is certainly a\nbreak hint, since breaking the line after <code>=</code> is a usual (and\nelegant) way to indent the expression part of a definition. In\nshort, it is often necessary to print unbreakable spaces; however,\nmost of the time a space should be considered a break hint.\n</li>\n<li>Do not try to force new lines, let the pretty-printer do it for you:\nthat's its only job. In particular, do not use <code>force_newline</code>: this\nprocedure effectively leads to a newline, but it also as the\nunfortunate side effect to partially reinitialise the\npretty-printing engine, so that the rest of the printing material is\nnoticeably messed up.\n</li>\n<li>Never put newline characters directly in the strings to be printed:\npretty printing engine will consider this newline character as any\nother character written on the current line and this will completely\nmess up the output. Instead of new line characters use line break\nhints: if those break hints must always result in new lines, it just\nmeans that the surrounding box must be a vertical box!\n</li>\n<li>End your main program by a <code>print_newline ()</code> call, that flushes the\npretty-printer tables (hence the output). (Note that the top-level\nloop of the interactive system does it as well, just before a new\ninput.)\n</li>\n</ol>\n<h2 id=\"printing-to-stdout-using-printf\">Printing to <code>stdout</code>: using <code>printf</code></h2>\n<p>The <code>format</code> module provides a general printing facility “à la”\n<code>printf</code>. In addition to the usual conversion facility provided by\n<code>printf</code>, you can write pretty-printing indications directly inside the\nformat string (opening and closing boxes, indicating breaking hints,\netc).</p>\n<p>Pretty-printing annotations are introduced by the <code>@</code> symbol, directly\ninto the string format. Almost any function of the <code>format</code> module can\nbe called from within a <code>printf</code> format string. For instance</p>\n<ul>\n<li>“<code>@[</code>” open a box (<code>open_box     0</code>). You may precise the type as an\nextra argument. For instance <code>@[&lt;hov n&gt;</code> is equivalent to\n<code>open_hovbox       n</code>.\n</li>\n<li>“<code>@]</code>” close a box (<code>close_box       ()</code>).\n</li>\n<li>“<code>@</code> ” output a breakable space (<code>print_space ()</code>).\n</li>\n<li>“<code>@,</code>” output a break hint (<code>print_cut       ()</code>).\n</li>\n<li>“<code>@;&lt;n m&gt;</code>” emit a “full” break hint (<code>print_break n m</code>).\n</li>\n<li>“<code>@.</code>” end the pretty-printing, closing all the boxes still opened\n(<code>print_newline ()</code>).\n</li>\n</ul>\n<p>For instance</p>\n<pre><code class=\"language-ocaml\"># Format.printf &quot;@[&lt;1&gt;%s@ =@ %d@ %s@]@.&quot; &quot;Prix TTC&quot; 100 &quot;Euros&quot;\nPrix TTC = 100 Euros\n- : unit = ()\n</code></pre>\n<h2 id=\"a-concrete-example\">A concrete example</h2>\n<p>Let me give a full example: the shortest non trivial example you could\nimagine, that is the λ-calculus. :)</p>\n<p>Thus the problem is to pretty-print the values of a concrete data type\nthat models a language of expressions that defines functions and their\napplications to arguments.</p>\n<p>First, I give the abstract syntax of lambda-terms (we illustrate it in\nthe <a href=\"../description.html#Interactivity\">interactive system</a>):</p>\n<pre><code class=\"language-ocaml\"># type lambda =\n  | Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\ntype lambda =\n    Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\n</code></pre>\n<p>I use the format library to print the lambda-terms:</p>\n<pre><code class=\"language-ocaml\">open Format\nlet ident = print_string\nlet kwd = print_string\n\nlet rec print_exp0 = function\n  | Var s -&gt;  ident s\n  | lam -&gt; open_hovbox 1; kwd &quot;(&quot;; print_lambda lam; kwd &quot;)&quot;; close_box ()\nand print_app = function\n  | e -&gt; open_hovbox 2; print_other_applications e; close_box ()\nand print_other_applications f =\n  match f with\n  | Apply (f, arg) -&gt; print_app f; print_space (); print_exp0 arg\n  | f -&gt; print_exp0 f\nand print_lambda = function\n  | Lambda (s, lam) -&gt;\n      open_hovbox 1;\n      kwd &quot;\\\\&quot;; ident s; kwd &quot;.&quot;; print_space(); print_lambda lam;\n      close_box()\n  | e -&gt; print_app e\n</code></pre>\n<p>In Caml Light, replace the first line by:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">#open &quot;format&quot;;;\n</code></pre>\n<h3 id=\"most-general-pretty-printing-using-fprintf\">Most general pretty-printing: using <code>fprintf</code></h3>\n<p>We use the <code>fprintf</code> function to write the most versatile version of the\npretty-printing functions for lambda-terms. Now, the functions get an\nextra argument, namely a pretty-printing formatter (the <code>ppf</code> argument)\nwhere printing will occur. This way the printing routines are more\ngeneral, since they can print on any formatter defined in the program\n(either printing to a file, or to <code>stdout</code>, to <code>stderr</code>, or even to a\nstring). Furthermore, the pretty-printing functions are now\ncompositional, since they may be used in conjunction with the special\n<code>%a</code> conversion, that prints a <code>fprintf</code> argument with a user's supplied\nfunction (these user's supplied functions also have a formatter as first\nargument).</p>\n<p>Using <code>fprintf</code>, the lambda-terms printing routines can be written as\nfollows:</p>\n<pre><code class=\"language-ocaml\">open Format\n\nlet ident ppf s = fprintf ppf &quot;%s&quot; s\nlet kwd ppf s = fprintf ppf &quot;%s&quot; s\n\nlet rec pr_exp0 ppf = function\n  | Var s -&gt; fprintf ppf &quot;%a&quot; ident s\n  | lam -&gt; fprintf ppf &quot;@[&lt;1&gt;(%a)@]&quot; pr_lambda lam\nand pr_app ppf e =\n  fprintf ppf &quot;@[&lt;2&gt;%a@]&quot; pr_other_applications e\nand pr_other_applications ppf f =\n  match f with\n  | Apply (f, arg) -&gt; fprintf ppf &quot;%a@ %a&quot; pr_app f pr_exp0 arg\n  | f -&gt; pr_exp0 ppf f\nand pr_lambda ppf = function\n  | Lambda (s, lam) -&gt;\n     fprintf ppf &quot;@[&lt;1&gt;%a%a%a@ %a@]&quot;\n             kwd &quot;\\\\&quot; ident s kwd &quot;.&quot; pr_lambda lam\n  | e -&gt; pr_app ppf e\n</code></pre>\n<p>Given those general printing routines, procedures to print to <code>stdout</code>\nor <code>stderr</code> is just a matter of partial application:</p>\n<pre><code class=\"language-ocaml\">let print_lambda = pr_lambda std_formatter\nlet eprint_lambda = pr_lambda err_formatter\n</code></pre>\n"},{"title":"Calling C Libraries","slug":"calling-c-libraries","description":"Cross the divide and call C code from your OCaml program\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"interoperability","tl":0},"users":{"hd":"Advanced","tl":0},"body_md":"\n## MiniGtk\nWhile the structure of lablgtk outlined in [Introduction to\nGtk](introduction_to_gtk.html \"Introduction to Gtk\") seems perhaps\nover-complex, it's worth considering exactly why the author chose two\nlayers. To appreciate this, you really need to get your hands dirty and\nlook at other ways that a Gtk wrapper might have been written.\n\nTo this end I played around with something I call\n<dfn>MiniGtk</dfn>, intended as a simple Gtk wrapper. All MiniGtk is\ncapable of is opening a window with a label, but after writing MiniGtk I\nhad renewed respect for the author of lablgtk!\n\nMiniGtk is also a good tutorial for people who want to write OCaml\nbindings around their favorite C library. If you've ever tried to write\nbindings for Python or Java, you'll find doing the same for OCaml is\nsurprisingly easy, although you do have to worry a bit about the garbage\ncollector.\n\nLet's talk first about how MiniGtk is structured: rather than using a\ntwo layered approach as with lablgtk, I wanted to implement MiniGtk\nusing a single (object-oriented) layer. This means that MiniGtk consists\nof a bunch of class definitions. Methods in those classes pretty much\ndirectly translate into calls to the C `libgtk-1.2.so` library.\n\nI also wanted to rationalise the module naming scheme for Gtk. So there\nis exactly one top-level module called (surprise!) `Gtk` and all classes\nare inside this module. A test program looks like this:\n\n<!-- $MDX skip -->\n```ocaml\nlet win = new Gtk.window ~title:\"My window\" ();;\nlet lbl = new Gtk.label ~text:\"Hello\" ();;\nwin#add lbl;;\n\nlet () =\n  Gtk.main ()\n```\nI defined a single abstract type to cover all `GtkObject`s (and\n\"subclasses\" of this C structure). In the `Gtk` module you'll find this\ntype definition:\n\n```ocaml\ntype obj\n```\n\nAs discussed in the last chapter, this defines an abstract type of which\nit is impossible to create any instances. In OCaml, at least. Certain C\nfunctions are going to create instances of this type. For instance, the\nfunction which creates new labels (ie. `GtkLabel` structures) is defined\nthis way:\n\n<!-- $MDX skip -->\n```ocaml\nexternal gtk_label_new : string -> obj = \"gtk_label_new_c\"\n```\n\nThis strange function definition defines an <dfn>external\nfunction</dfn>, one coming from C. The C function is called\n`gtk_label_new_c`, and it takes a string and returns one of our abstract\n`obj` types.\n\nOCaml doesn't quite let you call *any* C function yet. You need to write\na little C wrapper around the library's function to translate to and\nfrom OCaml's internal types and C types. `gtk_label_new_c` (note the\nadditional `_c`) is my wrapper around the real Gtk C function called\n`gtk_label_new`. Here it is. I'll explain more about it later.\n\n```C\nCAMLprim value\ngtk_label_new_c (value str)\n{\n  CAMLparam1 (str);\n  CAMLreturn (wrap (GTK_OBJECT (\n    gtk_label_new (String_val (str)))));\n }\n```\nBefore explaining this function further, I'm going to take a step back\nand look at the hierarchy of our Gtk classes. I've chosen to reflect the\nactual Gtk widget hierarchy as closely as possible. All Gtk widgets are\nderived from a virtual base class called `GtkObject`. In fact from this\nclass is derived `GtkWidget` and the whole variety of Gtk widgets are\nderived from this. So we define our own `GtkObject` equivalent class\nlike this (note that `object` is a reserved word in OCaml).\n\n```ocaml\ntype obj\n\nclass virtual gtk_object (obj : obj) =\nobject (self)\n  val obj = obj\n  method obj = obj\nend\n```\n\n`type obj` defines our abstract object type, and `class gtk_object`\ntakes one of these \"things\" as a parameter to its constructor. Recall\nfrom above that this parameter is actually the C `GtkObject` structure\n(in fact it's a specially wrapped pointer to this structure).\n\nYou can't create `gtk_object` instances directly because it's a virtual\nclass, but if you could you'd have to construct them like this:\n`new gtk_object obj`. What would you pass as that `obj` parameter? You'd\npass the return value of, for instance, `gtk_label_new` (go back and\nhave a look at how that `external` function was typed). This is shown\nbelow:\n\n<!-- $MDX skip -->\n```ocaml\n(* Example code, not really part of MiniGtk! *)\nclass label text =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit gtk_object obj\n  end\n```\n\nOf course the real `label` class doesn't inherit directly from\n`gtk_object` as shown above, but in principle this is how it works.\n\nFollowing the Gtk class hierarchy the only class derived directly from\n`gtk_object` is our `widget` class, defined like this:\n\n<!-- $MDX skip -->\n```ocaml\nexternal gtk_widget_show : obj -> unit = \"gtk_widget_show_c\"\nexternal gtk_widget_show_all : obj -> unit = \"gtk_widget_show_all_c\"\n\nclass virtual widget ?show obj =\n  object (self)\n    inherit gtk_object obj\n    method show = gtk_widget_show obj\n    method show_all = gtk_widget_show_all obj\n    initializer if show <> Some false then self#show\n  end\n```\nThis class is considerably more complex. Let's look at the\ninitialization code first:\n\n<!-- $MDX skip -->\n```ocaml\nclass virtual widget ?show obj =\n  object (self)\n    inherit gtk_object obj\n    initializer\n      if show <> Some false then self#show\n  end\n```\n\nThe `initializer` section may well be new to you. This is code which\nruns when an object is being created - the equivalent of a constructor\nin other languages. In this case we check the boolean optional `show`\nargument and unless the user specified it explicitly as `false` we\nautomatically call the `#show` method. (All Gtk widgets need to be\n\"shown\" after being created unless you want a widget to be created but\nhidden).\n\nThe actual definition of the methods happens with the help of a couple\nof external functions. These are basically direct calls to the C library\n(well, in fact there's a tiny bit of wrapper code, but that's not\nfunctionally important).\n\n<!-- $MDX skip -->\n```ocaml\nmethod show = gtk_widget_show obj\nmethod show_all = gtk_widget_show_all obj\n```\n\nNotice that we pass the underlying `GtkObject` to both C library calls.\nThis makes sense because these functions are prototyped as\n`void gtk_widget_show (GtkWidget *);` in C (`GtkWidget` and `GtkObject`\nare safely used interchangeably in this context).\n\nI want to describe the `label` class (the real one this time!), but in\nbetween `widget` and `label` is `misc`, a generic class which describes\na large class of miscellaneous widgets. This class just adds padding and\nalignment around a widget such as a label. Here is its definition:\n\n<!-- $MDX skip -->\n```ocaml\nlet may f x =\n  match x with\n  | None -> ()\n  | Some x -> f x\n\nexternal gtk_misc_set_alignment :\n  obj -> float * float -> unit = \"gtk_misc_set_alignment_c\"\nexternal gtk_misc_set_padding :\n  obj -> int * int -> unit = \"gtk_misc_set_padding_c\"\n\nclass virtual misc ?alignment ?padding ?show obj =\n  object (self)\n    inherit widget ?show obj\n    method set_alignment = gtk_misc_set_alignment obj\n    method set_padding = gtk_misc_set_padding obj\n    initializer\n      may (gtk_misc_set_alignment obj) alignment;\n      may (gtk_misc_set_padding obj) padding\n  end\n```\n\nWe start with a helper function called\n`may : ('a -> unit) -> 'a option -> unit` which invokes its first\nargument on the contents of its second unless the second argument is\n`None`. This trick (stolen from lablgtk of course) is very useful when\ndealing with optional arguments as we'll see.\n\nThe methods in `misc` should be straightforward. What is tricky is the\ninitialization code. First notice that we take optional `alignment` and\n`padding` arguments to the constructor, and we pass the optional `show`\nand mandatory `obj` arguments directly up to `widget`. What do we do\nwith the optional `alignment` and `padding`? The initializer uses these:\n\n<!-- $MDX skip -->\n```ocaml\ninitializer\n  may (gtk_misc_set_alignment obj) alignment;\n  may (gtk_misc_set_padding obj) padding \n```\n\nIt's that tricky `may` function in action. *If* the user gave an\n`alignment` argument, then this will set the alignment on the object by\ncalling `gtk_misc_set_alignment obj the_alignment`. But more commonly\nthe user will omit the `alignment` argument, in which case `alignment`\nis `None` and this does nothing. (In effect we get Gtk's default\nalignment, whatever that is). A similar thing happens with the\n`padding`. Note there is a certain simplicity and elegance in the way\nthis is done.\n\nNow we can finally get to the `label` class, which is derived directly\nfrom `misc`:\n\n<!-- $MDX skip -->\n```ocaml\nexternal gtk_label_new :\n    string -> obj  = \"gtk_label_new_c\"\nexternal gtk_label_set_text :\n    obj -> string -> unit = \"gtk_label_set_text_c\"\nexternal gtk_label_set_justify :\n    obj -> Justification.t -> unit = \"gtk_label_set_justify_c\"\nexternal gtk_label_set_pattern :\n    obj -> string -> unit = \"gtk_label_set_pattern_c\"\nexternal gtk_label_set_line_wrap :\n    obj -> bool -> unit = \"gtk_label_set_line_wrap_c\"\n\nclass label ~text\n  ?justify ?pattern ?line_wrap ?alignment\n  ?padding ?show () =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit misc ?alignment ?padding ?show obj\n    method set_text = gtk_label_set_text obj\n    method set_justify = gtk_label_set_justify obj\n    method set_pattern = gtk_label_set_pattern obj\n    method set_line_wrap = gtk_label_set_line_wrap obj\n    initializer\n      may (gtk_label_set_justify obj) justify;\n      may (gtk_label_set_pattern obj) pattern;\n      may (gtk_label_set_line_wrap obj) line_wrap\n  end\n```\nAlthough this class is bigger than the ones we've looked at up til now,\nit's really more of the same idea, *except* that this class isn't\nvirtual. You can create instances of this class which means it finally\nhas to call `gtk_..._new`. This is the initialization code (we discussed\nthis pattern above):\n\n<!-- $MDX skip -->\n```ocaml\nclass label ~text ... () =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit misc ... obj\n  end\n```\n(Pop quiz: what happens if we need to define a class which is both a\nbase class from which other classes can be derived, and is also a\nnon-virtual class of which the user should be allowed to create\ninstances?)\n\n####  Wrapping calls to C libraries\nNow we'll look in more detail at actually wrapping up calls to C library\nfunctions. Here's a simple example:\n\n```C\n/* external gtk_label_set_text :\n     obj -> string -> unit\n       = \"gtk_label_set_text_c\" */\n\nCAMLprim value\ngtk_label_set_text_c (value obj, value str)\n{\n  CAMLparam2 (obj, str);\n  gtk_label_set_text (unwrap (GtkLabel, obj),\n    String_val (str));\n  CAMLreturn (Val_unit);\n}\n```\nComparing the OCaml prototype for the external function call (in the\ncomment) with the definition of the function we can see two things:\n\n* The C function that OCaml calls is named `\"gtk_label_set_text_c\"`.\n* Two arguments are passed (`value obj` and `value str`) and a unit is\n returned.\n\nValues are OCaml's internal representation of all sorts of things from\nsimple integers through to strings and even objects. I'm not going to go\ninto any great detail about the `value` type because it is more than\nadequately covered in the OCaml manual. To use `value` you need to just\nknow what macros are available to convert between a `value` and some C\ntype. The macros look like this:\n\n<dl> <dt>`String_val (val)`</dt> <dd> Convert from a `value`\nwhich is known to be a string to a C string (ie. `char *`). </dd>\n<dt>`Val_unit`</dt> <dd> The OCaml unit `()` as a `value`. </dd>\n<dt>`Int_val (val)`</dt> <dd> Convert from a `value` which\nis known to be an integer to a C `int`. </dd>\n<dt>`Val_int (i)`</dt> <dd> Convert from a C integer `i` into an\ninteger `value`. </dd> <dt>`Bool_val (val)`</dt> <dd> Convert\nfrom a `value` which is known to be a boolean to a C boolean (ie. an\n`int`). </dd> <dt>`Val_bool (i)`</dt> <dd> Convert from a C\ninteger `i` into a boolean `value`. </dd> </dl>\n\nYou can guess the others or consult the manual. Note that there is no\nstraightforward conversion from C `char *` to a value. This involves\nallocating memory, which is somewhat more complicated.\n\nIn `gtk_label_set_text_c` above, the `external` definition, plus strong\ntyping and type inference, has already ensured that the arguments are of\nthe correct type, so to convert `value str` to a C `char *` we called\n`String_val (str)`.\n\nThe other parts of the function are a bit stranger. To ensure that the\ngarbage collector \"knows\" that your C function is still using `obj` and\n`str` while the C function is running (remember that the garbage\ncollector might be triggered within your C function by a number of\nevents - a callback to OCaml or using one of OCaml's allocation\nfunctions), you need to frame the function to add code to tell the\ngarbage collector about the \"roots\" that you're using. And tell the\ngarbage collector when you finish using those roots too, of course. This\nis done by framing the function within `CAMLparamN` ... `CAMLreturn`.\nHence:\n\n```C\nCAMLparam2 (obj, str);\n...\nCAMLreturn (Val_unit); \n```\n\n`CAMLparam2` is a macro saying that you're using two `value` parameters.\n(There is another macro for annotating local `value` variables too). You\nneed to use `CAMLreturn` instead of plain `return` which tells the GC\nyou've finished with those roots. It might be instructive to examine\nwhat code is inlined when you write `CAMLparam2 (obj, str)`. This is the\ngenerated code (with the author's version of OCaml, so it might vary\nbetween implementations slightly):\n\n```C\nstruct caml__roots_block *caml__frame\n    = local_roots;\nstruct caml__roots_block caml__roots_obj;\n\ncaml__roots_obj.next = local_roots;\nlocal_roots = &caml__roots_obj;\ncaml__roots_obj.nitems = 1;\ncaml__roots_obj.ntables = 2;\ncaml__roots_obj.tables [0] = &obj;\ncaml__roots_obj.tables [1] = &str; \n```\nAnd for `CAMLreturn (foo)`:\n\n```C\nlocal_roots = caml__frame;\nreturn (foo); \n```\n\nIf you follow the code closely you'll see that `local_roots` is\nobviously a linked list of `caml__roots_block` structures. One (or more)\nof these structures is pushed onto the linked list when we enter the\nfunction, and all of these are popped back off when we leave, thus\nrestoring `local_roots` to its previous state when we leave the\nfunction. (*If* you remembered to call `CAMLreturn` instead of `return`\nof course - otherwise `local_roots` will end up pointing at\nuninitialised data on the stack with \"hilarious\" consequences).\n\nEach `caml__roots_block` structure has space for up to five `value`s\n(you can have multiple blocks, so this isn't a limitation). When the GC\nruns we can infer that it must walk through the linked list, starting at\n`local_roots`, and treat each `value` as a root for garbage collection\npurposes. The consequences of *not* declaring a `value` parameter or\nlocal `value` variable in this way would be that the garbage collector\nmight treat that variable as unreachable memory and thus reclaim it\nwhile your function is running!\n\nFinally there is the mysterious `unwrap` macro. This is one I wrote\nmyself, or rather, this is one I mostly copied from lablgtk. There are\ntwo related functions, called `wrap` and `unwrap` and as you might\npossibly have guessed, they wrap and unwrap `GtkObject`s in OCaml\n`value`s. These functions establish the somewhat magical relationship\nbetween `GtkObject` and our opaque, mysterious `obj` type which we\ndefined for OCaml (see the very first part of this chapter to remind\nyourself).\n\nThe problem is how do we wrap up (and hide) the C `GtkObject` structure\nin a way that we can pass it around as an opaque \"thing\" (`obj`) through\nour OCaml code, and hopefully pass it back later to a C function which\ncan unwrap it and retrieve the same `GtkObject` back again?\n\nIn order for it to get passed to OCaml code at all, we must somehow\nconvert it to a `value`. Luckily we can quite easily use the C API to\ncreate `value` blocks which the OCaml garbage collector *won't* examine\ntoo closely ......\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#minigtk\">MiniGtk</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"minigtk\">MiniGtk</h2>\n<p>While the structure of lablgtk outlined in <a href=\"introduction_to_gtk.html\" title=\"Introduction to Gtk\">Introduction to\nGtk</a> seems perhaps\nover-complex, it's worth considering exactly why the author chose two\nlayers. To appreciate this, you really need to get your hands dirty and\nlook at other ways that a Gtk wrapper might have been written.</p>\n<p>To this end I played around with something I call\n<dfn>MiniGtk</dfn>, intended as a simple Gtk wrapper. All MiniGtk is\ncapable of is opening a window with a label, but after writing MiniGtk I\nhad renewed respect for the author of lablgtk!</p>\n<p>MiniGtk is also a good tutorial for people who want to write OCaml\nbindings around their favorite C library. If you've ever tried to write\nbindings for Python or Java, you'll find doing the same for OCaml is\nsurprisingly easy, although you do have to worry a bit about the garbage\ncollector.</p>\n<p>Let's talk first about how MiniGtk is structured: rather than using a\ntwo layered approach as with lablgtk, I wanted to implement MiniGtk\nusing a single (object-oriented) layer. This means that MiniGtk consists\nof a bunch of class definitions. Methods in those classes pretty much\ndirectly translate into calls to the C <code>libgtk-1.2.so</code> library.</p>\n<p>I also wanted to rationalise the module naming scheme for Gtk. So there\nis exactly one top-level module called (surprise!) <code>Gtk</code> and all classes\nare inside this module. A test program looks like this:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let win = new Gtk.window ~title:&quot;My window&quot; ();;\nlet lbl = new Gtk.label ~text:&quot;Hello&quot; ();;\nwin#add lbl;;\n\nlet () =\n  Gtk.main ()\n</code></pre>\n<p>I defined a single abstract type to cover all <code>GtkObject</code>s (and\n&quot;subclasses&quot; of this C structure). In the <code>Gtk</code> module you'll find this\ntype definition:</p>\n<pre><code class=\"language-ocaml\">type obj\n</code></pre>\n<p>As discussed in the last chapter, this defines an abstract type of which\nit is impossible to create any instances. In OCaml, at least. Certain C\nfunctions are going to create instances of this type. For instance, the\nfunction which creates new labels (ie. <code>GtkLabel</code> structures) is defined\nthis way:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">external gtk_label_new : string -&gt; obj = &quot;gtk_label_new_c&quot;\n</code></pre>\n<p>This strange function definition defines an <dfn>external\nfunction</dfn>, one coming from C. The C function is called\n<code>gtk_label_new_c</code>, and it takes a string and returns one of our abstract\n<code>obj</code> types.</p>\n<p>OCaml doesn't quite let you call <em>any</em> C function yet. You need to write\na little C wrapper around the library's function to translate to and\nfrom OCaml's internal types and C types. <code>gtk_label_new_c</code> (note the\nadditional <code>_c</code>) is my wrapper around the real Gtk C function called\n<code>gtk_label_new</code>. Here it is. I'll explain more about it later.</p>\n<pre><code class=\"language-C\">CAMLprim value\ngtk_label_new_c (value str)\n{\n  CAMLparam1 (str);\n  CAMLreturn (wrap (GTK_OBJECT (\n    gtk_label_new (String_val (str)))));\n }\n</code></pre>\n<p>Before explaining this function further, I'm going to take a step back\nand look at the hierarchy of our Gtk classes. I've chosen to reflect the\nactual Gtk widget hierarchy as closely as possible. All Gtk widgets are\nderived from a virtual base class called <code>GtkObject</code>. In fact from this\nclass is derived <code>GtkWidget</code> and the whole variety of Gtk widgets are\nderived from this. So we define our own <code>GtkObject</code> equivalent class\nlike this (note that <code>object</code> is a reserved word in OCaml).</p>\n<pre><code class=\"language-ocaml\">type obj\n\nclass virtual gtk_object (obj : obj) =\nobject (self)\n  val obj = obj\n  method obj = obj\nend\n</code></pre>\n<p><code>type obj</code> defines our abstract object type, and <code>class gtk_object</code>\ntakes one of these &quot;things&quot; as a parameter to its constructor. Recall\nfrom above that this parameter is actually the C <code>GtkObject</code> structure\n(in fact it's a specially wrapped pointer to this structure).</p>\n<p>You can't create <code>gtk_object</code> instances directly because it's a virtual\nclass, but if you could you'd have to construct them like this:\n<code>new gtk_object obj</code>. What would you pass as that <code>obj</code> parameter? You'd\npass the return value of, for instance, <code>gtk_label_new</code> (go back and\nhave a look at how that <code>external</code> function was typed). This is shown\nbelow:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(* Example code, not really part of MiniGtk! *)\nclass label text =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit gtk_object obj\n  end\n</code></pre>\n<p>Of course the real <code>label</code> class doesn't inherit directly from\n<code>gtk_object</code> as shown above, but in principle this is how it works.</p>\n<p>Following the Gtk class hierarchy the only class derived directly from\n<code>gtk_object</code> is our <code>widget</code> class, defined like this:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">external gtk_widget_show : obj -&gt; unit = &quot;gtk_widget_show_c&quot;\nexternal gtk_widget_show_all : obj -&gt; unit = &quot;gtk_widget_show_all_c&quot;\n\nclass virtual widget ?show obj =\n  object (self)\n    inherit gtk_object obj\n    method show = gtk_widget_show obj\n    method show_all = gtk_widget_show_all obj\n    initializer if show &lt;&gt; Some false then self#show\n  end\n</code></pre>\n<p>This class is considerably more complex. Let's look at the\ninitialization code first:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">class virtual widget ?show obj =\n  object (self)\n    inherit gtk_object obj\n    initializer\n      if show &lt;&gt; Some false then self#show\n  end\n</code></pre>\n<p>The <code>initializer</code> section may well be new to you. This is code which\nruns when an object is being created - the equivalent of a constructor\nin other languages. In this case we check the boolean optional <code>show</code>\nargument and unless the user specified it explicitly as <code>false</code> we\nautomatically call the <code>#show</code> method. (All Gtk widgets need to be\n&quot;shown&quot; after being created unless you want a widget to be created but\nhidden).</p>\n<p>The actual definition of the methods happens with the help of a couple\nof external functions. These are basically direct calls to the C library\n(well, in fact there's a tiny bit of wrapper code, but that's not\nfunctionally important).</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">method show = gtk_widget_show obj\nmethod show_all = gtk_widget_show_all obj\n</code></pre>\n<p>Notice that we pass the underlying <code>GtkObject</code> to both C library calls.\nThis makes sense because these functions are prototyped as\n<code>void gtk_widget_show (GtkWidget *);</code> in C (<code>GtkWidget</code> and <code>GtkObject</code>\nare safely used interchangeably in this context).</p>\n<p>I want to describe the <code>label</code> class (the real one this time!), but in\nbetween <code>widget</code> and <code>label</code> is <code>misc</code>, a generic class which describes\na large class of miscellaneous widgets. This class just adds padding and\nalignment around a widget such as a label. Here is its definition:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let may f x =\n  match x with\n  | None -&gt; ()\n  | Some x -&gt; f x\n\nexternal gtk_misc_set_alignment :\n  obj -&gt; float * float -&gt; unit = &quot;gtk_misc_set_alignment_c&quot;\nexternal gtk_misc_set_padding :\n  obj -&gt; int * int -&gt; unit = &quot;gtk_misc_set_padding_c&quot;\n\nclass virtual misc ?alignment ?padding ?show obj =\n  object (self)\n    inherit widget ?show obj\n    method set_alignment = gtk_misc_set_alignment obj\n    method set_padding = gtk_misc_set_padding obj\n    initializer\n      may (gtk_misc_set_alignment obj) alignment;\n      may (gtk_misc_set_padding obj) padding\n  end\n</code></pre>\n<p>We start with a helper function called\n<code>may : ('a -&gt; unit) -&gt; 'a option -&gt; unit</code> which invokes its first\nargument on the contents of its second unless the second argument is\n<code>None</code>. This trick (stolen from lablgtk of course) is very useful when\ndealing with optional arguments as we'll see.</p>\n<p>The methods in <code>misc</code> should be straightforward. What is tricky is the\ninitialization code. First notice that we take optional <code>alignment</code> and\n<code>padding</code> arguments to the constructor, and we pass the optional <code>show</code>\nand mandatory <code>obj</code> arguments directly up to <code>widget</code>. What do we do\nwith the optional <code>alignment</code> and <code>padding</code>? The initializer uses these:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">initializer\n  may (gtk_misc_set_alignment obj) alignment;\n  may (gtk_misc_set_padding obj) padding \n</code></pre>\n<p>It's that tricky <code>may</code> function in action. <em>If</em> the user gave an\n<code>alignment</code> argument, then this will set the alignment on the object by\ncalling <code>gtk_misc_set_alignment obj the_alignment</code>. But more commonly\nthe user will omit the <code>alignment</code> argument, in which case <code>alignment</code>\nis <code>None</code> and this does nothing. (In effect we get Gtk's default\nalignment, whatever that is). A similar thing happens with the\n<code>padding</code>. Note there is a certain simplicity and elegance in the way\nthis is done.</p>\n<p>Now we can finally get to the <code>label</code> class, which is derived directly\nfrom <code>misc</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">external gtk_label_new :\n    string -&gt; obj  = &quot;gtk_label_new_c&quot;\nexternal gtk_label_set_text :\n    obj -&gt; string -&gt; unit = &quot;gtk_label_set_text_c&quot;\nexternal gtk_label_set_justify :\n    obj -&gt; Justification.t -&gt; unit = &quot;gtk_label_set_justify_c&quot;\nexternal gtk_label_set_pattern :\n    obj -&gt; string -&gt; unit = &quot;gtk_label_set_pattern_c&quot;\nexternal gtk_label_set_line_wrap :\n    obj -&gt; bool -&gt; unit = &quot;gtk_label_set_line_wrap_c&quot;\n\nclass label ~text\n  ?justify ?pattern ?line_wrap ?alignment\n  ?padding ?show () =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit misc ?alignment ?padding ?show obj\n    method set_text = gtk_label_set_text obj\n    method set_justify = gtk_label_set_justify obj\n    method set_pattern = gtk_label_set_pattern obj\n    method set_line_wrap = gtk_label_set_line_wrap obj\n    initializer\n      may (gtk_label_set_justify obj) justify;\n      may (gtk_label_set_pattern obj) pattern;\n      may (gtk_label_set_line_wrap obj) line_wrap\n  end\n</code></pre>\n<p>Although this class is bigger than the ones we've looked at up til now,\nit's really more of the same idea, <em>except</em> that this class isn't\nvirtual. You can create instances of this class which means it finally\nhas to call <code>gtk_..._new</code>. This is the initialization code (we discussed\nthis pattern above):</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">class label ~text ... () =\n  let obj = gtk_label_new text in\n  object (self)\n    inherit misc ... obj\n  end\n</code></pre>\n<p>(Pop quiz: what happens if we need to define a class which is both a\nbase class from which other classes can be derived, and is also a\nnon-virtual class of which the user should be allowed to create\ninstances?)</p>\n<h4 id=\"wrapping-calls-to-c-libraries\">Wrapping calls to C libraries</h4>\n<p>Now we'll look in more detail at actually wrapping up calls to C library\nfunctions. Here's a simple example:</p>\n<pre><code class=\"language-C\">/* external gtk_label_set_text :\n     obj -&gt; string -&gt; unit\n       = &quot;gtk_label_set_text_c&quot; */\n\nCAMLprim value\ngtk_label_set_text_c (value obj, value str)\n{\n  CAMLparam2 (obj, str);\n  gtk_label_set_text (unwrap (GtkLabel, obj),\n    String_val (str));\n  CAMLreturn (Val_unit);\n}\n</code></pre>\n<p>Comparing the OCaml prototype for the external function call (in the\ncomment) with the definition of the function we can see two things:</p>\n<ul>\n<li>The C function that OCaml calls is named <code>&quot;gtk_label_set_text_c&quot;</code>.\n</li>\n<li>Two arguments are passed (<code>value obj</code> and <code>value str</code>) and a unit is\nreturned.\n</li>\n</ul>\n<p>Values are OCaml's internal representation of all sorts of things from\nsimple integers through to strings and even objects. I'm not going to go\ninto any great detail about the <code>value</code> type because it is more than\nadequately covered in the OCaml manual. To use <code>value</code> you need to just\nknow what macros are available to convert between a <code>value</code> and some C\ntype. The macros look like this:</p>\n<dl> <dt>`String_val (val)`</dt> <dd> Convert from a `value`\nwhich is known to be a string to a C string (ie. `char *`). </dd>\n<dt>`Val_unit`</dt> <dd> The OCaml unit `()` as a `value`. </dd>\n<dt>`Int_val (val)`</dt> <dd> Convert from a `value` which\nis known to be an integer to a C `int`. </dd>\n<dt>`Val_int (i)`</dt> <dd> Convert from a C integer `i` into an\ninteger `value`. </dd> <dt>`Bool_val (val)`</dt> <dd> Convert\nfrom a `value` which is known to be a boolean to a C boolean (ie. an\n`int`). </dd> <dt>`Val_bool (i)`</dt> <dd> Convert from a C\ninteger `i` into a boolean `value`. </dd> </dl>\n<p>You can guess the others or consult the manual. Note that there is no\nstraightforward conversion from C <code>char *</code> to a value. This involves\nallocating memory, which is somewhat more complicated.</p>\n<p>In <code>gtk_label_set_text_c</code> above, the <code>external</code> definition, plus strong\ntyping and type inference, has already ensured that the arguments are of\nthe correct type, so to convert <code>value str</code> to a C <code>char *</code> we called\n<code>String_val (str)</code>.</p>\n<p>The other parts of the function are a bit stranger. To ensure that the\ngarbage collector &quot;knows&quot; that your C function is still using <code>obj</code> and\n<code>str</code> while the C function is running (remember that the garbage\ncollector might be triggered within your C function by a number of\nevents - a callback to OCaml or using one of OCaml's allocation\nfunctions), you need to frame the function to add code to tell the\ngarbage collector about the &quot;roots&quot; that you're using. And tell the\ngarbage collector when you finish using those roots too, of course. This\nis done by framing the function within <code>CAMLparamN</code> ... <code>CAMLreturn</code>.\nHence:</p>\n<pre><code class=\"language-C\">CAMLparam2 (obj, str);\n...\nCAMLreturn (Val_unit); \n</code></pre>\n<p><code>CAMLparam2</code> is a macro saying that you're using two <code>value</code> parameters.\n(There is another macro for annotating local <code>value</code> variables too). You\nneed to use <code>CAMLreturn</code> instead of plain <code>return</code> which tells the GC\nyou've finished with those roots. It might be instructive to examine\nwhat code is inlined when you write <code>CAMLparam2 (obj, str)</code>. This is the\ngenerated code (with the author's version of OCaml, so it might vary\nbetween implementations slightly):</p>\n<pre><code class=\"language-C\">struct caml__roots_block *caml__frame\n    = local_roots;\nstruct caml__roots_block caml__roots_obj;\n\ncaml__roots_obj.next = local_roots;\nlocal_roots = &amp;caml__roots_obj;\ncaml__roots_obj.nitems = 1;\ncaml__roots_obj.ntables = 2;\ncaml__roots_obj.tables [0] = &amp;obj;\ncaml__roots_obj.tables [1] = &amp;str; \n</code></pre>\n<p>And for <code>CAMLreturn (foo)</code>:</p>\n<pre><code class=\"language-C\">local_roots = caml__frame;\nreturn (foo); \n</code></pre>\n<p>If you follow the code closely you'll see that <code>local_roots</code> is\nobviously a linked list of <code>caml__roots_block</code> structures. One (or more)\nof these structures is pushed onto the linked list when we enter the\nfunction, and all of these are popped back off when we leave, thus\nrestoring <code>local_roots</code> to its previous state when we leave the\nfunction. (<em>If</em> you remembered to call <code>CAMLreturn</code> instead of <code>return</code>\nof course - otherwise <code>local_roots</code> will end up pointing at\nuninitialised data on the stack with &quot;hilarious&quot; consequences).</p>\n<p>Each <code>caml__roots_block</code> structure has space for up to five <code>value</code>s\n(you can have multiple blocks, so this isn't a limitation). When the GC\nruns we can infer that it must walk through the linked list, starting at\n<code>local_roots</code>, and treat each <code>value</code> as a root for garbage collection\npurposes. The consequences of <em>not</em> declaring a <code>value</code> parameter or\nlocal <code>value</code> variable in this way would be that the garbage collector\nmight treat that variable as unreachable memory and thus reclaim it\nwhile your function is running!</p>\n<p>Finally there is the mysterious <code>unwrap</code> macro. This is one I wrote\nmyself, or rather, this is one I mostly copied from lablgtk. There are\ntwo related functions, called <code>wrap</code> and <code>unwrap</code> and as you might\npossibly have guessed, they wrap and unwrap <code>GtkObject</code>s in OCaml\n<code>value</code>s. These functions establish the somewhat magical relationship\nbetween <code>GtkObject</code> and our opaque, mysterious <code>obj</code> type which we\ndefined for OCaml (see the very first part of this chapter to remind\nyourself).</p>\n<p>The problem is how do we wrap up (and hide) the C <code>GtkObject</code> structure\nin a way that we can pass it around as an opaque &quot;thing&quot; (<code>obj</code>) through\nour OCaml code, and hopefully pass it back later to a C function which\ncan unwrap it and retrieve the same <code>GtkObject</code> back again?</p>\n<p>In order for it to get passed to OCaml code at all, we must somehow\nconvert it to a <code>value</code>. Luckily we can quite easily use the C API to\ncreate <code>value</code> blocks which the OCaml garbage collector <em>won't</em> examine\ntoo closely ......</p>\n"},{"title":"Calling Fortran Libraries","slug":"calling-fortran-libraries","description":"Cross the divide and call Fortran code from your OCaml program\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"interoperability","tl":0},"users":{"hd":"Advanced","tl":0},"body_md":"\nFortran isn't a language the many people write new code in but it still\nis in extensive use in the scientific communities. Many, many libraries\nexist for doing numerical calculation that will never be written in C or\nC++. It is quite possible though to call Fortran routines from OCaml as\nthey are normally compiled into the same object format, with minimal\nname mangling, as C programs.\n\nThis tutorial will step by step through the process of compiling an\ninterface module for a fortran function. The steps that are involved\nhere are the same steps as for wrapping a C function with a few\nconsiderations that have to be taken into account for Fortran.\n\nThe Fortran function is contained in a file called func.f and has the\nfollowing signature\n\n`subroutine gtd6(integer iyd, real sec, real alt, real lat, real lon, real dens(8), real temp(2))`\n\nThe `iyd`, `sec`, `alt`, `lat`, and `lon` parameters are input\nparameters while `dens` and `temp` are output parameters.\n\nAll of the examples below use the GNU Fortran 77 compiler (g77). None of\nthese have been tested with the GNU fortran 90 compiler (gfort) and will\nnot be until it has proven itself through some time.\n\n###  Step 1: Compile the Fortran routine\nWhere C/C++ have only one category of subroutine (the function), Fortran\nhas two: the function and the subroutine. The function is the equivalent\nto a non-void C function in that it takes parameters and always returns\na value. The subroutine is equivalent to a void C function.\n\nWhen g77 compiles a fortran function it creates a named function that\nhas an underscore appended. If the fortran name for the function\ncontains any underscores then the compiled function name will have two\nunderscores appended. The generated function can be called by this name.\nSubroutines will be converted into a C function that returns an int.\n\nTo compile the funcs.f file into an object file, one can use the\nfollowing:\n\n`prompt> g77 -c funcs.f`\n\nWhich will generate the file 'funcs.o'. You can then see the names of\nthe compiled functions by executing\n\n`prompt> nm funcs.o`\n\nIn this output you will see a line that has the following\n\n` T gtd6_ `\n\nThis shows that the function gtd6_ has been created and is in the\nobject file.\n\nFortran has support for both integer and real types and those are the\nnames that they go by. In our case we have only real and integer types.\nReals are equivalent to C doubles and integers are equivalent to C\nlongs. In addition, Fortran passes everything by reference so the\ncorresponding C prototype for our gtd6 function is\n\n` int gtd6_(integer *iyd, real* sec, real* alt, real* glat, real* glong, real* dens, real* temp);`\n\nNote that its up to the caller to know that `dens` and `temp` are\nactually arrays. Failure to pass an array will cause a segmentation\nviolation since the gtd6_ function is using them as arrays (yet another\nreason OCaml shines).\n\n###  Step 2: Create the C wrapper\nBecause OCaml's foreign function interface is C based, it is necessary\nto create a C wrapper. To avoid difficulties in passing back arrays of\nvalues, we are going to simply create a function that will return the\nsecond element of the temperature array as computed by the function and\nignore the other return values (this is a very frequent use of the\nfunction). This function will be in the source file wrapper.c.\n\n```C\nCAMLprim value gtd6_t (value iydV, value secVal, value altVal, value latVal, value lonVal) {\n   CAMLparam5( iydV, secVal, altVal, latVal, lonVal );\n   long iyd = Long_val( iydV );\n   float    sec = Double_val( secVal );\n   float    alt = Double_val( altVal );\n   float    lat = Double_val( latVal );\n   float    lon = Double_val( lonVal );\n\n   gtd6_(&iyd, &sec, &alt, &glat, &glon, d, t);\n   CAMLreturn( caml_copy_double( t[1] ) );\n}\n```\nA few points of interest\n\n1. The file must include the OCaml header files `alloc.h`, `memory.h`,\n and `mlvalue.h`.\n1. The function first calls the CAMLparam5 macro. This is required at\n the start of any function that uses the CAML types.\n1. The function uses the Double_val and Long_val macros to extract\n the C types from the OCaml value object.\n1. All of the values are passed by reference to the gtd6_ routine as\n required by the prototype.\n1. The function uses the copy_caml_double function and the CAMLreturn\n macro to create a new value containing the return value and to\n return it respectively.\n\n###  Step 3: Compile the shared library.\nNow having the two source files funcs.f and wrapper.c we need to create\na shared library that can be loaded by OCaml. Its easier to do this as a\nmultistep process, so here are the commands:\n\n`prompt> g77 -c funcs.f`\n\n`prompt> cc -I<ocaml include path> -c wrapper.c `\n\n`prompt> cc -shared -o wrapper.so wrapper.o funcs.o -lg2c`\n\nThis will create a shared object library called wrapper.so containing\nthe fortran function and the wrapper function. The -lg2c option is\nrequired to provide the implementations of the built in fortran\nfunctions that are used.\n\n###  Step 4: Now to OCaml\nNow in an OCaml file (gtd6.ml) we have to define the external reference\nto the function and a function to call it.\n\n<!-- $MDX skip -->\n```ocaml\nexternal temp : int -> float -> float -> float -> float -> float = \"gtd6_t\"\n\nlet () =\n  print_double (temp 1 2.0 3.0 4.0 5.0);\n  print_newline ()\n```\nThis tells OCaml that the temp function takes 5 parameters and returns a\nsingle floating point and calls the C function gtd6_t.\n\nAt this point, the steps that are given are to compile this into\nbytecode. I don't yet have much experience compiling to native so I'll\nlet some else help out (or wait until I learn how to do it).\n\n```\nprompt> ocamlc -c gtd6.ml prompt> ocamlc -o test gtd6.cmo wrapper.so\n```\nAnd voila, we've called the fortran function from OCaml.\n","toc_html":"","body_html":"<p>Fortran isn't a language the many people write new code in but it still\nis in extensive use in the scientific communities. Many, many libraries\nexist for doing numerical calculation that will never be written in C or\nC++. It is quite possible though to call Fortran routines from OCaml as\nthey are normally compiled into the same object format, with minimal\nname mangling, as C programs.</p>\n<p>This tutorial will step by step through the process of compiling an\ninterface module for a fortran function. The steps that are involved\nhere are the same steps as for wrapping a C function with a few\nconsiderations that have to be taken into account for Fortran.</p>\n<p>The Fortran function is contained in a file called func.f and has the\nfollowing signature</p>\n<p><code>subroutine gtd6(integer iyd, real sec, real alt, real lat, real lon, real dens(8), real temp(2))</code></p>\n<p>The <code>iyd</code>, <code>sec</code>, <code>alt</code>, <code>lat</code>, and <code>lon</code> parameters are input\nparameters while <code>dens</code> and <code>temp</code> are output parameters.</p>\n<p>All of the examples below use the GNU Fortran 77 compiler (g77). None of\nthese have been tested with the GNU fortran 90 compiler (gfort) and will\nnot be until it has proven itself through some time.</p>\n<h3 id=\"step-1-compile-the-fortran-routine\">Step 1: Compile the Fortran routine</h3>\n<p>Where C/C++ have only one category of subroutine (the function), Fortran\nhas two: the function and the subroutine. The function is the equivalent\nto a non-void C function in that it takes parameters and always returns\na value. The subroutine is equivalent to a void C function.</p>\n<p>When g77 compiles a fortran function it creates a named function that\nhas an underscore appended. If the fortran name for the function\ncontains any underscores then the compiled function name will have two\nunderscores appended. The generated function can be called by this name.\nSubroutines will be converted into a C function that returns an int.</p>\n<p>To compile the funcs.f file into an object file, one can use the\nfollowing:</p>\n<p><code>prompt&gt; g77 -c funcs.f</code></p>\n<p>Which will generate the file 'funcs.o'. You can then see the names of\nthe compiled functions by executing</p>\n<p><code>prompt&gt; nm funcs.o</code></p>\n<p>In this output you will see a line that has the following</p>\n<p><code>T gtd6_</code></p>\n<p>This shows that the function gtd6_ has been created and is in the\nobject file.</p>\n<p>Fortran has support for both integer and real types and those are the\nnames that they go by. In our case we have only real and integer types.\nReals are equivalent to C doubles and integers are equivalent to C\nlongs. In addition, Fortran passes everything by reference so the\ncorresponding C prototype for our gtd6 function is</p>\n<p><code> int gtd6_(integer *iyd, real* sec, real* alt, real* glat, real* glong, real* dens, real* temp);</code></p>\n<p>Note that its up to the caller to know that <code>dens</code> and <code>temp</code> are\nactually arrays. Failure to pass an array will cause a segmentation\nviolation since the gtd6_ function is using them as arrays (yet another\nreason OCaml shines).</p>\n<h3 id=\"step-2-create-the-c-wrapper\">Step 2: Create the C wrapper</h3>\n<p>Because OCaml's foreign function interface is C based, it is necessary\nto create a C wrapper. To avoid difficulties in passing back arrays of\nvalues, we are going to simply create a function that will return the\nsecond element of the temperature array as computed by the function and\nignore the other return values (this is a very frequent use of the\nfunction). This function will be in the source file wrapper.c.</p>\n<pre><code class=\"language-C\">CAMLprim value gtd6_t (value iydV, value secVal, value altVal, value latVal, value lonVal) {\n   CAMLparam5( iydV, secVal, altVal, latVal, lonVal );\n   long iyd = Long_val( iydV );\n   float    sec = Double_val( secVal );\n   float    alt = Double_val( altVal );\n   float    lat = Double_val( latVal );\n   float    lon = Double_val( lonVal );\n\n   gtd6_(&amp;iyd, &amp;sec, &amp;alt, &amp;glat, &amp;glon, d, t);\n   CAMLreturn( caml_copy_double( t[1] ) );\n}\n</code></pre>\n<p>A few points of interest</p>\n<ol>\n<li>The file must include the OCaml header files <code>alloc.h</code>, <code>memory.h</code>,\nand <code>mlvalue.h</code>.\n</li>\n<li>The function first calls the CAMLparam5 macro. This is required at\nthe start of any function that uses the CAML types.\n</li>\n<li>The function uses the Double_val and Long_val macros to extract\nthe C types from the OCaml value object.\n</li>\n<li>All of the values are passed by reference to the gtd6_ routine as\nrequired by the prototype.\n</li>\n<li>The function uses the copy_caml_double function and the CAMLreturn\nmacro to create a new value containing the return value and to\nreturn it respectively.\n</li>\n</ol>\n<h3 id=\"step-3-compile-the-shared-library\">Step 3: Compile the shared library.</h3>\n<p>Now having the two source files funcs.f and wrapper.c we need to create\na shared library that can be loaded by OCaml. Its easier to do this as a\nmultistep process, so here are the commands:</p>\n<p><code>prompt&gt; g77 -c funcs.f</code></p>\n<p><code>prompt&gt; cc -I&lt;ocaml include path&gt; -c wrapper.c </code></p>\n<p><code>prompt&gt; cc -shared -o wrapper.so wrapper.o funcs.o -lg2c</code></p>\n<p>This will create a shared object library called wrapper.so containing\nthe fortran function and the wrapper function. The -lg2c option is\nrequired to provide the implementations of the built in fortran\nfunctions that are used.</p>\n<h3 id=\"step-4-now-to-ocaml\">Step 4: Now to OCaml</h3>\n<p>Now in an OCaml file (gtd6.ml) we have to define the external reference\nto the function and a function to call it.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">external temp : int -&gt; float -&gt; float -&gt; float -&gt; float -&gt; float = &quot;gtd6_t&quot;\n\nlet () =\n  print_double (temp 1 2.0 3.0 4.0 5.0);\n  print_newline ()\n</code></pre>\n<p>This tells OCaml that the temp function takes 5 parameters and returns a\nsingle floating point and calls the C function gtd6_t.</p>\n<p>At this point, the steps that are given are to compile this into\nbytecode. I don't yet have much experience compiling to native so I'll\nlet some else help out (or wait until I learn how to do it).</p>\n<pre><code>prompt&gt; ocamlc -c gtd6.ml prompt&gt; ocamlc -o test gtd6.cmo wrapper.so\n</code></pre>\n<p>And voila, we've called the fortran function from OCaml.</p>\n"},{"title":"Command-line Arguments","slug":"command-line-arguments","description":"The Arg module that comes with the compiler can help you write command line interfaces\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"common","tl":0},"users":{"hd":"Intermediate","tl":0},"body_md":"\nIn this tutorial we learn how to read command line arguments directly, using\nOCaml's `Sys.argv` array, and then how to do so more easily using the standard\nlibrary's `Arg` module.\n\n## Sys.argv\n\nLike in C and many other languages, the arguments that are passed to a given\nprogram on the command line are stored in an array. Following tradition, this\narray is named `argv`. It is found in the `Sys` module of the standard library,\ntherefore its full name is `Sys.argv`. The number of arguments including the\nname of the program itself is simply the length of the array. It is obtained\nusing the `Array.length` function.\n\nThe following program displays the arguments with their position in `Sys.argv`:\n\n<!-- $MDX file=examples/args.ml -->\n```ocaml\nlet () =\n  for i = 0 to Array.length Sys.argv - 1 do\n    Printf.printf \"[%i] %s\\n\" i Sys.argv.(i)\n  done\n```\n\nIf you save the program above as `args.ml`, and run `ocaml args.ml arg1 arg2\narg3`, here is what you get:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocaml args.ml arg1 arg2 arg3\n[0] args.ml\n[1] arg1\n[2] arg2\n[3] arg3\n```\n\nNote that `ocaml` launched a subprocess that actually runs the program where\nargv is `args.ml arg1 arg2 arg3`. You can also compile your program using\n`ocamlopt -o args args.ml`, and then running `./args arg1 arg2 arg3` and you\nwill get:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlopt -o args args.ml\n$ ./args arg1 arg2 arg3\n[0] ./args\n[1] arg1\n[2] arg2\n[3] arg3\n```\n\n## Using the Arg module\n\nThe OCaml standard library has a module for writing command line interfaces, so\nwe do not have to use `Sys.argv` directly. We shall consider the example from\nthe OCaml documentation, a program for appending files.\n\nFirst, we set up the usage message to be printed in the case of a malformed\ncommand line, or when help is requested:\n\n<!-- $MDX file=examples/append.ml,part=0 -->\n```ocaml\nlet usage_msg = \"append [-verbose] <file1> [<file2>] ... -o <output>\"\n```\n\nNow, we create some references to hold the information gathered from the\ncommand line. The `Arg` module will fill these in for us as the command line is\nread.\n\n<!-- $MDX file=examples/append.ml,part=1 -->\n```ocaml\nlet verbose = ref false\n\nlet input_files = ref []\n\nlet output_file = ref \"\"\n```\n\nWe have a boolean reference for the `-verbose` flag with a default value of\n`false`. Then we have a reference to a list which will hold the names of all\nthe input files. Finally, we have a string reference into which the single\noutput file name specified by `-o` will be placed.\n\nWe will need a function to handle the anonymous inputs, that is to say the ones\nwith no flag before them. In this case these are our input file names. Our\nfunction simply adds the file name to the reference defined earlier.\n\n<!-- $MDX file=examples/append.ml,part=2 -->\n```ocaml\nlet anon_fun filename = input_files := filename :: !input_files\n```\n\nFinally we build the list of command line flag specifcations. Each is a tuple\nof the flag name, the action to be taken when it is encountered, and the help\nstring.\n\n<!-- $MDX file=examples/append.ml,part=3 -->\n```ocaml\nlet speclist =\n  [\n    (\"-verbose\", Arg.Set verbose, \"Output debug information\");\n    (\"-o\", Arg.Set_string output_file, \"Set output file name\");\n  ]\n```\n\nWe have two kinds of action here: the `Arg.Set` action which sets a boolean\nreference, and the `Arg.Set_string` action which sets a string reference. Our\n`input_files` reference will of course be updated by the `anon_fun` function\nalready defined.\n\nWe can now call `Arg.parse`, giving it our specification list, anonymous\nfunction, and usage message. Once it returns, the references will be filled\nwith all the information required to append our files.\n\n<!-- $MDX file=examples/append.ml,part=4 -->\n```ocaml\nlet () = Arg.parse speclist anon_fun usage_msg\n\n(* Main functionality here *)\n```\n\nLet's save our program as `append.ml` and compile it with `ocamlopt -o append\nappend.ml` and try it out:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlopt -o append append.ml\n$ ./append -verbose one.txt two.txt -o three.txt\n$ ./append one.txt two.txt\n$ ./append -quiet\n./append: unknown option '-quiet'.\nappend [-verbose] <file1> [<file2>] ... -o <output>\n  -verbose Output debug information\n  -o Set output file name\n  -help  Display this list of options\n  --help  Display this list of options\n[2]\n$ ./append -help\nappend [-verbose] <file1> [<file2>] ... -o <output>\n  -verbose Output debug information\n  -o Set output file name\n  -help  Display this list of options\n  --help  Display this list of options\n```\n\nHere is the whole program:\n\n```ocaml\nlet usage_msg = \"append [-verbose] <file1> [<file2>] ... -o <output>\"\n\nlet verbose = ref false\n\nlet input_files = ref []\n\nlet output_file = ref \"\"\n\nlet anon_fun filename =\n  input_files := filename :: !input_files\n\nlet speclist =\n  [(\"-verbose\", Arg.Set verbose, \"Output debug information\");\n   (\"-o\", Arg.Set_string output_file, \"Set output file name\")]\n\nlet () =\n  Arg.parse speclist anon_fun usage_msg;\n  (* Main functionality here *)\n```\n\nThe `Arg` module has many more actions than just `Set` and `Set_string`, and\nsome lower-level function for parsing more complicated command lines.\n\n## Other tools for parsing command-line options\n\nThere are libraries with facilities different from or more extensive than the\nbuilt-in `Arg` module:\n\n* [Cmdliner](https://erratique.ch/software/cmdliner/doc/Cmdliner) is a modern\n  interface for command line processing, which also generates UNIX man pages\n  automatically.\n\n* [Clap](https://opam.ocaml.org/packages/clap/) is an imperative command line\n  parser.\n\n* [Minicli](https://opam.ocaml.org/packages/minicli/) has good support for\n  rejecting malformed command lines which others might sliently accept.\n\n* [Getopt](https://opam.ocaml.org/packages/getopt/) for OCaml is similar to\n  [GNU getopt](https://www.gnu.org/software/libc/manual/html_node/Getopt.html).\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#sysargv\">Sys.argv</a>\n</li>\n<li><a href=\"#using-the-arg-module\">Using the Arg module</a>\n</li>\n<li><a href=\"#other-tools-for-parsing-command-line-options\">Other tools for parsing command-line options</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>In this tutorial we learn how to read command line arguments directly, using\nOCaml's <code>Sys.argv</code> array, and then how to do so more easily using the standard\nlibrary's <code>Arg</code> module.</p>\n<h2 id=\"sysargv\">Sys.argv</h2>\n<p>Like in C and many other languages, the arguments that are passed to a given\nprogram on the command line are stored in an array. Following tradition, this\narray is named <code>argv</code>. It is found in the <code>Sys</code> module of the standard library,\ntherefore its full name is <code>Sys.argv</code>. The number of arguments including the\nname of the program itself is simply the length of the array. It is obtained\nusing the <code>Array.length</code> function.</p>\n<p>The following program displays the arguments with their position in <code>Sys.argv</code>:</p>\n<!-- $MDX file=examples/args.ml -->\n<pre><code class=\"language-ocaml\">let () =\n  for i = 0 to Array.length Sys.argv - 1 do\n    Printf.printf &quot;[%i] %s\\n&quot; i Sys.argv.(i)\n  done\n</code></pre>\n<p>If you save the program above as <code>args.ml</code>, and run <code>ocaml args.ml arg1 arg2 arg3</code>, here is what you get:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocaml args.ml arg1 arg2 arg3\n[0] args.ml\n[1] arg1\n[2] arg2\n[3] arg3\n</code></pre>\n<p>Note that <code>ocaml</code> launched a subprocess that actually runs the program where\nargv is <code>args.ml arg1 arg2 arg3</code>. You can also compile your program using\n<code>ocamlopt -o args args.ml</code>, and then running <code>./args arg1 arg2 arg3</code> and you\nwill get:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlopt -o args args.ml\n$ ./args arg1 arg2 arg3\n[0] ./args\n[1] arg1\n[2] arg2\n[3] arg3\n</code></pre>\n<h2 id=\"using-the-arg-module\">Using the Arg module</h2>\n<p>The OCaml standard library has a module for writing command line interfaces, so\nwe do not have to use <code>Sys.argv</code> directly. We shall consider the example from\nthe OCaml documentation, a program for appending files.</p>\n<p>First, we set up the usage message to be printed in the case of a malformed\ncommand line, or when help is requested:</p>\n<!-- $MDX file=examples/append.ml,part=0 -->\n<pre><code class=\"language-ocaml\">let usage_msg = &quot;append [-verbose] &lt;file1&gt; [&lt;file2&gt;] ... -o &lt;output&gt;&quot;\n</code></pre>\n<p>Now, we create some references to hold the information gathered from the\ncommand line. The <code>Arg</code> module will fill these in for us as the command line is\nread.</p>\n<!-- $MDX file=examples/append.ml,part=1 -->\n<pre><code class=\"language-ocaml\">let verbose = ref false\n\nlet input_files = ref []\n\nlet output_file = ref &quot;&quot;\n</code></pre>\n<p>We have a boolean reference for the <code>-verbose</code> flag with a default value of\n<code>false</code>. Then we have a reference to a list which will hold the names of all\nthe input files. Finally, we have a string reference into which the single\noutput file name specified by <code>-o</code> will be placed.</p>\n<p>We will need a function to handle the anonymous inputs, that is to say the ones\nwith no flag before them. In this case these are our input file names. Our\nfunction simply adds the file name to the reference defined earlier.</p>\n<!-- $MDX file=examples/append.ml,part=2 -->\n<pre><code class=\"language-ocaml\">let anon_fun filename = input_files := filename :: !input_files\n</code></pre>\n<p>Finally we build the list of command line flag specifcations. Each is a tuple\nof the flag name, the action to be taken when it is encountered, and the help\nstring.</p>\n<!-- $MDX file=examples/append.ml,part=3 -->\n<pre><code class=\"language-ocaml\">let speclist =\n  [\n    (&quot;-verbose&quot;, Arg.Set verbose, &quot;Output debug information&quot;);\n    (&quot;-o&quot;, Arg.Set_string output_file, &quot;Set output file name&quot;);\n  ]\n</code></pre>\n<p>We have two kinds of action here: the <code>Arg.Set</code> action which sets a boolean\nreference, and the <code>Arg.Set_string</code> action which sets a string reference. Our\n<code>input_files</code> reference will of course be updated by the <code>anon_fun</code> function\nalready defined.</p>\n<p>We can now call <code>Arg.parse</code>, giving it our specification list, anonymous\nfunction, and usage message. Once it returns, the references will be filled\nwith all the information required to append our files.</p>\n<!-- $MDX file=examples/append.ml,part=4 -->\n<pre><code class=\"language-ocaml\">let () = Arg.parse speclist anon_fun usage_msg\n\n(* Main functionality here *)\n</code></pre>\n<p>Let's save our program as <code>append.ml</code> and compile it with <code>ocamlopt -o append append.ml</code> and try it out:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlopt -o append append.ml\n$ ./append -verbose one.txt two.txt -o three.txt\n$ ./append one.txt two.txt\n$ ./append -quiet\n./append: unknown option '-quiet'.\nappend [-verbose] &lt;file1&gt; [&lt;file2&gt;] ... -o &lt;output&gt;\n  -verbose Output debug information\n  -o Set output file name\n  -help  Display this list of options\n  --help  Display this list of options\n[2]\n$ ./append -help\nappend [-verbose] &lt;file1&gt; [&lt;file2&gt;] ... -o &lt;output&gt;\n  -verbose Output debug information\n  -o Set output file name\n  -help  Display this list of options\n  --help  Display this list of options\n</code></pre>\n<p>Here is the whole program:</p>\n<pre><code class=\"language-ocaml\">let usage_msg = &quot;append [-verbose] &lt;file1&gt; [&lt;file2&gt;] ... -o &lt;output&gt;&quot;\n\nlet verbose = ref false\n\nlet input_files = ref []\n\nlet output_file = ref &quot;&quot;\n\nlet anon_fun filename =\n  input_files := filename :: !input_files\n\nlet speclist =\n  [(&quot;-verbose&quot;, Arg.Set verbose, &quot;Output debug information&quot;);\n   (&quot;-o&quot;, Arg.Set_string output_file, &quot;Set output file name&quot;)]\n\nlet () =\n  Arg.parse speclist anon_fun usage_msg;\n  (* Main functionality here *)\n</code></pre>\n<p>The <code>Arg</code> module has many more actions than just <code>Set</code> and <code>Set_string</code>, and\nsome lower-level function for parsing more complicated command lines.</p>\n<h2 id=\"other-tools-for-parsing-command-line-options\">Other tools for parsing command-line options</h2>\n<p>There are libraries with facilities different from or more extensive than the\nbuilt-in <code>Arg</code> module:</p>\n<ul>\n<li>\n<p><a href=\"https://erratique.ch/software/cmdliner/doc/Cmdliner\">Cmdliner</a> is a modern\ninterface for command line processing, which also generates UNIX man pages\nautomatically.</p>\n</li>\n<li>\n<p><a href=\"https://opam.ocaml.org/packages/clap/\">Clap</a> is an imperative command line\nparser.</p>\n</li>\n<li>\n<p><a href=\"https://opam.ocaml.org/packages/minicli/\">Minicli</a> has good support for\nrejecting malformed command lines which others might sliently accept.</p>\n</li>\n<li>\n<p><a href=\"https://opam.ocaml.org/packages/getopt/\">Getopt</a> for OCaml is similar to\n<a href=\"https://www.gnu.org/software/libc/manual/html_node/Getopt.html\">GNU getopt</a>.</p>\n</li>\n</ul>\n"},{"title":"File Manipulation","slug":"file-manipulation","description":"A guide to basic file manipulation in OCaml with the standard library\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"common","tl":0},"users":{"hd":"Beginner","tl":{"hd":"Intermediate","tl":0}},"body_md":"\nThis is a guide to basic file manipulation in OCaml using only the\nstandard library.\n\n<!-- TODO: links to new API locations -->\nOfficial documentation for the modules of interest:\nthe core library including the initially opened module Stdlib and Printf.\n\n## Buffered channels\nThe normal way of opening a file in OCaml returns a **channel**. There\nare two kinds of channels:\n\n* channels that write to a file: type `out_channel`\n* channels that read from a file: type `in_channel`\n\n###  Writing\nFor writing into a file, you would do this:\n\n1. Open the file to obtain an `out_channel`\n1. Write to the channel\n1. If you want to force writing to the physical device, you must flush\n the channel, otherwise writing will not take place immediately.\n1. When you are done, you can close the channel. This flushes the\n channel automatically.\n\nCommonly used functions: `open_out`, `open_out_bin`, `flush`,\n`close_out`, `close_out_noerr`\n\nStandard `out_channel`s: `stdout`, `stderr`\n\n###  Reading\nFor reading data from a file you would do this:\n\n1. Open the file to obtain an `in_channel`\n1. Read characters from the channel. Reading consumes the channel, so\n if you read a character, the channel will point to the next\n character in the file.\n1. When there are no more characters to read, the `End_of_file`\n exception is raised. Often, this is where you want to close the\n channel.\n\nCommonly used functions: `open_in`, `open_in_bin`, `close_in`,\n`close_in_noerr`\n\nStandard `in_channel`: `stdin`\n\n###  Seeking\nWhenever you write or read something to or from a channel, the current\nposition changes to the next character after what you just wrote or\nread. Occasionally, you may want to skip to a particular position in the\nfile, or restart reading from the beginning. This is possible for\nchannels that point to regular files, use `seek_in` or `seek_out`.\n\n###  Gotchas\n* Don't forget to flush your `out_channel`s if you want to actually\n write something. This is particularly important if you are writing\n to non-files such as the standard output (`stdout`) or a socket.\n* Don't forget to close any unused channel, because operating systems\n have a limit on the number of files that can be opened\n simultaneously. You must catch any exception that would occur during\n the file manipulation, close the corresponding channel, and re-raise\n the exception.\n* The `Unix` module provides access to non-buffered file descriptors\n among other things. It provides standard file descriptors that have\n the same name as the corresponding standard channels: `stdin`,\n `stdout` and `stderr`. Therefore if you do `open Unix`, you may get\n type errors. If you want to be sure that you are using the `stdout`\n channel and not the `stdout` file descriptor, you can prepend it\n with the module name where it comes from: `Stdlib.stdout`. *Note\n that most things that don't seem to belong to any module actually\n belong to the `Stdlib` module, which is automatically opened.*\n* `open_out` and `open_out_bin` truncate the given file if it already\n exists! Use `open_out_gen` if you want an alternate behavior.\n\n###  Example\n\n<!-- $MDX file=examples/file_manip.ml -->\n```ocaml\nlet file = \"example.dat\"\n\nlet message = \"Hello!\"\n\nlet () =\n  (* Write message to file *)\n  let oc = open_out file in\n  (* create or truncate file, return channel *)\n  Printf.fprintf oc \"%s\\n\" message;\n  (* write something *)\n  close_out oc;\n\n  (* flush and close the channel *)\n\n  (* Read file and display the first line *)\n  let ic = open_in file in\n  try\n    let line = input_line ic in\n    (* read line, discard \\n *)\n    print_endline line;\n    (* write the result to stdout *)\n    flush stdout;\n    (* write on the underlying device now *)\n    close_in ic\n    (* close the input channel *)\n  with e ->\n    (* some unexpected exception occurs *)\n    close_in_noerr ic;\n    (* emergency closing *)\n    raise e\n\n(* exit with error: files are closed but channels are not flushed *)\n\n(* normal exit: all channels are flushed and closed *)\n```\n\nWe can compile and run this example: \n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlopt -o file_manip file_manip.ml\n$ ./file_manip\nHello!\n```\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#buffered-channels\">Buffered channels</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This is a guide to basic file manipulation in OCaml using only the\nstandard library.</p>\n<!-- TODO: links to new API locations -->\n<p>Official documentation for the modules of interest:\nthe core library including the initially opened module Stdlib and Printf.</p>\n<h2 id=\"buffered-channels\">Buffered channels</h2>\n<p>The normal way of opening a file in OCaml returns a <strong>channel</strong>. There\nare two kinds of channels:</p>\n<ul>\n<li>channels that write to a file: type <code>out_channel</code>\n</li>\n<li>channels that read from a file: type <code>in_channel</code>\n</li>\n</ul>\n<h3 id=\"writing\">Writing</h3>\n<p>For writing into a file, you would do this:</p>\n<ol>\n<li>Open the file to obtain an <code>out_channel</code>\n</li>\n<li>Write to the channel\n</li>\n<li>If you want to force writing to the physical device, you must flush\nthe channel, otherwise writing will not take place immediately.\n</li>\n<li>When you are done, you can close the channel. This flushes the\nchannel automatically.\n</li>\n</ol>\n<p>Commonly used functions: <code>open_out</code>, <code>open_out_bin</code>, <code>flush</code>,\n<code>close_out</code>, <code>close_out_noerr</code></p>\n<p>Standard <code>out_channel</code>s: <code>stdout</code>, <code>stderr</code></p>\n<h3 id=\"reading\">Reading</h3>\n<p>For reading data from a file you would do this:</p>\n<ol>\n<li>Open the file to obtain an <code>in_channel</code>\n</li>\n<li>Read characters from the channel. Reading consumes the channel, so\nif you read a character, the channel will point to the next\ncharacter in the file.\n</li>\n<li>When there are no more characters to read, the <code>End_of_file</code>\nexception is raised. Often, this is where you want to close the\nchannel.\n</li>\n</ol>\n<p>Commonly used functions: <code>open_in</code>, <code>open_in_bin</code>, <code>close_in</code>,\n<code>close_in_noerr</code></p>\n<p>Standard <code>in_channel</code>: <code>stdin</code></p>\n<h3 id=\"seeking\">Seeking</h3>\n<p>Whenever you write or read something to or from a channel, the current\nposition changes to the next character after what you just wrote or\nread. Occasionally, you may want to skip to a particular position in the\nfile, or restart reading from the beginning. This is possible for\nchannels that point to regular files, use <code>seek_in</code> or <code>seek_out</code>.</p>\n<h3 id=\"gotchas\">Gotchas</h3>\n<ul>\n<li>Don't forget to flush your <code>out_channel</code>s if you want to actually\nwrite something. This is particularly important if you are writing\nto non-files such as the standard output (<code>stdout</code>) or a socket.\n</li>\n<li>Don't forget to close any unused channel, because operating systems\nhave a limit on the number of files that can be opened\nsimultaneously. You must catch any exception that would occur during\nthe file manipulation, close the corresponding channel, and re-raise\nthe exception.\n</li>\n<li>The <code>Unix</code> module provides access to non-buffered file descriptors\namong other things. It provides standard file descriptors that have\nthe same name as the corresponding standard channels: <code>stdin</code>,\n<code>stdout</code> and <code>stderr</code>. Therefore if you do <code>open Unix</code>, you may get\ntype errors. If you want to be sure that you are using the <code>stdout</code>\nchannel and not the <code>stdout</code> file descriptor, you can prepend it\nwith the module name where it comes from: <code>Stdlib.stdout</code>. <em>Note\nthat most things that don't seem to belong to any module actually\nbelong to the <code>Stdlib</code> module, which is automatically opened.</em>\n</li>\n<li><code>open_out</code> and <code>open_out_bin</code> truncate the given file if it already\nexists! Use <code>open_out_gen</code> if you want an alternate behavior.\n</li>\n</ul>\n<h3 id=\"example\">Example</h3>\n<!-- $MDX file=examples/file_manip.ml -->\n<pre><code class=\"language-ocaml\">let file = &quot;example.dat&quot;\n\nlet message = &quot;Hello!&quot;\n\nlet () =\n  (* Write message to file *)\n  let oc = open_out file in\n  (* create or truncate file, return channel *)\n  Printf.fprintf oc &quot;%s\\n&quot; message;\n  (* write something *)\n  close_out oc;\n\n  (* flush and close the channel *)\n\n  (* Read file and display the first line *)\n  let ic = open_in file in\n  try\n    let line = input_line ic in\n    (* read line, discard \\n *)\n    print_endline line;\n    (* write the result to stdout *)\n    flush stdout;\n    (* write on the underlying device now *)\n    close_in ic\n    (* close the input channel *)\n  with e -&gt;\n    (* some unexpected exception occurs *)\n    close_in_noerr ic;\n    (* emergency closing *)\n    raise e\n\n(* exit with error: files are closed but channels are not flushed *)\n\n(* normal exit: all channels are flushed and closed *)\n</code></pre>\n<p>We can compile and run this example:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlopt -o file_manip file_manip.ml\n$ ./file_manip\nHello!\n</code></pre>\n"},{"title":"Garbage Collection","slug":"garbage-collection","description":"OCaml is a garbage collected language meaning you don't have to worry about allocating and freeing memory\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"advanced","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Garbage collection, reference counting, explicit allocation\n\nAs with all modern languages, OCaml provides a garbage collector so that\nyou don't need to explicitly allocate and free memory as in C/C++.\n\nThe OCaml garbage collector is a modern hybrid generational/incremental\ncollector which outperforms hand-allocation in most cases.\n\nWhy would garbage collection be faster than explicit memory allocation\nas in C? It's often assumed that calling `free` costs nothing. In fact\n`free` is an expensive operation which involves navigating over the\ncomplex data structures used by the memory allocator. If your program\ncalls `free` intermittently, then all of that code and data needs to be\nloaded into the cache, displacing your program code and data, each time\nyou `free` a single memory allocation. A collection strategy which frees\nmultiple memory areas in one go (such as either a pool allocator or a\nGC) pays this penalty only once for multiple allocations (thus the cost\nper allocation is much reduced).\n\nGCs also move memory areas around and compact the heap. This makes\nallocation easier, hence faster, and a smart GC can be written to\ninteract well with the L1 and L2 caches.\n\nOf course none of this precludes writing a very fast hand-allocator, but\nit's considerably harder work than most programmers realise.\n\nOCaml's garbage collector has two heaps, the **minor heap** and the\n**major heap**. This recognises a general principle: Most objects are\nsmall and allocated frequently and then immediately freed. These objects\ngo into the minor heap first, which is GCed frequently. Only some\nobjects are long lasting. These objects get promoted from the minor heap\nto the major heap after some time, and the major heap is only collected\ninfrequently.\n\nThe OCaml GC is synchronous. It doesn't run in a separate thread, and it\ncan only get called during an allocation request.\n\n###  GC vs. reference counting\nPython has a form of garbage collection, but it uses a simple scheme\ncalled **reference counting**. Simply put, each Python object keeps a\ncount of the number of other objects pointing (referencing) itself. When\nthe count falls to zero, nothing is pointing at this object, and so the\nobject can be freed.\n\nReference counting is not considered as serious garbage collection by\ncomputer scientists, yet it has one big practical advantage over full\ngarbage collectors. With reference counting, you can avoid many explicit\ncalls to `close`/`closedir` in code. Whereas in OCaml\n\n<!-- $MDX skip -->\n```ocaml\nlet read_file filename =\n  let chan = open_in filename in\n  (* read from chan *) in\nList.iter read_file files\n```\n\nCalls to `read_file` open the file but don't close it. Because OCaml\nuses a full garbage collector `chan` isn't collected until some time\nlater when the minor heap becomes full. In addition, **OCaml will not\nclose the channel when it collects the handle's memory**. So this\nprogram would eventually run out of file descriptors.\n\nYou need to be aware of this when writing OCaml code which uses files or\ndirectories or any other heavyweight object with complex finalisation.\n\nTo be fair to full garbage collection, I should mention the\ndisadvantages of reference counting schemes:\n\n* Each object needs to store a reference count. In other words there's\n a word overhead for every object. Programs use more memory, and are\n consequently slower because they are more likely to fill up the\n cache or spill into swap.\n* Reference counting is expensive - every time you manipulate pointers\n to an object you need to update and check the reference count.\n Pointer manipulation is frequent, so this slows your program and\n bloats the code size of compiled code.\n* They cannot collect so-called circular, or self-referential\n structures. I've programmed in many languages in many years and\n can't recall ever having created one of these.\n* Graph algorithms, of course, violate the previous assumption.\n\n## The Gc module\nThe `Gc` module contains some useful functions for querying and calling\nthe garbage collector from OCaml programs.\n\nHere is a program which runs and then prints out GC statistics just\nbefore quitting:\n\n<!-- TODO: Probably write a GC example without dependencies -->\n\n<!-- $MDX file=examples/gc.ml -->\n```ocaml\nlet rec iterate r x_init i =\n  if i = 1 then x_init\n  else\n    let x = iterate r x_init (i - 1) in\n    r *. x *. (1.0 -. x)\n\nlet () =\n  Random.self_init ();\n  Graphics.open_graph \" 640x480\";\n  for x = 0 to 640 do\n    let r = 4.0 *. float_of_int x /. 640.0 in\n    for i = 0 to 39 do\n      let x_init = Random.float 1.0 in\n      let x_final = iterate r x_init 500 in\n      let y = int_of_float (x_final *. 480.) in\n      Graphics.plot x y\n    done\n  done;\n  Gc.print_stat stdout\n```\n\nHere is what it printed out for me:\n\n```\nminor_words: 115926165     # Total number of words allocated\npromoted_words: 31217      # Promoted from minor -> major\nmajor_words: 31902         # Large objects allocated in major directly\nminor_collections: 3538    # Number of minor heap collections\nmajor_collections: 39      # Number of major heap collections\nheap_words: 63488          # Size of the heap, in words = approx. 256K\nheap_chunks: 1\ntop_heap_words: 63488\nlive_words: 2694\nlive_blocks: 733\nfree_words: 60794\nfree_blocks: 4\nlargest_free: 31586\nfragments: 0\ncompactions: 0\n```\n\nWe can see that minor heap collections are approximately 100 times more\nfrequent than major heap collections (in this example, not necessarily\nin general). Over the lifetime of the program, an astonishing 440 MB of\nmemory was allocated, although of course most of that would have been\nimmediately freed in a minor collection. Only about 128K was promoted to\nlong-term storage on the major heap, and about another 128K consisted of\nlarge objects which would have been allocated directly onto the major\nheap.\n\nWe can instruct the GC to print out debugging messages when one of\nseveral events happen (eg. on every major collection). Try adding the\nfollowing code to the example above near the beginning:\n\n<!-- $MDX skip -->\n```ocaml\n# Gc.set {(Gc.get ()) with Gc.verbose = 0x01}\n```\n\n(We haven't seen the `{ expression with field = value }` form before,\nbut it should be mostly obvious what it does). The above code anyway\ncauses the GC to print a message at the start of every major collection.\n\n## Finalisation and the Weak module\nWe can write a function called a **finaliser** which is called when an\nobject is about to be freed by the GC.\n\nThe `Weak` module lets us create so-called weak pointers. A **weak\npointer** is best defined by comparing it to a \"normal pointer\". When we\nhave an ordinary OCaml object, we reference that object through a name\n(eg. `let name = ... in`) or through another object. The garbage\ncollector sees that we have a reference to that object and won't collect\nit. That's what you might call a \"normal pointer\". If, however, you hold\na weak pointer or weak reference to an object, then you hint to the\ngarbage collector that it may collect the object at any time. (Not\nnecessarily that it *will* collect the object). Some time later, when\nyou come to examine the object, you can either turn your weak pointer\ninto a normal pointer, or else you can be informed that the GC did\nactually collect the object.\n\nFinalisation and weak pointers can be used together to implement an\nin-memory object database cache. Let's imagine that we have a very large\nnumber of large user records in a file on disk. This is far too much\ndata to be loaded into memory all at once, and anyway other programs\nmight access the data on the disk, so we need to lock individual records\nwhen we hold copies of them in memory.\n\nThe *public* interface to our \"in-memory object database cache\" is going\nto be just two functions:\n\n<!-- $MDX skip -->\n```ocaml\ntype record = {mutable name : string; mutable address : string}\nval get_record : int -> record\nval sync_records : unit -> unit\n```\n\nThe `get_record` call is the only call that most programs will need to\nmake. It gets the n<sup>th</sup> record either out of the cache or from\ndisk and returns it. The program can then read and/or update the\n`record.name` and `record.address` fields. The program then just\nliterally forgets about the record! Behind the scenes, finalisation is\ngoing to write the record back out to disk at some later point in time.\n\nThe `sync_records` function can also be called by user programs. This\nfunction synchronises the disk copy and in-memory copies of all records.\n\nOCaml doesn't currently run finalisers at exit. However you can easily\nforce it to by adding the following command to your code. This command\ncauses a full major GC cycle on exit:\n\n<!-- $MDX skip -->\n```ocaml\nat_exit Gc.full_major\n```\n\nOur code is also going to implement a cache of recently accessed records\nusing the `Weak` module. The advantage of using the `Weak` module rather\nthan hand-rolling our own code is two-fold: Firstly the garbage\ncollector has a global view of memory requirements for the whole\nprogram, and so is in a better position to decide when to shrink the\ncache. Secondly our code will be much simpler.\n\nFor our example, we're going to use a very simple format for the file of\nusers' records. The file is just a list of user records, each user\nrecord having a fixed size of 256 bytes. Each user record has just two\nfields (padded with spaces if necessary), the name field (64 bytes) and\nthe address field (192 bytes). Before a record can be loaded into\nmemory, the program must acquire an exclusive lock on the record. After\nthe in-memory copy is written back out to the file, the program must\nrelease the lock. Here is some code to define the on-disk format and\nsome low-level functions to read, write, lock and unlock records:\n\n\n<!-- $MDX file=examples/objcache.ml,part=0 -->\n```ocaml\n(* In-memory format. *)\ntype record = { mutable name : string; mutable address : string }\n\n(* On-disk format. *)\nlet record_size = 256\n\nlet name_size = 64\n\nlet addr_size = 192\n\n(* Low-level load/save records to file. *)\nlet seek_record n fd = ignore (Unix.lseek fd (n * record_size) Unix.SEEK_SET)\n\nlet write_record record n fd =\n  seek_record n fd;\n  ignore (Unix.write fd (Bytes.of_string record.name) 0 name_size);\n  ignore (Unix.write fd (Bytes.of_string record.address) 0 addr_size)\n\nlet read_record record n fd =\n  seek_record n fd;\n  ignore (Unix.read fd (Bytes.of_string record.name) 0 name_size);\n  ignore (Unix.read fd (Bytes.of_string record.address) 0 addr_size)\n\n(* Lock/unlock the nth record in a file. *)\nlet lock_record n fd =\n  seek_record n fd;\n  Unix.lockf fd Unix.F_LOCK record_size\n\nlet unlock_record n fd =\n  seek_record n fd;\n  Unix.lockf fd Unix.F_ULOCK record_size\n```\n\nWe also need a function to create new, empty in-memory `record` objects:\n\n<!-- $MDX file=examples/objcache.ml,part=1 -->\n```ocaml\n(* Create a new, empty record. *)\nlet new_record () =\n  { name = String.make name_size ' '; address = String.make addr_size ' ' }\n```\n\n\nBecause this is a really simple program, we're going to fix the number\nof records in advance:\n\n<!-- $MDX file=examples/objcache.ml,part=2 -->\n```ocaml\n(* Total number of records. *)\nlet nr_records = 10000\n\n(* On-disk file. *)\nlet diskfile = Unix.openfile \"users.bin\" [ Unix.O_RDWR; Unix.O_CREAT ] 0o666\n```\n\nDownload [users.bin.gz](users.bin.gz) and decompress it before\nrunning the program.\n\nOur cache of records is very simple:\n\n<!-- $MDX file=examples/objcache.ml,part=3 -->\n```ocaml\n(* Cache of records. *)\nlet cache = Weak.create nr_records\n```\n\nThe `get_record` function is very short and basically composed of two\nhalves. We grab the record from the cache. If the cache gives us `None`,\nthen that either means that we haven't loaded this record from the cache\nyet, or else it has been written out to disk (finalised) and dropped\nfrom the cache. If the cache gives us `Some record` then we just return\n`record` (this promotes the weak pointer to the record to a normal\npointer).\n\n\n<!-- $MDX file=examples/objcache.ml,part=4 -->\n```ocaml\n(* The finaliser function. *)\nlet finaliser n record =\n  printf \"*** objcache: finalising record %d\\n%!\" n;\n  write_record record n diskfile;\n  unlock_record n diskfile\n\n(* Get a record from the cache or off disk. *)\nlet get_record n =\n  match Weak.get cache n with\n  | Some record ->\n      printf \"*** objcache: fetching record %d from memory cache\\n%!\" n;\n      record\n  | None ->\n      printf \"*** objcache: loading record %d from disk\\n%!\" n;\n      let record = new_record () in\n      Gc.finalise (finaliser n) record;\n      lock_record n diskfile;\n      read_record record n diskfile;\n      Weak.set cache n (Some record);\n      record\n```\n\nThe `sync_records` function is even easier. First of all it empties the\ncache by replacing all the weak pointers with `None`. This now means\nthat the garbage collector *can* collect and finalise all of those\nrecords. But it doesn't necessarily mean that the GC *will* collect the\nrecords straightaway (in fact it's not likely that it will), so to force\nthe GC to collect the records immediately, we also invoke a major cycle:\n\n\nFinally we have some test code. I won't reproduce the test code, but you\ncan download the complete program and test code\n[objcache.ml](objcache.ml), and compile it with:\n\n<!-- $MDX dir=examples -->\n```sh\n$ ocamlc unix.cma objcache.ml -o objcache\n```\n\n## Exercises\nHere are some ways to extend the example above, in approximately\nincreasing order of difficulty:\n\n1. Implement the record as an **object**, and allow it to transparently\n pad/unpad strings. You will need to provide methods to set and get\n the name and address fields (four public methods in all). Hide as\n much of the implementation (file access, locking) code in the class\n as possible.\n1. Extend the program so that it acquires a **read lock** on getting\n the record, but upgrades this to a **write lock** just before the\n user updates any field.\n1. Support a **variable number of records** and add a function to\n create a new record (in the file). [Tip: OCaml has support for weak\n hashtables.]\n1. Add support for **variable-length records**.\n1. Make the underlying file representation a **DBM-style hash**.\n1. Provide a general-purpose cache fronting a \"users\" table in your\n choice of **relational database** (with locking).\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#garbage-collection-reference-counting-explicit-allocation\">Garbage collection, reference counting, explicit allocation</a>\n</li>\n<li><a href=\"#the-gc-module\">The Gc module</a>\n</li>\n<li><a href=\"#finalisation-and-the-weak-module\">Finalisation and the Weak module</a>\n</li>\n<li><a href=\"#exercises\">Exercises</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"garbage-collection-reference-counting-explicit-allocation\">Garbage collection, reference counting, explicit allocation</h2>\n<p>As with all modern languages, OCaml provides a garbage collector so that\nyou don't need to explicitly allocate and free memory as in C/C++.</p>\n<p>The OCaml garbage collector is a modern hybrid generational/incremental\ncollector which outperforms hand-allocation in most cases.</p>\n<p>Why would garbage collection be faster than explicit memory allocation\nas in C? It's often assumed that calling <code>free</code> costs nothing. In fact\n<code>free</code> is an expensive operation which involves navigating over the\ncomplex data structures used by the memory allocator. If your program\ncalls <code>free</code> intermittently, then all of that code and data needs to be\nloaded into the cache, displacing your program code and data, each time\nyou <code>free</code> a single memory allocation. A collection strategy which frees\nmultiple memory areas in one go (such as either a pool allocator or a\nGC) pays this penalty only once for multiple allocations (thus the cost\nper allocation is much reduced).</p>\n<p>GCs also move memory areas around and compact the heap. This makes\nallocation easier, hence faster, and a smart GC can be written to\ninteract well with the L1 and L2 caches.</p>\n<p>Of course none of this precludes writing a very fast hand-allocator, but\nit's considerably harder work than most programmers realise.</p>\n<p>OCaml's garbage collector has two heaps, the <strong>minor heap</strong> and the\n<strong>major heap</strong>. This recognises a general principle: Most objects are\nsmall and allocated frequently and then immediately freed. These objects\ngo into the minor heap first, which is GCed frequently. Only some\nobjects are long lasting. These objects get promoted from the minor heap\nto the major heap after some time, and the major heap is only collected\ninfrequently.</p>\n<p>The OCaml GC is synchronous. It doesn't run in a separate thread, and it\ncan only get called during an allocation request.</p>\n<h3 id=\"gc-vs-reference-counting\">GC vs. reference counting</h3>\n<p>Python has a form of garbage collection, but it uses a simple scheme\ncalled <strong>reference counting</strong>. Simply put, each Python object keeps a\ncount of the number of other objects pointing (referencing) itself. When\nthe count falls to zero, nothing is pointing at this object, and so the\nobject can be freed.</p>\n<p>Reference counting is not considered as serious garbage collection by\ncomputer scientists, yet it has one big practical advantage over full\ngarbage collectors. With reference counting, you can avoid many explicit\ncalls to <code>close</code>/<code>closedir</code> in code. Whereas in OCaml</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let read_file filename =\n  let chan = open_in filename in\n  (* read from chan *) in\nList.iter read_file files\n</code></pre>\n<p>Calls to <code>read_file</code> open the file but don't close it. Because OCaml\nuses a full garbage collector <code>chan</code> isn't collected until some time\nlater when the minor heap becomes full. In addition, <strong>OCaml will not\nclose the channel when it collects the handle's memory</strong>. So this\nprogram would eventually run out of file descriptors.</p>\n<p>You need to be aware of this when writing OCaml code which uses files or\ndirectories or any other heavyweight object with complex finalisation.</p>\n<p>To be fair to full garbage collection, I should mention the\ndisadvantages of reference counting schemes:</p>\n<ul>\n<li>Each object needs to store a reference count. In other words there's\na word overhead for every object. Programs use more memory, and are\nconsequently slower because they are more likely to fill up the\ncache or spill into swap.\n</li>\n<li>Reference counting is expensive - every time you manipulate pointers\nto an object you need to update and check the reference count.\nPointer manipulation is frequent, so this slows your program and\nbloats the code size of compiled code.\n</li>\n<li>They cannot collect so-called circular, or self-referential\nstructures. I've programmed in many languages in many years and\ncan't recall ever having created one of these.\n</li>\n<li>Graph algorithms, of course, violate the previous assumption.\n</li>\n</ul>\n<h2 id=\"the-gc-module\">The Gc module</h2>\n<p>The <code>Gc</code> module contains some useful functions for querying and calling\nthe garbage collector from OCaml programs.</p>\n<p>Here is a program which runs and then prints out GC statistics just\nbefore quitting:</p>\n<!-- TODO: Probably write a GC example without dependencies -->\n<!-- $MDX file=examples/gc.ml -->\n<pre><code class=\"language-ocaml\">let rec iterate r x_init i =\n  if i = 1 then x_init\n  else\n    let x = iterate r x_init (i - 1) in\n    r *. x *. (1.0 -. x)\n\nlet () =\n  Random.self_init ();\n  Graphics.open_graph &quot; 640x480&quot;;\n  for x = 0 to 640 do\n    let r = 4.0 *. float_of_int x /. 640.0 in\n    for i = 0 to 39 do\n      let x_init = Random.float 1.0 in\n      let x_final = iterate r x_init 500 in\n      let y = int_of_float (x_final *. 480.) in\n      Graphics.plot x y\n    done\n  done;\n  Gc.print_stat stdout\n</code></pre>\n<p>Here is what it printed out for me:</p>\n<pre><code>minor_words: 115926165     # Total number of words allocated\npromoted_words: 31217      # Promoted from minor -&gt; major\nmajor_words: 31902         # Large objects allocated in major directly\nminor_collections: 3538    # Number of minor heap collections\nmajor_collections: 39      # Number of major heap collections\nheap_words: 63488          # Size of the heap, in words = approx. 256K\nheap_chunks: 1\ntop_heap_words: 63488\nlive_words: 2694\nlive_blocks: 733\nfree_words: 60794\nfree_blocks: 4\nlargest_free: 31586\nfragments: 0\ncompactions: 0\n</code></pre>\n<p>We can see that minor heap collections are approximately 100 times more\nfrequent than major heap collections (in this example, not necessarily\nin general). Over the lifetime of the program, an astonishing 440 MB of\nmemory was allocated, although of course most of that would have been\nimmediately freed in a minor collection. Only about 128K was promoted to\nlong-term storage on the major heap, and about another 128K consisted of\nlarge objects which would have been allocated directly onto the major\nheap.</p>\n<p>We can instruct the GC to print out debugging messages when one of\nseveral events happen (eg. on every major collection). Try adding the\nfollowing code to the example above near the beginning:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\"># Gc.set {(Gc.get ()) with Gc.verbose = 0x01}\n</code></pre>\n<p>(We haven't seen the <code>{ expression with field = value }</code> form before,\nbut it should be mostly obvious what it does). The above code anyway\ncauses the GC to print a message at the start of every major collection.</p>\n<h2 id=\"finalisation-and-the-weak-module\">Finalisation and the Weak module</h2>\n<p>We can write a function called a <strong>finaliser</strong> which is called when an\nobject is about to be freed by the GC.</p>\n<p>The <code>Weak</code> module lets us create so-called weak pointers. A <strong>weak\npointer</strong> is best defined by comparing it to a &quot;normal pointer&quot;. When we\nhave an ordinary OCaml object, we reference that object through a name\n(eg. <code>let name = ... in</code>) or through another object. The garbage\ncollector sees that we have a reference to that object and won't collect\nit. That's what you might call a &quot;normal pointer&quot;. If, however, you hold\na weak pointer or weak reference to an object, then you hint to the\ngarbage collector that it may collect the object at any time. (Not\nnecessarily that it <em>will</em> collect the object). Some time later, when\nyou come to examine the object, you can either turn your weak pointer\ninto a normal pointer, or else you can be informed that the GC did\nactually collect the object.</p>\n<p>Finalisation and weak pointers can be used together to implement an\nin-memory object database cache. Let's imagine that we have a very large\nnumber of large user records in a file on disk. This is far too much\ndata to be loaded into memory all at once, and anyway other programs\nmight access the data on the disk, so we need to lock individual records\nwhen we hold copies of them in memory.</p>\n<p>The <em>public</em> interface to our &quot;in-memory object database cache&quot; is going\nto be just two functions:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">type record = {mutable name : string; mutable address : string}\nval get_record : int -&gt; record\nval sync_records : unit -&gt; unit\n</code></pre>\n<p>The <code>get_record</code> call is the only call that most programs will need to\nmake. It gets the n<sup>th</sup> record either out of the cache or from\ndisk and returns it. The program can then read and/or update the\n<code>record.name</code> and <code>record.address</code> fields. The program then just\nliterally forgets about the record! Behind the scenes, finalisation is\ngoing to write the record back out to disk at some later point in time.</p>\n<p>The <code>sync_records</code> function can also be called by user programs. This\nfunction synchronises the disk copy and in-memory copies of all records.</p>\n<p>OCaml doesn't currently run finalisers at exit. However you can easily\nforce it to by adding the following command to your code. This command\ncauses a full major GC cycle on exit:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">at_exit Gc.full_major\n</code></pre>\n<p>Our code is also going to implement a cache of recently accessed records\nusing the <code>Weak</code> module. The advantage of using the <code>Weak</code> module rather\nthan hand-rolling our own code is two-fold: Firstly the garbage\ncollector has a global view of memory requirements for the whole\nprogram, and so is in a better position to decide when to shrink the\ncache. Secondly our code will be much simpler.</p>\n<p>For our example, we're going to use a very simple format for the file of\nusers' records. The file is just a list of user records, each user\nrecord having a fixed size of 256 bytes. Each user record has just two\nfields (padded with spaces if necessary), the name field (64 bytes) and\nthe address field (192 bytes). Before a record can be loaded into\nmemory, the program must acquire an exclusive lock on the record. After\nthe in-memory copy is written back out to the file, the program must\nrelease the lock. Here is some code to define the on-disk format and\nsome low-level functions to read, write, lock and unlock records:</p>\n<!-- $MDX file=examples/objcache.ml,part=0 -->\n<pre><code class=\"language-ocaml\">(* In-memory format. *)\ntype record = { mutable name : string; mutable address : string }\n\n(* On-disk format. *)\nlet record_size = 256\n\nlet name_size = 64\n\nlet addr_size = 192\n\n(* Low-level load/save records to file. *)\nlet seek_record n fd = ignore (Unix.lseek fd (n * record_size) Unix.SEEK_SET)\n\nlet write_record record n fd =\n  seek_record n fd;\n  ignore (Unix.write fd (Bytes.of_string record.name) 0 name_size);\n  ignore (Unix.write fd (Bytes.of_string record.address) 0 addr_size)\n\nlet read_record record n fd =\n  seek_record n fd;\n  ignore (Unix.read fd (Bytes.of_string record.name) 0 name_size);\n  ignore (Unix.read fd (Bytes.of_string record.address) 0 addr_size)\n\n(* Lock/unlock the nth record in a file. *)\nlet lock_record n fd =\n  seek_record n fd;\n  Unix.lockf fd Unix.F_LOCK record_size\n\nlet unlock_record n fd =\n  seek_record n fd;\n  Unix.lockf fd Unix.F_ULOCK record_size\n</code></pre>\n<p>We also need a function to create new, empty in-memory <code>record</code> objects:</p>\n<!-- $MDX file=examples/objcache.ml,part=1 -->\n<pre><code class=\"language-ocaml\">(* Create a new, empty record. *)\nlet new_record () =\n  { name = String.make name_size ' '; address = String.make addr_size ' ' }\n</code></pre>\n<p>Because this is a really simple program, we're going to fix the number\nof records in advance:</p>\n<!-- $MDX file=examples/objcache.ml,part=2 -->\n<pre><code class=\"language-ocaml\">(* Total number of records. *)\nlet nr_records = 10000\n\n(* On-disk file. *)\nlet diskfile = Unix.openfile &quot;users.bin&quot; [ Unix.O_RDWR; Unix.O_CREAT ] 0o666\n</code></pre>\n<p>Download <a href=\"users.bin.gz\">users.bin.gz</a> and decompress it before\nrunning the program.</p>\n<p>Our cache of records is very simple:</p>\n<!-- $MDX file=examples/objcache.ml,part=3 -->\n<pre><code class=\"language-ocaml\">(* Cache of records. *)\nlet cache = Weak.create nr_records\n</code></pre>\n<p>The <code>get_record</code> function is very short and basically composed of two\nhalves. We grab the record from the cache. If the cache gives us <code>None</code>,\nthen that either means that we haven't loaded this record from the cache\nyet, or else it has been written out to disk (finalised) and dropped\nfrom the cache. If the cache gives us <code>Some record</code> then we just return\n<code>record</code> (this promotes the weak pointer to the record to a normal\npointer).</p>\n<!-- $MDX file=examples/objcache.ml,part=4 -->\n<pre><code class=\"language-ocaml\">(* The finaliser function. *)\nlet finaliser n record =\n  printf &quot;*** objcache: finalising record %d\\n%!&quot; n;\n  write_record record n diskfile;\n  unlock_record n diskfile\n\n(* Get a record from the cache or off disk. *)\nlet get_record n =\n  match Weak.get cache n with\n  | Some record -&gt;\n      printf &quot;*** objcache: fetching record %d from memory cache\\n%!&quot; n;\n      record\n  | None -&gt;\n      printf &quot;*** objcache: loading record %d from disk\\n%!&quot; n;\n      let record = new_record () in\n      Gc.finalise (finaliser n) record;\n      lock_record n diskfile;\n      read_record record n diskfile;\n      Weak.set cache n (Some record);\n      record\n</code></pre>\n<p>The <code>sync_records</code> function is even easier. First of all it empties the\ncache by replacing all the weak pointers with <code>None</code>. This now means\nthat the garbage collector <em>can</em> collect and finalise all of those\nrecords. But it doesn't necessarily mean that the GC <em>will</em> collect the\nrecords straightaway (in fact it's not likely that it will), so to force\nthe GC to collect the records immediately, we also invoke a major cycle:</p>\n<p>Finally we have some test code. I won't reproduce the test code, but you\ncan download the complete program and test code\n<a href=\"objcache.ml\">objcache.ml</a>, and compile it with:</p>\n<!-- $MDX dir=examples -->\n<pre><code class=\"language-sh\">$ ocamlc unix.cma objcache.ml -o objcache\n</code></pre>\n<h2 id=\"exercises\">Exercises</h2>\n<p>Here are some ways to extend the example above, in approximately\nincreasing order of difficulty:</p>\n<ol>\n<li>Implement the record as an <strong>object</strong>, and allow it to transparently\npad/unpad strings. You will need to provide methods to set and get\nthe name and address fields (four public methods in all). Hide as\nmuch of the implementation (file access, locking) code in the class\nas possible.\n</li>\n<li>Extend the program so that it acquires a <strong>read lock</strong> on getting\nthe record, but upgrades this to a <strong>write lock</strong> just before the\nuser updates any field.\n</li>\n<li>Support a <strong>variable number of records</strong> and add a function to\ncreate a new record (in the file). [Tip: OCaml has support for weak\nhashtables.]\n</li>\n<li>Add support for <strong>variable-length records</strong>.\n</li>\n<li>Make the underlying file representation a <strong>DBM-style hash</strong>.\n</li>\n<li>Provide a general-purpose cache fronting a &quot;users&quot; table in your\nchoice of <strong>relational database</strong> (with locking).\n</li>\n</ol>\n"},{"title":"Performance and Profiling","slug":"performance-and-profiling","description":"Understand how to profile your OCaml code to analyse its performance and produce faster programs\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"advanced","tl":0},"users":{"hd":"Intermediate","tl":{"hd":"Advanced","tl":0}},"body_md":"\n## Speed\nWhy is OCaml fast? Indeed, step back and ask *is OCaml fast?* How can we\nmake programs faster? In this chapter we'll look at what actually\nhappens when you compile your OCaml programs down to machine code. This\nwill help in understanding why OCaml is not just a great language for\nprogramming, but is also a very fast language indeed. And it'll help you\nto help the compiler write better machine code for you. It's also (I\nbelieve anyway) a good thing for programmers to have some idea of what\nhappens between you typing `ocamlopt` and getting a binary you can run.\n\nBut you will need to know some assembler to get the most out of this\nsection. Don't be afraid! I'll help you out by translating the assembler\ninto a C-like pseudocode (after all C is just a portable assembly\nlanguage).\n\n###  Basics of assembly language\nThe examples I give in this chapter are all compiled on an x86 Linux\nmachine. The x86 is, of course, a 32 bit machine, so an x86 \"word\" is 4\nbytes (= 32 bits) long. At this level OCaml deals mostly with word-sized\nobjects, so you'll need to remember to multiply by four to get the size\nin bytes.\n\nTo refresh your memory, the x86 has only a small number of general\npurpose registers, each of which can store one word. The Linux assembler\nputs `%` in front of register names. The registers are: `%eax`, `%ebx`,\n`%ecx`, `%edx`, `%esi`, `%edi`, `%ebp` (special register used for stack\nframes), and `%esp` (the stack pointer).\n\nThe Linux assembler (in common with other Unix assemblers, but opposite\nto MS-derived assemblers) writes moves to and from registers/memory as:\n\n```assembly\nmovl from, to\n```\n\nSo `movl %ebx, %eax` means \"copy the contents of register `%ebx` into\nregister `%eax`\" (not the other way round).\n\nAlmost all of the assembly language that we will look at is going to be\ndominated not by machine code instructions like `movl` but by what are\nknown as **assembler directives**. These directives begin\nwith a . (period) and they literally *direct* the assembler to do\nsomething. Here are the common ones for the Linux assembler:\n\n#### .text\n\n**Text** is the Unix way of saying \"program code\". The **text segment**\nsimply means the part of the executable where program code is stored.\nThe `.text` directive switches the assembler so it starts writing into\nthe text segment.\n\n#### .data\n\nSimilarly, the `.data` directive switches the assembler so it starts\nwriting into the data segment (part) of the executable.\n\n```assembly\n  .globl foo\nfoo:\n```\nThis declares a global symbol called `foo`. It means the address of the\nnext thing to come can be named `foo`. Writing just `foo:` without the\npreceding `.globl` directive declares a local symbol (local to just the\ncurrent file).\n\n```assembly\n.long 12345\n.byte 9\n.ascii \"hello\"\n.space 4\n```\n`.long` writes a word (4 bytes) to the current segment. `.byte` writes a\nsingle byte. `.ascii` writes a string of bytes (NOT nul-terminated).\n`.space` writes the given number of zero bytes. Normally you use these\nin the data segment.\n\n###  The \"hello, world\" program\nEnough assembler. Put the following program into a file called\n`smallest.ml`:\n\n```ocaml\nprint_string \"hello, world\\n\"\n```\nAnd compile it to a native code executable using:\n\n```shell\nocamlopt -S smallest.ml -o smallest\n```\n\nThe `-S` (capital S) tells the compiler to leave the assembly language\nfile (called `smallest.s` - lowercase s) instead of deleting it.\n\nHere are the edited highlights of the `smallest.s` file with my comments\nadded. First of all the data segment:\n\n```assembly\n    .data\n    .long   4348                     ; header for string\n    .globl  Smallest__1\nlest__1:\n    .ascii  \"hello, world\\12\"        ; string\n    .space  2                        ; padding ..\n    .byte   2                        ;  .. after string\n```\nNext up the text (program code) segment:\n\n```assembly\n    .text\n    .globl  Smallest__entry          ; entry point to the program\nlest__entry:\n\n    ; this is equivalent to the C pseudo-code:\n    ; Pervasives.output_string (stdout, &Smallest__1)\n\n    movl    $Smallest__1, %ebx\n    movl    Pervasives + 92, %eax    ; Pervasives + 92 == stdout\n    call    Pervasives__output_string_212\n\n    ; return 1\n\n    movl    $1, %eax\n    ret\n```\n\nIn C everything has to be inside a function. Think about how you can't\njust write `printf (\"hello, world\\n\");` in C, but instead you have to\nput it inside `main () { ... }`. In OCaml you are allowed to have\ncommands at the top level, not inside a function. But when we translate\nthis into assembly language, where do we put those commands? There needs\nto be some way to call those commands from outside, so they need to be\nlabelled in some way. As you can see from the code snippet, OCaml solves\nthis by taking the filename (`smallest.ml`), capitalizing it and adding\n`__entry`, thus making up a symbol called `Smallest__entry` to refer to\nthe top level commands in this file.\n\nNow look at the code that OCaml has generated. The original code said\n`print_string \"hello, world\\n\"`, but OCaml has instead compiled the\nequivalent of `Pervasives.output_string stdout \"hello, world\\n\"`. Why?\nIf you look into `pervasives.ml` you'll see why:\n\n```ocaml\nlet print_string s = output_string stdout s\n```\n\nOCaml has *inlined* this function. **Inlining** - taking a function and\nexpanding it from its definition - is sometimes a performance win,\nbecause it avoids the overhead of an extra function call, and it can\nlead to more opportunities for the optimizer to do its thing. Sometimes\ninlining is not good, because it can lead to code bloating, and thus\ndestroys the good work done by the processor cache (and besides function\ncalls are actually not very expensive at all on modern processors).\nOCaml will inline simple calls like this, because they are essentially\nrisk free, almost always leading to a small performance gain.\n\nWhat else can we notice about this? The calling convention seems to be\nthat the first two arguments are passed in the `%eax` and `%ebx`\nregisters respectively. Other arguments are probably passed on the\nstack, but we'll see about that later.\n\nC programs have a simple convention for storing strings, known as\n**ASCIIZ**. This just means that the string is stored in ASCII, followed\nby a trailing NUL (`\\0`) character. OCaml stores strings in a different\nway, as we can see from the data segment above. This string is stored\nlike this:\n\n```\n4 byte header: 4348\nthe string:    h e l l o , SP w o r l d \\n\npadding:       \\0 \\0 \\002\n```\n\nFirstly the padding brings the total length of the string up to a whole\nnumber of words (4 words, 16 bytes in this example). The padding is\ncarefully designed so that you can work out the actual length of the\nstring in bytes, provided that you know the total number of *words*\nallocated to the string. The encoding for this is unambiguous (which you\ncan prove to yourself).\n\nOne nice feature of having strings with an explicit length is that you\ncan represent strings containing ASCII NUL (`\\0`) characters in them,\nsomething which is difficult to do in C. However, the flip side is that\nyou need to be aware of this if you pass an OCaml string to some C\nnative code: if it contains ASCII NUL, then the C `str*` functions will\nfail on it.\n\nSecondly we have the header. Every boxed (allocated) object in OCaml has\na header which tells the garbage collector about how large the object is\nin words, and something about what the object contains. Writing the\nnumber 4348 in binary:\n\n```\nlength of the object in words:  0000 0000 0000 0000 0001 00 (4 words)\ncolor (used by GC):             00\ntag:                            1111 1100 (String_tag)\n```\nSee `/usr/include/caml/mlvalues.h` for more information about\nthe format of heap allocated objects in OCaml.\n\nOne unusual thing is that the code passes a pointer to the start of the\nstring (ie. the word immediately after the header) to\n`Pervasives.output_string`. This means that `output_string` must\nsubtract 4 from the pointer to get at the header to determine the length\nof the string.\n\nWhat have I missed out from this simple example? Well, the text segment\nabove is not the whole story. It would be really nice if OCaml\ntranslated that simple hello world program into just the five lines of\nassembler shown above. But there is the question of what actually calls\n`Smallest__entry` in the real program. For this OCaml includes a whole\nload of bootstrapping code which does things like starting up the\ngarbage collector, allocating and initializing memory, calling\ninitializers in libraries and so on. OCaml links all of this code\nstatically to the final executable, which is why the program I end up\nwith (on Linux) weighs in at a portly 95,442 bytes. Nevertheless the\nstart-up time for the program is still unmeasurably small (under a\nmillisecond), compared to several seconds for starting up a reasonable\nJava program and a second or so for a Perl script.\n\n###  Tail recursion\nWe mentioned in chapter 6 that OCaml can turn tail-recursive function\ncalls into simple loops. Is this actually true? Let's look at what\nsimple tail recursion compiles to:\n\n<!-- do not execute this code!! -->\n<!-- $MDX skip -->\n```ocaml\nlet rec loop () =\n  print_string \"I go on forever ...\";\n  loop ()\n  \nlet () = loop ()\n```\n\nThe file is called `tail.ml`, so following OCaml's usual procedure for\nnaming functions, our function will be called `Tail__loop_nnn` (where\n`nnn` is some unique number which OCaml appends to distinguish\nidentically named functions from one another).\n\nHere is the assembler for just the `loop` function defined above:\n\n```assembly\n        .text\n        .globl  Tail__loop_56\nTail__loop_56:\n.L100:\n        ; Print the string\n        movl    $Tail__2, %ebx\n        movl    Pervasives + 92, %eax\n        call    Pervasives__output_string_212\n.L101:\n        ; The following movl is in fact obsolete:\n        movl    $1, %eax\n        ; Jump back to the .L100 label above (ie. loop forever)\n        jmp     .L100\n```\n\nSo that's pretty conclusive. Calling `Tail__loop_56` will first print\nthe string, and then jump back to the top, then print the string, and\njump back, and so on forever. It's a simple loop, *not* a recursive\nfunction call, so it doesn't use any stack space.\n\n###  Digression: Where are the types?\nOCaml is statically typed as we've said before on many occasions, so at\ncompile time, OCaml knows that the type of `loop` is `unit -> unit`. It\nknows that the type of `\"hello, world\\n\"` is `string`. It doesn't make\nany attempt to communicate this fact to the `output_string` function.\n`output_string` is expecting a `channel` and a `string` as arguments,\nand indeed that's what it gets. What would happen if we passed, say, an\n`int` instead of a `string`?\n\nThis is essentially an impossible condition. Because OCaml knows the\ntypes at compile time, it doesn't need to deal with types or check types\nat run time. There is no way, in pure OCaml, to \"trick\" the compiler\ninto generating a call to `Pervasives.output_string stdout 1`. Such an\nerror would be flagged at compile time, by type inference, and so could\nnever be compiled.\n\nThe upshot is that by the time we have compiled OCaml code to assembler\ntype information mostly isn't required, certainly in the cases we've\nlooked at above where the type is fully known at compile time, and there\nis no polymorphism going on.\n\nFully knowing all your types at compile time is a major performance win\nbecause it totally avoids any dynamic type checking at run time. Compare\nthis to a Java method invocation for example: `obj.method ()`. This is\nan expensive operation because you need to find the concrete class that\n`obj` is an instance of, and then look up the method, and you need to do\nall of this potentially *every* time you call any method. Casting\nobjects is another case where you need to do a considerable amount of\nwork at run time in Java. None of this is allowed with OCaml's static\ntypes.\n\n###  Polymorphic types\nAs you might have guessed from the discussion above, polymorphism, which\nis where the compiler *doesn't* have a fully known type for a function\nat compile time, might have an impact on performance. Suppose we require\na function to work out the maximum of two integers. Our first attempt\nis:\n\n```ocaml\n# let max a b =\n  if a > b then a else b\nval max : 'a -> 'a -> 'a = <fun>\n```\n\nSimple enough, but recall that the \\> (greater than) operator in OCaml\nis polymorphic. It has type `'a -> 'a -> bool`, and this means that the\n`max` function we defined above is going to be polymorphic:\n\n```ocaml\n# let max a b =\n  if a > b then a else b\nval max : 'a -> 'a -> 'a = <fun>\n```\n\nThis is indeed reflected in the code that OCaml generates for this\nfunction, which is pretty complex:\n\n```assembly\n        .text\n        .globl  Max__max_56\nMax__max_56:\n\n        ; Reserve two words of stack space.\n\n        subl    $8, %esp\n\n        ; Save the first and second arguments (a and b) on the stack.\n\n        movl    %eax, 4(%esp)\n        movl    %ebx, 0(%esp)\n\n        ; Call the C \"greaterthan\" function (in the OCaml library).\n\n        pushl   %ebx\n        pushl   %eax\n        movl    $greaterthan, %eax\n        call    caml_c_call\n.L102:\n        addl    $8, %esp\n\n        ; If the C \"greaterthan\" function returned 1, jump to .L100\n\n        cmpl    $1, %eax\n        je      .L100\n\n        ; Returned 0, so get argument a which we previously saved on\n        ; the stack and return it.\n\n        movl    4(%esp), %eax\n        addl    $8, %esp\n        ret\n\n        ; Returned 1, so get argument b which we previously saved on\n        ; the stack and return it.\n\n.L100:\n        movl    0(%esp), %eax\n        addl    $8, %esp\n        ret\n```\n\nBasically the \\> operation is done by calling a C function from the\nOCaml library. This is obviously not going to be very efficient, nothing\nlike as efficient as if we could generate some quick inline assembly\nlanguage for doing the \\>.\n\nThis is not a complete dead loss by any means. All we need to do is to\nhint to the OCaml compiler that the arguments are in fact integers. Then\nOCaml will generate a specialised version of `max` which only works on\n`int` arguments:\n\n```ocaml\n# let max (a : int) (b : int) =\n  if a > b then a else b\nval max : int -> int -> int = <fun>\n```\nHere is the assembly code generated for this function:\n\n```assembly\n        .text\n        .globl  Max_int__max_56\nMax_int__max_56:\n\n        ; Single assembly instruction \"cmpl\" for performing the > op.\n        cmpl    %ebx, %eax\n\n        ; If %ebx > %eax, jump to .L100\n        jle     .L100\n        ; Just return argument a.\n        ret\n        ; Return argument b.\n\n.L100:\n        movl    %ebx, %eax\n        ret\n```\nThat's just 5 lines of assembler, and is about as simple as you can make\nit.\n\nWhat about this code:\n\n```ocaml\n# let max a b =\n  if a > b then a else b\nval max : 'a -> 'a -> 'a = <fun>\n# let () = print_int (max 2 3)\n3\n```\n\nIs OCaml going to be smart enough to inline the `max` function and\nspecialise it to work on integers? Disappointingly the answer is no.\nOCaml still has to generate the external `Max.max` symbol (because this\nis a module, and so that function might be called from outside the\nmodule), and it doesn't inline the function.\n\nHere's another variation:\n\n```ocaml\n# let max a b =\n  if a > b then a else b in\n  print_int (max 2 3)\n3\n- : unit = ()\n```\n\nDisappointingly although the definition of `max` in this code is local\n(it can't be called from outside the module), OCaml still doesn't\nspecialise the function.\n\nLesson: if you have a function which is unintentionally polymorphic then\nyou can help the compiler by specifying types for one or more of the\narguments.\n\n###  The representation of integers, tag bits, heap-allocated values\nThere are a number of peculiarities about integers in OCaml. One of\nthese is that integers are 31 bit entities, not 32 bit entities. What\nhappens to the \"missing\" bit?\n\nWrite this to `int.ml`:\n\n```ocaml\nprint_int 3\n```\n\nand compile with `ocamlopt -S int.ml -o int` to generate assembly\nlanguage in `int.s`. Recall from the discussion above that we are\nexpecting OCaml to inline the `print_int` function as\n`output_string (string_of_int 3)`, and examining the assembly language\noutput we can see that this is exactly what OCaml does:\n\n```assembly\n        .text\n        .globl  Int__entry\nInt__entry:\n\n        ; Call Pervasives.string_of_int (3)\n\n        movl    $7, %eax\n        call    Pervasives__string_of_int_152\n\n        ; Call Pervasives.output_string (stdout, result_of_previous)\n\n        movl    %eax, %ebx\n        movl    Pervasives + 92, %eax\n        call    Pervasives__output_string_212\n```\n\nThe important code is shown in red. It shows two things: Firstly the\ninteger is unboxed (not allocated on the heap), but is instead passed\ndirectly to the function in the register `%eax`. This is fast. But\nsecondly we see that the number being passed is 7, not 3.\n\nThis is a consequence of the representation of integers in OCaml. The\nbottom bit of the integer is used as a tag - we'll see what for next.\nThe top 31 bits are the actual integer. The binary representation of 7\nis 111, so the bottom tag bit is 1 and the top 31 bits form the number\n11 in binary = 3. To get from the OCaml representation to the integer,\ndivide by two and round down.\n\nWhy the tag bit at all? This bit is used to distinguish between integers\nand pointers to structures on the heap, and the distinction is only\nnecessary if we are calling a polymorphic function. In the case above,\nwhere we are calling `string_of_int`, the argument can only ever be an\n`int` and so the tag bit would never be consulted. Nevertheless, to\navoid having two internal representations for integers, all integers in\nOCaml carry around the tag bit.\n\nA bit of background about pointers is required to understand why the tag\nbit is really necessary, and why it is where it is.\n\nIn the world of RISC chips like the Sparc, MIPS and Alpha, pointers have\nto be word-aligned. So on the older 32 bit Sparc, for example, it's not\npossible to create and use a pointer which isn't aligned to a multiple\nof 4 (bytes). Trying to use one generates a processor exception, which\nmeans basically your program segfaults. The reason for this is just to\nsimplify memory access. It's just a lot simpler to design the memory\nsubsystem of a CPU if you only need to worry about word-aligned access.\n\nFor historical reasons (because the x86 is derived from an 8 bit chip),\nthe x86 has supported unaligned memory access, although if you align all\nmemory accesses to multiples of 4, then things go faster.\n\nNevertheless, all pointers in OCaml are aligned - ie. multiples of 4 for\n32 bit processors, and multiples of 8 for 64 bit processors. This means\nthat the bottom bit of any pointer in OCaml will always be zero.\n\nSo you can see that by looking at the bottom bit of a register, you can\nimmediately tell if it stores a pointer (\"tag\" bit is zero), or an\ninteger (tag bit set to one).\n\nRemember our polymorphic \\> function which caused us so much trouble in\nthe previous section? We looked at the assembler and found out that\nOCaml compiles a call to a C function called `greaterthan` whenever it\nsees the polymorphic form of \\>. This function takes two arguments, in\nregisters `%eax` and `%ebx`. But `greaterthan` can be called with\nintegers, floats, strings, opaque objects ... How does it know what\n`%eax` and `%ebx` point to?\n\nIt uses the following decision tree:\n\n* **Tag bit is one:** compare the two integers and return.\n* **Tag bit is zero:** `%eax` and `%ebx` must point at two\n heap-allocated memory blocks. Look at the header word of the memory\n blocks, specifically the bottom 8 bits of the header word, which tag\n the content of the block.\n     * **String_tag:** Compare two strings.\n     * **Double_tag:** Compare two floats.\n     * etc.\n\nNote that because \\> has type `'a -> 'a -> bool`, both arguments must\nhave the same type. The compiler should enforce this at compile time. I\nwould assume that `greaterthan` probably contains code to sanity-check\nthis at run time however.\n\n###  Floats\nFloats are, by default, boxed (allocated on the heap). Save this as\n`float.ml` and compile it with `ocamlopt -S float.ml -o float`:\n\n```ocamltop\nprint_float 3.0\n```\nThe number is not passed directly to `string_of_float` in the `%eax`\nregister as happened above with ints. Instead, it is created statically\nin the data segment:\n\n```assembly\n        .data\n        .long   2301\n        .globl  Float__1\nFloat__1:\n        .double 3.0\n```\nand a pointer to the float is passed in `%eax` instead:\n\n```assembly\n        movl    $Float__1, %eax\n        call    Pervasives__string_of_float_157\n```\nNote the structure of the floating point number: it has a header (2301),\nfollowed by the 8 byte (2 word) representation of the number itself. The\nheader can be decoded by writing it as binary:\n\n```\nLength of the object in words:  0000 0000 0000 0000 0000 10 (8 bytes)\nColor:                          00\nTag:                            1111 1101 (Double_tag)\n```\n`string_of_float` isn't polymorphic, but suppose we have a polymorphic\nfunction `foo : 'a -> unit` taking one polymorphic argument. If we call\n`foo` with `%eax` containing 7, then this is equivalent to `foo 3`,\nwhereas if we call `foo` with `%eax` containing a pointer to `Float__1`\nabove, then this is equivalent to `foo 3.0`.\n\n###  Arrays\nI mentioned earlier that one of OCaml's targets was numerical computing.\nNumerical computing does a lot of work on vectors and matrices, which\nare essentially arrays of floats. As a special hack to make this go\nfaster, OCaml implements **arrays of unboxed floats**. This\nmeans that in the special case where we have an object of type\n`float array` (array of floats), OCaml stores them the same way as in C:\n\n```C\ndouble array[10];\n```\n... instead of having an array of pointers to ten separately allocated\nfloats on the heap.\n\nLet's see this in practice:\n\n```ocaml\nlet a = Array.create 10 0.0;;\nfor i = 0 to 9 do\n  a.(i) <- float_of_int i\ndone\n```\n\nI'm going to compile this code with the `-unsafe` option to remove\nbounds checking (simplifying the code for our exposition here). The\nfirst line, which creates the array, is compiled to a simple C call:\n\n```assembly\n        pushl   $Arrayfloats__1     ; Boxed float 0.0\n        pushl   $21                 ; The integer 10\n        movl    $make_vect, %eax    ; Address of the C function to call\n        call    caml_c_call\n    ; ...\n        movl    %eax, Arrayfloats   ; Store the resulting pointer to the\n                                    ; array at this place on the heap.\n```\nThe loop is compiled to this relatively simple assembly language:\n\n```assembly\n        movl    $1, %eax            ; Let %eax = 0. %eax is going to store i.\n        cmpl    $19, %eax           ; If %eax > 9, then jump out of the\n        jg      .L100               ;   loop (to label .L100 at the end).\n\n.L101:                              ; This is the start of the loop body.\n        movl    Arrayfloats, %ecx   ; Address of the array to %ecx.\n\n        movl    %eax, %ebx          ; Copy i to %ebx.\n        sarl    $1, %ebx            ; Remove the tag bit from %ebx by\n                                    ;   shifting it right 1 place. So %ebx\n                                    ;   now contains the real integer i.\n\n        pushl   %ebx                ; Convert %ebx to a float.\n        fildl   (%esp)\n        addl    $4, %esp\n\n        fstpl   -4(%ecx, %eax, 4)   ; Store the float in the array at the ith\n                                ; position.\n\n        addl    $2, %eax            ; i := i + 1\n        cmpl    $19, %eax           ; If i <= 9, loop around again.\n        jle     .L101\n.L100:\n```\nThe important statement is the one which stores the float into the\narray. It is:\n\n```assembly\n        fstpl   -4(%ecx, %eax, 4)\n```\nThe assembler syntax is rather complex, but the bracketed expression\n`-4(%ecx, %eax, 4)` means \"at the address `%ecx + 4*%eax - 4`\". Recall\nthat `%eax` is the OCaml representation of i, complete with tag bit, so\nit is essentially equal to `i*2+1`, so let's substitute that and\nmultiply it out:\n\n```assembly\n  %ecx + 4*%eax - 4\n= %ecx + 4*(i*2+1) - 4\n= %ecx + 4*i*2 + 4 - 4\n= %ecx + 8*i\n```\n(Each float in the array is 8 bytes long.)\n\nSo arrays of floats are unboxed, as expected.\n\n###  Partially applied functions and closures\nHow does OCaml compile functions which are only partially applied? Let's\ncompile this code:\n\n```ocaml\nArray.map ((+) 2) [|1; 2; 3; 4; 5|]\n```\n\nIf you recall the syntax, `[| ... |]` declares an array (in this case an\n`int array`), and `((+) 2)` is a closure - \"the function which adds 2 to\nthings\".\n\nCompiling this code reveals some interesting new features. Firstly the\ncode which allocates the array:\n\n```assembly\n        movl    $24, %eax           ; Allocate 5 * 4 + 4 = 24 bytes of memory.\n        call    caml_alloc\n\n        leal    4(%eax), %eax       ; Let %eax point to 4 bytes into the\n                                    ;   allocated memory.\n```\nAll heap allocations have the same format: 4 byte header + data. In this\ncase the data is 5 integers, so we allocate 4 bytes for the header plus\n5 * 4 bytes for the data. We update the pointer to point at the first\ndata word, ie. 4 bytes into the allocated memory block.\n\nNext OCaml generates code to initialize the array:\n\n```assembly\n        movl    $5120, -4(%eax)\n        movl    $3, (%eax)\n        movl    $5, 4(%eax)\n        movl    $7, 8(%eax)\n        movl    $9, 12(%eax)\n        movl    $11, 16(%eax)\n```\nThe header word is 5120, which if you write it in binary means a block\ncontaining 5 words, with tag zero. The tag of zero means it's a\n\"structured block\" a.k.a. an array. We also copy the numbers 1, 2, 3, 4\nand 5 to the appropriate places in the array. Notice the OCaml\nrepresentation of integers is used. Because this is a structured block,\nthe garbage collector will scan each word in this block, and the GC\nneeds to be able to distinguish between integers and pointers to other\nheap-allocated blocks (the GC does not have access to type information\nabout this array).\n\nNext the closure `((+) 2)` is created. The closure is represented by\nthis block allocated in the data segment:\n\n```assembly\n        .data\n        .long   3319\n        .globl  Closure__1\nClosure__1:\n        .long   caml_curry2\n        .long   5\n        .long   Closure__fun_58\n```\nThe header is 3319, indicating a `Closure_tag` with length 3 words. The\n3 words in the block are the address of the function `caml_curry2`, the\ninteger number 2 and the address of this function:\n\n```assembly\n        .text\n        .globl  Closure__fun_58\nClosure__fun_58:\n\n        ; The function takes two arguments, %eax and %ebx.\n        ; This line causes the function to return %eax + %ebx - 1.\n\n        lea     -1(%eax, %ebx), %eax\n        ret\n```\nWhat does this function do? On the face of it, it adds the two\narguments, and subtracts one. But remember that `%eax` and `%ebx` are in\nthe OCaml representation for integers. Let's represent them as:\n\n* `%eax = 2 * a + 1`\n* `%ebx = 2 * b + 1`\n\nwhere `a` and `b` are the actual integer arguments. So this function\nreturns:\n\n```\n%eax + %ebx - 1\n= 2 * a + 1 + 2 * b + 1 - 1\n= 2 * a + 2 * b + 1\n= 2 * (a + b) + 1\n```\nIn other words, this function returns the OCaml integer representation\nof the sum `a + b`. This function is `(+)`!\n\n(It's actually more subtle than this - to perform the mathematics\nquickly, OCaml uses the x86 addressing hardware in a way that probably\nwasn't intended by the designers of the x86.)\n\nSo back to our closure - we won't go into the details of the\n`caml_curry2` function, but just say that this closure is the argument\n`2` applied to the function `(+)`, waiting for a second argument. Just\nas expected.\n\nThe actual call to the `Array.map` function is quite difficult to\nunderstand, but the main points for our examination of OCaml is that the\ncode:\n\n* Does call `Array.map` with an explicit closure.\n* Does not attempt to inline the call and turn it into a loop.\n\nCalling `Array.map` in this way is undoubtedly slower than writing a\nloop over the array by hand. The overhead is mainly in the fact that the\nclosure must be evaluated for each element of the array, and that isn't\nas fast as inlining the closure as a function (if this optimization were\neven possible). However, if you had a more substantial closure than just\n`((+) 2)`, the overhead would be reduced. The FP version also saves\nexpensive *programmer* time versus writing the imperative loop.\n\n## Profiling\nThere are two types of profiling that you can do on OCaml programs:\n\n1. Get execution counts for bytecode.\n1. Get real profiling for native code.\n\nThe `ocamlcp` and `ocamlprof` programs perform profiling on bytecode.\nHere is an example:\n\n<!-- $MDX file=examples/gc.ml -->\n```ocaml\nlet rec iterate r x_init i =\n  if i = 1 then x_init\n  else\n    let x = iterate r x_init (i - 1) in\n    r *. x *. (1.0 -. x)\n\nlet () =\n  Random.self_init ();\n  Graphics.open_graph \" 640x480\";\n  for x = 0 to 640 do\n    let r = 4.0 *. float_of_int x /. 640.0 in\n    for i = 0 to 39 do\n      let x_init = Random.float 1.0 in\n      let x_final = iterate r x_init 500 in\n      let y = int_of_float (x_final *. 480.) in\n      Graphics.plot x y\n    done\n  done;\n  Gc.print_stat stdout\n```\n\nAnd can be run and compiled with \n\n<!-- $MDX skip -->\n```\n$ ocamlcp -p a graphics.cma graphtest.ml -o graphtest\n$ ./graphtest\n$ ocamlprof graphtest.ml\n```\n\nThe comments `(* nnn *)` are added by `ocamlprof`, showing how many\ntimes each part of the code was called.\n\nProfiling native code is done using your operating system's native\nsupport for profiling. In the case of Linux, we use `gprof`. An alternative\nis [perf](https://en.wikipedia.org/wiki/Perf_(Linux)), as explained below.\n\nWe compile it using the `-p` option to `ocamlopt` which tells the\ncompiler to include profiling information for `gprof`:\n\nAfter running the program as normal, the profiling code dumps out a file\n`gmon.out` which we can interpret with `gprof`:\n\n```\n$ gprof ./a.out\nFlat profile:\n  \nEach sample counts as 0.01 seconds.\n  %   cumulative   self              self     total\n time   seconds   seconds    calls   s/call   s/call  name\n 10.86      0.57     0.57     2109     0.00     0.00  sweep_slice\n  9.71      1.08     0.51     1113     0.00     0.00  mark_slice\n  7.24      1.46     0.38  4569034     0.00     0.00  Sieve__code_begin\n  6.86      1.82     0.36  9171515     0.00     0.00  Stream__set_data_140\n  6.57      2.17     0.34 12741964     0.00     0.00  fl_merge_block\n  6.29      2.50     0.33  4575034     0.00     0.00  Stream__peek_154\n  5.81      2.80     0.30 12561656     0.00     0.00  alloc_shr\n  5.71      3.10     0.30     3222     0.00     0.00  oldify_mopup\n  4.57      3.34     0.24 12561656     0.00     0.00  allocate_block\n  4.57      3.58     0.24  9171515     0.00     0.00  modify\n  4.38      3.81     0.23  8387342     0.00     0.00  oldify_one\n  3.81      4.01     0.20 12561658     0.00     0.00  fl_allocate\n  3.81      4.21     0.20  4569034     0.00     0.00  Sieve__filter_56\n  3.62      4.40     0.19     6444     0.00     0.00  empty_minor_heap\n  3.24      4.57     0.17     3222     0.00     0.00  oldify_local_roots\n  2.29      4.69     0.12  4599482     0.00     0.00  Stream__slazy_221\n  2.10      4.80     0.11  4597215     0.00     0.00  darken\n  1.90      4.90     0.10  4596481     0.00     0.00  Stream__fun_345\n  1.52      4.98     0.08  4575034     0.00     0.00  Stream__icons_207\n  1.52      5.06     0.08  4575034     0.00     0.00  Stream__junk_165\n  1.14      5.12     0.06     1112     0.00     0.00  do_local_roots\n  \n[ etc. ]\n```\n\n### Using perf on Linux\n\nAssuming perf is installed and your program is compiled into\nnative code with `-g` (or ocamlbuild tag `debug`), you just need to type\n\n<!-- $MDX skip -->\n```sh\nperf record --call-graph=dwarf -- ./foo.native a b c d\nperf report\n```\n\nThe first command launches `foo.native` with arguments `a b c d` and\nrecords profiling information in `perf.data`; the second command\nstarts an interactive program to explore the call graph. The option\n`--call-graph=dwarf` makes perf aware of the calling convention of\nOCaml (with old versions of `perf`, enabling frame pointers in OCaml\nmight help; opam provides suitable compiler switches, such as `4.02.1+fp`).\n\n## Summary\nIn summary here are some tips for getting the best performance out of\nyour programs:\n\n1. Write your program as simply as possible. If it takes too long to\n run, profile it to find out where it's spending its time and\n concentrate optimizations on just those areas.\n1. Check for unintentional polymorphism, and add type hints for the\n compiler.\n1. Closures are slower than simple function calls, but add to\n maintainability and readability.\n1. As a last resort, rewrite hotspots in your program in C (but first\n check the assembly language produced by the OCaml compiler to see if\n you can do better than it).\n1. Performance might depend on external factors (speed of your database\n queries? speed of the network?). If so then no amount of\n optimization will help you.\n\n###  Further reading\nYou can find out more about how OCaml represents different types by\nreading the (\"Interfacing C with OCaml\") chapter in the OCaml manual and also\nlooking at the `mlvalues.h` header file.\n\n<!--###  Java dynamic dispatch\n**There are some serious mistakes in the last paragraph:**\n\n* Dynamic method dispatch itself is seldom a performance problem. In\n languages without multiple inheritance (e.g. Java) this is usually\n done via one step of pointer indirection. Objects in OCaml are also\n dynamically dispatched. Since this is the point with polymorphism in\n an OO setting.\n\n* Dynamic method dispatch often hinders a compiler to inline function\n and this hits the performance.\n\n* In Java is a dynamic type check (aka cast) much more expensive than\n a dynamic method dispatch. -->\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#speed\">Speed</a>\n</li>\n<li><a href=\"#profiling\">Profiling</a>\n</li>\n<li><a href=\"#summary\">Summary</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<h2 id=\"speed\">Speed</h2>\n<p>Why is OCaml fast? Indeed, step back and ask <em>is OCaml fast?</em> How can we\nmake programs faster? In this chapter we'll look at what actually\nhappens when you compile your OCaml programs down to machine code. This\nwill help in understanding why OCaml is not just a great language for\nprogramming, but is also a very fast language indeed. And it'll help you\nto help the compiler write better machine code for you. It's also (I\nbelieve anyway) a good thing for programmers to have some idea of what\nhappens between you typing <code>ocamlopt</code> and getting a binary you can run.</p>\n<p>But you will need to know some assembler to get the most out of this\nsection. Don't be afraid! I'll help you out by translating the assembler\ninto a C-like pseudocode (after all C is just a portable assembly\nlanguage).</p>\n<h3 id=\"basics-of-assembly-language\">Basics of assembly language</h3>\n<p>The examples I give in this chapter are all compiled on an x86 Linux\nmachine. The x86 is, of course, a 32 bit machine, so an x86 &quot;word&quot; is 4\nbytes (= 32 bits) long. At this level OCaml deals mostly with word-sized\nobjects, so you'll need to remember to multiply by four to get the size\nin bytes.</p>\n<p>To refresh your memory, the x86 has only a small number of general\npurpose registers, each of which can store one word. The Linux assembler\nputs <code>%</code> in front of register names. The registers are: <code>%eax</code>, <code>%ebx</code>,\n<code>%ecx</code>, <code>%edx</code>, <code>%esi</code>, <code>%edi</code>, <code>%ebp</code> (special register used for stack\nframes), and <code>%esp</code> (the stack pointer).</p>\n<p>The Linux assembler (in common with other Unix assemblers, but opposite\nto MS-derived assemblers) writes moves to and from registers/memory as:</p>\n<pre><code class=\"language-assembly\">movl from, to\n</code></pre>\n<p>So <code>movl %ebx, %eax</code> means &quot;copy the contents of register <code>%ebx</code> into\nregister <code>%eax</code>&quot; (not the other way round).</p>\n<p>Almost all of the assembly language that we will look at is going to be\ndominated not by machine code instructions like <code>movl</code> but by what are\nknown as <strong>assembler directives</strong>. These directives begin\nwith a . (period) and they literally <em>direct</em> the assembler to do\nsomething. Here are the common ones for the Linux assembler:</p>\n<h4 id=\"text\">.text</h4>\n<p><strong>Text</strong> is the Unix way of saying &quot;program code&quot;. The <strong>text segment</strong>\nsimply means the part of the executable where program code is stored.\nThe <code>.text</code> directive switches the assembler so it starts writing into\nthe text segment.</p>\n<h4 id=\"data\">.data</h4>\n<p>Similarly, the <code>.data</code> directive switches the assembler so it starts\nwriting into the data segment (part) of the executable.</p>\n<pre><code class=\"language-assembly\">  .globl foo\nfoo:\n</code></pre>\n<p>This declares a global symbol called <code>foo</code>. It means the address of the\nnext thing to come can be named <code>foo</code>. Writing just <code>foo:</code> without the\npreceding <code>.globl</code> directive declares a local symbol (local to just the\ncurrent file).</p>\n<pre><code class=\"language-assembly\">.long 12345\n.byte 9\n.ascii &quot;hello&quot;\n.space 4\n</code></pre>\n<p><code>.long</code> writes a word (4 bytes) to the current segment. <code>.byte</code> writes a\nsingle byte. <code>.ascii</code> writes a string of bytes (NOT nul-terminated).\n<code>.space</code> writes the given number of zero bytes. Normally you use these\nin the data segment.</p>\n<h3 id=\"the-hello-world-program\">The &quot;hello, world&quot; program</h3>\n<p>Enough assembler. Put the following program into a file called\n<code>smallest.ml</code>:</p>\n<pre><code class=\"language-ocaml\">print_string &quot;hello, world\\n&quot;\n</code></pre>\n<p>And compile it to a native code executable using:</p>\n<pre><code class=\"language-shell\">ocamlopt -S smallest.ml -o smallest\n</code></pre>\n<p>The <code>-S</code> (capital S) tells the compiler to leave the assembly language\nfile (called <code>smallest.s</code> - lowercase s) instead of deleting it.</p>\n<p>Here are the edited highlights of the <code>smallest.s</code> file with my comments\nadded. First of all the data segment:</p>\n<pre><code class=\"language-assembly\">    .data\n    .long   4348                     ; header for string\n    .globl  Smallest__1\nlest__1:\n    .ascii  &quot;hello, world\\12&quot;        ; string\n    .space  2                        ; padding ..\n    .byte   2                        ;  .. after string\n</code></pre>\n<p>Next up the text (program code) segment:</p>\n<pre><code class=\"language-assembly\">    .text\n    .globl  Smallest__entry          ; entry point to the program\nlest__entry:\n\n    ; this is equivalent to the C pseudo-code:\n    ; Pervasives.output_string (stdout, &amp;Smallest__1)\n\n    movl    $Smallest__1, %ebx\n    movl    Pervasives + 92, %eax    ; Pervasives + 92 == stdout\n    call    Pervasives__output_string_212\n\n    ; return 1\n\n    movl    $1, %eax\n    ret\n</code></pre>\n<p>In C everything has to be inside a function. Think about how you can't\njust write <code>printf (&quot;hello, world\\n&quot;);</code> in C, but instead you have to\nput it inside <code>main () { ... }</code>. In OCaml you are allowed to have\ncommands at the top level, not inside a function. But when we translate\nthis into assembly language, where do we put those commands? There needs\nto be some way to call those commands from outside, so they need to be\nlabelled in some way. As you can see from the code snippet, OCaml solves\nthis by taking the filename (<code>smallest.ml</code>), capitalizing it and adding\n<code>__entry</code>, thus making up a symbol called <code>Smallest__entry</code> to refer to\nthe top level commands in this file.</p>\n<p>Now look at the code that OCaml has generated. The original code said\n<code>print_string &quot;hello, world\\n&quot;</code>, but OCaml has instead compiled the\nequivalent of <code>Pervasives.output_string stdout &quot;hello, world\\n&quot;</code>. Why?\nIf you look into <code>pervasives.ml</code> you'll see why:</p>\n<pre><code class=\"language-ocaml\">let print_string s = output_string stdout s\n</code></pre>\n<p>OCaml has <em>inlined</em> this function. <strong>Inlining</strong> - taking a function and\nexpanding it from its definition - is sometimes a performance win,\nbecause it avoids the overhead of an extra function call, and it can\nlead to more opportunities for the optimizer to do its thing. Sometimes\ninlining is not good, because it can lead to code bloating, and thus\ndestroys the good work done by the processor cache (and besides function\ncalls are actually not very expensive at all on modern processors).\nOCaml will inline simple calls like this, because they are essentially\nrisk free, almost always leading to a small performance gain.</p>\n<p>What else can we notice about this? The calling convention seems to be\nthat the first two arguments are passed in the <code>%eax</code> and <code>%ebx</code>\nregisters respectively. Other arguments are probably passed on the\nstack, but we'll see about that later.</p>\n<p>C programs have a simple convention for storing strings, known as\n<strong>ASCIIZ</strong>. This just means that the string is stored in ASCII, followed\nby a trailing NUL (<code>\\0</code>) character. OCaml stores strings in a different\nway, as we can see from the data segment above. This string is stored\nlike this:</p>\n<pre><code>4 byte header: 4348\nthe string:    h e l l o , SP w o r l d \\n\npadding:       \\0 \\0 \\002\n</code></pre>\n<p>Firstly the padding brings the total length of the string up to a whole\nnumber of words (4 words, 16 bytes in this example). The padding is\ncarefully designed so that you can work out the actual length of the\nstring in bytes, provided that you know the total number of <em>words</em>\nallocated to the string. The encoding for this is unambiguous (which you\ncan prove to yourself).</p>\n<p>One nice feature of having strings with an explicit length is that you\ncan represent strings containing ASCII NUL (<code>\\0</code>) characters in them,\nsomething which is difficult to do in C. However, the flip side is that\nyou need to be aware of this if you pass an OCaml string to some C\nnative code: if it contains ASCII NUL, then the C <code>str*</code> functions will\nfail on it.</p>\n<p>Secondly we have the header. Every boxed (allocated) object in OCaml has\na header which tells the garbage collector about how large the object is\nin words, and something about what the object contains. Writing the\nnumber 4348 in binary:</p>\n<pre><code>length of the object in words:  0000 0000 0000 0000 0001 00 (4 words)\ncolor (used by GC):             00\ntag:                            1111 1100 (String_tag)\n</code></pre>\n<p>See <code>/usr/include/caml/mlvalues.h</code> for more information about\nthe format of heap allocated objects in OCaml.</p>\n<p>One unusual thing is that the code passes a pointer to the start of the\nstring (ie. the word immediately after the header) to\n<code>Pervasives.output_string</code>. This means that <code>output_string</code> must\nsubtract 4 from the pointer to get at the header to determine the length\nof the string.</p>\n<p>What have I missed out from this simple example? Well, the text segment\nabove is not the whole story. It would be really nice if OCaml\ntranslated that simple hello world program into just the five lines of\nassembler shown above. But there is the question of what actually calls\n<code>Smallest__entry</code> in the real program. For this OCaml includes a whole\nload of bootstrapping code which does things like starting up the\ngarbage collector, allocating and initializing memory, calling\ninitializers in libraries and so on. OCaml links all of this code\nstatically to the final executable, which is why the program I end up\nwith (on Linux) weighs in at a portly 95,442 bytes. Nevertheless the\nstart-up time for the program is still unmeasurably small (under a\nmillisecond), compared to several seconds for starting up a reasonable\nJava program and a second or so for a Perl script.</p>\n<h3 id=\"tail-recursion\">Tail recursion</h3>\n<p>We mentioned in chapter 6 that OCaml can turn tail-recursive function\ncalls into simple loops. Is this actually true? Let's look at what\nsimple tail recursion compiles to:</p>\n<!-- do not execute this code!! -->\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  print_string &quot;I go on forever ...&quot;;\n  loop ()\n  \nlet () = loop ()\n</code></pre>\n<p>The file is called <code>tail.ml</code>, so following OCaml's usual procedure for\nnaming functions, our function will be called <code>Tail__loop_nnn</code> (where\n<code>nnn</code> is some unique number which OCaml appends to distinguish\nidentically named functions from one another).</p>\n<p>Here is the assembler for just the <code>loop</code> function defined above:</p>\n<pre><code class=\"language-assembly\">        .text\n        .globl  Tail__loop_56\nTail__loop_56:\n.L100:\n        ; Print the string\n        movl    $Tail__2, %ebx\n        movl    Pervasives + 92, %eax\n        call    Pervasives__output_string_212\n.L101:\n        ; The following movl is in fact obsolete:\n        movl    $1, %eax\n        ; Jump back to the .L100 label above (ie. loop forever)\n        jmp     .L100\n</code></pre>\n<p>So that's pretty conclusive. Calling <code>Tail__loop_56</code> will first print\nthe string, and then jump back to the top, then print the string, and\njump back, and so on forever. It's a simple loop, <em>not</em> a recursive\nfunction call, so it doesn't use any stack space.</p>\n<h3 id=\"digression-where-are-the-types\">Digression: Where are the types?</h3>\n<p>OCaml is statically typed as we've said before on many occasions, so at\ncompile time, OCaml knows that the type of <code>loop</code> is <code>unit -&gt; unit</code>. It\nknows that the type of <code>&quot;hello, world\\n&quot;</code> is <code>string</code>. It doesn't make\nany attempt to communicate this fact to the <code>output_string</code> function.\n<code>output_string</code> is expecting a <code>channel</code> and a <code>string</code> as arguments,\nand indeed that's what it gets. What would happen if we passed, say, an\n<code>int</code> instead of a <code>string</code>?</p>\n<p>This is essentially an impossible condition. Because OCaml knows the\ntypes at compile time, it doesn't need to deal with types or check types\nat run time. There is no way, in pure OCaml, to &quot;trick&quot; the compiler\ninto generating a call to <code>Pervasives.output_string stdout 1</code>. Such an\nerror would be flagged at compile time, by type inference, and so could\nnever be compiled.</p>\n<p>The upshot is that by the time we have compiled OCaml code to assembler\ntype information mostly isn't required, certainly in the cases we've\nlooked at above where the type is fully known at compile time, and there\nis no polymorphism going on.</p>\n<p>Fully knowing all your types at compile time is a major performance win\nbecause it totally avoids any dynamic type checking at run time. Compare\nthis to a Java method invocation for example: <code>obj.method ()</code>. This is\nan expensive operation because you need to find the concrete class that\n<code>obj</code> is an instance of, and then look up the method, and you need to do\nall of this potentially <em>every</em> time you call any method. Casting\nobjects is another case where you need to do a considerable amount of\nwork at run time in Java. None of this is allowed with OCaml's static\ntypes.</p>\n<h3 id=\"polymorphic-types\">Polymorphic types</h3>\n<p>As you might have guessed from the discussion above, polymorphism, which\nis where the compiler <em>doesn't</em> have a fully known type for a function\nat compile time, might have an impact on performance. Suppose we require\na function to work out the maximum of two integers. Our first attempt\nis:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b\nval max : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>Simple enough, but recall that the &gt; (greater than) operator in OCaml\nis polymorphic. It has type <code>'a -&gt; 'a -&gt; bool</code>, and this means that the\n<code>max</code> function we defined above is going to be polymorphic:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b\nval max : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>This is indeed reflected in the code that OCaml generates for this\nfunction, which is pretty complex:</p>\n<pre><code class=\"language-assembly\">        .text\n        .globl  Max__max_56\nMax__max_56:\n\n        ; Reserve two words of stack space.\n\n        subl    $8, %esp\n\n        ; Save the first and second arguments (a and b) on the stack.\n\n        movl    %eax, 4(%esp)\n        movl    %ebx, 0(%esp)\n\n        ; Call the C &quot;greaterthan&quot; function (in the OCaml library).\n\n        pushl   %ebx\n        pushl   %eax\n        movl    $greaterthan, %eax\n        call    caml_c_call\n.L102:\n        addl    $8, %esp\n\n        ; If the C &quot;greaterthan&quot; function returned 1, jump to .L100\n\n        cmpl    $1, %eax\n        je      .L100\n\n        ; Returned 0, so get argument a which we previously saved on\n        ; the stack and return it.\n\n        movl    4(%esp), %eax\n        addl    $8, %esp\n        ret\n\n        ; Returned 1, so get argument b which we previously saved on\n        ; the stack and return it.\n\n.L100:\n        movl    0(%esp), %eax\n        addl    $8, %esp\n        ret\n</code></pre>\n<p>Basically the &gt; operation is done by calling a C function from the\nOCaml library. This is obviously not going to be very efficient, nothing\nlike as efficient as if we could generate some quick inline assembly\nlanguage for doing the &gt;.</p>\n<p>This is not a complete dead loss by any means. All we need to do is to\nhint to the OCaml compiler that the arguments are in fact integers. Then\nOCaml will generate a specialised version of <code>max</code> which only works on\n<code>int</code> arguments:</p>\n<pre><code class=\"language-ocaml\"># let max (a : int) (b : int) =\n  if a &gt; b then a else b\nval max : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Here is the assembly code generated for this function:</p>\n<pre><code class=\"language-assembly\">        .text\n        .globl  Max_int__max_56\nMax_int__max_56:\n\n        ; Single assembly instruction &quot;cmpl&quot; for performing the &gt; op.\n        cmpl    %ebx, %eax\n\n        ; If %ebx &gt; %eax, jump to .L100\n        jle     .L100\n        ; Just return argument a.\n        ret\n        ; Return argument b.\n\n.L100:\n        movl    %ebx, %eax\n        ret\n</code></pre>\n<p>That's just 5 lines of assembler, and is about as simple as you can make\nit.</p>\n<p>What about this code:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b\nval max : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n# let () = print_int (max 2 3)\n3\n</code></pre>\n<p>Is OCaml going to be smart enough to inline the <code>max</code> function and\nspecialise it to work on integers? Disappointingly the answer is no.\nOCaml still has to generate the external <code>Max.max</code> symbol (because this\nis a module, and so that function might be called from outside the\nmodule), and it doesn't inline the function.</p>\n<p>Here's another variation:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b in\n  print_int (max 2 3)\n3\n- : unit = ()\n</code></pre>\n<p>Disappointingly although the definition of <code>max</code> in this code is local\n(it can't be called from outside the module), OCaml still doesn't\nspecialise the function.</p>\n<p>Lesson: if you have a function which is unintentionally polymorphic then\nyou can help the compiler by specifying types for one or more of the\narguments.</p>\n<h3 id=\"the-representation-of-integers-tag-bits-heap-allocated-values\">The representation of integers, tag bits, heap-allocated values</h3>\n<p>There are a number of peculiarities about integers in OCaml. One of\nthese is that integers are 31 bit entities, not 32 bit entities. What\nhappens to the &quot;missing&quot; bit?</p>\n<p>Write this to <code>int.ml</code>:</p>\n<pre><code class=\"language-ocaml\">print_int 3\n</code></pre>\n<p>and compile with <code>ocamlopt -S int.ml -o int</code> to generate assembly\nlanguage in <code>int.s</code>. Recall from the discussion above that we are\nexpecting OCaml to inline the <code>print_int</code> function as\n<code>output_string (string_of_int 3)</code>, and examining the assembly language\noutput we can see that this is exactly what OCaml does:</p>\n<pre><code class=\"language-assembly\">        .text\n        .globl  Int__entry\nInt__entry:\n\n        ; Call Pervasives.string_of_int (3)\n\n        movl    $7, %eax\n        call    Pervasives__string_of_int_152\n\n        ; Call Pervasives.output_string (stdout, result_of_previous)\n\n        movl    %eax, %ebx\n        movl    Pervasives + 92, %eax\n        call    Pervasives__output_string_212\n</code></pre>\n<p>The important code is shown in red. It shows two things: Firstly the\ninteger is unboxed (not allocated on the heap), but is instead passed\ndirectly to the function in the register <code>%eax</code>. This is fast. But\nsecondly we see that the number being passed is 7, not 3.</p>\n<p>This is a consequence of the representation of integers in OCaml. The\nbottom bit of the integer is used as a tag - we'll see what for next.\nThe top 31 bits are the actual integer. The binary representation of 7\nis 111, so the bottom tag bit is 1 and the top 31 bits form the number\n11 in binary = 3. To get from the OCaml representation to the integer,\ndivide by two and round down.</p>\n<p>Why the tag bit at all? This bit is used to distinguish between integers\nand pointers to structures on the heap, and the distinction is only\nnecessary if we are calling a polymorphic function. In the case above,\nwhere we are calling <code>string_of_int</code>, the argument can only ever be an\n<code>int</code> and so the tag bit would never be consulted. Nevertheless, to\navoid having two internal representations for integers, all integers in\nOCaml carry around the tag bit.</p>\n<p>A bit of background about pointers is required to understand why the tag\nbit is really necessary, and why it is where it is.</p>\n<p>In the world of RISC chips like the Sparc, MIPS and Alpha, pointers have\nto be word-aligned. So on the older 32 bit Sparc, for example, it's not\npossible to create and use a pointer which isn't aligned to a multiple\nof 4 (bytes). Trying to use one generates a processor exception, which\nmeans basically your program segfaults. The reason for this is just to\nsimplify memory access. It's just a lot simpler to design the memory\nsubsystem of a CPU if you only need to worry about word-aligned access.</p>\n<p>For historical reasons (because the x86 is derived from an 8 bit chip),\nthe x86 has supported unaligned memory access, although if you align all\nmemory accesses to multiples of 4, then things go faster.</p>\n<p>Nevertheless, all pointers in OCaml are aligned - ie. multiples of 4 for\n32 bit processors, and multiples of 8 for 64 bit processors. This means\nthat the bottom bit of any pointer in OCaml will always be zero.</p>\n<p>So you can see that by looking at the bottom bit of a register, you can\nimmediately tell if it stores a pointer (&quot;tag&quot; bit is zero), or an\ninteger (tag bit set to one).</p>\n<p>Remember our polymorphic &gt; function which caused us so much trouble in\nthe previous section? We looked at the assembler and found out that\nOCaml compiles a call to a C function called <code>greaterthan</code> whenever it\nsees the polymorphic form of &gt;. This function takes two arguments, in\nregisters <code>%eax</code> and <code>%ebx</code>. But <code>greaterthan</code> can be called with\nintegers, floats, strings, opaque objects ... How does it know what\n<code>%eax</code> and <code>%ebx</code> point to?</p>\n<p>It uses the following decision tree:</p>\n<ul>\n<li><strong>Tag bit is one:</strong> compare the two integers and return.\n</li>\n<li><strong>Tag bit is zero:</strong> <code>%eax</code> and <code>%ebx</code> must point at two\nheap-allocated memory blocks. Look at the header word of the memory\nblocks, specifically the bottom 8 bits of the header word, which tag\nthe content of the block.\n<ul>\n<li><strong>String_tag:</strong> Compare two strings.\n</li>\n<li><strong>Double_tag:</strong> Compare two floats.\n</li>\n<li>etc.\n</li>\n</ul>\n</li>\n</ul>\n<p>Note that because &gt; has type <code>'a -&gt; 'a -&gt; bool</code>, both arguments must\nhave the same type. The compiler should enforce this at compile time. I\nwould assume that <code>greaterthan</code> probably contains code to sanity-check\nthis at run time however.</p>\n<h3 id=\"floats\">Floats</h3>\n<p>Floats are, by default, boxed (allocated on the heap). Save this as\n<code>float.ml</code> and compile it with <code>ocamlopt -S float.ml -o float</code>:</p>\n<pre><code class=\"language-ocamltop\">print_float 3.0\n</code></pre>\n<p>The number is not passed directly to <code>string_of_float</code> in the <code>%eax</code>\nregister as happened above with ints. Instead, it is created statically\nin the data segment:</p>\n<pre><code class=\"language-assembly\">        .data\n        .long   2301\n        .globl  Float__1\nFloat__1:\n        .double 3.0\n</code></pre>\n<p>and a pointer to the float is passed in <code>%eax</code> instead:</p>\n<pre><code class=\"language-assembly\">        movl    $Float__1, %eax\n        call    Pervasives__string_of_float_157\n</code></pre>\n<p>Note the structure of the floating point number: it has a header (2301),\nfollowed by the 8 byte (2 word) representation of the number itself. The\nheader can be decoded by writing it as binary:</p>\n<pre><code>Length of the object in words:  0000 0000 0000 0000 0000 10 (8 bytes)\nColor:                          00\nTag:                            1111 1101 (Double_tag)\n</code></pre>\n<p><code>string_of_float</code> isn't polymorphic, but suppose we have a polymorphic\nfunction <code>foo : 'a -&gt; unit</code> taking one polymorphic argument. If we call\n<code>foo</code> with <code>%eax</code> containing 7, then this is equivalent to <code>foo 3</code>,\nwhereas if we call <code>foo</code> with <code>%eax</code> containing a pointer to <code>Float__1</code>\nabove, then this is equivalent to <code>foo 3.0</code>.</p>\n<h3 id=\"arrays\">Arrays</h3>\n<p>I mentioned earlier that one of OCaml's targets was numerical computing.\nNumerical computing does a lot of work on vectors and matrices, which\nare essentially arrays of floats. As a special hack to make this go\nfaster, OCaml implements <strong>arrays of unboxed floats</strong>. This\nmeans that in the special case where we have an object of type\n<code>float array</code> (array of floats), OCaml stores them the same way as in C:</p>\n<pre><code class=\"language-C\">double array[10];\n</code></pre>\n<p>... instead of having an array of pointers to ten separately allocated\nfloats on the heap.</p>\n<p>Let's see this in practice:</p>\n<pre><code class=\"language-ocaml\">let a = Array.create 10 0.0;;\nfor i = 0 to 9 do\n  a.(i) &lt;- float_of_int i\ndone\n</code></pre>\n<p>I'm going to compile this code with the <code>-unsafe</code> option to remove\nbounds checking (simplifying the code for our exposition here). The\nfirst line, which creates the array, is compiled to a simple C call:</p>\n<pre><code class=\"language-assembly\">        pushl   $Arrayfloats__1     ; Boxed float 0.0\n        pushl   $21                 ; The integer 10\n        movl    $make_vect, %eax    ; Address of the C function to call\n        call    caml_c_call\n    ; ...\n        movl    %eax, Arrayfloats   ; Store the resulting pointer to the\n                                    ; array at this place on the heap.\n</code></pre>\n<p>The loop is compiled to this relatively simple assembly language:</p>\n<pre><code class=\"language-assembly\">        movl    $1, %eax            ; Let %eax = 0. %eax is going to store i.\n        cmpl    $19, %eax           ; If %eax &gt; 9, then jump out of the\n        jg      .L100               ;   loop (to label .L100 at the end).\n\n.L101:                              ; This is the start of the loop body.\n        movl    Arrayfloats, %ecx   ; Address of the array to %ecx.\n\n        movl    %eax, %ebx          ; Copy i to %ebx.\n        sarl    $1, %ebx            ; Remove the tag bit from %ebx by\n                                    ;   shifting it right 1 place. So %ebx\n                                    ;   now contains the real integer i.\n\n        pushl   %ebx                ; Convert %ebx to a float.\n        fildl   (%esp)\n        addl    $4, %esp\n\n        fstpl   -4(%ecx, %eax, 4)   ; Store the float in the array at the ith\n                                ; position.\n\n        addl    $2, %eax            ; i := i + 1\n        cmpl    $19, %eax           ; If i &lt;= 9, loop around again.\n        jle     .L101\n.L100:\n</code></pre>\n<p>The important statement is the one which stores the float into the\narray. It is:</p>\n<pre><code class=\"language-assembly\">        fstpl   -4(%ecx, %eax, 4)\n</code></pre>\n<p>The assembler syntax is rather complex, but the bracketed expression\n<code>-4(%ecx, %eax, 4)</code> means &quot;at the address <code>%ecx + 4*%eax - 4</code>&quot;. Recall\nthat <code>%eax</code> is the OCaml representation of i, complete with tag bit, so\nit is essentially equal to <code>i*2+1</code>, so let's substitute that and\nmultiply it out:</p>\n<pre><code class=\"language-assembly\">  %ecx + 4*%eax - 4\n= %ecx + 4*(i*2+1) - 4\n= %ecx + 4*i*2 + 4 - 4\n= %ecx + 8*i\n</code></pre>\n<p>(Each float in the array is 8 bytes long.)</p>\n<p>So arrays of floats are unboxed, as expected.</p>\n<h3 id=\"partially-applied-functions-and-closures\">Partially applied functions and closures</h3>\n<p>How does OCaml compile functions which are only partially applied? Let's\ncompile this code:</p>\n<pre><code class=\"language-ocaml\">Array.map ((+) 2) [|1; 2; 3; 4; 5|]\n</code></pre>\n<p>If you recall the syntax, <code>[| ... |]</code> declares an array (in this case an\n<code>int array</code>), and <code>((+) 2)</code> is a closure - &quot;the function which adds 2 to\nthings&quot;.</p>\n<p>Compiling this code reveals some interesting new features. Firstly the\ncode which allocates the array:</p>\n<pre><code class=\"language-assembly\">        movl    $24, %eax           ; Allocate 5 * 4 + 4 = 24 bytes of memory.\n        call    caml_alloc\n\n        leal    4(%eax), %eax       ; Let %eax point to 4 bytes into the\n                                    ;   allocated memory.\n</code></pre>\n<p>All heap allocations have the same format: 4 byte header + data. In this\ncase the data is 5 integers, so we allocate 4 bytes for the header plus\n5 * 4 bytes for the data. We update the pointer to point at the first\ndata word, ie. 4 bytes into the allocated memory block.</p>\n<p>Next OCaml generates code to initialize the array:</p>\n<pre><code class=\"language-assembly\">        movl    $5120, -4(%eax)\n        movl    $3, (%eax)\n        movl    $5, 4(%eax)\n        movl    $7, 8(%eax)\n        movl    $9, 12(%eax)\n        movl    $11, 16(%eax)\n</code></pre>\n<p>The header word is 5120, which if you write it in binary means a block\ncontaining 5 words, with tag zero. The tag of zero means it's a\n&quot;structured block&quot; a.k.a. an array. We also copy the numbers 1, 2, 3, 4\nand 5 to the appropriate places in the array. Notice the OCaml\nrepresentation of integers is used. Because this is a structured block,\nthe garbage collector will scan each word in this block, and the GC\nneeds to be able to distinguish between integers and pointers to other\nheap-allocated blocks (the GC does not have access to type information\nabout this array).</p>\n<p>Next the closure <code>((+) 2)</code> is created. The closure is represented by\nthis block allocated in the data segment:</p>\n<pre><code class=\"language-assembly\">        .data\n        .long   3319\n        .globl  Closure__1\nClosure__1:\n        .long   caml_curry2\n        .long   5\n        .long   Closure__fun_58\n</code></pre>\n<p>The header is 3319, indicating a <code>Closure_tag</code> with length 3 words. The\n3 words in the block are the address of the function <code>caml_curry2</code>, the\ninteger number 2 and the address of this function:</p>\n<pre><code class=\"language-assembly\">        .text\n        .globl  Closure__fun_58\nClosure__fun_58:\n\n        ; The function takes two arguments, %eax and %ebx.\n        ; This line causes the function to return %eax + %ebx - 1.\n\n        lea     -1(%eax, %ebx), %eax\n        ret\n</code></pre>\n<p>What does this function do? On the face of it, it adds the two\narguments, and subtracts one. But remember that <code>%eax</code> and <code>%ebx</code> are in\nthe OCaml representation for integers. Let's represent them as:</p>\n<ul>\n<li><code>%eax = 2 * a + 1</code>\n</li>\n<li><code>%ebx = 2 * b + 1</code>\n</li>\n</ul>\n<p>where <code>a</code> and <code>b</code> are the actual integer arguments. So this function\nreturns:</p>\n<pre><code>%eax + %ebx - 1\n= 2 * a + 1 + 2 * b + 1 - 1\n= 2 * a + 2 * b + 1\n= 2 * (a + b) + 1\n</code></pre>\n<p>In other words, this function returns the OCaml integer representation\nof the sum <code>a + b</code>. This function is <code>(+)</code>!</p>\n<p>(It's actually more subtle than this - to perform the mathematics\nquickly, OCaml uses the x86 addressing hardware in a way that probably\nwasn't intended by the designers of the x86.)</p>\n<p>So back to our closure - we won't go into the details of the\n<code>caml_curry2</code> function, but just say that this closure is the argument\n<code>2</code> applied to the function <code>(+)</code>, waiting for a second argument. Just\nas expected.</p>\n<p>The actual call to the <code>Array.map</code> function is quite difficult to\nunderstand, but the main points for our examination of OCaml is that the\ncode:</p>\n<ul>\n<li>Does call <code>Array.map</code> with an explicit closure.\n</li>\n<li>Does not attempt to inline the call and turn it into a loop.\n</li>\n</ul>\n<p>Calling <code>Array.map</code> in this way is undoubtedly slower than writing a\nloop over the array by hand. The overhead is mainly in the fact that the\nclosure must be evaluated for each element of the array, and that isn't\nas fast as inlining the closure as a function (if this optimization were\neven possible). However, if you had a more substantial closure than just\n<code>((+) 2)</code>, the overhead would be reduced. The FP version also saves\nexpensive <em>programmer</em> time versus writing the imperative loop.</p>\n<h2 id=\"profiling\">Profiling</h2>\n<p>There are two types of profiling that you can do on OCaml programs:</p>\n<ol>\n<li>Get execution counts for bytecode.\n</li>\n<li>Get real profiling for native code.\n</li>\n</ol>\n<p>The <code>ocamlcp</code> and <code>ocamlprof</code> programs perform profiling on bytecode.\nHere is an example:</p>\n<!-- $MDX file=examples/gc.ml -->\n<pre><code class=\"language-ocaml\">let rec iterate r x_init i =\n  if i = 1 then x_init\n  else\n    let x = iterate r x_init (i - 1) in\n    r *. x *. (1.0 -. x)\n\nlet () =\n  Random.self_init ();\n  Graphics.open_graph &quot; 640x480&quot;;\n  for x = 0 to 640 do\n    let r = 4.0 *. float_of_int x /. 640.0 in\n    for i = 0 to 39 do\n      let x_init = Random.float 1.0 in\n      let x_final = iterate r x_init 500 in\n      let y = int_of_float (x_final *. 480.) in\n      Graphics.plot x y\n    done\n  done;\n  Gc.print_stat stdout\n</code></pre>\n<p>And can be run and compiled with</p>\n<!-- $MDX skip -->\n<pre><code>$ ocamlcp -p a graphics.cma graphtest.ml -o graphtest\n$ ./graphtest\n$ ocamlprof graphtest.ml\n</code></pre>\n<p>The comments <code>(* nnn *)</code> are added by <code>ocamlprof</code>, showing how many\ntimes each part of the code was called.</p>\n<p>Profiling native code is done using your operating system's native\nsupport for profiling. In the case of Linux, we use <code>gprof</code>. An alternative\nis <a href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\">perf</a>, as explained below.</p>\n<p>We compile it using the <code>-p</code> option to <code>ocamlopt</code> which tells the\ncompiler to include profiling information for <code>gprof</code>:</p>\n<p>After running the program as normal, the profiling code dumps out a file\n<code>gmon.out</code> which we can interpret with <code>gprof</code>:</p>\n<pre><code>$ gprof ./a.out\nFlat profile:\n  \nEach sample counts as 0.01 seconds.\n  %   cumulative   self              self     total\n time   seconds   seconds    calls   s/call   s/call  name\n 10.86      0.57     0.57     2109     0.00     0.00  sweep_slice\n  9.71      1.08     0.51     1113     0.00     0.00  mark_slice\n  7.24      1.46     0.38  4569034     0.00     0.00  Sieve__code_begin\n  6.86      1.82     0.36  9171515     0.00     0.00  Stream__set_data_140\n  6.57      2.17     0.34 12741964     0.00     0.00  fl_merge_block\n  6.29      2.50     0.33  4575034     0.00     0.00  Stream__peek_154\n  5.81      2.80     0.30 12561656     0.00     0.00  alloc_shr\n  5.71      3.10     0.30     3222     0.00     0.00  oldify_mopup\n  4.57      3.34     0.24 12561656     0.00     0.00  allocate_block\n  4.57      3.58     0.24  9171515     0.00     0.00  modify\n  4.38      3.81     0.23  8387342     0.00     0.00  oldify_one\n  3.81      4.01     0.20 12561658     0.00     0.00  fl_allocate\n  3.81      4.21     0.20  4569034     0.00     0.00  Sieve__filter_56\n  3.62      4.40     0.19     6444     0.00     0.00  empty_minor_heap\n  3.24      4.57     0.17     3222     0.00     0.00  oldify_local_roots\n  2.29      4.69     0.12  4599482     0.00     0.00  Stream__slazy_221\n  2.10      4.80     0.11  4597215     0.00     0.00  darken\n  1.90      4.90     0.10  4596481     0.00     0.00  Stream__fun_345\n  1.52      4.98     0.08  4575034     0.00     0.00  Stream__icons_207\n  1.52      5.06     0.08  4575034     0.00     0.00  Stream__junk_165\n  1.14      5.12     0.06     1112     0.00     0.00  do_local_roots\n  \n[ etc. ]\n</code></pre>\n<h3 id=\"using-perf-on-linux\">Using perf on Linux</h3>\n<p>Assuming perf is installed and your program is compiled into\nnative code with <code>-g</code> (or ocamlbuild tag <code>debug</code>), you just need to type</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-sh\">perf record --call-graph=dwarf -- ./foo.native a b c d\nperf report\n</code></pre>\n<p>The first command launches <code>foo.native</code> with arguments <code>a b c d</code> and\nrecords profiling information in <code>perf.data</code>; the second command\nstarts an interactive program to explore the call graph. The option\n<code>--call-graph=dwarf</code> makes perf aware of the calling convention of\nOCaml (with old versions of <code>perf</code>, enabling frame pointers in OCaml\nmight help; opam provides suitable compiler switches, such as <code>4.02.1+fp</code>).</p>\n<h2 id=\"summary\">Summary</h2>\n<p>In summary here are some tips for getting the best performance out of\nyour programs:</p>\n<ol>\n<li>Write your program as simply as possible. If it takes too long to\nrun, profile it to find out where it's spending its time and\nconcentrate optimizations on just those areas.\n</li>\n<li>Check for unintentional polymorphism, and add type hints for the\ncompiler.\n</li>\n<li>Closures are slower than simple function calls, but add to\nmaintainability and readability.\n</li>\n<li>As a last resort, rewrite hotspots in your program in C (but first\ncheck the assembly language produced by the OCaml compiler to see if\nyou can do better than it).\n</li>\n<li>Performance might depend on external factors (speed of your database\nqueries? speed of the network?). If so then no amount of\noptimization will help you.\n</li>\n</ol>\n<h3 id=\"further-reading\">Further reading</h3>\n<p>You can find out more about how OCaml represents different types by\nreading the (&quot;Interfacing C with OCaml&quot;) chapter in the OCaml manual and also\nlooking at the <code>mlvalues.h</code> header file.</p>\n<!--###  Java dynamic dispatch\n**There are some serious mistakes in the last paragraph:**\n\n* Dynamic method dispatch itself is seldom a performance problem. In\n languages without multiple inheritance (e.g. Java) this is usually\n done via one step of pointer indirection. Objects in OCaml are also\n dynamically dispatched. Since this is the point with polymorphism in\n an OO setting.\n\n* Dynamic method dispatch often hinders a compiler to inline function\n and this hits the performance.\n\n* In Java is a dynamic type check (aka cast) much more expensive than\n a dynamic method dispatch. -->\n"},{"title":"Comparison of Standard Containers","slug":"comparison-of-standard-containers","description":"A comparison of some core data-structures including lists, queues and arrays\n","date":"2021-05-27T21:07:30-00:00","tags":{"hd":"language","tl":0},"users":{"hd":"Intermediate","tl":0},"body_md":"\nThis is a rough comparison of the different container types that are\nprovided by the OCaml language or by the OCaml standard library. In each\ncase, n is the number of valid elements in the container.\n\nNote that the big-O cost given for some operations reflects the current\nimplementation but is not guaranteed by the official documentation.\nHopefully it will not become worse. Anyway, if you want more details,\nyou should read the documentation about each of the modules. Often, it\nis also instructive to read the corresponding implementation.\n\n## Lists: immutable singly-linked lists\nAdding an element always creates a new list l from an element x and list\ntl. tl remains unchanged, but it is not copied either.\n\n* \"adding\" an element: O(1), cons operator `::`\n* length: O(n), function `List.length`\n* accessing cell `i`: O(i)\n* finding an element: O(n)\n\nWell-suited for: IO, pattern-matching\n\nNot very efficient for: random access, indexed elements\n\n## Arrays: mutable vectors\nArrays are mutable data structures with a fixed length and random access.\n\n* \"adding\" an element (by creating a new array): O(n)\n* length: O(1), function `Array.length`\n* accessing cell `i`: O(1)\n* finding an element: O(n)\n\nWell-suited for sets of elements of known size, access by numeric index,\nin-place modification. Basic arrays have a fixed length.\n\n## Strings: immutable vectors\nStrings are very similar to arrays but are immutable. Strings are\nspecialized for storing chars (bytes) and have some convenient syntax.\nStrings have a fixed length. For extensible strings, the standard Buffer\nmodule can be used (see below).\n\n* \"adding\" an element (by creating a new string): O(n)\n* length: O(1)\n* accessing character `i`: O(1)\n* finding an element: O(n)\n\n## Set and Map: immutable trees\nLike lists, these are immutable and they may share some subtrees. They\nare a good solution for keeping older versions of sets of items.\n\n* \"adding\" an element: O(log n)\n* returning the number of elements: O(n)\n* finding an element: O(log n)\n\nSets and maps are very useful in compilation and meta-programming, but\nin other situations hash tables are often more appropriate (see below).\n\n## Hashtbl: automatically growing hash tables\nOcaml hash tables are mutable data structures, which are a good solution\nfor storing (key, data) pairs in one single place.\n\n* adding an element: O(1) if the initial size of the table is larger\n than the number of elements it contains; O(log n) on average if n\n elements have been added in a table which is initially much smaller\n than n.\n* returning the number of elements: O(1)\n* finding an element: O(1)\n\n## Buffer: extensible strings\nBuffers provide an efficient way to accumulate a sequence of bytes in a\nsingle place. They are mutable.\n\n* adding a char: O(1) if the buffer is big enough, or O(log n) on\n average if the initial size of the buffer was much smaller than the\n number of bytes n.\n* adding a string of k chars: O(k * \"adding a char\")\n* length: O(1)\n* accessing cell `i`: O(1)\n\n## Queue\nOCaml queues are mutable first-in-first-out (FIFO) data structures.\n\n* adding an element: O(1)\n* taking an element: O(1)\n* length: O(1)\n\n## Stack\nOCaml stacks are mutable last-in-first-out (LIFO) data structures. They\nare just like lists, except that they are mutable, i.e. adding an\nelement doesn't create a new stack but simply adds it to the stack.\n\n* adding an element: O(1)\n* taking an element: O(1)\n* length: O(1)\n","toc_html":"<ul>\n<li><ul>\n<li><a href=\"#lists-immutable-singly-linked-lists\">Lists: immutable singly-linked lists</a>\n</li>\n<li><a href=\"#arrays-mutable-vectors\">Arrays: mutable vectors</a>\n</li>\n<li><a href=\"#strings-immutable-vectors\">Strings: immutable vectors</a>\n</li>\n<li><a href=\"#set-and-map-immutable-trees\">Set and Map: immutable trees</a>\n</li>\n<li><a href=\"#hashtbl-automatically-growing-hash-tables\">Hashtbl: automatically growing hash tables</a>\n</li>\n<li><a href=\"#buffer-extensible-strings\">Buffer: extensible strings</a>\n</li>\n<li><a href=\"#queue\">Queue</a>\n</li>\n<li><a href=\"#stack\">Stack</a>\n</li>\n</ul>\n</li>\n</ul>\n","body_html":"<p>This is a rough comparison of the different container types that are\nprovided by the OCaml language or by the OCaml standard library. In each\ncase, n is the number of valid elements in the container.</p>\n<p>Note that the big-O cost given for some operations reflects the current\nimplementation but is not guaranteed by the official documentation.\nHopefully it will not become worse. Anyway, if you want more details,\nyou should read the documentation about each of the modules. Often, it\nis also instructive to read the corresponding implementation.</p>\n<h2 id=\"lists-immutable-singly-linked-lists\">Lists: immutable singly-linked lists</h2>\n<p>Adding an element always creates a new list l from an element x and list\ntl. tl remains unchanged, but it is not copied either.</p>\n<ul>\n<li>&quot;adding&quot; an element: O(1), cons operator <code>::</code>\n</li>\n<li>length: O(n), function <code>List.length</code>\n</li>\n<li>accessing cell <code>i</code>: O(i)\n</li>\n<li>finding an element: O(n)\n</li>\n</ul>\n<p>Well-suited for: IO, pattern-matching</p>\n<p>Not very efficient for: random access, indexed elements</p>\n<h2 id=\"arrays-mutable-vectors\">Arrays: mutable vectors</h2>\n<p>Arrays are mutable data structures with a fixed length and random access.</p>\n<ul>\n<li>&quot;adding&quot; an element (by creating a new array): O(n)\n</li>\n<li>length: O(1), function <code>Array.length</code>\n</li>\n<li>accessing cell <code>i</code>: O(1)\n</li>\n<li>finding an element: O(n)\n</li>\n</ul>\n<p>Well-suited for sets of elements of known size, access by numeric index,\nin-place modification. Basic arrays have a fixed length.</p>\n<h2 id=\"strings-immutable-vectors\">Strings: immutable vectors</h2>\n<p>Strings are very similar to arrays but are immutable. Strings are\nspecialized for storing chars (bytes) and have some convenient syntax.\nStrings have a fixed length. For extensible strings, the standard Buffer\nmodule can be used (see below).</p>\n<ul>\n<li>&quot;adding&quot; an element (by creating a new string): O(n)\n</li>\n<li>length: O(1)\n</li>\n<li>accessing character <code>i</code>: O(1)\n</li>\n<li>finding an element: O(n)\n</li>\n</ul>\n<h2 id=\"set-and-map-immutable-trees\">Set and Map: immutable trees</h2>\n<p>Like lists, these are immutable and they may share some subtrees. They\nare a good solution for keeping older versions of sets of items.</p>\n<ul>\n<li>&quot;adding&quot; an element: O(log n)\n</li>\n<li>returning the number of elements: O(n)\n</li>\n<li>finding an element: O(log n)\n</li>\n</ul>\n<p>Sets and maps are very useful in compilation and meta-programming, but\nin other situations hash tables are often more appropriate (see below).</p>\n<h2 id=\"hashtbl-automatically-growing-hash-tables\">Hashtbl: automatically growing hash tables</h2>\n<p>Ocaml hash tables are mutable data structures, which are a good solution\nfor storing (key, data) pairs in one single place.</p>\n<ul>\n<li>adding an element: O(1) if the initial size of the table is larger\nthan the number of elements it contains; O(log n) on average if n\nelements have been added in a table which is initially much smaller\nthan n.\n</li>\n<li>returning the number of elements: O(1)\n</li>\n<li>finding an element: O(1)\n</li>\n</ul>\n<h2 id=\"buffer-extensible-strings\">Buffer: extensible strings</h2>\n<p>Buffers provide an efficient way to accumulate a sequence of bytes in a\nsingle place. They are mutable.</p>\n<ul>\n<li>adding a char: O(1) if the buffer is big enough, or O(log n) on\naverage if the initial size of the buffer was much smaller than the\nnumber of bytes n.\n</li>\n<li>adding a string of k chars: O(k * &quot;adding a char&quot;)\n</li>\n<li>length: O(1)\n</li>\n<li>accessing cell <code>i</code>: O(1)\n</li>\n</ul>\n<h2 id=\"queue\">Queue</h2>\n<p>OCaml queues are mutable first-in-first-out (FIFO) data structures.</p>\n<ul>\n<li>adding an element: O(1)\n</li>\n<li>taking an element: O(1)\n</li>\n<li>length: O(1)\n</li>\n</ul>\n<h2 id=\"stack\">Stack</h2>\n<p>OCaml stacks are mutable last-in-first-out (LIFO) data structures. They\nare just like lists, except that they are mutable, i.e. adding an\nelement doesn't create a new stack but simply adds it to the stack.</p>\n<ul>\n<li>adding an element: O(1)\n</li>\n<li>taking an element: O(1)\n</li>\n<li>length: O(1)\n</li>\n</ul>\n"}]},"params":{"lang":"en"}},"__N_SSG":true}