{"pageProps":{"content":{"source":"<h2 id=\"module-hashtbl\">Module Hashtbl</h2>\n<p>The Hashtbl module implements an efficient, mutable lookup table. To\ncreate a hash table we could write:</p>\n<pre><code class=\"language-ocaml\"># let my_hash = Hashtbl.create 123456\nval my_hash : ('_weak1, '_weak2) Hashtbl.t = &lt;abstr&gt;\n</code></pre>\n<p>The 123456 is the initial size of the hashtbl. This initial number is\njust your best guess as to the amount of data that you will be putting\ninto the hash table. The hash table can grow if you under-estimate the\nsize so don't worry about it too much. The type of my_hash is:</p>\n<pre><code class=\"language-ocaml\"># my_hash\n- : ('_weak1, '_weak2) Hashtbl.t = &lt;abstr&gt;\n</code></pre>\n<p>The <code>'_weak1</code> and <code>'_weak2</code> correspond to the key and value types, respectively.\nThere are no concrete types (e.g., <code>int</code> or <code>float * string</code>) filled in in\nthose slots because the type of the key and value are not yet\ndetermined. The underscore indicates that the key and data types, once\nchosen, will be fixed. In other words, you can't sometimes use a given\nhashtable with ints for keys, and then later use a string as a key in\nthat same hashtable.</p>\n<p>Lets add some data to <code>my_hash</code>. Lets say I am working on a cross word\nsolving program and I want to find all words that start with a certain\nletter. First I need to enter the data into <code>my_hash</code>.</p>\n<p>Note that a hashtable is modified by in-place updates, so, unlike a map,\nanother hash table is <em>not</em> created every time you change the table. Thus,\nthe code <code>let my_hash = Hashtbl.add my_hash ...</code> wouldn't make any\nsense. Instead, we would write something like this:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.add my_hash &quot;h&quot; &quot;hello&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hi&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hug&quot;;\n  Hashtbl.add my_hash &quot;h&quot; &quot;hard&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;wimp&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;world&quot;;\n  Hashtbl.add my_hash &quot;w&quot; &quot;wine&quot;\n- : unit = ()\n</code></pre>\n<p>If we want to find one element in <code>my_hash</code> that has an <code>&quot;h&quot;</code> in it then we\nwould write:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.find my_hash &quot;h&quot;\n- : string = &quot;hard&quot;\n</code></pre>\n<p>Notice how it returns just one element? That element\nwas the last one entered in with the value of <code>&quot;h&quot;</code>.</p>\n<p>What we probably want is all the elements that start with <code>&quot;h&quot;</code>. To do\nthis we want to <em>find all</em> of them. What better name for this than\n<code>find_all</code>?</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.find_all my_hash &quot;h&quot;\n- : string list = [&quot;hard&quot;; &quot;hug&quot;; &quot;hi&quot;; &quot;hello&quot;]\n</code></pre>\n<p>returns <code>[&quot;hard&quot;; &quot;hug&quot;; &quot;hi&quot;; &quot;hello&quot;]</code>.</p>\n<p>If you remove a key, its previous value becomes again the default one\nassociated to the key.</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.remove my_hash &quot;h&quot;;;\n- : unit = ()\n# Hashtbl.find my_hash &quot;h&quot;;;\n- : string = &quot;hug&quot;\n</code></pre>\n<p>This behavior is interesting for the above example or when, say, the\nkeys represent variables that can be temporarily masked by a local\nvariables of the same name.</p>\n<p>In other contexts, one may prefer new values to <em>replace</em> the previous\nones.  In this case, one uses <code>Hashtbl.replace</code>:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.replace my_hash &quot;t&quot; &quot;try&quot;;\n  Hashtbl.replace my_hash &quot;t&quot; &quot;test&quot;;\n  Hashtbl.find_all my_hash &quot;t&quot;\n- : string list = [&quot;test&quot;]\n\n# Hashtbl.remove my_hash &quot;t&quot;;\n  Hashtbl.find my_hash &quot;t&quot;\nException: Not_found.\n</code></pre>\n<p>To find out whether there is an\nentry in <code>my_hash</code> for a letter we would do:</p>\n<pre><code class=\"language-ocaml\"># Hashtbl.mem my_hash &quot;h&quot;\n- : bool = true\n</code></pre>\n","title":"Hashtables","pageDescription":"Discover efficient and mutable lookup tables with OCaml's Hashtbl module\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#module-hashtbl\">Module Hashtbl</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"hashtables"}},"__N_SSG":true}