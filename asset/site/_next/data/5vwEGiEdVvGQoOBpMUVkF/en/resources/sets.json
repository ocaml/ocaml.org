{"pageProps":{"content":{"source":"<h2 id=\"module-set\">Module Set</h2>\n<p>To make a set of strings:</p>\n<pre><code class=\"language-ocaml\"># module SS = Set.Make(String)\nmodule SS :\n  sig\n    type elt = string\n    type t = Set.Make(String).t\n    val empty : t\n    val is_empty : t -&gt; bool\n    val mem : elt -&gt; t -&gt; bool\n    val add : elt -&gt; t -&gt; t\n    val singleton : elt -&gt; t\n    val remove : elt -&gt; t -&gt; t\n    val union : t -&gt; t -&gt; t\n    val inter : t -&gt; t -&gt; t\n    val disjoint : t -&gt; t -&gt; bool\n    val diff : t -&gt; t -&gt; t\n    val compare : t -&gt; t -&gt; int\n    val equal : t -&gt; t -&gt; bool\n    val subset : t -&gt; t -&gt; bool\n    val iter : (elt -&gt; unit) -&gt; t -&gt; unit\n    val map : (elt -&gt; elt) -&gt; t -&gt; t\n    val fold : (elt -&gt; 'a -&gt; 'a) -&gt; t -&gt; 'a -&gt; 'a\n    val for_all : (elt -&gt; bool) -&gt; t -&gt; bool\n    val exists : (elt -&gt; bool) -&gt; t -&gt; bool\n    val filter : (elt -&gt; bool) -&gt; t -&gt; t\n    val partition : (elt -&gt; bool) -&gt; t -&gt; t * t\n    val cardinal : t -&gt; int\n    val elements : t -&gt; elt list\n    val min_elt : t -&gt; elt\n    val min_elt_opt : t -&gt; elt option\n    val max_elt : t -&gt; elt\n    val max_elt_opt : t -&gt; elt option\n    val choose : t -&gt; elt\n    val choose_opt : t -&gt; elt option\n    val split : elt -&gt; t -&gt; t * bool * t\n    val find : elt -&gt; t -&gt; elt\n    val find_opt : elt -&gt; t -&gt; elt option\n    val find_first : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_first_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val find_last : (elt -&gt; bool) -&gt; t -&gt; elt\n    val find_last_opt : (elt -&gt; bool) -&gt; t -&gt; elt option\n    val of_list : elt list -&gt; t\n    val to_seq_from : elt -&gt; t -&gt; elt Seq.t\n    val to_seq : t -&gt; elt Seq.t\n    val add_seq : elt Seq.t -&gt; t -&gt; t\n    val of_seq : elt Seq.t -&gt; t\n  end\n</code></pre>\n<p>To create a set you need to start somewhere so here is the empty set:</p>\n<pre><code class=\"language-ocaml\"># let s = SS.empty\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>Alternatively if we know an element to start with we can create a set\nlike</p>\n<pre><code class=\"language-ocaml\"># let s = SS.singleton &quot;hello&quot;\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>To add some elements to the set we can do.</p>\n<pre><code class=\"language-ocaml\"># let s =\n  List.fold_right SS.add [&quot;hello&quot;; &quot;world&quot;; &quot;community&quot;; &quot;manager&quot;;\n                          &quot;stuff&quot;; &quot;blue&quot;; &quot;green&quot;] s\nval s : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>Now if we are playing around with sets we will probably want to see what\nis in the set that we have created. To do this we can write a function\nthat will print the set out.</p>\n<pre><code class=\"language-ocaml\"># let print_set s = \n   SS.iter print_endline s\nval print_set : SS.t -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>If we want to remove a specific element of a set there is a remove\nfunction. However if we want to remove several elements at once we could\nthink of it as doing a 'filter'. Let's filter out all words that are\nlonger than 5 characters.</p>\n<p>This can be written as:</p>\n<pre><code class=\"language-ocaml\"># let my_filter str =\n  String.length str &lt;= 5\nval my_filter : string -&gt; bool = &lt;fun&gt;\n# let s2 = SS.filter my_filter s\nval s2 : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>or using an anonymous function:</p>\n<pre><code class=\"language-ocaml\"># let s2 = SS.filter (fun str -&gt; String.length str &lt;= 5) s\nval s2 : SS.t = &lt;abstr&gt;\n</code></pre>\n<p>If we want to check and see if an element is in the set it might look\nlike this.</p>\n<pre><code class=\"language-ocaml\"># SS.mem &quot;hello&quot; s2\n- : bool = true\n</code></pre>\n<p>The Set module also provides the set theoretic operations union,\nintersection and difference. For example, the difference of the original\nset and the set with short strings (â‰¤ 5 characters) is the set of long\nstrings:</p>\n<pre><code class=\"language-ocaml\"># print_set (SS.diff s s2)\ncommunity\nmanager\n- : unit = ()\n</code></pre>\n<p>Note that the Set module provides a purely functional data structure:\nremoving an element from a set does not alter that set but, rather,\nreturns a new set that is very similar to (and shares much of its\ninternals with) the original set.</p>\n","title":"Sets","pageDescription":"The standard library's Set module\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#module-set\">Module Set</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"sets"}},"__N_SSG":true}