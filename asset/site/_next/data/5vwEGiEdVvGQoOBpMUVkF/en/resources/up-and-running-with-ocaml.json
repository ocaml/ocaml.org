{"pageProps":{"content":{"source":"<p>This page will help you install OCaml, the Dune build system, and support for\nyour favourite text editor or IDE. These instructions work on Windows, Unix\nsystems like Linux, and macOS.</p>\n<h2 id=\"installing-ocaml\">Installing OCaml</h2>\n<p>There are two procedures: one for Unix-like systems, and one for Windows.</p>\n<h3 id=\"for-linux-and-macos\">For Linux and macOS</h3>\n<p>We will install OCaml using opam, the OCaml package manager.  We will also use\nopam when we wish to install third-party OCaml libraries.</p>\n<p><strong>For macOS</strong></p>\n<pre><code># Homebrew\nbrew install opam\n\n# MacPort\nport install opam\n</code></pre>\n<p><strong>For Linux</strong> the preferred way is to use your system's package manager on\nLinux (e.g <code>apt-get install opam</code> or similar). <a href=\"https://opam.ocaml.org/doc/Install.html\">Details of all installation\nmethods.</a></p>\n<p>Then, we install an OCaml compiler:</p>\n<pre><code># environment setup\nopam init\neval `opam env`\n\n# install given version of the compiler\nopam switch create 4.11.1\neval `opam env`\n</code></pre>\n<p>Now, OCaml is up and running:</p>\n<pre><code>$ which ocaml\n/Users/frank/.opam/4.11.1/bin/ocaml\n\n$ ocaml -version\nThe OCaml toplevel, version 4.11.1\n</code></pre>\n<p><strong>For either Linux or macOS</strong> as an alternative, a binary distribution of opam is\navailable:</p>\n<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)\n</code></pre>\n<h3 id=\"for-windows\">For Windows</h3>\n<p>We use the <a href=\"https://fdopen.github.io/opam-repository-mingw/\">OCaml for Windows</a>\ninstaller which comes in 32bit and 64bit versions. This installer gives you\nopam and OCaml installations all in one go. It is used from within a Cygwin\nenvironment, but the executables produced have no dependency on Cygwin at all.</p>\n<h2 id=\"the-ocaml-top-level\">The OCaml top level</h2>\n<p>OCaml comes with two compilers: for native code, and for byte code. We shall\nuse one of those in a moment. But first, let's use OCaml's top level (sometimes\nknown as a REPL in other languages):</p>\n<pre><code>$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n\n</code></pre>\n<p>We typed the phrase <code>1 + 2 * 3</code> and then signalled to OCaml that we had\nfinished by typing <code>;;</code> followed by the Enter key. OCaml calculated the\nresult, <code>7</code> and its type <code>int</code> and showed them to us. We exit by running the\nbuilt-in <code>exit</code> function with exit code 0:</p>\n<pre><code>$ ocaml\n        OCaml version 4.11.1\n\n# 1 + 2 * 3;;\n- : int = 7\n# exit 0;;\n$\n</code></pre>\n<p>There are two ways to improve your experience with the OCaml top level: you can\ninstall the popular <a href=\"https://github.com/hanslub42/rlwrap\"><code>rlwrap</code></a> on your\nsystem and invoke <code>rlwrap ocaml</code> instead of <code>ocaml</code> to get line-editing\nfacilities inside the OCaml top level, or you can install the alternative top\nlevel <code>utop</code> using opam:</p>\n<pre><code>$ opam install utop\n</code></pre>\n<p>We run it by typing <code>utop</code> instead of <code>ocaml</code>. You can read more about\n<a href=\"https://github.com/ocaml-community/utop\">utop</a>.</p>\n<h2 id=\"installing-the-dune-build-system\">Installing the Dune build system</h2>\n<p>Dune is a build system for OCaml. It takes care of all the low level details of\nOCaml compilation. We install it with opam:</p>\n<pre><code>$ opam install dune\nThe following actions will be performed:\n  - install dune 2.7.1\n\n&lt;&gt;&lt;&gt; Gathering sources &gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;\n[default] https://opam.ocaml.org/2.0.7/archives/dune.2.7.1+opam.tar.gz\ndownloaded\n\n&lt;&gt;&lt;&gt; Processing actions &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;\n-&gt; installed dune.2.7.1\nDone.\n</code></pre>\n<h2 id=\"a-first-project\">A first project</h2>\n<p>Let's begin the simplest project with Dune and OCaml. We create a new directory\nand ask <code>dune</code> to initialise a new project:</p>\n<pre><code>$ mkdir helloworld\n$ cd helloworld/\n$ dune init exe helloworld\nSuccess: initialized executable component named helloworld\n</code></pre>\n<p>Building our program is as simple as typing <code>dune build</code>:</p>\n<pre><code>$ dune build\nInfo: Creating file dune-project with this contents:\n| (lang dune 2.7)\nDone: 8/11 (jobs: 1)\n</code></pre>\n<p>When we change our program, we type <code>dune build</code> again to make a new\nexecutable. We can run the executable with <code>dune exec</code> (it's called\n<code>helloworld.exe</code> even when we're not using Windows):</p>\n<pre><code>$ dune exec ./helloworld.exe\nHello, World!        \n</code></pre>\n<p>Let's look at the contents of our new directory. Dune has added the\n<code>helloworld.ml</code> file, which is our OCaml program. It has also added our <code>dune</code>\nfile, which tells dune how to build the program, and a <code>_build</code> subdirectory,\nwhich is dune's working space.</p>\n<pre><code>$ ls\n_build\t\tdune\t\thelloworld.ml\n</code></pre>\n<p>The <code>helloworld.exe</code> executable is stored inside the <code>_build/default</code> subdirectory, so\nit's easier to run with <code>dune exec</code>. To ship the executable, we can just copy\nit from inside <code>_build/default</code> to somewhere else.</p>\n<p>Here is the contents of the automatically-generated <code>dune</code> file. When we want\nto add components to your project, such as third-party libraries, we edit this\nfile.</p>\n<pre><code>(executable\n (name helloworld))\n</code></pre>\n<h2 id=\"editor-support-for-ocaml\">Editor support for OCaml</h2>\n<p>For <strong>Visual Studio Code</strong>, and other editors support the Language Server\nProtocol, the OCaml language server can be installed with opam:</p>\n<pre><code>$ opam install ocaml-lsp-server\n</code></pre>\n<p>Now, we install the OCaml Platform Visual Studio Code extension from the Visual\nStudio Marketplace.</p>\n<p>Upon first loading an OCaml source file, you may be prompted to select the\ntoolchain in use: pick OCaml the version of OCaml you are using, e.g. 4.11.1\nfrom the list. Now, help is available by hovering over symbols in your program:</p>\n<p><img src=\"/tutorials/vscode.png\" alt=\"Visual Studio Code\" title=\"\" /></p>\n<p><strong>On Windows</strong>, we must launch Visual Studio Code from within the Cygwin window,\nrather than by clicking on its icon (otherwise, the language server will not be\nfound):</p>\n<pre><code>$ /cygdrive/c/Users/Frank\\ Smith/AppData/Local/Programs/Microsoft\\ VS\\ Code/Code.exe\n</code></pre>\n<p><strong>For Vim and Emacs</strong>, install the <a href=\"https://github.com/ocaml/merlin\">Merlin</a>\nsystem using opam:</p>\n<pre><code>$ opam install merlin\n</code></pre>\n<p>The installation procedure will print instructions on how to link Merlin with\nyour editor.</p>\n<p><strong>On Windows</strong>, when using Vim, the default cygwin Vim will not work with\nMerlin. You will need install Vim separately. In addition to the usual\ninstructions printed when installing Merlin, you may need to set the PATH in\nVim:</p>\n<pre><code>let $PATH .= &quot;;&quot;.substitute(system('opam config var bin'),'\\n$','','''')\n</code></pre>\n","title":"Up and Running with OCaml","pageDescription":"Help you install OCaml, the Dune build system, and support for your favourite text editor or IDE.\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#installing-ocaml\">Installing OCaml</a>\n</li>\n<li><a href=\"#the-ocaml-top-level\">The OCaml top level</a>\n</li>\n<li><a href=\"#installing-the-dune-build-system\">Installing the Dune build system</a>\n</li>\n<li><a href=\"#a-first-project\">A first project</a>\n</li>\n<li><a href=\"#editor-support-for-ocaml\">Editor support for OCaml</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"up-and-running-with-ocaml"}},"__N_SSG":true}