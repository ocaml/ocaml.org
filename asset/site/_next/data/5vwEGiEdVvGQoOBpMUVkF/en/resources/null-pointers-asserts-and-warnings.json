{"pageProps":{"content":{"source":"<h2 id=\"null-pointers\">Null pointers</h2>\n<p>So you've got a survey on your website which asks your readers for their\nnames and ages. Only problem is that for some reason a few of your\nreaders don't want to give you their age - they stubbornly refuse to\nfill that field in. What's a poor database administrator to do?</p>\n<p>Assume that the age is represented by an <code>int</code>, there are two possible\nways to solve this problem. The most common one (and the most <em>wrong</em>\none) is to assume some sort of &quot;special&quot; value for the age which means\nthat the age information wasn't collected. So if, say, age = -1 then the\ndata wasn't collected, otherwise the data was collected (even if it's\nnot valid!). This method kind of works until you start, for example,\ncalculating the mean age of visitors to your website. Since you forgot\nto take into account your special value, you conclude that the mean age\nof visitors is 7Â½ years old, and you employ web designers to remove all\nthe long words and use primary colours everywhere.</p>\n<p>The other, correct method is to store the age in a field which has type\n&quot;int or null&quot;. Here's a SQL table for storing ages:</p>\n<pre><code class=\"language-SQL\">create table users\n(\n  userid serial,\n  name text not null,\n  age int             -- may be null\n);\n</code></pre>\n<p>If the age data isn't collected, then it goes into the database as a\nspecial SQL <code>NULL</code> value. SQL ignores this automatically when you ask it\nto compute averages and so on.</p>\n<p>Programming languages also support nulls, although they may be easier to\nuse in some than in others. In Java, any reference to\nan object can be null, so it might make sense in Java to store the\nage as an <code>Integer</code> and allow references to the age to be null. In C\npointers can, of course, be null, but if you wanted a simple integer to\nbe null, you'd have to first box it up into an object allocated by\n<code>malloc</code> on the heap.</p>\n<p>OCaml has an elegant solution to the problem of nulls, using a simple\npolymorphic variant type defined (in <code>Stdlib</code>) as:</p>\n<pre><code class=\"language-ocaml\">type 'a option = None | Some of 'a\n</code></pre>\n<p>A &quot;null pointer&quot; is written <code>None</code>. The type of age in our example above\n(an <code>int</code> which can be null) is <code>int option</code> (remember: backwards like\n<code>int list</code> and <code>int binary_tree</code>).</p>\n<pre><code class=\"language-ocaml\"># Some 3\n- : int option = Some 3\n</code></pre>\n<p>What about a list of optional ints?</p>\n<pre><code class=\"language-ocaml\"># [None; Some 3; Some 6; None]\n- : int option list = [None; Some 3; Some 6; None]\n</code></pre>\n<p>And what about an optional list of ints?</p>\n<pre><code class=\"language-ocaml\"># Some [1; 2; 3]\n- : int list option = Some [1; 2; 3]\n</code></pre>\n<h2 id=\"assert-warnings-fatal-errors-and-printing-to-stderr\">Assert, warnings, fatal errors, and printing to stderr</h2>\n<p>The built-in <code>assert</code> takes an expression as an argument and throws an\nexception <em>if</em> the provided expression evaluates to <code>false</code>.\nAssuming that you don't catch this exception (it's probably\nunwise to catch this exception, particularly for beginners), this\nresults in the program stopping and printing out the source file and\nline number where the error occurred. An example:</p>\n<pre><code class=\"language-ocaml\"># assert (Sys.os_type = &quot;Win32&quot;)\nException: Assert_failure (&quot;//toplevel//&quot;, 1, 1).\n</code></pre>\n<p>(Running this on Win32, of course, won't throw an error).</p>\n<p>You can also just call <code>assert false</code> to stop your program if things\njust aren't going well, but you're probably better to use ...</p>\n<p><code>failwith &quot;error message&quot;</code> throws a <code>Failure</code> exception, which again\nassuming you don't try to catch it, will stop the program with the given\nerror message. <code>failwith</code> is often used during pattern matching, like\nthis real example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">match Sys.os_type with\n| &quot;Unix&quot; | &quot;Cygwin&quot; -&gt;   (* code omitted *)\n| &quot;Win32&quot; -&gt;             (* code omitted *)\n| &quot;MacOS&quot; -&gt;             (* code omitted *)\n| _ -&gt; failwith &quot;this system is not supported&quot;\n</code></pre>\n<p>Note a couple of extra pattern matching features in this example too. A\nso-called &quot;range pattern&quot; is used to match either <code>&quot;Unix&quot;</code> or\n<code>&quot;Cygwin&quot;</code>, and the special <code>_</code> pattern which matches &quot;anything else&quot;.</p>\n<p>If you want to debug your program, then you'll probably want to print out a\nwarning some way through your function. Here's an example:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Graphics\n  \nlet () =\n  open_graph &quot; 640x480&quot;;\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    prerr_endline (&quot;radius is &quot; ^ string_of_int radius);\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n</code></pre>\n<p>If you prefer C-style <code>printf</code>'s then try using OCaml's <code>Printf</code> module\ninstead:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">open Graphics\n  \nlet () =\n  open_graph &quot; 640x480&quot;;\n  for i = 12 downto 1 do\n    let radius = i * 20 in\n    Printf.eprintf &quot;radius is %d\\n&quot; radius;\n    set_color (if i mod 2 = 0 then red else yellow);\n    fill_circle 320 240 radius\n  done;\n  ignore(read_line ())\n</code></pre>\n","title":"Null Pointers, Asserts and Warnings","pageDescription":"Handling warnings and asserting invariants for your code\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#null-pointers\">Null pointers</a>\n</li>\n<li><a href=\"#assert-warnings-fatal-errors-and-printing-to-stderr\">Assert, warnings, fatal errors, and printing to stderr</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"null-pointers-asserts-and-warnings"}},"__N_SSG":true}