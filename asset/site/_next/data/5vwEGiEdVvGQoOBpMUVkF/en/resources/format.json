{"pageProps":{"content":{"source":"<p>The <code>Format</code> module of Caml Light and OCaml's standard libraries\nprovides pretty-printing facilities to get a fancy display for printing\nroutines. This module implements a “pretty-printing engine” that is\nintended to break lines in a nice way (let's say “automatically when it\nis necessary”).</p>\n<h2 id=\"principles\">Principles</h2>\n<p>Line breaking is based on three concepts:</p>\n<ul>\n<li><strong>boxes</strong>: a box is a logical pretty-printing unit, which defines a\nbehaviour of the pretty-printing engine to display the material\ninside the box.\n</li>\n<li><strong>break hints</strong>: a break hint is a directive to the pretty-printing\nengine that proposes to break the line here, if it is necessary to\nproperly print the rest of the material. Otherwise, the\npretty-printing engine never break lines (except “in case of\nemergency” to avoid very bad output). In short, a break hint tells\nthe pretty printer that a line break here may be appropriate.\n</li>\n<li><strong>Indentation rules</strong>: When a line break occurs, the pretty-printing\nengines fixes the indentation (or amount of leading spaces) of the\nnew line using indentation rules, as follows:\n<ul>\n<li>A box can state the extra indentation of every new line opened\nin its scope. This extra indentation is named <strong>box breaking\nindentation</strong>.\n</li>\n<li>A break hint can also set the additional indentation of the new\nline it may fire. This extra indentation is named <strong>hint\nbreaking indentation</strong>.\n</li>\n<li>If break hint <code>bh</code> fires a new line within box <code>b</code>, then the\nindentation of the new line is simply the sum of: the current\nindentation of box <code>b</code> <code>+</code> the additional box breaking\nindentation, as defined by box <code>b</code> <code>+</code> the additional hint\nbreaking indentation, as defined by break hint <code>bh</code>.\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"boxes\">Boxes</h2>\n<p>There are 4 types of boxes. (The most often used is the “hov” box type,\nso skip the rest at first reading).</p>\n<ul>\n<li><strong>horizontal box</strong> (<em>h</em> box, as obtained by the <code>open_hbox</code>\nprocedure): within this box, break hints do not lead to line breaks.\n</li>\n<li><strong>vertical box</strong> (<em>v</em> box, as obtained by the <code>open_vbox</code>\nprocedure): within this box, every break hint lead to a new line.\n</li>\n<li><strong>vertical/horizontal box</strong> (<em>hv</em> box, as obtained by the\n<code>open_hvbox</code> procedure): if it is possible, the entire box is\nwritten on a single line; otherwise, every break hint within the box\nleads to a new line.\n</li>\n<li><strong>vertical or horizontal box</strong> (<em>hov</em> box, as obtained by the\nopen_box or open_hovbox procedures): within this box, break hints\nare used to cut the line when there is no more room on the line.\nThere are two kinds of “hov” boxes, you can find the details\n<a href=\"#Refinementonhovboxes\">below</a>. In first approximation, let me consider these\ntwo kinds of “hov” boxes as equivalent and obtained by calling the\n<code>open_box</code> procedure.\n</li>\n</ul>\n<p>Let me give an example. Suppose we can write 10 chars before the right\nmargin (that indicates no more room). We represent any char as a <code>-</code>\nsign; characters <code>[</code> and <code>]</code> indicates the opening and closing of a box\nand <code>b</code> stands for a break hint given to the pretty-printing engine.</p>\n<p>The output &quot;--b--b--&quot; is displayed like this (the b symbol stands for\nthe value of the break that is explained below):</p>\n<ul>\n<li>\n<p>within a “h” box:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n</li>\n<li>\n<p>within a “v” box:</p>\n<pre><code class=\"language-text\">--b\n--b\n--\n</code></pre>\n</li>\n<li>\n<p>within a “hv” box:</p>\n<p>If there is enough room to print the box on the line:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n<p>But &quot;---b---b---&quot; that cannot fit on the line is written</p>\n<pre><code class=\"language-text\">---b\n---b\n---\n</code></pre>\n</li>\n<li>\n<p>within a “hov” box:</p>\n<p>If there is enough room to print the box on the line:</p>\n<pre><code class=\"language-text\">--b--b--\n</code></pre>\n<p>But if &quot;---b---b---&quot; cannot fit on the line, it is written as</p>\n<pre><code class=\"language-text\">---b---b\n---\n</code></pre>\n<p>The first break hint does not lead to a new line, since there is\nenough room on the line. The second one leads to a new line since\nthere is no more room to print the material following it. If the\nroom left on the line were even shorter, the first break hint may\nlead to a new line and &quot;---b---b---&quot; is written as:</p>\n<pre><code class=\"language-text\">---b\n---b\n---\n</code></pre>\n</li>\n</ul>\n<h2 id=\"printing-spaces\">Printing spaces</h2>\n<p>Break hints are also used to output spaces (if the line is not split\nwhen the break is encountered, otherwise the new line indicates properly\nthe separation between printing items). You output a break hint using\n<code>print_break sp indent</code>, and this <code>sp</code> integer is used to print “sp”\nspaces. Thus <code>print_break sp ...</code> may be thought as: print <code>sp</code> spaces\nor output a new line.</p>\n<p>For instance, if b is <code>break 1 0</code> in the output &quot;--b--b--&quot;, we get</p>\n<ul>\n<li>\n<p>within a “h” box:</p>\n<pre><code class=\"language-text\">-- -- --\n</code></pre>\n</li>\n<li>\n<p>within a “v” box:</p>\n<pre><code class=\"language-text\">--\n--\n--\n</code></pre>\n</li>\n<li>\n<p>within a “hv” box:</p>\n<pre><code class=\"language-text\">-- -- --\n</code></pre>\n<p>or, according to the remaining room on the line:</p>\n<pre><code class=\"language-text\">--\n--\n--\n</code></pre>\n</li>\n<li>\n<p>and similarly for “hov” boxes.</p>\n</li>\n</ul>\n<p>Generally speaking, a printing routine using &quot;format&quot;, should not\ndirectly output white spaces: the routine should use break hints\ninstead. (For instance <code>print_space ()</code> that is a convenient\nabbreviation for <code>print_break 1 0</code> and outputs a single space or break\nthe line.)</p>\n<h2 id=\"indentation-of-new-lines\">Indentation of new lines</h2>\n<p>The user gets 2 ways to fix the indentation of new lines:</p>\n<ul>\n<li>\n<p><strong>when defining the box</strong>: when you open a box, you can fix the\nindentation added to each new line opened within that box.<br />\nFor instance: <code>open_hovbox 1</code> opens a “hov” box with new lines\nindented 1 more than the initial indentation of the box. With output\n&quot;---[--b--b--b--&quot;, we get:</p>\n<pre><code class=\"language-text\">---[--b--b\n     --b--\n</code></pre>\n<p>with <code>open_hovbox 2</code>, we get</p>\n<pre><code class=\"language-text\">---[--b--b\n      --b--\n</code></pre>\n<p>Note: the <code>[</code> sign in the display is not visible on the screen, it\nis just there to materialise the aperture of the pretty-printing\nbox. Last “screen” stands for:</p>\n<pre><code class=\"language-text\">-----b--b\n     --b--\n</code></pre>\n</li>\n<li>\n<p><strong>when defining the break that makes the new line</strong>. As said above,\nyou output a break hint using <code>print_break     sp           indent</code>.\nThe <code>indent</code> integer is used to fix the additional indentation of\nthe new line. Namely, it is added to the default indentation offset\nof the box where the break occurs.<br />\nFor instance, if <code>[</code> stands for the opening of a “hov” box with 1\nas extra indentation (as obtained by <code>open_hovbox 1</code>), and b is\n<code>print_break       1       2</code>, then from output &quot;---[--b--b--b--&quot;,\nwe get:</p>\n<pre><code class=\"language-text\">---[-- --\n      --\n      --\n</code></pre>\n</li>\n</ul>\n<h2 id=\"refinement-on-hov-boxes\">Refinement on “hov” boxes</h2>\n<h3 id=\"packing-and-structural-hov-boxes\">Packing and structural “hov” boxes</h3>\n<p>The “hov” box type is refined into two categories.</p>\n<ul>\n<li><strong>the vertical or horizontal <em>packing</em> box</strong> (as obtained by the\nopen_hovbox procedure): break hints are used to cut the line when\nthere is no more room on the line; no new line occurs if there is\nenough room on the line.\n</li>\n<li><strong>vertical or horizontal <em>structural</em> box</strong> (as obtained by the\nopen_box procedure): similar to the “hov” packing box, the break\nhints are used to cut the line when there is no more room on the\nline; in addition, break hints that can show the box structure lead\nto new lines even if there is enough room on the current line.\n</li>\n</ul>\n<h3 id=\"differences-between-a-packing-and-a-structural-hov-box\">Differences between a packing and a structural “hov” box</h3>\n<p>The difference between a packing and a structural “hov” box is shown by\na routine that closes boxes and parentheses at the end of printing: with\npacking boxes, the closure of boxes and parentheses do not lead to new\nlines if there is enough room on the line, whereas with structural boxes\neach break hint will lead to a new line. For instance, when printing\n<code>[(---[(----[(---b)]b)]b)]</code>, where <code>b</code> is a break hint without extra\nindentation (<code>print_cut ()</code>). If <code>[</code> means opening of a packing “hov”\nbox (open_hovbox), <code>[(---[(----[(---b)]b)]b)]</code> is printed as follows:</p>\n<pre><code class=\"language-text\">(---\n (----\n  (---)))\n</code></pre>\n<p>If we replace the packing boxes by structural boxes (open_box), each\nbreak hint that precedes a closing parenthesis can show the boxes\nstructure, if it leads to a new line; hence <code>[(---[(----[(---b)]b)]b)]</code>\nis printed like this:</p>\n<pre><code class=\"language-text\">(---\n (----\n  (---\n  )\n )\n)\n</code></pre>\n<h2 id=\"practical-advice\">Practical advice</h2>\n<p>When writing a pretty-printing routine, follow these simple rules:</p>\n<ol>\n<li>Boxes must be opened and closed consistently (<code>open_*</code> and\n<code>close_box</code> must be nested like parentheses).\n</li>\n<li>Never hesitate to open a box.\n</li>\n<li>Output many break hints, otherwise the pretty-printer is in a bad\nsituation where it tries to do its best, which is always “worse than\nyour bad”.\n</li>\n<li>Do not try to force spacing using explicit spaces in the character\nstrings. For each space you want in the output emit a break hint\n(<code>print_space ()</code>), unless you explicitly don't want the line to be\nbroken here. For instance, imagine you want to pretty print an OCaml\ndefinition, more precisely a <code>let rec ident =     expression</code> value\ndefinition. You will probably treat the first three spaces as\n“unbreakable spaces” and write them directly in the string constants\nfor keywords, and print <code>&quot;let rec &quot;</code> before the identifier, and\nsimilarly write <code> =</code> to get an unbreakable space after the\nidentifier; in contrast, the space after the <code>=</code> sign is certainly a\nbreak hint, since breaking the line after <code>=</code> is a usual (and\nelegant) way to indent the expression part of a definition. In\nshort, it is often necessary to print unbreakable spaces; however,\nmost of the time a space should be considered a break hint.\n</li>\n<li>Do not try to force new lines, let the pretty-printer do it for you:\nthat's its only job. In particular, do not use <code>force_newline</code>: this\nprocedure effectively leads to a newline, but it also as the\nunfortunate side effect to partially reinitialise the\npretty-printing engine, so that the rest of the printing material is\nnoticeably messed up.\n</li>\n<li>Never put newline characters directly in the strings to be printed:\npretty printing engine will consider this newline character as any\nother character written on the current line and this will completely\nmess up the output. Instead of new line characters use line break\nhints: if those break hints must always result in new lines, it just\nmeans that the surrounding box must be a vertical box!\n</li>\n<li>End your main program by a <code>print_newline ()</code> call, that flushes the\npretty-printer tables (hence the output). (Note that the top-level\nloop of the interactive system does it as well, just before a new\ninput.)\n</li>\n</ol>\n<h2 id=\"printing-to-stdout-using-printf\">Printing to <code>stdout</code>: using <code>printf</code></h2>\n<p>The <code>format</code> module provides a general printing facility “à la”\n<code>printf</code>. In addition to the usual conversion facility provided by\n<code>printf</code>, you can write pretty-printing indications directly inside the\nformat string (opening and closing boxes, indicating breaking hints,\netc).</p>\n<p>Pretty-printing annotations are introduced by the <code>@</code> symbol, directly\ninto the string format. Almost any function of the <code>format</code> module can\nbe called from within a <code>printf</code> format string. For instance</p>\n<ul>\n<li>“<code>@[</code>” open a box (<code>open_box     0</code>). You may precise the type as an\nextra argument. For instance <code>@[&lt;hov n&gt;</code> is equivalent to\n<code>open_hovbox       n</code>.\n</li>\n<li>“<code>@]</code>” close a box (<code>close_box       ()</code>).\n</li>\n<li>“<code>@</code> ” output a breakable space (<code>print_space ()</code>).\n</li>\n<li>“<code>@,</code>” output a break hint (<code>print_cut       ()</code>).\n</li>\n<li>“<code>@;&lt;n m&gt;</code>” emit a “full” break hint (<code>print_break n m</code>).\n</li>\n<li>“<code>@.</code>” end the pretty-printing, closing all the boxes still opened\n(<code>print_newline ()</code>).\n</li>\n</ul>\n<p>For instance</p>\n<pre><code class=\"language-ocaml\"># Format.printf &quot;@[&lt;1&gt;%s@ =@ %d@ %s@]@.&quot; &quot;Prix TTC&quot; 100 &quot;Euros&quot;\nPrix TTC = 100 Euros\n- : unit = ()\n</code></pre>\n<h2 id=\"a-concrete-example\">A concrete example</h2>\n<p>Let me give a full example: the shortest non trivial example you could\nimagine, that is the λ-calculus. :)</p>\n<p>Thus the problem is to pretty-print the values of a concrete data type\nthat models a language of expressions that defines functions and their\napplications to arguments.</p>\n<p>First, I give the abstract syntax of lambda-terms (we illustrate it in\nthe <a href=\"../description.html#Interactivity\">interactive system</a>):</p>\n<pre><code class=\"language-ocaml\"># type lambda =\n  | Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\ntype lambda =\n    Lambda of string * lambda\n  | Var of string\n  | Apply of lambda * lambda\n</code></pre>\n<p>I use the format library to print the lambda-terms:</p>\n<pre><code class=\"language-ocaml\">open Format\nlet ident = print_string\nlet kwd = print_string\n\nlet rec print_exp0 = function\n  | Var s -&gt;  ident s\n  | lam -&gt; open_hovbox 1; kwd &quot;(&quot;; print_lambda lam; kwd &quot;)&quot;; close_box ()\nand print_app = function\n  | e -&gt; open_hovbox 2; print_other_applications e; close_box ()\nand print_other_applications f =\n  match f with\n  | Apply (f, arg) -&gt; print_app f; print_space (); print_exp0 arg\n  | f -&gt; print_exp0 f\nand print_lambda = function\n  | Lambda (s, lam) -&gt;\n      open_hovbox 1;\n      kwd &quot;\\\\&quot;; ident s; kwd &quot;.&quot;; print_space(); print_lambda lam;\n      close_box()\n  | e -&gt; print_app e\n</code></pre>\n<p>In Caml Light, replace the first line by:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">#open &quot;format&quot;;;\n</code></pre>\n<h3 id=\"most-general-pretty-printing-using-fprintf\">Most general pretty-printing: using <code>fprintf</code></h3>\n<p>We use the <code>fprintf</code> function to write the most versatile version of the\npretty-printing functions for lambda-terms. Now, the functions get an\nextra argument, namely a pretty-printing formatter (the <code>ppf</code> argument)\nwhere printing will occur. This way the printing routines are more\ngeneral, since they can print on any formatter defined in the program\n(either printing to a file, or to <code>stdout</code>, to <code>stderr</code>, or even to a\nstring). Furthermore, the pretty-printing functions are now\ncompositional, since they may be used in conjunction with the special\n<code>%a</code> conversion, that prints a <code>fprintf</code> argument with a user's supplied\nfunction (these user's supplied functions also have a formatter as first\nargument).</p>\n<p>Using <code>fprintf</code>, the lambda-terms printing routines can be written as\nfollows:</p>\n<pre><code class=\"language-ocaml\">open Format\n\nlet ident ppf s = fprintf ppf &quot;%s&quot; s\nlet kwd ppf s = fprintf ppf &quot;%s&quot; s\n\nlet rec pr_exp0 ppf = function\n  | Var s -&gt; fprintf ppf &quot;%a&quot; ident s\n  | lam -&gt; fprintf ppf &quot;@[&lt;1&gt;(%a)@]&quot; pr_lambda lam\nand pr_app ppf e =\n  fprintf ppf &quot;@[&lt;2&gt;%a@]&quot; pr_other_applications e\nand pr_other_applications ppf f =\n  match f with\n  | Apply (f, arg) -&gt; fprintf ppf &quot;%a@ %a&quot; pr_app f pr_exp0 arg\n  | f -&gt; pr_exp0 ppf f\nand pr_lambda ppf = function\n  | Lambda (s, lam) -&gt;\n     fprintf ppf &quot;@[&lt;1&gt;%a%a%a@ %a@]&quot;\n             kwd &quot;\\\\&quot; ident s kwd &quot;.&quot; pr_lambda lam\n  | e -&gt; pr_app ppf e\n</code></pre>\n<p>Given those general printing routines, procedures to print to <code>stdout</code>\nor <code>stderr</code> is just a matter of partial application:</p>\n<pre><code class=\"language-ocaml\">let print_lambda = pr_lambda std_formatter\nlet eprint_lambda = pr_lambda err_formatter\n</code></pre>\n","title":"Format","pageDescription":"The Format module of Caml Light and OCaml's standard libraries provides pretty-printing facilities to get a fancy display for printing routines\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#principles\">Principles</a>\n</li>\n<li><a href=\"#boxes\">Boxes</a>\n</li>\n<li><a href=\"#printing-spaces\">Printing spaces</a>\n</li>\n<li><a href=\"#indentation-of-new-lines\">Indentation of new lines</a>\n</li>\n<li><a href=\"#refinement-on-hov-boxes\">Refinement on “hov” boxes</a>\n</li>\n<li><a href=\"#practical-advice\">Practical advice</a>\n</li>\n<li><a href=\"#printing-to-stdout-using-printf\">Printing to <code>stdout</code>: using <code>printf</code></a>\n</li>\n<li><a href=\"#a-concrete-example\">A concrete example</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"format"}},"__N_SSG":true}