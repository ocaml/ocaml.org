{"pageProps":{"content":{"source":"<h2 id=\"if-statements-actually-these-are-if-expressions\">If statements (actually, these are if expressions)</h2>\n<p>OCaml has an <code>if</code> statement with two variations, and the obvious meaning:</p>\n<pre><code class=\"language-ocaml\">if boolean-condition then expression\n  \nif boolean-condition then expression else other-expression\n</code></pre>\n<pre><code class=\"language-mdx-error\">Line 3, characters 3-5:\nError: Syntax error\n</code></pre>\n<p>Unlike in the conventional languages you'll be used to, <code>if</code> statements\nare really expressions. In other words, they're much more like\n<code>boolean-condition ? expression : other-expression</code> in C than like the if\nstatements you may be used to.</p>\n<p>Here's a simple example of an <code>if</code> statement:</p>\n<pre><code class=\"language-ocaml\"># let max a b =\n  if a &gt; b then a else b\nval max : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>As a short aside, if you type this into the OCaml\ninteractive toplevel (as above), you'll\nnotice that OCaml decides that this function is polymorphic, with the\nfollowing type:</p>\n<pre><code class=\"language-ocaml\"># max\n- : 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>And indeed OCaml lets you use <code>max</code> on any type:</p>\n<pre><code class=\"language-ocaml\"># max 3 5\n- : int = 5\n# max 3.5 13.0\n- : float = 13.\n# max &quot;a&quot; &quot;b&quot;\n- : string = &quot;b&quot;\n</code></pre>\n<p>This is because <code>&gt;</code> is in fact polymorphic. It works on any type, even\nobjects (it does a binary comparison).</p>\n<p>[Note that the <code>Stdlib</code> module defines <code>min</code> and <code>max</code> for you.]</p>\n<p>Let's look a bit more closely at the <code>if</code> expression. Here's the <code>range</code>\nfunction which I showed you earlier without much explanation. You should\nbe able to combine your knowledge of recursive functions, lists and if\nexpressions to see what it does:</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n    if a &gt; b then []\n    else a :: range (a + 1) b\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Let's examine some typical calls to this function. Let's start with the\neasy case of <code>a &gt; b</code>. A call to <code>range 11 10</code> returns <code>[]</code> (the empty\nlist) and that's it.</p>\n<p>What about calling <code>range 10 10</code>? Since <code>10 &gt; 10</code> is false, the\n<code>else</code>-clause is evaluated, which is: <code>10 :: (range 11 10)</code> (I've added\nthe brackets to make the order of evaluation more clear). We've just\nworked out that <code>range 11 10</code> = <code>[]</code>, so this is: <code>10 :: []</code>. Remember\nour formal description of lists and the <code>::</code> (cons) operator? <code>10 :: []</code>\nis just the same as <code>[10]</code>.</p>\n<p>Let's try <code>range 9 10</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">range 9 10\n→ 9 :: (range 10 10)\n→ 9 :: [10]\n→ [9; 10]\n</code></pre>\n<p>It should be fairly clear that <code>range 1 10</code> evaluates to\n<code>[1; 2; 3; 4; 5; 6; 7; 8; 9; 10]</code>.</p>\n<p>What we've got here is a simple case of recursion. Functional\nprogramming can be said to prefer recursion over loops, but I'm jumping\nahead of myself. We'll discuss recursion more at the end of this\nchapter.</p>\n<p>Back, temporarily, to <code>if</code> statements. What does this function do?</p>\n<pre><code class=\"language-ocaml\"># let f x y =\n    x + if y &gt; 0 then y else 0\nval f : int -&gt; int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Clue: add brackets around the whole of the if expression. It clips <code>y</code>\nlike an <a href=\"https://en.wikipedia.org/wiki/Diode#Current.E2.80.93voltage_characteristic\">electronic diode</a>.</p>\n<p>The <code>abs</code> (absolute value) function is defined in <code>Stdlib</code> as:</p>\n<pre><code class=\"language-ocaml\"># let abs x =\n    if x &gt;= 0 then x else -x\nval abs : int -&gt; int = &lt;fun&gt;\n</code></pre>\n<p>Also in <code>Stdlib</code>, the <code>string_of_float</code> function contains a complex\npair of nested <code>if</code> expressions:</p>\n<pre><code class=\"language-ocaml\"># let string_of_float f =\n  let s = format_float &quot;%.12g&quot; f in\n  let l = string_length s in\n  let rec loop i =\n    if i &gt;= l then s ^ &quot;.&quot;\n    else if s.[i] = '.' || s.[i] = 'e' then s\n    else loop (i + 1)\n  in\n    loop 0\nLine 2, characters 11-23:\nError: Unbound value format_float\n</code></pre>\n<p>Let's examine this function. Suppose the function is called with <code>f</code> =\n12.34. Then <code>s</code> = &quot;12.34&quot;, and <code>l</code> = 5. We call <code>loop</code> the first time\nwith <code>i</code> = 0.</p>\n<p><code>i</code> is not greater than or equal to <code>l</code>, and <code>s.[i]</code> (the\n<code>i</code><sup>th</sup> character in <code>s</code>) is not a period or <code>'e'</code>. So\n<code>loop (i + 1)</code> is called, ie. <code>loop 1</code>.</p>\n<p>We go through the same dance for <code>i</code> = 1, and end up calling <code>loop 2</code>.</p>\n<p>For <code>i</code> = 2, however, <code>s.[i]</code> is a period (refer to the original string,\n<code>s</code> = &quot;12.34&quot;). So this immediately returns <code>s</code>, and the function\n<code>string_of_float</code> returns &quot;12.34&quot;.</p>\n<p>What is <code>loop</code> doing? In fact it's checking whether the string returned\nfrom <code>format_float</code> contains a period (or <code>'e'</code>). Suppose that we called\n<code>string_of_float</code> with <code>12.0</code>. <code>format_float</code> would return the string\n&quot;12&quot;, but <code>string_of_float</code> must return &quot;12.&quot; or &quot;12.0&quot; (because\nfloating point constants in OCaml must contain a period to differentiate\nthem from integer constants). Hence the check.</p>\n<p>The strange use of recursion in this function is almost certainly for\nefficiency. OCaml supports for loops, so why didn't the authors use for\nloops? We'll see in the next section that OCaml's for loops are limited\nin a way which prevents them from being used in <code>string_of_float</code>. Here,\nhowever, is a more straightforward, but approximately twice as slow, way\nof writing <code>string_of_float</code>:</p>\n<pre><code class=\"language-ocaml\"># let string_of_float f =\n  let s = format_float &quot;%.12g&quot; f in\n    if String.contains s '.' || String.contains s 'e'\n      then s\n      else s ^ &quot;.&quot;\nLine 2, characters 11-23:\nError: Unbound value format_float\n</code></pre>\n<h2 id=\"using-begin--end\">Using begin ... end</h2>\n<p>Here is some code from lablgtk:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if GtkBase.Object.is_a obj cls then\n  fun _ -&gt; f obj\nelse begin\n  eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls;\n  raise Not_found\nend\n</code></pre>\n<p><code>begin</code> and <code>end</code> are what is known as <strong>syntactic sugar</strong> for open and\nclose parentheses. In the example above, all they do is group the two\nstatements in the <code>else</code>-clause together. Suppose the author had written\nthis instead:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">if GtkBase.Object.is_a obj cls then\n  fun _ -&gt; f obj\nelse\n  eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls;\n  raise Not_found\n</code></pre>\n<p>Fully bracketing and properly indenting the above expression gives:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">(if GtkBase.Object.is_a obj cls then\n   fun _ -&gt; f obj\n else\n   eprintf &quot;Glade-warning: %s expects a %s argument.\\n&quot; name cls\n);\nraise Not_found\n</code></pre>\n<p>Not what was intended at all. So the <code>begin</code> and <code>end</code> are necessary to\ngroup together multiple statements in a <code>then</code> or <code>else</code> clause of an if\nexpression. You can also use plain ordinary parentheses <code>( ... )</code> if you\nprefer (and I do prefer, because I <strong>loathe</strong> Pascal :-). Here are two\nsimple examples:</p>\n<pre><code class=\"language-ocaml\"># if 1 = 0 then\n    print_endline &quot;THEN&quot;\n  else begin\n    print_endline &quot;ELSE&quot;;\n    failwith &quot;else clause&quot;\n  end\nException: Failure &quot;else clause&quot;.\nELSE\n# if 1 = 0 then\n    print_endline &quot;THEN&quot;\n  else (\n    print_endline &quot;ELSE&quot;;\n    failwith &quot;else clause&quot;\n  )\nException: Failure &quot;else clause&quot;.\nELSE\n</code></pre>\n<h2 id=\"for-loops-and-while-loops\">For loops and while loops</h2>\n<p>OCaml supports a rather limited form of the familiar <code>for</code> loop:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">for variable = start_value to end_value do\n  expression\ndone\n  \nfor variable = start_value downto end_value do\n  expression\ndone\n</code></pre>\n<p>A simple but real example from lablgtk:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">for i = 1 to n_jobs () do\n  do_next_job ()\ndone\n</code></pre>\n<p>In OCaml, <code>for</code> loops are just shorthand for writing:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let i = 1 in\ndo_next_job ();\nlet i = 2 in\ndo_next_job ();\nlet i = 3 in\ndo_next_job ();\n  ...\nlet i = n_jobs () in\ndo_next_job ();\n()\n</code></pre>\n<p>OCaml doesn't support the concept of breaking out of a <code>for</code> loop early\ni.e. it has no <code>break</code>, <code>continue</code> or <code>last</code> statements. (You <em>could</em>\nthrow an exception and catch it outside, and this would run fast but\noften looks clumsy.)</p>\n<p>The expression inside an OCaml for loop should evaluate to <code>unit</code>\n(otherwise you'll get a warning), and the for loop expression as a whole\nreturns <code>unit</code>:</p>\n<pre><code class=\"language-ocaml\"># for i = 1 to 10 do i done\nLine 1, characters 20-21:\nWarning 10: this expression should have type unit.\n- : unit = ()\n</code></pre>\n<p>Functional programmers tend to use recursion instead of explicit loops,\nand regard <strong>for</strong> loops with suspicion since it can't return anything,\nhence OCaml's relatively powerless <strong>for</strong> loop. We talk about recursion\nbelow.</p>\n<p><strong>While loops</strong> in OCaml are written:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">while boolean-condition do\n  expression\ndone\n</code></pre>\n<p>As with for loops, there is no way provided by the language to break out\nof a while loop, except by throwing an exception, and this means that\nwhile loops have fairly limited use. Again, remember that functional\nprogrammers like recursion, and so while loops are second-class citizens\nin the language.</p>\n<p>If you stop to consider while loops, you may see that they aren't really\nany use at all, except in conjunction with our old friend references.\nLet's imagine that OCaml didn't have references for a moment:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let quit_loop = false in\n  while not quit_loop do\n    print_string &quot;Have you had enough yet? (y/n) &quot;;\n    let str = read_line () in\n      if str.[0] = 'y' then\n        (* how do I set quit_loop to true ?!? *)\n  done\n</code></pre>\n<p>Remember that <code>quit_loop</code> is not a real &quot;variable&quot; - the let-binding\njust makes <code>quit_loop</code> a shorthand for <code>false</code>. This means the while\nloop condition (shown in red) is always true, and the loop runs on\nforever!</p>\n<p>Luckily OCaml <em>does have</em> references, so we can write the code above if\nwe want. Don't get confused and think that the <code>!</code> (exclamation mark)\nmeans &quot;not&quot; as in C/Java. It's used here to mean &quot;dereference the\npointer&quot;, similar in fact to Forth. You're better off reading <code>!</code> as\n&quot;get&quot; or &quot;deref&quot;.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let quit_loop = ref false in\n  while not !quit_loop do\n    print_string &quot;Have you had enough yet? (y/n) &quot;;\n    let str = read_line () in\n      if str.[0] = 'y' then quit_loop := true\n  done;;\n</code></pre>\n<h2 id=\"looping-over-lists\">Looping over lists</h2>\n<p>If you want to loop over a list, don't be an imperative programmer and\nreach for your trusty six-shooter Mr. For Loop! OCaml has some better\nand faster ways to loop over lists, and they are all located in the\n<code>List</code> module. There are in fact dozens of good functions in <code>List</code>, but\nI'll only talk about the most useful ones here.</p>\n<p>First off, let's define a list for us to use:</p>\n<pre><code class=\"language-ocaml\"># let my_list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nval my_list : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n</code></pre>\n<p>If you want to call a function once on every element of the list, use\n<code>List.iter</code>, like this:</p>\n<pre><code class=\"language-ocaml\"># let f elem =\n    Printf.printf &quot;I'm looking at element %d now\\n&quot; elem\n  in\n    List.iter f my_list\nI'm looking at element 1 now\nI'm looking at element 2 now\nI'm looking at element 3 now\nI'm looking at element 4 now\nI'm looking at element 5 now\nI'm looking at element 6 now\nI'm looking at element 7 now\nI'm looking at element 8 now\nI'm looking at element 9 now\nI'm looking at element 10 now\n- : unit = ()\n</code></pre>\n<p><code>List.iter</code> is in fact what you should think about using first every\ntime your cerebellum suggests you use a for loop.</p>\n<p>If you want to <em>transform</em> each element separately in the list - for\nexample, doubling each element in the list - then use <code>List.map</code>.</p>\n<pre><code class=\"language-ocaml\"># List.map (( * ) 2) my_list\n- : int list = [2; 4; 6; 8; 10; 12; 14; 16; 18; 20]\n</code></pre>\n<p>The function <code>List.filter</code> collects only those elements of a list which satisfy\nsome condition - e.g. returning all even numbers in a list.</p>\n<pre><code class=\"language-ocaml\"># let is_even i =\n    i mod 2 = 0\n  in\n    List.filter is_even my_list\n- : int list = [2; 4; 6; 8; 10]\n</code></pre>\n<p>To find out if a list contains some element, use <code>List.mem</code> (short for\nmember):</p>\n<pre><code class=\"language-ocaml\"># List.mem 12 my_list\n- : bool = false\n</code></pre>\n<p><code>List.for_all</code> and <code>List.exists</code> are the same as the &quot;forall&quot; and\n&quot;exist&quot; operators in predicate logic.</p>\n<p>For operating over two lists at the same time, there are &quot;-2&quot; variants\nof some of these functions, namely <code>iter2</code>, <code>map2</code>, <code>for_all2</code>,\n<code>exists2</code>.</p>\n<p>The <code>map</code> and <code>filter</code> functions operate on individual list elements in\nisolation. <strong>Fold</strong> is a more unusual operation that is best\nthought about as &quot;inserting an operator between each element of the\nlist&quot;. Suppose I wanted to add all the numbers in my list together. In\nhand-waving terms what I want to do is insert a plus sign between the\nelements in my list:</p>\n<pre><code class=\"language-ocaml\"># 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n- : int = 55\n</code></pre>\n<p>The fold operation does this, although the exact details are a little\nbit more tricky. First of all, what happens if I try to fold an empty\nlist? In the case of summing the list it would be nice if the answer was\nzero, instead of error. However if I was trying to find the product of\nthe list, I'd like the answer to be one instead. So I obviously have to\nprovide some sort of &quot;default&quot; argument to my fold. The second issue\ndoesn't arise with simple operators like <code>+</code> and <code>*</code>: what happens if\nthe operator I'm using isn't associative, ie. (a <em>op</em> b) <em>op</em> c not\nequal to a <em>op</em> (b <em>op</em> c)? In that case it would matter if I started\nfrom the left hand end of the list and worked right, versus if I started\nfrom the right and worked left. For this reason there are two versions\nof fold, called <code>List.fold_left</code> (works left to right) and\n<code>List.fold_right</code> (works right to left, and is also less efficient).</p>\n<p>Let's use <code>List.fold_left</code> to define <code>sum</code> and <code>product</code> functions for\ninteger lists:</p>\n<pre><code class=\"language-ocaml\"># let sum = List.fold_left ( + ) 0\nval sum : int list -&gt; int = &lt;fun&gt;\n# let product = List.fold_left ( * ) 1\nval product : int list -&gt; int = &lt;fun&gt;\n# sum my_list\n- : int = 55\n# product my_list\n- : int = 3628800\n</code></pre>\n<p>That was easy! Notice that I've accidentally come up with a way to do\nmathematical factorials:</p>\n<pre><code class=\"language-ocaml\"># let fact n = product (range 1 n)\nval fact : int -&gt; int = &lt;fun&gt;\n# fact 10\n- : int = 3628800\n</code></pre>\n<p>(Notice that this factorial function isn't very useful because it\noverflows the integers and gives wrong answers even for quite small\nvalues of <code>n</code>.)</p>\n<h2 id=\"looping-over-strings\">Looping over strings</h2>\n<p>The <code>String</code> module also contains many dozens of useful string-related\nfunctions, and some of them are concerned with looping over strings.</p>\n<p><code>String.copy</code> copies a string, like <code>strdup</code>. There is also a <code>String.iter</code>\nfunction which works like <code>List.iter</code>, except over the characters of the\nstring.</p>\n<h2 id=\"recursion\">Recursion</h2>\n<p>Now we come to a hard topic - recursion. Functional programmers are\ndefined by their love of recursive functions, and in many ways recursive\nfunctions in f.p. are the equivalent of loops in imperative programming.\nIn functional languages loops are second-class citizens, whilst\nrecursive functions get all the best support.</p>\n<p>Writing recursive functions requires a change in mindset from writing\nfor loops and while loops. So what I'll give you in this section will be\njust an introduction and examples.</p>\n<p>In the first example we're going to read the whole of a file into memory\n(into a long string). There are essentially three possible approaches to\nthis:</p>\n<h3 id=\"approach-1\">Approach 1</h3>\n<p>Get the length of the file, and read it all in one go using the\n<code>really_input</code> method. This is the simplest, but it might not work on\nchannels which are not really files (eg. reading keyboard input) which\nis why we look at the other two approaches.</p>\n<h3 id=\"approach-2\">Approach 2</h3>\n<p>The imperative approach, using a while loop which is broken out of using\nan exception.</p>\n<h3 id=\"approach-3\">Approach 3</h3>\n<p>A recursive loop, breaking out of the recursion again using an\nexception.</p>\n<p>We're going to introduce a few new concepts here. Our second two\napproaches will use the <code>Buffer</code> module - an expandable buffer which you\ncan think of like a string onto which you can efficiently append more\ntext at the end. We're also going to be catching the <code>End_of_file</code>\nexception which the input functions throw when they reach the end of the\ninput. Also we're going to use <code>Sys.argv.(1)</code> to get the first command\nline parameter.</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 1 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let len = in_channel_length chan in\n  let result = (Bytes.create len) in\n    really_input chan result 0 len;\n    (Bytes.to_string result)\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>Approach 1 works but is not very satisfactory because <code>read_whole_chan</code>\nwon't work on non-file channels like keyboard input or sockets. Approach\n2 involves a while loop:</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 2 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  try\n    while true do\n      let line = input_line chan in\n        Buffer.add_string buf line;\n        Buffer.add_char buf '\\n'\n    done;\n    assert false (* This is never executed\n\t                (always raises Assert_failure). *)\n  with\n    End_of_file -&gt; Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n    printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>The key to approach 2 is to look at the central while loop. Remember\nthat I said the only way to break out of a while loop early was with an\nexception? This is exactly what we're doing here. Although I haven't\ncovered exceptions yet, you probably won't have any trouble\nunderstanding the <code>End_of_file</code> exception thrown in the code above by\n<code>input_line</code> when it hits the end of the file. The buffer <code>buf</code>\naccumulates the contents of the file, and when we hit the end of the\nfile we return it (<code>Buffer.contents buf</code>).</p>\n<p>One curious point about this is the apparently superfluous statement\n(<code>assert false</code>) just after the while loop. What is it for?  Remember\nthat while loops, like for loops, are just expressions, and they return\nthe <code>unit</code> object (<code>()</code>). However OCaml demands that the return type\ninside a <code>try</code> matches the return type of each caught exception. In this\ncase because <code>End_of_file</code> results in a <code>string</code>, the main body of the\n<code>try</code> must also &quot;return&quot; a string — even though because of the infinite\nwhile loop the string could never actually be returned.  <code>assert false</code>\nhas a polymorphic type, so will unify with whatever value is returned\nby the <code>with</code> branch.</p>\n<p>Here's our recursive version. Notice that it's <em>shorter</em> than approach\n2, but not so easy to understand for imperative programmers at least:</p>\n<pre><code class=\"language-ocaml\">(* Read whole file: Approach 3 *)\nopen Printf\n  \nlet read_whole_chan chan =\n  let buf = Buffer.create 4096 in\n  let rec loop () =\n    let line = input_line chan in\n      Buffer.add_string buf line;\n      Buffer.add_char buf '\\n';\n      loop ()\n  in\n    try loop () with\n      End_of_file -&gt; Buffer.contents buf\n  \nlet read_whole_file filename =\n  let chan = open_in filename in\n    read_whole_chan chan\n  \nlet main () =\n  let filename = Sys.argv.(1) in\n  let str = read_whole_file filename in\n  printf &quot;I read %d characters from %s\\n&quot; (String.length str) filename\n</code></pre>\n<p>Again we have an infinite loop - but in this case done using recursion.\n<code>loop</code> calls itself at the end of the function. The infinite recursion\nis broken when <code>input_line</code> throws an <code>End_of_file</code> exception.</p>\n<p>It looks like approach 3 might overflow the stack if you gave it a\nparticularly large file, but this is in fact not the case. Because of\ntail recursion (discussed below) the compiler will turn the recursive\n<code>loop</code> function into a real while loop (!) which runs in constant stack\nspace.</p>\n<p>In the next example we will show how recursion is great for constructing\nor examining certain types of data structures, particularly trees. Let's\nhave a recursive type to represent files in a filesystem:</p>\n<pre><code class=\"language-ocaml\"># type filesystem = File of string | Directory of filesystem list\ntype filesystem = File of string | Directory of filesystem list\n</code></pre>\n<p>The <code>opendir</code> and <code>readdir</code> functions are used to open a directory and\nread elements from the directory. I'm going to define a handy\n<code>readdir_no_ex</code> function which hides the annoying <code>End_of_file</code>\nexception that <code>readdir</code> throws when it reaches the end of the\ndirectory:</p>\n<pre><code class=\"language-ocaml\"># #load &quot;unix.cma&quot;\n# open Unix\n# let readdir_no_ex dirh =\n  try\n    Some (readdir dirh)\n  with\n    End_of_file -&gt; None\nval readdir_no_ex : dir_handle -&gt; string option = &lt;fun&gt;\n</code></pre>\n<p>The type of <code>readdir_no_ex</code> is this. Recall our earlier discussion about\nnull pointers.</p>\n<pre><code class=\"language-ocaml\"># readdir_no_ex\n- : dir_handle -&gt; string option = &lt;fun&gt;\n</code></pre>\n<p>I'm also going to define a simple recursive function which I can use to\nconvert the <code>filesystem</code> type into a string for (eg) printing:</p>\n<pre><code class=\"language-ocaml\"># let rec string_of_filesystem fs =\n  match fs with\n  | File filename -&gt; filename ^ &quot;\\n&quot;\n  | Directory fs_list -&gt;\n      List.fold_left (^) &quot;&quot; (List.map string_of_filesystem fs_list)\nval string_of_filesystem : filesystem -&gt; string = &lt;fun&gt;\n</code></pre>\n<p>Note the use of <code>fold_left</code> and <code>map</code>. The <code>map</code> is used to\n(recursively) convert each <code>filesystem</code> in the list into a <code>string</code>.\nThen the <code>fold_left (^) &quot;&quot;</code> concatenates the list together into one big\nstring. Notice also the use of pattern matching. (The library defines a\nfunction called <code>String.concat</code> which is essentially equivalent to\n<code>fold_left (^) </code>, but implemented more efficiently).</p>\n<p>Now let's define a function to read a directory structure, recursively,\nand return a recursive <code>filesystem</code> data structure. I'm going to show\nthis function in steps, but I'll print out the entire function at the\nend of this section. First the outline of the function:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    (* ..... *) in\n  Directory (loop ())\n</code></pre>\n<p>The call to <code>opendir</code> opens up the given path and returns a <code>dir_handle</code>\nfrom which we will be able to read the names using <code>readdir_no_ex</code>\nlater. The return value of the function is going to be a\n<code>Directory fs_list</code>, so all we need to do to complete the function is to\nwrite our function <code>loop</code> which returns a list of <code>filesystem</code>s. The\ntype of <code>loop</code> will be:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">loop : unit -&gt; filesystem list\n</code></pre>\n<p>How do we define loop? Let's take it in steps again.</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  let filename = readdir_no_ex dirh in\n  (* ..... *)\n</code></pre>\n<p>First we read the next filename from the directory handle. <code>filename</code>\nhas type <code>string option</code>, in other words it could be <code>None</code> or\n<code>Some &quot;foo&quot;</code> where <code>foo</code> is the name of the next filename in the\ndirectory. We also need to ignore the <code>&quot;.&quot;</code> and <code>&quot;..&quot;</code> files (ie. the\ncurrent directory and the parent directory). We can do all this with a\nnice pattern match:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  let filename = readdir_no_ex dirh in\n    match filename with\n    | None -&gt; []\n    | Some &quot;.&quot; -&gt; loop ()\n    | Some &quot;..&quot; -&gt; loop ()\n    | Some filename -&gt;\n        (* ..... *)\n</code></pre>\n<p>The <code>None</code> case is easy. Thinking recursively (!) if <code>loop</code> is called\nand we've reached the end of the directory, <code>loop</code> needs to return a\nlist of entries - and there's no entries - so it returns the empty list\n(<code>[]</code>).</p>\n<p>For <code>&quot;.&quot;</code> and <code>&quot;..&quot;</code> we just ignore the file and call <code>loop</code> again.</p>\n<p>What do we do when <code>loop</code> reads a real filename (the <code>Some filename</code>\nmatch below)? Let <code>pathname</code> be the full path to the file. We 'stat' the\nfile to see if it's really a directory. If it <em>is</em> a directory, we set\n<code>this</code> by recursively calling <code>read_directory</code> which will return\n<code>Directory something</code>. Notice that the overall result of\n<code>read_directory</code> is <code>Directory (loop ())</code>. If the file is really a file\n(not a directory) then we let <code>this</code> be <code>File pathname</code>. Then we do\nsomething clever: we return <code>this :: loop ()</code>. This is the recursive\ncall to <code>loop ()</code> to calculate the remaining directory members (a list),\nto which we prepend <code>this</code>.</p>\n<pre><code class=\"language-ocaml\"># let rec read_directory path =\n  let dirh = opendir path in\n  let rec loop () =\n    let filename = readdir_no_ex dirh in\n      match filename with\n      | None -&gt; []\n      | Some &quot;.&quot; -&gt; loop ()\n      | Some &quot;..&quot; -&gt; loop ()\n      | Some filename -&gt;\n          let pathname = path ^ &quot;/&quot; ^ filename in\n          let stat = lstat pathname in\n          let this =\n            if stat.st_kind = S_DIR then\n              read_directory pathname\n            else\n              File pathname\n          in\n            this :: loop ()\n  in\n    Directory (loop ())\nval read_directory : string -&gt; filesystem = &lt;fun&gt;\n</code></pre>\n<p>That's quite a complex bit of recursion, but although this is a made-up\nexample, it's fairly typical of the complex patterns of recursion found\nin real-world functional programs. The two important lessons to take\naway from this are:</p>\n<ul>\n<li>\n<p>The use of recursion to build a list:</p>\n  <!-- $MDX skip -->\n  ```ocaml\n  let rec loop () =\n    a match or if statement\n    | base case -> []\n    | recursive case -> element :: loop ()\n  ```\n  Compare this to our previous `range` function. The pattern of recursion\n  is exactly the same:\n    \n  ```ocaml\n  # let rec range a b =\n    if a > b then []            (* Base case *)\n    else a :: range (a + 1) b     (* Recursive case *)\n  ```\n\t\n</li>\n<li>\n<p>The use of recursion to build up trees:</p>\n  <!-- $MDX skip -->\n  ```ocaml\n  let rec read_directory path =\n    (* blah blah *)\n    if file-is-a-directory then\n      read_directory path-to-file\n    else\n      Leaf file\n  ```\n  All that remains now to make this a working program is a little bit of\n  code to call `read_directory` and display the result:\n    \n  <!-- $MDX skip -->\n  ```ocaml\n  let path = Sys.argv.(1) in\n  let fs = read_directory path in\n  print_endline (string_of_filesystem fs)\n  ```\n\n</li>\n</ul>\n<h3 id=\"recursion-example-maximum-element-in-a-list\">Recursion example: maximum element in a list</h3>\n<p>Remember the basic recursion pattern for lists:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  a match or if statement\n  | base case -&gt; []\n  | recursive case -&gt; element :: loop ()\n</code></pre>\n<p>The key here is actually the use of the match / base case / recursive\ncase pattern. In this example - finding the maximum element in a list -\nwe're going to have two base cases and one recursive case. But before I\njump ahead to the code, let's just step back and think about the\nproblem. By thinking about the problem, the solution will appear &quot;as if\nby magic&quot; (I promise you :-)</p>\n<p>First of all, let's be clear that the maximum element of a list is just\nthe biggest one, e.g. the maximum element of the list <code>[1; 2; 3; 4; 1]</code>\nis <code>4</code>.</p>\n<p>Are there any special cases? Yes, there are. What's the maximum element\nof the empty list <code>[]</code>? There <em>isn't one</em>. If we are passed an empty\nlist, we should throw an error.</p>\n<p>What's the maximum element of a single element list such as <code>[4]</code>?\nThat's easy: it's just the element itself. So <code>list_max [4]</code> should\nreturn <code>4</code>, or in the general case, <code>list_max [x]</code> should return <code>x</code>.</p>\n<p>What's the maximum element of the general list <code>x :: remainder</code> (this is\nthe &quot;cons&quot; notation for the list, so <code>remainder</code> is the tail - also a\nlist)?</p>\n<p>Think about this for a while. Suppose you know the maximum element of\n<code>remainder</code>, which is, say, <code>y</code>. What's the maximum element of\n<code>x :: remainder</code>? It depends on whether <code>x &gt; y</code> or <code>x &lt;= y</code>. If <code>x</code> is\nbigger than <code>y</code>, then the overall maximum is <code>x</code>, whereas conversely if\n<code>x</code> is less than <code>y</code>, then the overall maximum is <code>y</code>.</p>\n<p>Does this really work? Consider <code>[1; 2; 3; 4; 1]</code> again. This is\n<code>1 :: [2; 3; 4; 1]</code>. Now the maximum element of the remainder,\n<code>[2; 3; 4; 1]</code>, is <code>4</code>. So now we're interested in <code>x = 1</code> and <code>y = 4</code>.\nThat head element <code>x = 1</code> doesn't matter because <code>y = 4</code> is bigger, so\nthe overall maximum of the whole list is <code>y = 4</code>.</p>\n<p>Let's now code those rules above up, to get a working function:</p>\n<pre><code class=\"language-ocaml\"># let rec list_max xs =\n  match xs with\n  | [] -&gt; (* empty list: fail *)\n      failwith &quot;list_max called on empty list&quot;\n  | [x] -&gt; (* single element list: return the element *)\n      x\n  | x :: remainder -&gt; (* multiple element list: recursive case *)\n      max x (list_max remainder)\nval list_max : 'a list -&gt; 'a = &lt;fun&gt;\n</code></pre>\n<p>I've added comments so you can see how the rules / special cases we\ndecided upon above really correspond to lines of code.</p>\n<p>Does it work?</p>\n<pre><code class=\"language-ocaml\"># list_max [1; 2; 3; 4; 1]\n- : int = 4\n# list_max []\nException: Failure &quot;list_max called on empty list&quot;.\n# list_max [5; 4; 3; 2; 1]\n- : int = 5\n# list_max [5; 4; 3; 2; 1; 100]\n- : int = 100\n</code></pre>\n<p>Notice how the solution proposed is both (a) very different from the\nimperative for-loop solution, and (b) much more closely tied to the\nproblem specification. Functional programmers will tell you that this is\nbecause the functional style is much higher level than the imperative\nstyle, and therefore better and simpler. Whether you believe them is up\nto you. It's certainly true that it's much simpler to reason logically\nabout the functional version, which is useful if you wanted to formally\nprove that <code>list_max</code> is correct (&quot;correct&quot; being the mathematical way\nto say that a program is provably bug-free, useful for space shuttles,\nnuclear power plants and higher quality software in general).</p>\n<h3 id=\"tail-recursion\">Tail recursion</h3>\n<p>Let's look at the <code>range</code> function again for about the twentieth time:</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n  if a &gt; b then []\n  else a :: range (a+1) b\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>I'm going to rewrite it slightly to make something about the structure\nof the program clearer (still the same function however):</p>\n<pre><code class=\"language-ocaml\"># let rec range a b =\n  if a &gt; b then [] else\n    let result = range (a+1) b in\n      a :: result\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>Let's call it:</p>\n<pre><code class=\"language-ocaml\"># List.length (range 1 10)\n- : int = 10\n# List.length (range 1 1000000)\nStack overflow during evaluation (looping recursion?).\n</code></pre>\n<p>Hmmm ... at first sight this looks like a problem with recursive\nprogramming, and hence with the whole of functional programming! If you\nwrite your code recursively instead of iteratively then you necessarily\nrun out of stack space on large inputs, right?</p>\n<p>In fact, wrong. Compilers can perform a simple optimisation on certain\ntypes of recursive functions to turn them into while loops. These\ncertain types of recursive functions therefore run in constant stack\nspace, and with the equivalent efficiency of imperative while loops.\nThese functions are called <strong>tail-recursive functions</strong>.</p>\n<p>In tail-recursive functions, the recursive call happens last of all.\nRemember our <code>loop ()</code> functions above? They all had the form:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec loop () =\n  (* do something *)\n  loop ()\n</code></pre>\n<p>Because the recursive call to <code>loop ()</code> happens as the very last thing,\n<code>loop</code> is tail-recursive and the compiler will turn the whole thing into\na while loop.</p>\n<p>Unfortunately <code>range</code> is not tail-recursive, and the longer version\nabove shows why. The recursive call to <code>range</code> doesn't happen as the\nvery last thing. In fact the last thing to happen is the <code>::</code> (cons)\noperation. As a result, the compiler doesn't turn the recursion into a\nwhile loop, and the function is not efficient in its use of stack space.</p>\n<p>The use of an accumulating argument or <code>accumulator</code> allows one to write\nfunctions such as <code>range</code> above in a tail-recursive manner, which means they\nwill be efficient and work properly on large inputs. Let's plan our rewritten\n<code>range</code> function which will use an accumulator argument to store the &quot;result so\nfar&quot;:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec range2 a b accum =\n  (* ... *)\n  \nlet range a b =\n  range2 a b []\n</code></pre>\n<p>The <code>accum</code> argument is going to accumulate the result. It's the &quot;result\nso far&quot;. We pass in the empty list (&quot;no result so far&quot;). The easy case\nis when <code>a &gt; b</code>:</p>\n<!-- $MDX skip -->\n<pre><code class=\"language-ocaml\">let rec range2 a b accum =\n  if a &gt; b then accum\n  else\n    (* ... *)\n</code></pre>\n<p>If <code>a &gt; b</code> (i.e. if we've reached the end of the recursion), then stop\nand return the result (<code>accum</code>).</p>\n<p>Now the trick is to write the <code>else</code>-clause and make sure that the call\nto <code>range2</code> is the very last thing that we do, so the function is\ntail-recursive:</p>\n<pre><code class=\"language-ocaml\"># let rec range2 a b accum =\n  if a &gt; b then accum\n  else range2 (a + 1) b (a :: accum)\nval range2 : int -&gt; int -&gt; int list -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>There's only one slight problem with this function: it constructs the\nlist backwards! However, this is easy to rectify by redefining range as:</p>\n<pre><code class=\"language-ocaml\"># let range a b = List.rev (range2 a b [])\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>It works this time, although it's a bit slow to run because it really\ndoes have to construct a list with a million elements in it:</p>\n<pre><code class=\"language-ocaml\"># List.length (range 1 1000000)\n- : int = 1000000\n</code></pre>\n<p>The following implementation is twice as fast as the previous one,\nbecause it does not need to reverse a list:</p>\n<pre><code class=\"language-ocaml\"># let rec range2 a b accum =\n  if b &lt; a then accum\n  else range2 a (b - 1) (b :: accum)\nval range2 : int -&gt; int -&gt; int list -&gt; int list = &lt;fun&gt;\n# let range a b =\n  range2 a b []\nval range : int -&gt; int -&gt; int list = &lt;fun&gt;\n</code></pre>\n<p>That was a brief overview of tail recursion, but in real world\nsituations determining if a function is tail recursive can be quite\nhard. What did we really learn here? One thing is that recursive\nfunctions have a dangerous trap for inexperienced programmers. Your\nfunction can appear to work for small inputs (during testing), but fail\ncatastrophically in the field when exposed to large inputs. This is one\nargument <em>against</em> using recursive functions, and for using explicit\nwhile loops when possible.</p>\n<h2 id=\"mutable-records-references-again-and-arrays\">Mutable records, references (again!) and arrays</h2>\n<p>Previously we mentioned records in passing. These are like C <code>struct</code>s:</p>\n<pre><code class=\"language-ocaml\"># type pair_of_ints = {a : int; b : int}\ntype pair_of_ints = { a : int; b : int; }\n# {a = 3; b = 5}\n- : pair_of_ints = {a = 3; b = 5}\n# {a = 3}\nLine 1, characters 1-8:\nError: Some record fields are undefined: b\n</code></pre>\n<p>One feature which I didn't cover: OCaml records can have mutable fields.\nNormally an expression like <code>{a = 3; b = 5}</code> is an immutable, constant\nobject. However if the record has <strong>mutable fields</strong>, then\nthere is a way to change those fields in the record. This is an\nimperative feature of OCaml, because functional languages don't normally\nallow mutable objects (or references or mutable arrays, which we'll look\nat in a moment).</p>\n<p>Here is an object defined with a mutable field. This field is used to\ncount how many times the object has been accessed. You could imagine\nthis being used in a caching scheme to decide which objects you'd evict\nfrom memory.</p>\n<pre><code class=\"language-ocaml\"># type name = {name : string; mutable access_count : int}\ntype name = { name : string; mutable access_count : int; }\n</code></pre>\n<p>Here is a function defined on names which prints the <code>name</code> field and\nincrements the mutable <code>access_count</code> field:</p>\n<pre><code class=\"language-ocaml\"># let print_name name =\n  print_endline (&quot;The name is &quot; ^ name.name);\n  name.access_count &lt;- name.access_count + 1\nval print_name : name -&gt; unit = &lt;fun&gt;\n</code></pre>\n<p>Notice a strange, and very non-functional feature of <code>print_name</code>: it modifies\nits <code>access_count</code> parameter. This function is not &quot;pure&quot;. OCaml is a\nfunctional language, but not to the extent that it forces functional\nprogramming down your throat.</p>\n<p>Anyway, let's see <code>print_name</code> in action:</p>\n<pre><code class=\"language-ocaml\"># let n = {name = &quot;Richard Jones&quot;; access_count = 0}\nval n : name = {name = &quot;Richard Jones&quot;; access_count = 0}\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 0}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 1}\n# print_name n\nThe name is Richard Jones\n- : unit = ()\n# n\n- : name = {name = &quot;Richard Jones&quot;; access_count = 2}\n</code></pre>\n<p>Only fields explicitly marked as <code>mutable</code> can be assigned to using the\n<code>&lt;-</code> operator. If you try to assign to a non-mutable field, OCaml won't\nlet you:</p>\n<pre><code class=\"language-ocaml\"># n.name &lt;- &quot;John Smith&quot;\nLine 1, characters 1-23:\nError: The record field name is not mutable\n</code></pre>\n<p>References, with which we should be familiar by now, are implemented\nusing records with a mutable <code>contents</code> field. Check out the definition\nin <code>Stdlib</code>:</p>\n<pre><code class=\"language-ocaml\">type 'a ref = {mutable contents : 'a}\n</code></pre>\n<p>And look closely at what the OCaml toplevel prints out for the value of\na reference:</p>\n<pre><code class=\"language-ocaml\"># let r = ref 100\nval r : int Stdlib.ref = {Stdlib.contents = 100}\n</code></pre>\n<p>Arrays are another sort of mutable structure provided by OCaml. In\nOCaml, plain lists are implemented as linked lists, and linked lists are\nslow for some types of operation. For example, getting the head of a\nlist, or iterating over a list to perform some operation on each element\nis reasonably fast. However, jumping to the n<sup>th</sup> element of a\nlist, or trying to randomly access a list - both are slow operations.\nThe OCaml <code>Array</code> type is a real array, so random access is fast, but\ninsertion and deletion of elements is slow. <code>Array</code>s are also mutable so\nyou can randomly change elements too.</p>\n<p>The basics of arrays are simple:</p>\n<pre><code class=\"language-ocaml\"># let a = Array.create 10 0\nLine 1, characters 9-21:\nAlert deprecated: Stdlib.Array.create\nUse Array.make instead.\nval a : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n# for i = 0 to Array.length a - 1 do\n  a.(i) &lt;- i\nLine 3, characters 1-3:\nError: Syntax error\n# a\n- : int array = [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0|]\n</code></pre>\n<p>Notice the syntax for writing arrays: <code>[| element; element; ... |]</code></p>\n<p>The OCaml compiler was designed with heavy numerical processing in mind\n(the sort of thing that FORTRAN is traditionally used for), and so it\ncontains various optimisations specifically for arrays of numbers,\nvectors and matrices. Here is some benchmark code for doing dense matrix\nmultiplication. Notice that it uses for-loops and is generally very\nimperative in style:</p>\n<pre><code class=\"language-ocaml\"># let size = 30\nval size : int = 30\n\n# let mkmatrix rows cols =\n  let count = ref 1\n  and last_col = cols - 1\n  and m = Array.make_matrix rows cols 0 in\n    for i = 0 to rows - 1 do\n      let mi = m.(i) in\n        for j = 0 to last_col do\n          mi.(j) &lt;- !count;\n          incr count\n        done;\n    done;\n    m\nval mkmatrix : int -&gt; int -&gt; int array array = &lt;fun&gt;\n\n# let rec inner_loop k v m1i m2 j =\n  if k &lt; 0 then v\n  else inner_loop (k - 1) (v + m1i.(k) * m2.(k).(j)) m1i m2 j\nval inner_loop : int -&gt; int -&gt; int array -&gt; int array array -&gt; int -&gt; int =\n  &lt;fun&gt;\n\n# let mmult rows cols m1 m2 m3 =\n  let last_col = cols - 1\n  and last_row = rows - 1 in\n    for i = 0 to last_row do\n      let m1i = m1.(i) and m3i = m3.(i) in\n      for j = 0 to last_col do\n        m3i.(j) &lt;- inner_loop last_row 0 m1i m2 j\n      done;\n    done\nval mmult :\n  int -&gt; int -&gt; int array array -&gt; int array array -&gt; int array array -&gt; unit =\n  &lt;fun&gt;\n\n# let () =\n  let n =\n    try int_of_string Sys.argv.(1)\n    with Invalid_argument _ -&gt; 1\n  and m1 = mkmatrix size size\n  and m2 = mkmatrix size size\n  and m3 = Array.make_matrix size size 0 in\n    for i = 1 to n - 1 do\n      mmult size size m1 m2 m3\n    done;\n    mmult size size m1 m2 m3;\n    Printf.printf &quot;%d %d %d %d\\n&quot; m3.(0).(0) m3.(2).(3) m3.(3).(2) m3.(4).(4)\nException: Failure &quot;int_of_string&quot;.\n</code></pre>\n<h2 id=\"mutually-recursive-functions\">Mutually recursive functions</h2>\n<p>Suppose I want to define two functions which call each other. This is\nactually not a very common thing to do, but it can be useful sometimes.\nHere's a contrived example (thanks to Ryan Tarpine): The number 0 is\neven. Other numbers greater than 0 are even if their predecessor is odd.\nHence:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n</code></pre>\n<p>The code above doesn't compile because we haven't defined the function\n<code>odd</code> yet! That's easy though. Zero is not odd, and other numbers\ngreater than 0 are odd if their predecessor is even. So to make this\ncomplete we need that function too:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n# let rec odd n =\n  match n with\n  | 0 -&gt; false\n  | x -&gt; even (x - 1)\nLine 4, characters 10-14:\nError: Unbound value even\n</code></pre>\n<p>The only problem is... this program doesn't compile. In order to compile\nthe <code>even</code> function, we already need the definition of <code>odd</code>, and to\ncompile <code>odd</code> we need the definition of <code>even</code>. So swapping the two\ndefinitions around won't help either.</p>\n<p>There are no &quot;forward prototypes&quot; (as seen in languages descended\nfrom C) in OCaml but there is a special syntax\nfor defining a set of two or more mutually recursive functions, like\n<code>odd</code> and <code>even</code>:</p>\n<pre><code class=\"language-ocaml\"># let rec even n =\n  match n with\n  | 0 -&gt; true\n  | x -&gt; odd (x - 1)\nLine 4, characters 10-13:\nError: Unbound value odd\n</code></pre>\n<p>You can also\nuse similar syntax for writing mutually recursive class definitions and\nmodules.</p>\n","title":"If Statements, Loops and Recursions","pageDescription":"Learn basic control-flow and recusion in OCaml\n","tableOfContents":"<ul>\n<li><ul>\n<li><a href=\"#if-statements-actually-these-are-if-expressions\">If statements (actually, these are if expressions)</a>\n</li>\n<li><a href=\"#using-begin--end\">Using begin ... end</a>\n</li>\n<li><a href=\"#for-loops-and-while-loops\">For loops and while loops</a>\n</li>\n<li><a href=\"#looping-over-lists\">Looping over lists</a>\n</li>\n<li><a href=\"#looping-over-strings\">Looping over strings</a>\n</li>\n<li><a href=\"#recursion\">Recursion</a>\n</li>\n<li><a href=\"#mutable-records-references-again-and-arrays\">Mutable records, references (again!) and arrays</a>\n</li>\n<li><a href=\"#mutually-recursive-functions\">Mutually recursive functions</a>\n</li>\n</ul>\n</li>\n</ul>\n"},"params":{"lang":"en","tutorial":"if-statements-loops-and-recursions"}},"__N_SSG":true}