type toc = {
title : string;
href : string;
children : toc list
}

type t = toc list

let render (t : t) = 
<div class="bg-gray-50 lg:bg-transparent">
  <script>
    function TableOfContents() {
      return {
        top: 0,
        height: 0,
        initialized: false,
        activeSlug: '#types',
        init() {
          this.items = Array.from(this.$el.querySelectorAll('a[href^="#"]'))
          this.sections = this.items.map(item => document.querySelector(item.getAttribute('href')))

          let lastKnownScrollPosition = 0
          let ticking = false

          window.addEventListener('scroll', () => {
            lastKnownScrollPosition = window.pageYOffset

            if (!ticking) {
              window.requestAnimationFrame(() => {
                this.check(lastKnownScrollPosition)
                ticking = false
              })
              ticking = true
            }
          }, { passive: true })

          window.addEventListener('resize', () => this.check(window.pageYOffset))

          this.check(window.pageYOffset)

          this.$nextTick(() => {
            this.initialized = true
          })
        },
        check(scrollPosition) {
          let active = 0
          let bodyOffset = document.body.getBoundingClientRect().top
          let rootFontSize = parseFloat(window.getComputedStyle(document.documentElement).fontSize)

          if (scrollPosition !== 0) {
            for (let i = 0; i < this.sections.length; i++) {
              let offset = this.sections[i].tagName === 'H2' ? Math.floor(rootFontSize * 2) : Math.floor(rootFontSize * 1.75)
              if (scrollPosition >= this.sections[i].getBoundingClientRect().top - bodyOffset - offset - 1) {
                active = i
              } else {
                break
              }
            }
          }

          this.activeSlug = this.items[active].getAttribute('href').substr(1)

          this.top = this.items[active].offsetTop
          this.height = this.items[active].offsetHeight
        }
      }
    }
  </script>
  <div class="text-sm max-w-[37.5rem] mx-auto lg:max-w-none lg:mx-0 relative lg:sticky lg:top-10"
    x-data="TableOfContents()" x-init="init()">
    <ul class="space-y-3 border-l border-gray-200 pl-6">
      <% t |> List.iter begin fun item -> %>
      <li class="space-y-3">
        <a href="<%s item.href %>" class="block font-medium text-gray-900 transition-colors duration-300"
          :class="{ 'transition-colors duration-300': initialized, 'text-orange-600': activeSlug === '<%s item.href %>', 'text-gray-900': activeSlug !== '#<%s item.href %>' }"><%s! item.title %></a>
        <% match item.children with [] -> () | items -> %>
        <ul class="space-y-3">
        <% items |> List.iter begin fun item -> %>
          <li class="ml-4"><a href="<%s item.href %>" class="block transition-colors duration-300"
              :class="{ 'transition-colors duration-300': initialized, 'text-orange-600': activeSlug === '<%s item.href %>' }"><%s! item.title %></a>
          </li>
        <% end; %>
        </ul>
        <% ; %>
      </li>
      <% end; %>
    </ul>
    <div class="absolute top-0 left-0 w-px bg-orange-500 origin-top transition-transform duration-300"
      :style="'height:'+(height?'1px':'0')+';transform:translateY('+top+'px) scaleY('+height+')'"
      :class="initialized ? 'transition-transform duration-300' : ''"
      style="height:1px;transform:translateY(0px) scaleY(20)"></div>
  </div>
</div>