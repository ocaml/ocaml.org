let module_kind = function
  | Ocamlorg.Package.Documentation.Module _ -> "Module"
  | ModuleType _ -> "Module type"
  | FunctorArgument (number, _) -> "Parameter #" ^ (Int.to_string number)

let module_path_kind path =
  match List.fold_left (fun _ v -> Some v) None path with 
  | None -> ""
  | Some v -> module_kind v

let module_name = function
  | Ocamlorg.Package.Documentation.Module name
  | ModuleType name
  | FunctorArgument (_, name) -> name

let render module_path =
  let n_items = List.length module_path in
  let item_class index =
    if index == n_items - 1 then
      "text-orange-600 border-orange-600 border-b-2"
    else
      "hover:text-gray-900 hover:border-gray-400 hover:border-b-2"
  in
  let  item_href index =
    let rec href_url index =
      if index == n_items - 1 then "" else
      "../" ^ href_url (index + 1)
    in
    if index == n_items - 1 then "" else
    "href='"^(href_url index)^"index.html'"
  in
  <div class='flex-1'></div>
  <div class="flex items-baseline text-gray-600">
    <span class='font-light p-4'><%s module_path_kind module_path %></span>
    <% module_path |> List.iteri (fun index item -> 
      if index > 0 then ( %><span class='py-4 font-mono font-medium'>.</span> <% );
    %>
      <a <%s! item_href index %> class='whitespace-nowrap py-4 font-mono font-medium <%s item_class index %>'><%s module_name item %></a>
    <% ); %>
  </div>
