let human_date_of_timestamp ts =
  let span = Timedesc.Span.make ~s:(Int64.of_float ts) () in
  let td = Option.get (Timedesc.of_timestamp ~tz_of_date_time:Timedesc.Time_zone.utc span) in
  Timedesc.to_iso8601 td

let render
  ~prefix
  ~ocaml_version
  ~dream_version
  ~dashboard_version
  ~uptime
  ~os_version
  ~(memory_list : My_metrics.memory list)
  ~(loadavg_list : My_metrics.loadavg list)
  () =
Layout_template.render ~prefix ~title:"Overview" ~nav:Overview @@
<div class="flex flex-col space-y-12">
  <h1 class="text-2xl font-semibold">Overview</h1>
  <div>
    <dl class="mt-5 grid grid-cols-1 gap-8 lg:grid-cols-3 xl:grid-cols-4">
      <div class="px-6 py-5 shadow rounded-lg overflow-hidden sm:p-6 space-y-6 lg:space-y-12 cards">
        <dt class="text-base font-semibold truncate">OCaml Version</dt>
        <dd class="mt-1 text-xl lg:text-3xl font-semibold break-all"><%s ocaml_version %></dd>
      </div>

      <div class="px-6 py-5 shadow rounded-lg overflow-hidden sm:p-6 space-y-6 lg:space-y-12 cards">
        <dt class="text-base font-semibold truncate">Dream Version</dt>
        <dd class="mt-1 text-xl lg:text-3xl font-semibold break-all"><%s dream_version %></dd>
      </div>

      <div class="px-6 py-5 shadow rounded-lg overflow-hidden sm:p-6 space-y-6 lg:space-y-12 cards">
        <dt class="text-base font-semibold truncate">Dashboard Version</dt>
        <dd class="mt-1 text-xl lg:text-3xl font-semibold break-all"><%s dashboard_version %></dd>
      </div>

      <div class="px-6 py-5 shadow rounded-lg overflow-hidden sm:p-6 space-y-6 lg:space-y-12 cards">
        <dt class="text-base font-semibold truncate">Uptime</dt>
        <dd class="mt-1 text-xl lg:text-3xl font-semibold break-all"><%s uptime %></dd>
      </div>
    </dl>
  </div>

  <div class="px-6 py-5 shadow rounded-lg overflow-hidden sm:p-6 space-y-12 cards">
    <span class="text-lg font-semibold"><%s os_version %></span>
  </div>

  <div>
    <div class="flex mb-6 justify-between">
      <h3 class="leading-5 text-lg font-semibold">Memory Usage (Percentage)</h3>
    </div>
    <div class="flex items-center justify-center py-8 px-4 shadow rounded-lg cards">
      <div class="w-full">
        <div class="flex flex-col justify-between h-full">
          <div class="mt-6 relative h-[400px]">
            <canvas
              id="memoryUsage"
              aria-label="line graph to show selling overview in terms of months and numbers"
            >
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div>
    <div class="flex mb-6 justify-between">
      <h3 class="leading-5 text-lg font-semibold">CPU Usage (Percentage)</h3>
    </div>
    <div class="flex items-center justify-center py-8 px-4 shadow rounded-lg cards">
      <div class="w-full">
        <div class="flex flex-col justify-between h-full">
          <div class="mt-6 relative h-[400px]">
            <canvas
              id="cpuUsage"
              aria-label="line graph to show selling overview in terms of months and numbers"
            >
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  const memoryUsage = new Chart(document.getElementById("memoryUsage"), {
    type: "line",
    data: {
      labels: [
      <% memory_list |> List.iter (fun (x : My_metrics.memory) -> %>
        "<%s human_date_of_timestamp x.timestamp %>",
      <% ); %>
      ],

      datasets: [
        {
          label: "",
          borderColor: "#18BDFB",
          data: [
          <% memory_list |> List.iter (fun (x : My_metrics.memory) -> %>
            <%f 100. *. float_of_int x.free /. float_of_int x.total %>,
          <% ); %>
          ],
          borderWidth: "2",
          drawBorder: false,
          fill: true,
          backgroundColor: "rgba(24, 189, 251, 0.1)",
          tension: 0.5,
          pointBorderWidth: 0,
          pointHitRadius: 0,
          pointHoverRadius: 14,
          pointHoverBackgroundColor: "#18BDFB",
          pointHoverBorderWidth: 2,
          pointHoverBorderColor: "#ffffff",
        },
      ],
    },
    options: {
      maintainAspectRatio: false,
      responsive: true,
      plugins: {
        legend: { display: false },
        tooltip: { bodyAlign: "right", yAlign: "bottom", caretSize: 0, caretPadding: 20 },
      },
      scales: {
        x: {
          ticks: {
            padding: 20,
          },
          grid: {
            drawBorder: false,
            lineWidth: 0,
            tickColor: "transparent",
            zeroLineColor: "transparent",
          },
        },
        y: {
          ticks: {
            padding: 20,
            color: "white",
          },
          grid: {
            borderDash: [5],
            drawBorder: false,
            tickColor: "transparent",
            color: "rgba(255,255,255,0.1)",
            zeroLineColor: "transparent",
            drawBorder: false, // <-- this removes y-axis line
            lineWidth: 0.5,
          },
        },
      },
    },
  });

  const cpuUsage = new Chart(document.getElementById("cpuUsage"), {
    type: "line",
    data: {
      labels: [
      <% loadavg_list |> List.iter (fun (x : My_metrics.loadavg) -> %>
        "<%s human_date_of_timestamp x.timestamp %>",
      <% ); %>
      ],

      datasets: [
        {
          label: "",
          borderColor: "#10DAA4",
          data: [
          <% loadavg_list |> List.iter (fun (x : My_metrics.loadavg) -> %>
            <%f x.avg_1 %>,
          <% ); %>
          ],
          borderWidth: "2",
          drawBorder: false,
          fill: true,
          backgroundColor: "rgba(16, 218, 164, 0.1)",
          tension: 0.5,
          pointBorderWidth: 0,
          pointHitRadius: 0,
          pointHoverRadius: 14,
          pointHoverBackgroundColor: "#10DAA4",
          pointHoverBorderWidth: 2,
          pointHoverBorderColor: "#ffffff",
        },
      ],
    },
    options: {
      maintainAspectRatio: false,
      responsive: true,
      plugins: {
        legend: { display: false },
        tooltip: { bodyAlign: "right", yAlign: "bottom", caretSize: 0, caretPadding: 20 },
      },
      scales: {
        x: {
          ticks: {
            padding: 20,
          },
          grid: {
            drawBorder: false,
            lineWidth: 0,
            tickColor: "transparent",
            zeroLineColor: "transparent",
          },
        },
        y: {
          ticks: {
            padding: 20,
            color: "white",
          },
          grid: {
            borderDash: [5],
            drawBorder: false,
            tickColor: "transparent",
            color: "rgba(255,255,255,0.1)",
            zeroLineColor: "transparent",
            drawBorder: false, // <-- this removes y-axis line
            lineWidth: 0.5,
          },
        },
      },
    },
  });
</script>
