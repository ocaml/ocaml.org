
type t =
  { title : string
  ; body_md : string
  ; body_html : string
  }

let all = 
[
  { title = "Bootstrap a project"
  ; body_md = "\n> **TL;DR**\n> \n> if you need a minimal project to start hacking quickly, use `dune init`. If you need a complete development environment that follows best practices, use `spin`.\nAs the recommended build system for OCaml, Dune offers a command `dune init` to bootstrap new projects.\n\nOnce you have successfully installed opam, you can install Dune with `opam install dune`.\n\nThis will install Dune's binary in your current Opam switch, so `dune` should now be in your `PATH`. If it not, you probably need to run `eval $(opam env)` to configure your current terminal with Opam environment.\n\nTo bootstrap a new project with `dune init`, run:\n\n```\ndune init proj hello my_project/\n```\n\nWhere proj is the kind of project to initialize. Here we want to generate an entire project, so we use `proj`. `hello` is the name of the project and `my_project/` is the path where the project will be generated.\n\n`dune init proj` does not generate a `dune-project` for you, so you need to go in the generated project and create one:\n\n```\necho \"(lang dune 2.0)\" > dune-project\n```\n\nAt this point, you can build the project and run the binary:\n\n```\ndune build\ndune exec bin/main.exe\n```\n\n`dune init` is the quickest way to get a working OCaml project and start hacking, but you may need a bit more, for instance:\n\n- How to setup the IDE\n- How to setup the CI/CD\n\nOr you may be looking for the best way to get started with a specific kind of project:\n\n- A library\n- A command line interface\n- A web application\n\nIf that's the case, we recommend using `spin`, the OCaml project generator. Spin comes with official templates for common project types. The official templates will get you up and running with everything you need to get a productive development environment, including the IDE setup, the CI/CD, the code formatter, the unit tests, etc.\n\nYou can install `spin` with opam: `opam install spin`.\n\nOnce it's installed, you can list the available templates with `spin ls`. For the purpose of this workflow, we'll use `bin` that bootstraps a project with an executable:\n\n```\nspin new bin my_project/\n```\n\nThis will take some time, because Spin will install all of the dependencies in a new opam local switch (a.k.a local sandbox), which needs to compile an OCaml compiler.\n\nOnce the project is generated, you can run the executable with `make start`.\n\nYou can also open the project in VSCode, which should detect your installation of the LSP server, code formatter and other Platform tools to offer the full range of its capabilities.\n\nHappy hacking :)\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>if you need a minimal project to start hacking quickly, use <code>dune init</code>. If you need a complete development environment that follows best practices, use <code>spin</code>.\nAs the recommended build system for OCaml, Dune offers a command <code>dune init</code> to bootstrap new projects.</p>\n</blockquote>\n<p>Once you have successfully installed opam, you can install Dune with <code>opam install dune</code>.</p>\n<p>This will install Dune's binary in your current Opam switch, so <code>dune</code> should now be in your <code>PATH</code>. If it not, you probably need to run <code>eval $(opam env)</code> to configure your current terminal with Opam environment.</p>\n<p>To bootstrap a new project with <code>dune init</code>, run:</p>\n<pre><code>dune init proj hello my_project/\n</code></pre>\n<p>Where proj is the kind of project to initialize. Here we want to generate an entire project, so we use <code>proj</code>. <code>hello</code> is the name of the project and <code>my_project/</code> is the path where the project will be generated.</p>\n<p><code>dune init proj</code> does not generate a <code>dune-project</code> for you, so you need to go in the generated project and create one:</p>\n<pre><code>echo &quot;(lang dune 2.0)&quot; &gt; dune-project\n</code></pre>\n<p>At this point, you can build the project and run the binary:</p>\n<pre><code>dune build\ndune exec bin/main.exe\n</code></pre>\n<p><code>dune init</code> is the quickest way to get a working OCaml project and start hacking, but you may need a bit more, for instance:</p>\n<ul>\n<li>How to setup the IDE\n</li>\n<li>How to setup the CI/CD\n</li>\n</ul>\n<p>Or you may be looking for the best way to get started with a specific kind of project:</p>\n<ul>\n<li>A library\n</li>\n<li>A command line interface\n</li>\n<li>A web application\n</li>\n</ul>\n<p>If that's the case, we recommend using <code>spin</code>, the OCaml project generator. Spin comes with official templates for common project types. The official templates will get you up and running with everything you need to get a productive development environment, including the IDE setup, the CI/CD, the code formatter, the unit tests, etc.</p>\n<p>You can install <code>spin</code> with opam: <code>opam install spin</code>.</p>\n<p>Once it's installed, you can list the available templates with <code>spin ls</code>. For the purpose of this workflow, we'll use <code>bin</code> that bootstraps a project with an executable:</p>\n<pre><code>spin new bin my_project/\n</code></pre>\n<p>This will take some time, because Spin will install all of the dependencies in a new opam local switch (a.k.a local sandbox), which needs to compile an OCaml compiler.</p>\n<p>Once the project is generated, you can run the executable with <code>make start</code>.</p>\n<p>You can also open the project in VSCode, which should detect your installation of the LSP server, code formatter and other Platform tools to offer the full range of its capabilities.</p>\n<p>Happy hacking :)</p>\n"
  };
 
  { title = "Installing dependencies"
  ; body_md = "\n> **TL;DR**\n> \n> ```\n> opam switch create . --deps-only --with-test --with-doc\n> ```\nIt is recommended to install the dependencies of a project in a local opam switch to sandbox your development environment.\n\nIf you're using opam `2.0.X`, you can do this with:\n\n```\n# if you need external dependencies\nopam pin add -n .\nopam depext -i <packages>\nopam install . --deps-only --with-test --with-doc\n```\n\nIf you use opam `2.1.X`, it will install the system dependencies automatically, so you can run:\n\n```\nopam install . --deps-only --with-test --with-doc\n```\n\nNow, if for some reason you prefer to install your dependencies in a global switch, you can run:\n\n```\nopam switch set <switch_name>\nopam install . --deps-only --with-test --with-doc\n```\n\nOnce the dependencies have been installed successfully, and assuming the project uses `dune` as the build system, you can compile it with:\n\n```\nopam exec -- dune build\n```\n\nOr if you set your environment with `eval $(opam env)`:\n\n```\ndune build\n```\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<pre><code>opam switch create . --deps-only --with-test --with-doc\n</code></pre>\n</blockquote>\n<p>It is recommended to install the dependencies of a project in a local opam switch to sandbox your development environment.</p>\n<p>If you're using opam <code>2.0.X</code>, you can do this with:</p>\n<pre><code># if you need external dependencies\nopam pin add -n .\nopam depext -i &lt;packages&gt;\nopam install . --deps-only --with-test --with-doc\n</code></pre>\n<p>If you use opam <code>2.1.X</code>, it will install the system dependencies automatically, so you can run:</p>\n<pre><code>opam install . --deps-only --with-test --with-doc\n</code></pre>\n<p>Now, if for some reason you prefer to install your dependencies in a global switch, you can run:</p>\n<pre><code>opam switch set &lt;switch_name&gt;\nopam install . --deps-only --with-test --with-doc\n</code></pre>\n<p>Once the dependencies have been installed successfully, and assuming the project uses <code>dune</code> as the build system, you can compile it with:</p>\n<pre><code>opam exec -- dune build\n</code></pre>\n<p>Or if you set your environment with <code>eval $(opam env)</code>:</p>\n<pre><code>dune build\n</code></pre>\n"
  };
 
  { title = "Updating dependencies"
  ; body_md = "\n> **TL;DR**\n> \n> If the project generates the `*.opam` file from the `dune-project`, add the dependency in the `package` stanza and run `opam install . --deps-only`.\n> If the project does not generate the `*.opam` file, add the dependency in the `*.opam` file and run `opam install . --deps-only`.\nTo avoid duplicating the project configuration into multiple files, Dune allows to generate the `*.opam` file of the project from the \npackage definitions in `dune-project` when adding the `(generate_opam_files true)` stanza.\n\nHowever, opam remains a central piece of the ecosystem and it's very likely that you will have to work with `*.opam` files at some point,\nso we don't take a stance on wether you should specify your dependencies in the `*.opam` file or in `dune-project`.\n\nIf the project generates the opam file from the `dune-project` (you can tell by the line `# This file is generated by dune, edit dune-project instead` at the top of the `*.opam` file), you can add your dependencies in the `dune-project` in the appropriate `package` stanza. It should look like this:\n\n```\n(package\n (name demo)\n (synopsis \"A short, but powerful statement about your project\")\n (description \"An complete and exhaustive description everything your project does.\")\n (depends\n  (ocaml\n   (>= 4.08.0))\n  dune\n  (alcotest :with-test)\n  (odoc :with-doc)))\n```\n\nOnce you have added your dependency, you can build your project with `dune build` which will re-generate the `*.opam` files.\n\nIf the `*.opam` files are not generated, you can add the dependencies in them directly, in the `depends` field. If should look like this:\n\n\n```\nopam-version: \"2.0\"\nsynopsis: \"A short, but powerful statement about your project\"\ndescription: \"An complete and exhaustive description everything your project does.\"\ndepends: [\n  \"ocaml\" {>= \"4.08.0\"}\n  \"dune\"\n  \"alcotest\" {with-test}\n  \"odoc\" {with-doc}\n]\nbuild: [\n  [\"dune\" \"subst\"] {pinned}\n  [\n    \"dune\"\n    \"build\"\n    \"-p\"\n    name\n    \"-j\"\n    jobs\n    \"@install\"\n    \"@runtest\" {with-test}\n    \"@doc\" {with-doc}\n  ]\n]\n```\n\nEither way, once you have added your dependency in the appropriate file, you can run `opam install . --deps-only` to update your current switche's dependencies.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>If the project generates the <code>*.opam</code> file from the <code>dune-project</code>, add the dependency in the <code>package</code> stanza and run <code>opam install . --deps-only</code>.\nIf the project does not generate the <code>*.opam</code> file, add the dependency in the <code>*.opam</code> file and run <code>opam install . --deps-only</code>.\nTo avoid duplicating the project configuration into multiple files, Dune allows to generate the <code>*.opam</code> file of the project from the\npackage definitions in <code>dune-project</code> when adding the <code>(generate_opam_files true)</code> stanza.</p>\n</blockquote>\n<p>However, opam remains a central piece of the ecosystem and it's very likely that you will have to work with <code>*.opam</code> files at some point,\nso we don't take a stance on wether you should specify your dependencies in the <code>*.opam</code> file or in <code>dune-project</code>.</p>\n<p>If the project generates the opam file from the <code>dune-project</code> (you can tell by the line <code># This file is generated by dune, edit dune-project instead</code> at the top of the <code>*.opam</code> file), you can add your dependencies in the <code>dune-project</code> in the appropriate <code>package</code> stanza. It should look like this:</p>\n<pre><code>(package\n (name demo)\n (synopsis &quot;A short, but powerful statement about your project&quot;)\n (description &quot;An complete and exhaustive description everything your project does.&quot;)\n (depends\n  (ocaml\n   (&gt;= 4.08.0))\n  dune\n  (alcotest :with-test)\n  (odoc :with-doc)))\n</code></pre>\n<p>Once you have added your dependency, you can build your project with <code>dune build</code> which will re-generate the <code>*.opam</code> files.</p>\n<p>If the <code>*.opam</code> files are not generated, you can add the dependencies in them directly, in the <code>depends</code> field. If should look like this:</p>\n<pre><code>opam-version: &quot;2.0&quot;\nsynopsis: &quot;A short, but powerful statement about your project&quot;\ndescription: &quot;An complete and exhaustive description everything your project does.&quot;\ndepends: [\n  &quot;ocaml&quot; {&gt;= &quot;4.08.0&quot;}\n  &quot;dune&quot;\n  &quot;alcotest&quot; {with-test}\n  &quot;odoc&quot; {with-doc}\n]\nbuild: [\n  [&quot;dune&quot; &quot;subst&quot;] {pinned}\n  [\n    &quot;dune&quot;\n    &quot;build&quot;\n    &quot;-p&quot;\n    name\n    &quot;-j&quot;\n    jobs\n    &quot;@install&quot;\n    &quot;@runtest&quot; {with-test}\n    &quot;@doc&quot; {with-doc}\n  ]\n]\n</code></pre>\n<p>Either way, once you have added your dependency in the appropriate file, you can run <code>opam install . --deps-only</code> to update your current switche's dependencies.</p>\n"
  };
 
  { title = "Updating development dependencies"
  ; body_md = "\n> **TL;DR**\n> \n> Follow the workflow \"Update dependencies\" and add a flag `:with-test` or `with-doc` to your dependency.\nOpam does not have a notion of development dependencies. Instead, each dependency can be either:\n\n- A normal dependency (used at runtime)\n- A build dependency (used to build the project)\n- A test dependency (used to test the project)\n- A documentation dependency (used to generate the documentation)\n\nWhen adding a new dependency, as seen in the \"Update dependencies\" workflow, you can add a flag to your dependency.\n\nFor `dune-project`, it looks like this:\n\n```\n(alcotest :with-test)\n```\n\nAnd for the `*.opam` file, it looks like:\n\n```\n\"alcotest\" {with-test}\n```\n\nThe available flags for each dependencies are:\n\n- Normal: no flag\n- Build: `build`\n- Test: `with-test`\n- Documentation: `with-doc`\n\nSee [opam documentation](https://opam.ocaml.org/doc/Manual.html#Package-variables) for more details on the opam syntax.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Follow the workflow &quot;Update dependencies&quot; and add a flag <code>:with-test</code> or <code>with-doc</code> to your dependency.\nOpam does not have a notion of development dependencies. Instead, each dependency can be either:</p>\n</blockquote>\n<ul>\n<li>A normal dependency (used at runtime)\n</li>\n<li>A build dependency (used to build the project)\n</li>\n<li>A test dependency (used to test the project)\n</li>\n<li>A documentation dependency (used to generate the documentation)\n</li>\n</ul>\n<p>When adding a new dependency, as seen in the &quot;Update dependencies&quot; workflow, you can add a flag to your dependency.</p>\n<p>For <code>dune-project</code>, it looks like this:</p>\n<pre><code>(alcotest :with-test)\n</code></pre>\n<p>And for the <code>*.opam</code> file, it looks like:</p>\n<pre><code>&quot;alcotest&quot; {with-test}\n</code></pre>\n<p>The available flags for each dependencies are:</p>\n<ul>\n<li>Normal: no flag\n</li>\n<li>Build: <code>build</code>\n</li>\n<li>Test: <code>with-test</code>\n</li>\n<li>Documentation: <code>with-doc</code>\n</li>\n</ul>\n<p>See <a href=\"https://opam.ocaml.org/doc/Manual.html#Package-variables\">opam documentation</a> for more details on the opam syntax.</p>\n"
  };
 
  { title = "Selecting a compiler"
  ; body_md = "\n> **TL;DR**\n> \n> Use `opam switch set` to manually select the switch to use and use `dune-workspace` to automatically run commands in different environment.\n\nCompilation environments are managed with opam switches. The typical workflow is to have a local opam switch for the project, but you may need to select a different compilation environment (i.e. a different compiler version) sometimes. For instance, to run unit tests on an older/newer version of OCaml.\n\nTo do this, you'll need to create global opam switches. To create an opam switch with a given version of the compiler, you can use:\n\n```\nopam switch create 4.13.0 ocaml-base-compiler.4.13.0\n```\n\nThis will create a new switch called `4.13.0` with the compiler version `4.13.0`.\n\nThe list of available compiler version can be retrieved with:\n\n```\nopam switch list-available\n```\n\nThis will list the available compiler version for all of the configured Opam repositories.\n\nOnce you've created a switch (or you already have a switch you'd like to use), you can run:\n\n```\nopam switch set <switch_name>\neval $(opam env)\n```\n\nto configure the current environment with this switch.\n\nIf it is a new switch, you will need to reinstall your dependencies (see \"Installing dependencies\") with `opam install . --deps-only`.\n\nAlternatively, you may want to automatically run commands in a given set of compilation environments. To do this, you can create a file `dune-workspace` at the root of your project and list the opam switches you'd like to use there:\n\n\n```\n(lang dune 2.0)\n(context (opam (switch 4.11.0)))\n(context (opam (switch 4.12.0)))\n(context (opam (switch 4.13.0)))\n```\n\nAll the Dune commands you will run will be run on all of the switches listed, so for instance with the definition above:\n\n```\ndune runtest --workspace dune-workspace\n```\n\nDune will run the tests for OCaml `4.11.0`, `4.12.0` and `4.13.0`.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Use <code>opam switch set</code> to manually select the switch to use and use <code>dune-workspace</code> to automatically run commands in different environment.</p>\n</blockquote>\n<p>Compilation environments are managed with opam switches. The typical workflow is to have a local opam switch for the project, but you may need to select a different compilation environment (i.e. a different compiler version) sometimes. For instance, to run unit tests on an older/newer version of OCaml.</p>\n<p>To do this, you'll need to create global opam switches. To create an opam switch with a given version of the compiler, you can use:</p>\n<pre><code>opam switch create 4.13.0 ocaml-base-compiler.4.13.0\n</code></pre>\n<p>This will create a new switch called <code>4.13.0</code> with the compiler version <code>4.13.0</code>.</p>\n<p>The list of available compiler version can be retrieved with:</p>\n<pre><code>opam switch list-available\n</code></pre>\n<p>This will list the available compiler version for all of the configured Opam repositories.</p>\n<p>Once you've created a switch (or you already have a switch you'd like to use), you can run:</p>\n<pre><code>opam switch set &lt;switch_name&gt;\neval $(opam env)\n</code></pre>\n<p>to configure the current environment with this switch.</p>\n<p>If it is a new switch, you will need to reinstall your dependencies (see &quot;Installing dependencies&quot;) with <code>opam install . --deps-only</code>.</p>\n<p>Alternatively, you may want to automatically run commands in a given set of compilation environments. To do this, you can create a file <code>dune-workspace</code> at the root of your project and list the opam switches you'd like to use there:</p>\n<pre><code>(lang dune 2.0)\n(context (opam (switch 4.11.0)))\n(context (opam (switch 4.12.0)))\n(context (opam (switch 4.13.0)))\n</code></pre>\n<p>All the Dune commands you will run will be run on all of the switches listed, so for instance with the definition above:</p>\n<pre><code>dune runtest --workspace dune-workspace\n</code></pre>\n<p>Dune will run the tests for OCaml <code>4.11.0</code>, <code>4.12.0</code> and <code>4.13.0</code>.</p>\n"
  };
 
  { title = "Running executables"
  ; body_md = "\n> **TL;DR**\n> \n> Add an `executable` stanza in your dune file and run the executable with `dune exec <executable_path>.exe` or `dune exec <public_name>`.\n\nTo tell dune to produce an executable, you can use the executable stanza:\n\n```\n(executable\n (name <executable_name>)\n (public_name <public_name>)\n (libraries <libraries...>))\n```\n\nThe `<executable_name>` is the name of the executable used internally in the project.\nThe `<public_name>` is the name of the installed binary when installing the package.\nFinally, `<libraries...>` is the list of libraries to link to the executable.\n\nOnce dune has produced the executable with `dune build`, you can execute it with `dune exec <executable_path>.exe` or `dune exec <public_name>`.\n\nFor instance, if you've put your dune file in `bin/dune` with the following content:\n\n```\n(executable\n (name main)\n (public_name my-app)\n (libraries))\n```\n\nYou can run it with `dune exec bin/main.exe` or `dune exec my-app`.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Add an <code>executable</code> stanza in your dune file and run the executable with <code>dune exec &lt;executable_path&gt;.exe</code> or <code>dune exec &lt;public_name&gt;</code>.</p>\n</blockquote>\n<p>To tell dune to produce an executable, you can use the executable stanza:</p>\n<pre><code>(executable\n (name &lt;executable_name&gt;)\n (public_name &lt;public_name&gt;)\n (libraries &lt;libraries...&gt;))\n</code></pre>\n<p>The <code>&lt;executable_name&gt;</code> is the name of the executable used internally in the project.\nThe <code>&lt;public_name&gt;</code> is the name of the installed binary when installing the package.\nFinally, <code>&lt;libraries...&gt;</code> is the list of libraries to link to the executable.</p>\n<p>Once dune has produced the executable with <code>dune build</code>, you can execute it with <code>dune exec &lt;executable_path&gt;.exe</code> or <code>dune exec &lt;public_name&gt;</code>.</p>\n<p>For instance, if you've put your dune file in <code>bin/dune</code> with the following content:</p>\n<pre><code>(executable\n (name main)\n (public_name my-app)\n (libraries))\n</code></pre>\n<p>You can run it with <code>dune exec bin/main.exe</code> or <code>dune exec my-app</code>.</p>\n"
  };
 
  { title = "Running tests"
  ; body_md = "\n> **TL;DR**\n> \n> Add a `test` stanza in your dune file and run the tests with `dune build @runtest`.\n\nTests are created using Dune's `test` stanza. The `test` stanza is a simple convenience wrapper that will create an executable and add it to the list of tests of the `@runtest` target.\n\nFor instance, if you add a test in your dune file:\n\n```\n(test\n (name dummy_test)\n (modules dummy_test))\n```\n\nwith a module `dummy_test.ml`:\n\n```ocaml\nlet () = exit 1\n```\n\nRunning `dune build @runtest` will fail with the following output:\n\n```\n  dummy_test alias src/ocamlorg_web/test/runtest (exit 1)\n```\n\nThis means that the test failed because the executable exited with the status code `1`.\n\nThe output is not very descriptive. If we want to create suites of unit tests, with several tests per files, and different kind of assertions, we will want to use a test framework such as Alcotest.\n\nLet's modify our dummy test to link to Alcotest:\n\n```\n(test\n (name dummy_test)\n (modules dummy_test)\n (libraries alcotest))\n```\n\nWith the following module:\n\n```\nopen Alcotest\n\nlet test_hello_with_name name () =\n  let greeting = \"Hello \" ^ name ^ \"!\" in\n  let expected = Printf.sprintf \"Hello %s!\" name in\n  check string \"same string\" greeting expected\n\nlet suite =\n  [ \"can greet Tom\", `Quick, test_hello_with_name \"Tom\"\n  ; \"can greet John\", `Quick, test_hello_with_name \"John\"\n  ]\n\nlet () =\n  Alcotest.run \"Dummy\" [ \"Greeting\", suite ]\n```\n\nIf we run `dune build @runtest` again, the test should be successful and ouput the following:\n\n\n```\nTesting `Dummy'.\nThis run has ID `B5926D16-0DD4-4C97-8C7A-5AFE1F5DF31B'.\n\n  [OK]          Greeting          0   can greet Tom.\n  [OK]          Greeting          1   can greet John.\n\nFull test results in `_build/default/_build/_tests/Dummy'.\nTest Successful in 0.000s. 2 tests run.\n```\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Add a <code>test</code> stanza in your dune file and run the tests with <code>dune build @runtest</code>.</p>\n</blockquote>\n<p>Tests are created using Dune's <code>test</code> stanza. The <code>test</code> stanza is a simple convenience wrapper that will create an executable and add it to the list of tests of the <code>@runtest</code> target.</p>\n<p>For instance, if you add a test in your dune file:</p>\n<pre><code>(test\n (name dummy_test)\n (modules dummy_test))\n</code></pre>\n<p>with a module <code>dummy_test.ml</code>:</p>\n<pre><code class=\"language-ocaml\">let () = exit 1\n</code></pre>\n<p>Running <code>dune build @runtest</code> will fail with the following output:</p>\n<pre><code>  dummy_test alias src/ocamlorg_web/test/runtest (exit 1)\n</code></pre>\n<p>This means that the test failed because the executable exited with the status code <code>1</code>.</p>\n<p>The output is not very descriptive. If we want to create suites of unit tests, with several tests per files, and different kind of assertions, we will want to use a test framework such as Alcotest.</p>\n<p>Let's modify our dummy test to link to Alcotest:</p>\n<pre><code>(test\n (name dummy_test)\n (modules dummy_test)\n (libraries alcotest))\n</code></pre>\n<p>With the following module:</p>\n<pre><code>open Alcotest\n\nlet test_hello_with_name name () =\n  let greeting = &quot;Hello &quot; ^ name ^ &quot;!&quot; in\n  let expected = Printf.sprintf &quot;Hello %s!&quot; name in\n  check string &quot;same string&quot; greeting expected\n\nlet suite =\n  [ &quot;can greet Tom&quot;, `Quick, test_hello_with_name &quot;Tom&quot;\n  ; &quot;can greet John&quot;, `Quick, test_hello_with_name &quot;John&quot;\n  ]\n\nlet () =\n  Alcotest.run &quot;Dummy&quot; [ &quot;Greeting&quot;, suite ]\n</code></pre>\n<p>If we run <code>dune build @runtest</code> again, the test should be successful and ouput the following:</p>\n<pre><code>Testing `Dummy'.\nThis run has ID `B5926D16-0DD4-4C97-8C7A-5AFE1F5DF31B'.\n\n  [OK]          Greeting          0   can greet Tom.\n  [OK]          Greeting          1   can greet John.\n\nFull test results in `_build/default/_build/_tests/Dummy'.\nTest Successful in 0.000s. 2 tests run.\n</code></pre>\n"
  };
 
  { title = "Creating libraries"
  ; body_md = "\n> **TL;DR**\n> \n> Add a `library` stanza in your dune file.\n\nCreating a library with dune is as simple as adding a `library` stanza in your dune file:\n\n```\n(library\n (name <name>)\n (public_name <public_name>)\n (libraries <libraries...>))\n```\n\nWhere `<name>` is the name of the library used inside internally, `<public_name>` is the name of the library used by users of the package and `<libaries...>` is the list of libraries to link to your library.\n\nNote that if the library does not have a `public_name`, it will not be installed when installing the package through opam. As a consequence, you cannot use an internal library that does not have a `public_name` in a library or executable that has one.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Add a <code>library</code> stanza in your dune file.</p>\n</blockquote>\n<p>Creating a library with dune is as simple as adding a <code>library</code> stanza in your dune file:</p>\n<pre><code>(library\n (name &lt;name&gt;)\n (public_name &lt;public_name&gt;)\n (libraries &lt;libraries...&gt;))\n</code></pre>\n<p>Where <code>&lt;name&gt;</code> is the name of the library used inside internally, <code>&lt;public_name&gt;</code> is the name of the library used by users of the package and <code>&lt;libaries...&gt;</code> is the list of libraries to link to your library.</p>\n<p>Note that if the library does not have a <code>public_name</code>, it will not be installed when installing the package through opam. As a consequence, you cannot use an internal library that does not have a <code>public_name</code> in a library or executable that has one.</p>\n"
  };
 
  { title = "Publishing packages"
  ; body_md = "\n> **TL;DR**\n> \n> Create a `CHANGES.md` file and run `dune-release bistro`.\n\nThe opam package manager may differ from the package manager you're used to. In order to ensure the highest stability of the ecosystem, each package publication goes through two processes:\n\n- An automated CI pipeline which tests if your package installs using multiple distributions and multiple OCaml compiler versions. It will also check that your new release does not break your reverse dependencies (those packages that require your package). A lower-bound check also ensures that your package installs with the lowest version of your package's dependencies.\n- A manual review of the package metadata by the opam-repository maintainer.\n\nThis process starts with a PR to the opam-repository, with the addition of a file for the version of the package to publish. The file contains information such as the package name, description, VCS repository, and most importantly, the URL the sources can be downloaded from.\n\nIf everything looks good and the CI build passes, the PR is merged and the package becomes available in opam after an `opam update` to update the opam-repository.\n\nIf there is anything to change, the opam-repository maintainer will comment on the PR with some recommendations.\n\nThis is a heavy process, but hopefully, all of it is completely automated on the user side. The recommended way to publish a package is `dune-release`.\n\nOnce you're ready to publish your package on opam, simply create a `CHANGES.md` file with the following format:\n\n```\n# <version>\n\n<release note>\n\n# <older version>\n\n<release note>\n```\n\nand run `dune-release bistro`.\n\nDune Release will run some verification (such as running the tests, linting the opam file, etc.) and will open a PR for you on `opam-repository`. From there, all you have to do is wait for the PR to be merged, or for a maintainer to review your package publication.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Create a <code>CHANGES.md</code> file and run <code>dune-release bistro</code>.</p>\n</blockquote>\n<p>The opam package manager may differ from the package manager you're used to. In order to ensure the highest stability of the ecosystem, each package publication goes through two processes:</p>\n<ul>\n<li>An automated CI pipeline which tests if your package installs using multiple distributions and multiple OCaml compiler versions. It will also check that your new release does not break your reverse dependencies (those packages that require your package). A lower-bound check also ensures that your package installs with the lowest version of your package's dependencies.\n</li>\n<li>A manual review of the package metadata by the opam-repository maintainer.\n</li>\n</ul>\n<p>This process starts with a PR to the opam-repository, with the addition of a file for the version of the package to publish. The file contains information such as the package name, description, VCS repository, and most importantly, the URL the sources can be downloaded from.</p>\n<p>If everything looks good and the CI build passes, the PR is merged and the package becomes available in opam after an <code>opam update</code> to update the opam-repository.</p>\n<p>If there is anything to change, the opam-repository maintainer will comment on the PR with some recommendations.</p>\n<p>This is a heavy process, but hopefully, all of it is completely automated on the user side. The recommended way to publish a package is <code>dune-release</code>.</p>\n<p>Once you're ready to publish your package on opam, simply create a <code>CHANGES.md</code> file with the following format:</p>\n<pre><code># &lt;version&gt;\n\n&lt;release note&gt;\n\n# &lt;older version&gt;\n\n&lt;release note&gt;\n</code></pre>\n<p>and run <code>dune-release bistro</code>.</p>\n<p>Dune Release will run some verification (such as running the tests, linting the opam file, etc.) and will open a PR for you on <code>opam-repository</code>. From there, all you have to do is wait for the PR to be merged, or for a maintainer to review your package publication.</p>\n"
  };
 
  { title = "Setting up VSCode"
  ; body_md = "\n> **TL;DR**\n> \n> Install the VSCode extension `ocamllabs.ocaml-platform` and the packages `ocaml-lsp-server ocamlformat` in your opam switch.\n\nThe official OCaml extension for VSCode is https://marketplace.visualstudio.com/items?itemName=ocamllabs.ocaml-platform.\n\nTo get started, you can install it with the following command:\n\n```\next install ocamllabs.ocaml-platform\n```\n\nThe extension depends on OCaml LSP and ocamlformat. To install them in your switch, you can run:\n\n```\nopam install ocaml-lsp-server ocamlformat\n```\n\nWhen running `vscode` from the terminal, the extension should pick up your current opam switch. If you need to change it, you can click on the package icon in the status bar to select your switch.\n"
  ; body_html = "<blockquote>\n<p><strong>TL;DR</strong></p>\n<p>Install the VSCode extension <code>ocamllabs.ocaml-platform</code> and the packages <code>ocaml-lsp-server ocamlformat</code> in your opam switch.</p>\n</blockquote>\n<p>The official OCaml extension for VSCode is https://marketplace.visualstudio.com/items?itemName=ocamllabs.ocaml-platform.</p>\n<p>To get started, you can install it with the following command:</p>\n<pre><code>ext install ocamllabs.ocaml-platform\n</code></pre>\n<p>The extension depends on OCaml LSP and ocamlformat. To install them in your switch, you can run:</p>\n<pre><code>opam install ocaml-lsp-server ocamlformat\n</code></pre>\n<p>When running <code>vscode</code> from the terminal, the extension should pick up your current opam switch. If you need to change it, you can click on the package icon in the status bar to select your switch.</p>\n"
  }]

