type section =
  | Overview
  | GetStarted
  | Language
  | Platform
  | Guides
  | Cookbook
  | Exercises
  | Books

let tabs
~current =
  let url_of_section = function
    | Overview -> Url.learn
    | GetStarted -> Url.learn_get_started
    | Language -> Url.learn_language
    | Platform -> Url.platform
    | Guides -> Url.learn_guides
    | Cookbook -> Url.learn_cookbook
    | Exercises -> Url.exercises
    | Books -> Url.books
  in
  let title_of_section = function
    | Overview -> "Overview"
    | GetStarted -> "Get Started"
    | Language -> "Language"
    | Platform -> "Platform"
    | Guides -> "Guides"
    | Cookbook -> "Cookbook"
    | Exercises -> "Exercises"
    | Books -> "Books"
  in
  Layout.subnav_tabs ~title:"Learn" ~current ~sections:[Overview; GetStarted; Language; Platform; Guides; Cookbook; Exercises; Books] ~url_of_section ~title_of_section

let sidebar
~current_tutorial
~tutorials
~(section: section)
=
  let sidebar_link ~title ~href ~current ~tag =
    let render_tag tag = match tag with
      | None -> ""
      | Some t ->
      <span class="inline-block px-1 bg-primary text-white rounded-md mr-1">
        <%s t %>
      </span>
    in
    <a class="border-l-2 py-2 px-3 rounded-sm leading-6 font-normal <%s if current then {|text-title dark:text-dark-title bg-primary_nav_block_hover_10 dark:bg-primary_nav_block_hover_10 border-primary dark:border-dark-primary|} else {|text-content dark:text-dark-content hover:text-primary dark:hover:text-dark-primary border-transparent|} %>" href="<%s href %>">
      <%s! render_tag tag %>
      <%s title %>
    </a>
  in
  let sidebar_link_group ?(extra_html="") title link_html =
    <div class="pl-2 pr-8 flex flex-col">
      <div class="text-lg font-normal text-title dark:text-dark-title leading-10 flex py-1 uppercase"><%s title %></div>
      <%s! link_html %>
      <%s! extra_html %>
    </div>
  in
  let render_tutorial_link ~title ~slug =
    sidebar_link ~title ~href:(Url.tutorial slug) ~current:(current_tutorial = Some (slug))
  in
  let render_tutorial (tutorial : Data.Tutorial.t) = render_tutorial_link ~title:tutorial.short_title ~slug:tutorial.slug ~tag:(Option.map (fun (et: Data.Tutorial.external_tutorial) -> et.tag) tutorial.external_tutorial) in
  let tutorial_sidebar_links_by_category category =
    tutorials |> List.filter (fun (x : Data.Tutorial.t) -> x.category = category) |> List.map render_tutorial |> String.concat "\n"
  in
  let categories =
    let unique lst =
      let rec unique' acc = function
        | [] -> List.rev acc
        | h::t -> unique' (if List.mem h acc then acc else h :: acc) t
      in
      unique' [] lst
    in
    tutorials |> List.map (fun (tutorial : Data.Tutorial.t) -> tutorial.category) |> unique
  in
  <% if section = Platform then ( %>
  <%s! sidebar_link_group "Platform"
    (tutorial_sidebar_links_by_category "platform")
    ~extra_html:(
      (render_tutorial_link ~title:"Overview" ~slug:"platform" ~tag:None)) %>
  <% ); %>

  <% categories |> List.iter (fun category -> %>
    <%s! sidebar_link_group category
      (tutorial_sidebar_links_by_category category) %>
  <% ); %>

  <% if section = Guides then ( %>
    <%s! sidebar_link_group "Is OCaml Yet"
      (tutorial_sidebar_links_by_category "is-ocaml-yet")
      ~extra_html:(
        (render_tutorial_link ~title:"Is OCaml web yet?" ~slug:"is-ocaml-web-yet" ~tag:None)
        ^ (render_tutorial_link ~title:"Is OCaml GUI yet?" ~slug:"is-ocaml-gui-yet" ~tag:None)) %>
  <% ); %>

let single_column_layout
?use_swiper
?styles
~title
~description
~canonical
?active_top_nav_item
~current
inner_html
=
  Layout.render
  ?use_swiper
  ?styles
  ~title
  ~description
  ~canonical
  ?active_top_nav_item @@
  <%s! tabs ~current %>
  <div class="bg-background dark:bg-dark-background">
    <div class="flex-1 z-0 z- min-w-0 pb-12">
      <%s! inner_html %>
    </div>
  </div>

let three_column_layout
?use_swiper
?styles
~title
~description
~canonical
?active_top_nav_item
~(left_sidebar_html: string option)
~(right_sidebar_html: string option)
~current
inner_html
=
  Layout.base
  ?use_swiper
  ?styles
  ~title
  ~description
  ~canonical
  ?active_top_nav_item @@
  <%s! tabs ~current %>
  <div class="bg-background dark:bg-dark-background" x-data="{ sidebar: window.matchMedia('(min-width: 64em)').matches, showOnMobile: false}" @resize.window="sidebar = window.matchMedia('(min-width: 64em)').matches"  x-on:close-sidebar="sidebar=window.matchMedia('(min-width: 64em)').matches">
  <% if left_sidebar_html != None then ( %>  
    <button :title='(sidebar? "close" : "open")+" sidebar"' class="flex items-center bg-[#D54000] p-4 z-30 rounded-full text-white shadow-custom bottom-24 md:bottom-36 fixed lg:hidden right-10"
      x-on:click="sidebar = ! sidebar">
      <%s! Icons.sidebar_menu "h-6 w-6" %>
    </button>
    <div class="fixed z-10 inset-0 bg-tertiary_25 backdrop-blur-sm lg:hidden"
      :class='sidebar ? "" : "hidden"' aria-hidden="true" x-on:click="sidebar = ! sidebar"></div>
  <% ); %>
    <div class="container-fluid wide pt-10">
    <div class="flex flex-col lg:flex-row lg:gap-6 xl:gap-12">
      <div
        class="z-20 bg-background dark:bg-dark-background flex-col fixed h-screen overflow-auto lg:flex left-0 top-0 lg:sticky <%s Option.fold ~none:"" ~some:(fun _ -> "p-6 lg:px-0 w-80 lg:w-72 lg:px-0 lg:pt-6 lg:pb-72") left_sidebar_html %>"
        x-show="sidebar" x-transition:enter="transition duration-200 ease-out"
        x-transition:enter-start="-translate-x-full" x-transition:leave="transition duration-100 ease-in"
        x-transition:leave-end="-translate-x-full">
        <%s! Option.value ~default:"" left_sidebar_html %>
      </div>

      <div class="flex-1 z-0 z- min-w-0 lg:pt-6 <%s! if right_sidebar_html != None then "lg:max-w-3xl" else "" %>">
        <%s! inner_html %>
        <%s! Footer.secondary_footer () %>
      </div>
      <div class="hidden xl:block top-0 sticky h-screen overflow-auto lg:pt-6">
        <div class="<%s Option.fold ~none:"" ~some:(fun _ -> "w-60 lg:pb-72") right_sidebar_html %>">
          <%s! Option.value ~default:"" right_sidebar_html %>
        </div>
      </div>
    </div>
  </div>
  <%s! Toc.script %>
  