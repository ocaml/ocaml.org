type toc = {
title : string;
href : string;
children : toc list
}

type t = toc list

let render (t : t) =
  <div
    x-data='toc'
    @scroll.window="scrollY = window.scrollY"
    @resize.window.throttle="sectionYPositions = computeSectionYPositions($el)"
    x-init="setTimeout(() => sectionYPositions = computeSectionYPositions($el), 10)"
    >
    <% (match t with [] ->  %>
    <% | _ -> %>
    <div class="font-semibold text-gray-500 text-sm mb-4">On This Page</div>
    <ol class="leading-6 text-sm border-l">
      <% t |> List.iter begin fun item -> %>
        <li>
          <a href="<%s item.href %>" class="text-gray-900 py-1 px-2 block transition-colors border-l-4 border-t-2 border-b-2 border-r-2 border-transparent rounded"
            :class='isWithin(scrollY, "<%s item.href %>", sectionYPositions) ? "font-semibold border-l-primary-700 text-primary-700 bg-primary-200": "hover:text-primary-700"'
          >
            <%s! item.title %>
          </a>
            <% match item.children with [] -> () | items -> %>
            <ol>
              <% items |> List.iter begin fun item -> %>
              <li>
                <a href="<%s item.href %>" class="text-body-600 py-1 md:py-0 pl-4 block transition-colors border-l-4 border-t-2 border-b-2 border-r-2 border-transparent rounded"
                  :class='isWithin(scrollY, "<%s item.href %>", sectionYPositions) ? "font-semibold border-l-primary-700 text-primary-700 bg-primary-200": "hover:text-primary-700"'
                >
                  <%s! item.title %>
                </a>
              </li>
              <% end; %>
            </ol>
            <% ; %>
          <% end; %>
        </li>
    </ol>
    <% ); %>
  </div>
  <script>
    document.addEventListener('alpine:init', () => {
      function computeSectionYPositions(toc_el) {
        console.log("computeSectionYPositions", toc_el)

        function get_y(href) {
          let heading = document.querySelector(href);
          return heading.getBoundingClientRect().top + window.scrollY - 60;
        }

        let sections = {};

        let els = toc_el.querySelectorAll("a");
        let l = els.length;
        for (let i=0; i<l; i++) {
          let target_href = els[i].getAttribute("href");
          let next_el_href = i < l-1 ? els[i+1].getAttribute("href") : null;

          sections[target_href] = {
            start: get_y(target_href),
            end: next_el_href ? get_y(next_el_href) : null,
          }
        }

        return sections;
      }

      function isWithin(scrollY, href, sectionYPositions) {
        if (sectionYPositions == null) return false;
        return scrollY > sectionYPositions[href].start
          && (scrollY <= sectionYPositions[href].end || sectionYPositions[href].end == null)
      }

      Alpine.data('toc', () => (
        {
          scrollY: window.scrollY,
          sectionYPositions: null,

          isWithin,
          computeSectionYPositions,
        }
      ))
    })
  </script>
