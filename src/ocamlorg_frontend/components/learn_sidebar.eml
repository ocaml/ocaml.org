let render
~current_tutorial
~tutorials
=
  let render_tutorial_link ~title ~slug =
    Learn_layout.sidebar_link ~title ~href:(Url.tutorial slug) ~current:(current_tutorial = Some (slug))
  in
  let render_tutorial (tutorial : Data.Tutorial.t) = render_tutorial_link ~title:tutorial.title ~slug:tutorial.slug in
  let tutorial_sidebar_links_by_category category =
    tutorials |> List.filter (fun (x : Data.Tutorial.t) -> x.category = category) |> List.map render_tutorial |> String.concat "\n"
  in
  let categories =
    let unique lst =
      let rec unique' acc = function
        | [] -> List.rev acc
        | h::t -> unique' (if List.mem h acc then acc else h :: acc) t
      in
      unique' [] lst
    in
    tutorials |> List.map (fun (tutorial : Data.Tutorial.t) -> tutorial.category) |> unique
  in
  <% categories |> List.iter (fun category -> %>
    <%s! Learn_layout.sidebar_link_group category
      (tutorial_sidebar_links_by_category category) %>
  <% ); %>

  <%s! Learn_layout.sidebar_link_group "Are we Yet"
    (tutorial_sidebar_links_by_category "are-we-yet")
     ~extra_html:(
      (render_tutorial_link ~title:"Are we game yet?" ~slug:"are-we-game-yet")
      ^ (render_tutorial_link ~title:"Are we GUI yet?" ~slug:"are-we-gui-yet")
      ^ (render_tutorial_link ~title:"Are we learning yet?" ~slug:"are-we-learning-yet")
      ^ (render_tutorial_link ~title:"Are we multicore yet?" ~slug:"are-we-multicore-yet")
      ^ (render_tutorial_link ~title:"Are we web yet?" ~slug:"are-we-web-yet")) %>
