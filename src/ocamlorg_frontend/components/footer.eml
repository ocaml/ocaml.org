let about_ocaml = [
  (Url.changelog, "Changelog");
  (Url.releases, "Releases");
  (Url.industrial_users, "Industrial Users");
  (Url.academic_users, "Academic Users");
  (Url.about, "Why OCaml");
  ]

let resources = [
  (Url.install, "Install OCaml");
  (Url.getting_started, "Get Started");
  (Url.learn_platform, "Platform Tools");
  (Url.manual, "Language Manual");
  (Url.api, "Standard Library API");
  (Url.books, "Books");
  (Url.exercises, "Exercises");
  (Url.papers, "Papers");
  (Url.playground, "OCaml Playground");
  (Url.logos, "Logo");
  ]

let ecosystem = [
  (Url.packages, "Packages");
  (Url.community, "Community");
  (Url.events, "Events");
  (Url.ocaml_planet, "OCaml Planet");
  (Url.jobs, "Jobs");
  ]

let policies = [
  (Url.carbon_footprint, "Carbon Footprint");
  (Url.governance, "Governance");
  (Url.privacy_policy, "Privacy");
  (Url.code_of_conduct, "Code of Conduct");
  ]

let socials = [
  ("https://github.com/ocaml", "GitHub", Icons.github);
  ("https://discord.gg/cCYQbqN", "Discord", Icons.discord);
  ("https://twitter.com/ocaml_org", "Twitter", Icons.twitter);
  ("https://watch.ocaml.org/", "Peertube", Icons.peertube);
  ("/planet.xml", "RSS", Icons.rss);
]

module LightDarkModeSwitch = struct

  type preference =
    | Light
    | Dark
    | System

  let string_of_preference = function
    | Light -> "light"
    | Dark -> "dark"
    | System -> "system"

  let title_of_preference = function
    | Light -> "Light"
    | Dark -> "Dark"
    | System -> "System"

  let background_of_preference = function
    | Light -> "from-[#FFA932] to-[#C24F1E]"
    | Dark -> "from-[#0F254F] to-[#0B1228]"
    | System -> "from-[#2B7866] to-[#004039]"

  let icon_of_preference = function
    | Light -> Icons.light_mode
    | Dark -> Icons.dark_mode
    | System -> Icons.system_mode

  let render_preference_button ~preference  ~class_ =
    <button class="flex grow basis-0 justify-center items-center py-2 px-4 text-sm border <%s class_ %>" :class='$store.themeSettings.preference === "<%s string_of_preference preference %>" ? "bg-gradient-to-r <%s background_of_preference preference %> text-white dark:text-dark-title outline-none" : "bg-white text-content outline-2 outline-card_border dark:outline-dark-separator_30"'
      @click='$store.themeSettings.setPreference("<%s string_of_preference preference %>")'
    >
      <%s! (icon_of_preference preference) "mr-2" %>
      <%s title_of_preference preference %>
    </button>

  let script =
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.store('themeSettings', {
          init() {
            this.storageAccess = localStorage.getItem('storageAccess')
            this.preference = localStorage.getItem('theme') || "system"
            this.isSystemDefaultDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
          },
          selected: '',
          alertOpen: false,
          storageAccess: false,
          preference: undefined,
          isSystemDefaultDark: false,
          setPreference(preference) {
            if (!this.storageAccess) {
              if (!window.confirm("We will remember your choice in your browser's LocalStorage. Allow this?")) {
                return;
              }
              localStorage.setItem('storageAccess', true)
              storageAccess = true;
            }

            this.selected = preference;
            this.preference = preference
            localStorage.setItem('theme', preference)

            if (preference === 'dark') {
              document.body.classList.add("dark");
            } 
            if (preference === 'light') {
              document.body.classList.remove("dark");
            }
            if (preference === 'system') {
              if (this.isSystemDefaultDark) {
                document.body.classList.add("dark");
              } else {
                document.body.classList.remove("dark");
              }
              localStorage.removeItem('theme')
              return
            }
          },
        })
      })
    </script>

  let render =
    <%s! render_preference_button ~preference:Light ~class_:"rounded-l rounded-l-full border-r-0" %>
    <%s! render_preference_button ~preference:Dark ~class_:"border-r-0" %>
    <%s! render_preference_button ~preference:System ~class_:"rounded-r rounded-r-full" %>
end

let primary_footer () =
  let icon_link ~href ~name ~icon =
    <a href="<%s href %>" class="text-content dark:text-dark-title hover:text-primary dark:hover:text-dark-primary">
      <span class="sr-only"><%s name %></span>
      <%s! icon "h-6 w-6" %>
    </a>
  in
  let footer_link ~href ~name =
    <li>
      <a href="<%s href %>" class="text-base leading-6 text-content dark:text-dark-title hover:text-primary dark:hover:text-dark-primary"><%s name %></a>
    </li>
  in
  
  <footer x-data class="border-t border-separator_30 dark:border-dark-separator_30 bg-dark-sand dark:bg-dark-card" aria-labelledby="footer-heading">
    <h2 id="footer-heading" class="sr-only">Footer</h2>
    <div class="mx-auto max-w-7xl px-6 py-16 lg:px-8">
      <div class="flex w-full items-center justify-between mb-8">
        <a href="<%s Url.index %>"><img class="h-8 dark:hidden" src="<%s Ocamlorg_static.Asset.url "logo-with-name.svg" %>" alt="OCaml">
          <img class="h-8 hidden dark:inline" src="<%s Ocamlorg_static.Asset.url "logo-with-name-white.svg" %>" alt="OCaml">
        </a>
        <div class="hidden md:flex">
          <%s! LightDarkModeSwitch.render %>
        </div>
      </div>
      <div class="xl:grid xl:grid-cols-3 xl:gap-8">
        <div class="space-y-8">
          <p class="text-base leading-6 text-title dark:text-dark-content">Innovation. Community. Security.</p>
          <div class="flex space-x-6">
            <% socials |> List.iter (fun (href, name, icon) -> %>
            <%s! icon_link ~href ~name ~icon %>
            <% ); %>
          </div>
          <div class="flex w-full md:hidden">
            <%s! LightDarkModeSwitch.render %>
          </div>
        </div>
        <div class="mt-8 grid grid-cols-2 gap-8 xl:col-span-2 xl:mt-0">
          <div class="md:grid md:grid-cols-2 md:gap-8">
            <div>
              <h3 class="text-base font-semibold leading-6 text-title dark:text-dark-content">About OCaml</h3>
              <ul class="mt-6 space-y-4">
                <% about_ocaml |> List.iter (fun (href, name) -> %>
                <%s! footer_link ~href ~name %>
                <% ); %>
              </ul>
            </div>
            <div class="mt-10 md:mt-0">
              <h3 class="text-base font-semibold leading-6 text-title dark:text-dark-content">Resources</h3>
              <ul class="mt-6 space-y-4">
                <% resources |> List.iter (fun (href, name) -> %>
                <%s! footer_link ~href ~name %>
                <% ); %>
              </ul>
            </div>
          </div>
          <div class="md:grid md:grid-cols-2 md:gap-8">
            <div>
              <h3 class="text-base font-semibold leading-6 text-title dark:text-dark-content">Ecosystem</h3>
              <ul class="mt-6 space-y-4">
                <% ecosystem |> List.iter (fun (href, name) -> %>
                <%s! footer_link ~href ~name %>
                <% ); %>
              </ul>
            </div>
            <div class="mt-20 md:mt-0">
              <h3 class="text-base font-semibold leading-6 text-title dark:text-dark-content">Policies</h3>
              <ul class="mt-6 space-y-4">
                <% policies |> List.iter (fun (href, name) -> %>
                <%s! footer_link ~href ~name %>
                <% ); %>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%s! LightDarkModeSwitch.script %>
  </footer>

let secondary_footer () =
  let icon_link ~href ~name ~icon =
    <a href="<%s href %>" class="text-title dark:text-dark-title hover:text-primary dark:hover:text-dark-primary">
      <span class="sr-only"><%s name %></span>
      <%s! icon "h-8 w-8" %>
    </a>
  in
  let footer_link ~href ~name =
    <a href="<%s href %>" class="font-normal text-content dark:text-dark-content hover:text-primary dark:hover:text-dark-primary leading-7 py-2.5"><%s name %></a>
  in
  <footer x-data class="flex flex-col gap-3 md:gap-5 pt-5 mt-6 border-separator_20 dark:border-dark-separator_30 border-t">
    <div class="flex w-full items-center justify-between">
      <a href="<%s Url.index %>">
        <img class="h-8 dark:hidden" src="<%s Ocamlorg_static.Asset.url "logo-with-name.svg" %>" alt="OCaml">
        <img src="<%s Ocamlorg_static.Asset.url "logo-with-name-white.svg" %>" width="132" alt="OCaml logo" class="h-8 hidden dark:inline">
      </a>
      <div class="hidden md:flex">
        <%s! LightDarkModeSwitch.render %>
      </div>
    </div>
    <section class="flex flex-col gap-6 md:gap-0 md:flex-row md:justify-between md:items-end">
      <div>
        <p class="text-base font-normal leading-6 text-content dark:text-dark-content mt-2">Innovation. Community. Security.</p>
      </div>
      <div class="flex items-center gap-4 pr-4">
        <% socials |> List.iter (fun (href, name, icon) -> %>
        <%s! icon_link ~href ~name ~icon %>
        <% ); %>
      </div>
      <div class="flex w-full md:hidden">
        <%s! LightDarkModeSwitch.render %>
      </div>
    </section>

    <section class="mt-4 grid grid-cols-2">
      <div class="flex flex-col gap-1">
        <div class="flex flex-col">
          <h5 class="font-bold text-base leading-7 py-2.5 text-title dark:text-dark-title">About</h5>
          <% about_ocaml |> List.iter (fun (href, name) -> %>
          <%s! footer_link ~href ~name %>
          <% ); %>
        </div>

        <div class="flex flex-col">
          <h5 class="font-bold text-base leading-7 py-2.5 text-title dark:text-dark-title">
            Ecosystem
          </h5>
          <% ecosystem |> List.iter (fun (href, name) -> %>
          <%s! footer_link ~href ~name %>
          <% ); %>
        </div>
      </div>

      <div class="flex flex-col">
        <h5 class="font-bold text-base leading-7 py-2.5 text-title dark:text-dark-title">Resources</h5>
        <% resources |> List.iter (fun (href, name) -> %>
        <%s! footer_link ~href ~name %>
        <% ); %>
      </div>
    </section>

    <div
      class="flex flex-wrap gap-x-7 md:justify-between items-center py-2 border-solid border-t-[1px] border-separator_20 dark:border-dark-separator_30 bottom-0 bg-background dark:bg-dark-background">
      <h5 class="font-bold text-base leading-7 py-2.5 text-title dark:text-dark-title">Policies</h5>
      <% policies |> List.iter (fun (href, name) -> %>
      <%s! footer_link ~href ~name %>
      <% ); %>
    </div>
    <%s! LightDarkModeSwitch.script %>
  </footer>
