type kind =
  | Page
  | Library
  | Module
  | Leaf_page
  | Module_type
  | Parameter
  | Class
  | Class_type
  | File
  | Source

type toc = {
  title : string;
  kind : kind;
  href : string option;
  children : toc list
}

type t = toc list

let kind_title = function
  | Page -> "Page"
  | Library -> "Library"
  | Module -> "Module"
  | Module_type -> "Module type"
  | Parameter -> "Parameter"
  | Class -> "Class"
  | Class_type -> "Class type"
  | Source -> "Source"
  | _ -> "?"

let title_style = "flex-1 flex-nowrap py-1 md:py-0.5 pr-1 text-title dark:text-dark-title truncate"

let htmx_attributes = "hx-boost=\"true\" hx-ext=\"multi-swap\" hx-swap=\"multi:#htmx-head,#htmx-content,#htmx-right-sidebar,#htmx-breadcrumbs\" hx-push-url=\"true\""

let icon_style = function
  | Page -> "navmap-tag page-tag"
  | Library -> "navmap-tag library-tag"
  | Module -> "navmap-tag module-tag"
  | Module_type -> "navmap-tag module-type-tag"
  | Parameter -> "navmap-tag parameter-tag"
  | Class -> "navmap-tag class-tag"
  | Class_type -> "navmap-tag class-type-tag"
  | Source -> "navmap-tag source-tag"
  | _ -> "navmap-tag"

let id_of_path path = path |> List.map (fun x -> Format.sprintf "%S" (Base64.encode_string x)) |> String.concat ", "

let rec nested_render ~prefix_path ~path (item : toc) =
  match item.children with
  | [] ->
    let fragment = match path with
      | v :: _ -> v
      | [] -> ""
    in
    let prefix_path = item.title :: prefix_path in
    let active_style = "bg-gray-200 dark:bg-dark-tertiary_bt_hover font-medium" in
    if fragment != "" && item.kind = Library && fragment != item.title then "" else
    <div x-data='{idPath:[<%s! id_of_path (List.rev prefix_path) %>]}' class="box-border border pl-1 ml-1 border-transparent" :class="{ '<%s active_style %>' : idPath.every((v, i) => v === active[i])}">
      <div class="flex flex-nowrap" title="<%s kind_title item.kind ^ " " ^ item.title %>">
        <% (match item.href with | None -> %>
          <span class="no-expand"><span class="<%s if item.title = fragment then "" else "opacity-80" %> <%s icon_style item.kind %>"></span></span>
          <span class="sm <%s title_style %>"><%s! item.title %></span>
        <% | Some href -> %>
        <a href="<%s href %>" x-on:click="open = true ; active = idPath" <%s! htmx_attributes %> class="flex">
        <span class="no-expand"><span class="<%s if item.title = fragment then "" else "opacity-80" %> <%s icon_style item.kind %>"></span></span>
        </a>
        <a href="<%s href %>" x-on:click="open = true ; active = idPath" <%s! htmx_attributes %> class="<%s title_style %> overflow-hidden truncate text-title dark:text-dark-title transition-colors hover:text-primary">
          <%s! item.title %>
        </a>
        <% ); %>
      </div>
    </div>
  | children ->
    let default_open, path, fragment = match path with
      | v :: _ when v = "" -> (true, [], v) (* if we are on a mld page (empty string), we ignore the rest of the path *)
      | v :: rest when v = item.title -> (true, rest, v)
      | v :: _ -> (item.kind = Library && (List.length item.children <= 2), [], v)
      | [] -> (item.kind = Library && (List.length item.children <= 2), [], "")
    in
    let prefix_path = item.title :: prefix_path in
    let active_style = "bg-gray-100 dark:bg-dark-tertiary_bt_hover font-medium dark:font-semibold" in
    <div x-data="{ open: <%s if default_open then "true" else "false" %> }">
      <div x-data='{idPath:[<%s! id_of_path (List.rev prefix_path) %>]}' class="box-border border border-transparent cursor-pointer pl-1 ml-1" :class="{ 'nav-expand': open, '<%s active_style %>' : idPath.every((v, i) => v === active[i])}">
        <div class="flex flex-nowrap items-center" title="<%s kind_title item.kind ^ " " ^ item.title %>">
          <span class="icon-expand" x-on:click="open = ! open" :class="open ? 'open' : ''" >
            <span class="<%s if item.title = fragment then "" else "opacity-80" %> <%s icon_style item.kind %>"></span>
          </span>
          <% (match item.href with | None -> %>
            <span x-on:click="open = ! open" class="<%s title_style %> <%s if item.title = fragment then "white-200" else "gray-900" %>">
              <%s! item.title %> 
            </span>
            <span x-on:click="open = ! open" class="arrow-expand mr-2" :class="open ? 'open' : ''"><%s! Icons.chevron_down "h-5 w-5" %></span>
          <% | Some href -> %>
          <a href="<%s href %>" x-on:click="open = true ; active = idPath" <%s! htmx_attributes %> class="<%s title_style %> overflow-hidden truncate text-title dark:text-dark-title transition-colors hover:text-primary">
            <%s! item.title %>
          </a>
          <span x-on:click="open = ! open" class="sign-expand mr-2" :class="open ? 'open' : ''"></span>
          <% ); %>
        </div>
      </div>
      <ul x-show="open" class="ml-2.5 border-l border-white transition-colors">
        <% children |> List.iter begin fun item -> %>
          <li>
            <%s! nested_render ~prefix_path ~path item %>
          </li>
        <% end; %>
      </ul>
    </div>


let render
~(package: Package.package)
~path
(maptoc : t)
=
  let version = Package.url_version package in
  <div x-cloak class="navmap pb-12" x-data='{active:[<%s! id_of_path path %>]}'>
    <% (match maptoc with [] ->  %>
    <span class="block py-2 text-gray-700">Package contains no libraries</span>
    <% | _ -> %>
      <a class="py-1 font-medium text-content dark:text-dark-content hover:text-primary dark:hover:text-dark-primary transition-colors" href="<%s Url.Package.documentation package.name ?version %>">
        package <%s package.name %>
      </a>
    <ul>
      <% maptoc |> List.iter begin fun item -> %>
      <li class="pl-0.5">
        <%s! nested_render ~prefix_path:[] ~path item %>
      </li>
      <% end; %>
    </ul>
    <% ); %>
  </div>
  <% (match maptoc with [] ->  %>
  <% | _ -> %>
    <div class="py-24 text-title dark:text-dark-title">
    Legend:<br>
    <span class="<%s icon_style Page %>" style="display:inline-block;color:white"></span>Page<br>
    <span class="<%s icon_style Library %>" style="display:inline-block;color:white"></span>Library<br>
    <span class="<%s icon_style Module %>" style="display:inline-block;color:white"></span>Module<br>
    <span class="<%s icon_style Module_type %>" style="display:inline-block;color:white"></span>Module type<br>
    <span class="<%s icon_style Parameter %>" style="display:inline-block;color:white"></span>Parameter<br>
    <span class="<%s icon_style Class %>" style="display:inline-block;color:white"></span>Class<br>
    <span class="<%s icon_style Class_type %>" style="display:inline-block;color:white"></span>Class type<br>
    <span class="<%s icon_style Source %>" style="display:inline-block;color:white"></span>Source
    </div>
  <% ); %>
