let image_url img =
if String.starts_with ~prefix:"http" img then img else Ocamlorg_static.Media.url ("resources/" ^ img)

let community_resource ~title ~desc ~online_url ~source_url ?(img="") () =
  <div class="flex flex-col card dark:dark-card rounded-lg border border-separator_30 overflow-hidden">
    <a href="<%s online_url %>" class="flex flex-col grow">
      <div class="w-full h-44 text-white rounded-t-xl bg-cover bg-center" style="background-image: url(<%s image_url img %>)">
      </div>
      <div class="flex flex-col p-5 grow border-t border-separator_30 bg-[#00000003]">
        <h2 class="text-xl font-bold text-title dark:text-dark-title mb-3"><%s title %></h2>
        <p class="text-base text-content dark:text-dark-content font-normal mb-2 grow">
          <%s desc %>
        </p>
        <div>
          <div class="flex items-center mt-2">
            <%s! Icons.link "h-5 w-10 text-primary dark:text-dark-primary max-w-[7%]" %>
          <p class="text-primary dark:text-dark-primary hover:dark:text-dark-primary hover:underline truncate max-w-[90%] ml-2"><%s online_url %></p>
        </div>
% (match source_url with | Some source_url when source_url <> online_url ->
          <div class="flex items-center mt-2">
            <%s! Icons.link "h-5 w-10 text-primary dark:text-dark-primary max-w-[7%]" %>
            <p class="text-primary dark:text-dark-primary hover:underline truncate max-w-[90%] ml-2"><%s source_url %>/p>
          </div>
% | _ -> ()) ;
        </div>
      </div>
    </a>
  </div>

let string_from_event_type = function
  | Data.Event.Meetup -> "Meetup"
  | Conference -> "Conference"
  | Seminar -> "Seminar"
  | Hackathon -> "Hackathon"
  | Retreat -> "Retreat"

let color_for_event_type = function
  | Data.Event.Meetup -> "bg-avatar-6"
  | Conference -> "bg-avatar-0"
  | Seminar -> "bg-avatar-11"
  | Hackathon -> "bg-avatar-8"
  | Retreat -> "bg-avatar-9"

let job_card (job: Data.Job.t) = 
  <a href="<%s job.link %>"
    target="_blank"
    class="card dark:dark-card rounded-xl overflow-hidden p-4"
    :class="{ 'hidden': location != 'All' && ([<%s! String.concat "," (List.map (fun s -> "\'" ^ Dream.html_escape s ^ "\'") job.locations) %>].indexOf(location) == -1)  }">
    <div class="flex h-20 items-end mb-4">
    <img class="h-full rounded max-w-[100px] bg-dark-white" src='<%s! if String.starts_with ~prefix:"https" job.company_logo then job.company_logo else Ocamlorg_static.Asset.url job.company_logo %>' alt="">
    <p class="text-base px-2 text-content dark:text-dark-content opacity-80">
    <%s job.company %></p>
    </div>
    <div class="">
        <p class="text-lg mb-4 text-title dark:text-dark-title truncate">
            <%s job.title %>
        </p>
        <div class="flex items-center space-x-2">
            <%s! Icons.map_pin "h-5 w-5 text-primary dark:text-dark-primary"  %>
            <p class="text-content dark:text-dark-content">
                <%s String.concat ", " job.locations %>
            </p>
        </div>
        <% (match job.publication_date with None -> () | Some date -> %>
        <div class="flex items-center space-x-2 mt-2">
            <%s! Icons.calendar "h-5 w-5 text-primary dark:text-dark-primary"  %>
            <p class="text-content dark:text-dark-content">
                <%s date %>
            </p>
        </div>
        <div class="flex items-center mt-2">
            <%s! Icons.link "h-5 w-10 text-primary dark:text-dark-primary max-w-[7%]" %>
          <p class="text-primary dark:text-dark-title hover:dark:text-dark-primary hover:underline dark:underline truncate max-w-[90%] ml-2"><%s job.link %></p>
        </div>      
        <% ); %>
    </div>
  </a>

module Event = struct
  let format_date_opt (date : Data.Event.utc_datetime option) : string =
    match date with
    | Some { yyyy_mm_dd; utc_hh_mm } ->
        (match utc_hh_mm with
        | Some time -> yyyy_mm_dd ^ " " ^ time ^ " UTC"
        | None -> yyyy_mm_dd)
    | None -> "N/A"

  let format_date_req (date : Data.Event.utc_datetime) : string =
    match date.utc_hh_mm with
    | Some time -> date.yyyy_mm_dd ^ " " ^ time ^ " UTC"
    | None -> date.yyyy_mm_dd

  let script = 
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.store('dateUtils', {
            convertDate(dateString) {
              if (dateString === 'N/A') return dateString
              const hasTime = dateString.includes('UTC');
              const date = new Date(dateString);
              const options = hasTime ? {
                  month: 'short',
                  day: '2-digit',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit',
                  timeZoneName: 'short'
              } : {
                  month: 'short',
                  day: '2-digit',
                  year: 'numeric'
              };

              return date.toLocaleString('en-US', options);
            }
        });
      })
    </script>

  let upcoming_event (event : Data.Event.t) =
    <a href="<%s event.url %>" class="card dark:dark-card rounded-xl overflow-hidden">
        <div class="relative w-full h-40 rounded-t-xl overflow-hidden bg-event-<%s string_of_int ((Hashtbl.hash event.city) mod 6 )%>">
          <div class="flex flex-col justify-center items-center z-10 absolute top-0 right-0 bottom-0 left-0">
            <img class="w-[60px] mb-2" src="<%s! Ocamlorg_static.Asset.url "img/community/camel.svg" %>" alt="camel head illustration">
            <p class="uppercase lg:text-4xl text-2xl tracking-widest text-white">[<%s event.city %>]</p>
          </div>
          <div class="absolute inset-0 bg-[#c545001a] clip-triangle"></div>
        </div>
      <div class="p-5">
        <div class="px-3 mb-2 inline-block <%s color_for_event_type event.event_type %> rounded-3xl font-mono text-sm text-center text-white">
          <%s string_from_event_type event.event_type %>
        </div>
        <p class="text-xl text-title dark:text-dark-title mb-4 truncate-2-lines">
          <%s event.title %></p>
        <div class="flex items-center mb-3">
          <%s! Icons.map_pin "h-5 w-5 text-primary dark:text-dark-primary mr-2" %>
          <p class="text-content dark:text-dark-content"><%s event.city %>, <%s event.country %></p>
        </div>
        <div class="flex items-center mt-2">
          <%s! Icons.calendar "h-5 w-5 text-primary dark:text-dark-primary mr-2" %>
          <p class="text-title dark:text-dark-title" x-data="{ start_date: '' }" x-init='start_date = $store.dateUtils.convertDate("<%s format_date_req event.starts %>")'><span x-text="start_date"></span></p>
        </div>
        
        <% (match event.ends with | None -> () | Some ends -> ( %>
        <div class="flex items-center mt-2">
          <p class="text-title dark:text-dark-title" x-data="{ end_date: '' }" x-init='end_date = $store.dateUtils.convertDate("<%s format_date_req ends %>")'>to <span x-text="end_date"></span></p>
        </div>
        <% )); %>
        <div class="flex items-center mt-2">
          <%s! Icons.link "h-5 w-10 text-primary dark:text-dark-primary max-w-[6%]" %>
          <p class="text-primary dark:text-dark-title hover:dark:text-dark-primary hover:underline dark:underline truncate max-w-[90%] ml-2"><%s event.url %></p>
        </div>
      </div> 
    </a>

  let recurring_event (recurring_event : Data.Event.RecurringEvent.t) =
    <a href="<%s recurring_event.url %>" class="card dark:dark-card rounded-xl">
      <div class="relative w-full h-40 rounded-t-xl overflow-hidden bg-event-<%s string_of_int ((Hashtbl.hash recurring_event.city) mod 6 )%>">
        <div class="flex flex-col justify-center items-center z-10 absolute top-0 right-0 bottom-0 left-0">
          <img class="w-[60px] mb-2" src="<%s! Ocamlorg_static.Asset.url "img/community/camel.svg" %>" alt="camel head illustration">
          <p class="uppercase lg:text-4xl text-2xl tracking-widest text-white"> [<%s recurring_event.city %>]</p>
        </div>
        <div class="absolute inset-0 bg-[#C546000D] clip-triangle"></div>
      </div>
    <div class="p-5">
      <div class="px-3 mb-2 inline-block <%s color_for_event_type recurring_event.event_type %> rounded-3xl font-mono text-sm text-center text-white">
        <%s string_from_event_type recurring_event.event_type %>
      </div>
      <p class="font-bold text-lg text-title dark:text-dark-title mb-8">
        <%s recurring_event.title %>
      </p>
      <div class="flex items-center space-x-2">
        <%s! Icons.map_pin "h-5 w-5 text-primary dark:text-dark-primary" %>
        <p class="text-content dark:text-dark-content">
          <%s recurring_event.city %>, <%s recurring_event.country %>
        </p>
      </div>
      <div class="flex items-center mt-2">
        <%s! Icons.link "h-5 w-10 text-primary dark:text-dark-primary max-w-[6%]" %>
        <p class="text-primary dark:text-dark-title hover:dark:text-dark-primary hover:underline dark:underline truncate w-[300px] ml-2"><%s recurring_event.url %></p>
      </div>
    </div>
    </a>
end    
